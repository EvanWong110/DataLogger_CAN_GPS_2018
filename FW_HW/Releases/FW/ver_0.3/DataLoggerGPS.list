
DataLoggerGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010eb4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c0  080110b4  080110b4  000210b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011a74  08011a74  00021a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011a7c  08011a7c  00021a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011a80  08011a80  00021a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  08011a84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000f338  20000078  08011afc  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00060200  2000f3b0  08011afc  0003f3b0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033bf4  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006655  00000000  00000000  00063c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c30  00000000  00000000  0006a2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001900  00000000  00000000  0006bf20  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000103c9  00000000  00000000  0006d820  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000b028  00000000  00000000  0007dbe9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00088c11  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000728c  00000000  00000000  00088c90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	0801109c 	.word	0x0801109c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	0801109c 	.word	0x0801109c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b97a 	b.w	80005fc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	468c      	mov	ip, r1
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	9e08      	ldr	r6, [sp, #32]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d151      	bne.n	80003d4 <__udivmoddi4+0xb4>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d96d      	bls.n	8000412 <__udivmoddi4+0xf2>
 8000336:	fab2 fe82 	clz	lr, r2
 800033a:	f1be 0f00 	cmp.w	lr, #0
 800033e:	d00b      	beq.n	8000358 <__udivmoddi4+0x38>
 8000340:	f1ce 0c20 	rsb	ip, lr, #32
 8000344:	fa01 f50e 	lsl.w	r5, r1, lr
 8000348:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000350:	ea4c 0c05 	orr.w	ip, ip, r5
 8000354:	fa00 f40e 	lsl.w	r4, r0, lr
 8000358:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800035c:	0c25      	lsrs	r5, r4, #16
 800035e:	fbbc f8fa 	udiv	r8, ip, sl
 8000362:	fa1f f987 	uxth.w	r9, r7
 8000366:	fb0a cc18 	mls	ip, sl, r8, ip
 800036a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800036e:	fb08 f309 	mul.w	r3, r8, r9
 8000372:	42ab      	cmp	r3, r5
 8000374:	d90a      	bls.n	800038c <__udivmoddi4+0x6c>
 8000376:	19ed      	adds	r5, r5, r7
 8000378:	f108 32ff 	add.w	r2, r8, #4294967295
 800037c:	f080 8123 	bcs.w	80005c6 <__udivmoddi4+0x2a6>
 8000380:	42ab      	cmp	r3, r5
 8000382:	f240 8120 	bls.w	80005c6 <__udivmoddi4+0x2a6>
 8000386:	f1a8 0802 	sub.w	r8, r8, #2
 800038a:	443d      	add	r5, r7
 800038c:	1aed      	subs	r5, r5, r3
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0fa 	udiv	r0, r5, sl
 8000394:	fb0a 5510 	mls	r5, sl, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb00 f909 	mul.w	r9, r0, r9
 80003a0:	45a1      	cmp	r9, r4
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x98>
 80003a4:	19e4      	adds	r4, r4, r7
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	f080 810a 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80003ae:	45a1      	cmp	r9, r4
 80003b0:	f240 8107 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80003b4:	3802      	subs	r0, #2
 80003b6:	443c      	add	r4, r7
 80003b8:	eba4 0409 	sub.w	r4, r4, r9
 80003bc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003c0:	2100      	movs	r1, #0
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d061      	beq.n	800048a <__udivmoddi4+0x16a>
 80003c6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ca:	2300      	movs	r3, #0
 80003cc:	6034      	str	r4, [r6, #0]
 80003ce:	6073      	str	r3, [r6, #4]
 80003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0xc8>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d054      	beq.n	8000486 <__udivmoddi4+0x166>
 80003dc:	2100      	movs	r1, #0
 80003de:	e886 0021 	stmia.w	r6, {r0, r5}
 80003e2:	4608      	mov	r0, r1
 80003e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e8:	fab3 f183 	clz	r1, r3
 80003ec:	2900      	cmp	r1, #0
 80003ee:	f040 808e 	bne.w	800050e <__udivmoddi4+0x1ee>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	d302      	bcc.n	80003fc <__udivmoddi4+0xdc>
 80003f6:	4282      	cmp	r2, r0
 80003f8:	f200 80fa 	bhi.w	80005f0 <__udivmoddi4+0x2d0>
 80003fc:	1a84      	subs	r4, r0, r2
 80003fe:	eb65 0503 	sbc.w	r5, r5, r3
 8000402:	2001      	movs	r0, #1
 8000404:	46ac      	mov	ip, r5
 8000406:	2e00      	cmp	r6, #0
 8000408:	d03f      	beq.n	800048a <__udivmoddi4+0x16a>
 800040a:	e886 1010 	stmia.w	r6, {r4, ip}
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	b912      	cbnz	r2, 800041a <__udivmoddi4+0xfa>
 8000414:	2701      	movs	r7, #1
 8000416:	fbb7 f7f2 	udiv	r7, r7, r2
 800041a:	fab7 fe87 	clz	lr, r7
 800041e:	f1be 0f00 	cmp.w	lr, #0
 8000422:	d134      	bne.n	800048e <__udivmoddi4+0x16e>
 8000424:	1beb      	subs	r3, r5, r7
 8000426:	0c3a      	lsrs	r2, r7, #16
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	2101      	movs	r1, #1
 800042e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000432:	0c25      	lsrs	r5, r4, #16
 8000434:	fb02 3318 	mls	r3, r2, r8, r3
 8000438:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800043c:	fb0c f308 	mul.w	r3, ip, r8
 8000440:	42ab      	cmp	r3, r5
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x134>
 8000444:	19ed      	adds	r5, r5, r7
 8000446:	f108 30ff 	add.w	r0, r8, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x132>
 800044c:	42ab      	cmp	r3, r5
 800044e:	f200 80d1 	bhi.w	80005f4 <__udivmoddi4+0x2d4>
 8000452:	4680      	mov	r8, r0
 8000454:	1aed      	subs	r5, r5, r3
 8000456:	b2a3      	uxth	r3, r4
 8000458:	fbb5 f0f2 	udiv	r0, r5, r2
 800045c:	fb02 5510 	mls	r5, r2, r0, r5
 8000460:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000464:	fb0c fc00 	mul.w	ip, ip, r0
 8000468:	45a4      	cmp	ip, r4
 800046a:	d907      	bls.n	800047c <__udivmoddi4+0x15c>
 800046c:	19e4      	adds	r4, r4, r7
 800046e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x15a>
 8000474:	45a4      	cmp	ip, r4
 8000476:	f200 80b8 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 800047a:	4618      	mov	r0, r3
 800047c:	eba4 040c 	sub.w	r4, r4, ip
 8000480:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000484:	e79d      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1ce 0420 	rsb	r4, lr, #32
 8000492:	fa05 f30e 	lsl.w	r3, r5, lr
 8000496:	fa07 f70e 	lsl.w	r7, r7, lr
 800049a:	fa20 f804 	lsr.w	r8, r0, r4
 800049e:	0c3a      	lsrs	r2, r7, #16
 80004a0:	fa25 f404 	lsr.w	r4, r5, r4
 80004a4:	ea48 0803 	orr.w	r8, r8, r3
 80004a8:	fbb4 f1f2 	udiv	r1, r4, r2
 80004ac:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004b0:	fb02 4411 	mls	r4, r2, r1, r4
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004bc:	fb01 f30c 	mul.w	r3, r1, ip
 80004c0:	42ab      	cmp	r3, r5
 80004c2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x1bc>
 80004c8:	19ed      	adds	r5, r5, r7
 80004ca:	f101 30ff 	add.w	r0, r1, #4294967295
 80004ce:	f080 808a 	bcs.w	80005e6 <__udivmoddi4+0x2c6>
 80004d2:	42ab      	cmp	r3, r5
 80004d4:	f240 8087 	bls.w	80005e6 <__udivmoddi4+0x2c6>
 80004d8:	3902      	subs	r1, #2
 80004da:	443d      	add	r5, r7
 80004dc:	1aeb      	subs	r3, r5, r3
 80004de:	fa1f f588 	uxth.w	r5, r8
 80004e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004e6:	fb02 3310 	mls	r3, r2, r0, r3
 80004ea:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ee:	fb00 f30c 	mul.w	r3, r0, ip
 80004f2:	42ab      	cmp	r3, r5
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x1e6>
 80004f6:	19ed      	adds	r5, r5, r7
 80004f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fc:	d26f      	bcs.n	80005de <__udivmoddi4+0x2be>
 80004fe:	42ab      	cmp	r3, r5
 8000500:	d96d      	bls.n	80005de <__udivmoddi4+0x2be>
 8000502:	3802      	subs	r0, #2
 8000504:	443d      	add	r5, r7
 8000506:	1aeb      	subs	r3, r5, r3
 8000508:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800050c:	e78f      	b.n	800042e <__udivmoddi4+0x10e>
 800050e:	f1c1 0720 	rsb	r7, r1, #32
 8000512:	fa22 f807 	lsr.w	r8, r2, r7
 8000516:	408b      	lsls	r3, r1
 8000518:	fa05 f401 	lsl.w	r4, r5, r1
 800051c:	ea48 0303 	orr.w	r3, r8, r3
 8000520:	fa20 fe07 	lsr.w	lr, r0, r7
 8000524:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000528:	40fd      	lsrs	r5, r7
 800052a:	ea4e 0e04 	orr.w	lr, lr, r4
 800052e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000532:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000536:	fb0c 5519 	mls	r5, ip, r9, r5
 800053a:	fa1f f883 	uxth.w	r8, r3
 800053e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000542:	fb09 f408 	mul.w	r4, r9, r8
 8000546:	42ac      	cmp	r4, r5
 8000548:	fa02 f201 	lsl.w	r2, r2, r1
 800054c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x244>
 8000552:	18ed      	adds	r5, r5, r3
 8000554:	f109 30ff 	add.w	r0, r9, #4294967295
 8000558:	d243      	bcs.n	80005e2 <__udivmoddi4+0x2c2>
 800055a:	42ac      	cmp	r4, r5
 800055c:	d941      	bls.n	80005e2 <__udivmoddi4+0x2c2>
 800055e:	f1a9 0902 	sub.w	r9, r9, #2
 8000562:	441d      	add	r5, r3
 8000564:	1b2d      	subs	r5, r5, r4
 8000566:	fa1f fe8e 	uxth.w	lr, lr
 800056a:	fbb5 f0fc 	udiv	r0, r5, ip
 800056e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000572:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000576:	fb00 f808 	mul.w	r8, r0, r8
 800057a:	45a0      	cmp	r8, r4
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x26e>
 800057e:	18e4      	adds	r4, r4, r3
 8000580:	f100 35ff 	add.w	r5, r0, #4294967295
 8000584:	d229      	bcs.n	80005da <__udivmoddi4+0x2ba>
 8000586:	45a0      	cmp	r8, r4
 8000588:	d927      	bls.n	80005da <__udivmoddi4+0x2ba>
 800058a:	3802      	subs	r0, #2
 800058c:	441c      	add	r4, r3
 800058e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000592:	eba4 0408 	sub.w	r4, r4, r8
 8000596:	fba0 8902 	umull	r8, r9, r0, r2
 800059a:	454c      	cmp	r4, r9
 800059c:	46c6      	mov	lr, r8
 800059e:	464d      	mov	r5, r9
 80005a0:	d315      	bcc.n	80005ce <__udivmoddi4+0x2ae>
 80005a2:	d012      	beq.n	80005ca <__udivmoddi4+0x2aa>
 80005a4:	b156      	cbz	r6, 80005bc <__udivmoddi4+0x29c>
 80005a6:	ebba 030e 	subs.w	r3, sl, lr
 80005aa:	eb64 0405 	sbc.w	r4, r4, r5
 80005ae:	fa04 f707 	lsl.w	r7, r4, r7
 80005b2:	40cb      	lsrs	r3, r1
 80005b4:	431f      	orrs	r7, r3
 80005b6:	40cc      	lsrs	r4, r1
 80005b8:	6037      	str	r7, [r6, #0]
 80005ba:	6074      	str	r4, [r6, #4]
 80005bc:	2100      	movs	r1, #0
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	4618      	mov	r0, r3
 80005c4:	e6f8      	b.n	80003b8 <__udivmoddi4+0x98>
 80005c6:	4690      	mov	r8, r2
 80005c8:	e6e0      	b.n	800038c <__udivmoddi4+0x6c>
 80005ca:	45c2      	cmp	sl, r8
 80005cc:	d2ea      	bcs.n	80005a4 <__udivmoddi4+0x284>
 80005ce:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d2:	eb69 0503 	sbc.w	r5, r9, r3
 80005d6:	3801      	subs	r0, #1
 80005d8:	e7e4      	b.n	80005a4 <__udivmoddi4+0x284>
 80005da:	4628      	mov	r0, r5
 80005dc:	e7d7      	b.n	800058e <__udivmoddi4+0x26e>
 80005de:	4640      	mov	r0, r8
 80005e0:	e791      	b.n	8000506 <__udivmoddi4+0x1e6>
 80005e2:	4681      	mov	r9, r0
 80005e4:	e7be      	b.n	8000564 <__udivmoddi4+0x244>
 80005e6:	4601      	mov	r1, r0
 80005e8:	e778      	b.n	80004dc <__udivmoddi4+0x1bc>
 80005ea:	3802      	subs	r0, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	e745      	b.n	800047c <__udivmoddi4+0x15c>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e708      	b.n	8000406 <__udivmoddi4+0xe6>
 80005f4:	f1a8 0802 	sub.w	r8, r8, #2
 80005f8:	443d      	add	r5, r7
 80005fa:	e72b      	b.n	8000454 <__udivmoddi4+0x134>

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 fef1 	bl	80013ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 f806 	bl	800061c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000610:	f009 fdcc 	bl	800a1ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	4618      	mov	r0, r3
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ff0b 	bl	8001456 <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 fed3 	bl	8001402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000010 	.word	0x20000010
 8000674:	20000004 	.word	0x20000004
 8000678:	20000000 	.word	0x20000000

0800067c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_IncTick+0x20>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_IncTick+0x24>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_IncTick+0x24>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	20000004 	.word	0x20000004
 80006a0:	200004e0 	.word	0x200004e0

080006a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  return uwTick;
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_GetTick+0x14>)
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	200004e0 	.word	0x200004e0

080006bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ffee 	bl	80006a4 <HAL_GetTick>
 80006c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d4:	d005      	beq.n	80006e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <HAL_Delay+0x40>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4413      	add	r3, r2
 80006e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006e2:	bf00      	nop
 80006e4:	f7ff ffde 	bl	80006a4 <HAL_GetTick>
 80006e8:	4602      	mov	r2, r0
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	1ad2      	subs	r2, r2, r3
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d3f7      	bcc.n	80006e4 <HAL_Delay+0x28>
  {
  }
}
 80006f4:	bf00      	nop
 80006f6:	3710      	adds	r7, #16
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d101      	bne.n	8000712 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800070e:	2301      	movs	r3, #1
 8000710:	e0ec      	b.n	80008ec <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d102      	bne.n	8000724 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f008 fe2c 	bl	800937c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	f022 0202 	bic.w	r2, r2, #2
 8000732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000734:	f7ff ffb6 	bl	80006a4 <HAL_GetTick>
 8000738:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800073a:	e012      	b.n	8000762 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800073c:	f7ff ffb2 	bl	80006a4 <HAL_GetTick>
 8000740:	4602      	mov	r2, r0
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2b0a      	cmp	r3, #10
 8000748:	d90b      	bls.n	8000762 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2205      	movs	r2, #5
 800075a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e0c4      	b.n	80008ec <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1e5      	bne.n	800073c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	6812      	ldr	r2, [r2, #0]
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	f042 0201 	orr.w	r2, r2, #1
 800077e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000780:	f7ff ff90 	bl	80006a4 <HAL_GetTick>
 8000784:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000786:	e012      	b.n	80007ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000788:	f7ff ff8c 	bl	80006a4 <HAL_GetTick>
 800078c:	4602      	mov	r2, r0
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b0a      	cmp	r3, #10
 8000794:	d90b      	bls.n	80007ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800079a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2205      	movs	r2, #5
 80007a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
 80007ac:	e09e      	b.n	80008ec <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 0301 	and.w	r3, r3, #1
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0e5      	beq.n	8000788 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7e1b      	ldrb	r3, [r3, #24]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d108      	bne.n	80007d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e007      	b.n	80007e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	687a      	ldr	r2, [r7, #4]
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	7e5b      	ldrb	r3, [r3, #25]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d108      	bne.n	8000800 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	687a      	ldr	r2, [r7, #4]
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	e007      	b.n	8000810 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	6812      	ldr	r2, [r2, #0]
 800080a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800080e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7e9b      	ldrb	r3, [r3, #26]
 8000814:	2b01      	cmp	r3, #1
 8000816:	d108      	bne.n	800082a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	6812      	ldr	r2, [r2, #0]
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	f042 0220 	orr.w	r2, r2, #32
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	e007      	b.n	800083a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	6812      	ldr	r2, [r2, #0]
 8000834:	f022 0220 	bic.w	r2, r2, #32
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	7edb      	ldrb	r3, [r3, #27]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d108      	bne.n	8000854 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	6812      	ldr	r2, [r2, #0]
 800084c:	f022 0210 	bic.w	r2, r2, #16
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	e007      	b.n	8000864 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	6812      	ldr	r2, [r2, #0]
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	f042 0210 	orr.w	r2, r2, #16
 8000862:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7f1b      	ldrb	r3, [r3, #28]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d108      	bne.n	800087e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	6812      	ldr	r2, [r2, #0]
 8000876:	f042 0208 	orr.w	r2, r2, #8
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e007      	b.n	800088e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	6812      	ldr	r2, [r2, #0]
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	f022 0208 	bic.w	r2, r2, #8
 800088c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	7f5b      	ldrb	r3, [r3, #29]
 8000892:	2b01      	cmp	r3, #1
 8000894:	d108      	bne.n	80008a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	687a      	ldr	r2, [r7, #4]
 800089c:	6812      	ldr	r2, [r2, #0]
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	f042 0204 	orr.w	r2, r2, #4
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	f022 0204 	bic.w	r2, r2, #4
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6891      	ldr	r1, [r2, #8]
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	68d2      	ldr	r2, [r2, #12]
 80008c4:	4311      	orrs	r1, r2
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	6912      	ldr	r2, [r2, #16]
 80008ca:	4311      	orrs	r1, r2
 80008cc:	687a      	ldr	r2, [r7, #4]
 80008ce:	6952      	ldr	r2, [r2, #20]
 80008d0:	4311      	orrs	r1, r2
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	6852      	ldr	r2, [r2, #4]
 80008d6:	3a01      	subs	r2, #1
 80008d8:	430a      	orrs	r2, r1
 80008da:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2201      	movs	r2, #1
 80008e6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b087      	sub	sp, #28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800090a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800090c:	7cfb      	ldrb	r3, [r7, #19]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d003      	beq.n	800091a <HAL_CAN_ConfigFilter+0x26>
 8000912:	7cfb      	ldrb	r3, [r7, #19]
 8000914:	2b02      	cmp	r3, #2
 8000916:	f040 80c7 	bne.w	8000aa8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a69      	ldr	r2, [pc, #420]	; (8000ac4 <HAL_CAN_ConfigFilter+0x1d0>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d001      	beq.n	8000928 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000924:	4b68      	ldr	r3, [pc, #416]	; (8000ac8 <HAL_CAN_ConfigFilter+0x1d4>)
 8000926:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800092e:	f043 0201 	orr.w	r2, r3, #1
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4a63      	ldr	r2, [pc, #396]	; (8000ac8 <HAL_CAN_ConfigFilter+0x1d4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d111      	bne.n	8000964 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000946:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	431a      	orrs	r2, r3
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	2201      	movs	r2, #1
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d123      	bne.n	80009d6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	43db      	mvns	r3, r3
 8000998:	401a      	ands	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3248      	adds	r2, #72	; 0x48
 80009b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	6892      	ldr	r2, [r2, #8]
 80009c2:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009c4:	683a      	ldr	r2, [r7, #0]
 80009c6:	6812      	ldr	r2, [r2, #0]
 80009c8:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009cc:	6979      	ldr	r1, [r7, #20]
 80009ce:	3348      	adds	r3, #72	; 0x48
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d122      	bne.n	8000a24 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	431a      	orrs	r2, r3
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80009fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	3248      	adds	r2, #72	; 0x48
 8000a04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	6892      	ldr	r2, [r2, #8]
 8000a10:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a12:	683a      	ldr	r2, [r7, #0]
 8000a14:	68d2      	ldr	r2, [r2, #12]
 8000a16:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a1a:	6979      	ldr	r1, [r7, #20]
 8000a1c:	3348      	adds	r3, #72	; 0x48
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d109      	bne.n	8000a40 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000a3e:	e007      	b.n	8000a50 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	431a      	orrs	r2, r3
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	691b      	ldr	r3, [r3, #16]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d109      	bne.n	8000a6c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	43db      	mvns	r3, r3
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d107      	bne.n	8000a94 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a9a:	f023 0201 	bic.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	e006      	b.n	8000ab6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
  }
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40003400 	.word	0x40003400
 8000ac8:	40006400 	.word	0x40006400

08000acc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ada:	b2db      	uxtb	r3, r3
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d12e      	bne.n	8000b3e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	6812      	ldr	r2, [r2, #0]
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	f022 0201 	bic.w	r2, r2, #1
 8000af6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000af8:	f7ff fdd4 	bl	80006a4 <HAL_GetTick>
 8000afc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000afe:	e012      	b.n	8000b26 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b00:	f7ff fdd0 	bl	80006a4 <HAL_GetTick>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	2b0a      	cmp	r3, #10
 8000b0c:	d90b      	bls.n	8000b26 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2205      	movs	r2, #5
 8000b1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e012      	b.n	8000b4c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 0301 	and.w	r3, r3, #1
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e5      	bne.n	8000b00 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e006      	b.n	8000b4c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
  }
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3710      	adds	r7, #16
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
 8000b60:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b68:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d003      	beq.n	8000b78 <HAL_CAN_GetRxMessage+0x24>
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	f040 80f4 	bne.w	8000d60 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10e      	bne.n	8000b9c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d116      	bne.n	8000bba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	e0e8      	b.n	8000d6e <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d107      	bne.n	8000bba <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0d9      	b.n	8000d6e <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	331b      	adds	r3, #27
 8000bc2:	011b      	lsls	r3, r3, #4
 8000bc4:	4413      	add	r3, r2
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 0204 	and.w	r2, r3, #4
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d10c      	bne.n	8000bf2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	331b      	adds	r3, #27
 8000be0:	011b      	lsls	r3, r3, #4
 8000be2:	4413      	add	r3, r2
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0d5b      	lsrs	r3, r3, #21
 8000be8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e00b      	b.n	8000c0a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	331b      	adds	r3, #27
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	4413      	add	r3, r2
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	08db      	lsrs	r3, r3, #3
 8000c02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	331b      	adds	r3, #27
 8000c12:	011b      	lsls	r3, r3, #4
 8000c14:	4413      	add	r3, r2
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	f003 0201 	and.w	r2, r3, #1
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	331b      	adds	r3, #27
 8000c2a:	011b      	lsls	r3, r3, #4
 8000c2c:	4413      	add	r3, r2
 8000c2e:	3304      	adds	r3, #4
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 020f 	and.w	r2, r3, #15
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	331b      	adds	r3, #27
 8000c42:	011b      	lsls	r3, r3, #4
 8000c44:	4413      	add	r3, r2
 8000c46:	3304      	adds	r3, #4
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	0a1b      	lsrs	r3, r3, #8
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	331b      	adds	r3, #27
 8000c5a:	011b      	lsls	r3, r3, #4
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3304      	adds	r3, #4
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	0c1b      	lsrs	r3, r3, #16
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	4413      	add	r3, r2
 8000c74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	6811      	ldr	r1, [r2, #0]
 8000c88:	68ba      	ldr	r2, [r7, #8]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	440a      	add	r2, r1
 8000c8e:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000c92:	6812      	ldr	r2, [r2, #0]
 8000c94:	0a12      	lsrs	r2, r2, #8
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	6811      	ldr	r1, [r2, #0]
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	440a      	add	r2, r1
 8000ca8:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000cac:	6812      	ldr	r2, [r2, #0]
 8000cae:	0c12      	lsrs	r2, r2, #16
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	3303      	adds	r3, #3
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	6811      	ldr	r1, [r2, #0]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	440a      	add	r2, r1
 8000cc2:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	0e12      	lsrs	r2, r2, #24
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	6811      	ldr	r1, [r2, #0]
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	440a      	add	r2, r1
 8000cdc:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000ce0:	6812      	ldr	r2, [r2, #0]
 8000ce2:	b2d2      	uxtb	r2, r2
 8000ce4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3305      	adds	r3, #5
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	0112      	lsls	r2, r2, #4
 8000cf2:	440a      	add	r2, r1
 8000cf4:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000cf8:	6812      	ldr	r2, [r2, #0]
 8000cfa:	0a12      	lsrs	r2, r2, #8
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	3306      	adds	r3, #6
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	6811      	ldr	r1, [r2, #0]
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	440a      	add	r2, r1
 8000d0e:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	0c12      	lsrs	r2, r2, #16
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	3307      	adds	r3, #7
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	6811      	ldr	r1, [r2, #0]
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	440a      	add	r2, r1
 8000d28:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000d2c:	6812      	ldr	r2, [r2, #0]
 8000d2e:	0e12      	lsrs	r2, r2, #24
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	6812      	ldr	r2, [r2, #0]
 8000d42:	68d2      	ldr	r2, [r2, #12]
 8000d44:	f042 0220 	orr.w	r2, r2, #32
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	6812      	ldr	r2, [r2, #0]
 8000d54:	6912      	ldr	r2, [r2, #16]
 8000d56:	f042 0220 	orr.w	r2, r2, #32
 8000d5a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e006      	b.n	8000d6e <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
  }
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	371c      	adds	r7, #28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b085      	sub	sp, #20
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d002      	beq.n	8000d98 <HAL_CAN_ActivateNotification+0x1e>
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d109      	bne.n	8000dac <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6812      	ldr	r2, [r2, #0]
 8000da0:	6951      	ldr	r1, [r2, #20]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	e006      	b.n	8000dba <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
  }
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b08a      	sub	sp, #40	; 0x28
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	695b      	ldr	r3, [r3, #20]
 8000dd8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e02:	6a3b      	ldr	r3, [r7, #32]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d07c      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d023      	beq.n	8000e5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f97d 	bl	8001128 <HAL_CAN_TxMailbox0CompleteCallback>
 8000e2e:	e016      	b.n	8000e5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
 8000e42:	e00c      	b.n	8000e5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
 8000e56:	e002      	b.n	8000e5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f983 	bl	8001164 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d024      	beq.n	8000eb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f000 f95d 	bl	800113c <HAL_CAN_TxMailbox1CompleteCallback>
 8000e82:	e016      	b.n	8000eb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
 8000e96:	e00c      	b.n	8000eb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e98:	69bb      	ldr	r3, [r7, #24]
 8000e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d004      	beq.n	8000eac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eaa:	e002      	b.n	8000eb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f963 	bl	8001178 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d024      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ec4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f93d 	bl	8001150 <HAL_CAN_TxMailbox2CompleteCallback>
 8000ed6:	e016      	b.n	8000f06 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d004      	beq.n	8000eec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	e00c      	b.n	8000f06 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
 8000efe:	e002      	b.n	8000f06 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f943 	bl	800118c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f003 0308 	and.w	r3, r3, #8
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00c      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2210      	movs	r2, #16
 8000f28:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f2a:	6a3b      	ldr	r3, [r7, #32]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f003 0308 	and.w	r3, r3, #8
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2208      	movs	r2, #8
 8000f44:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f92a 	bl	80011a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d009      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	f003 0303 	and.w	r3, r3, #3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d002      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f00a f91d 	bl	800b1a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00c      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d007      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	f003 0320 	and.w	r3, r3, #32
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00b      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2208      	movs	r2, #8
 8000fa8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 f902 	bl	80011b4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d009      	beq.n	8000fce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f00a f91d 	bl	800b208 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f8ec 	bl	80011c8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000ff0:	6a3b      	ldr	r3, [r7, #32]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00b      	beq.n	8001012 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	f003 0308 	and.w	r3, r3, #8
 8001000:	2b00      	cmp	r3, #0
 8001002:	d006      	beq.n	8001012 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2208      	movs	r2, #8
 800100a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f8e5 	bl	80011dc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001012:	6a3b      	ldr	r3, [r7, #32]
 8001014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d075      	beq.n	8001108 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	2b00      	cmp	r3, #0
 8001024:	d06c      	beq.n	8001100 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001064:	2b00      	cmp	r3, #0
 8001066:	d008      	beq.n	800107a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001080:	2b00      	cmp	r3, #0
 8001082:	d03d      	beq.n	8001100 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800108a:	2b00      	cmp	r3, #0
 800108c:	d038      	beq.n	8001100 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001094:	2b30      	cmp	r3, #48	; 0x30
 8001096:	d017      	beq.n	80010c8 <HAL_CAN_IRQHandler+0x302>
 8001098:	2b30      	cmp	r3, #48	; 0x30
 800109a:	d804      	bhi.n	80010a6 <HAL_CAN_IRQHandler+0x2e0>
 800109c:	2b10      	cmp	r3, #16
 800109e:	d009      	beq.n	80010b4 <HAL_CAN_IRQHandler+0x2ee>
 80010a0:	2b20      	cmp	r3, #32
 80010a2:	d00c      	beq.n	80010be <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010a4:	e024      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80010a6:	2b50      	cmp	r3, #80	; 0x50
 80010a8:	d018      	beq.n	80010dc <HAL_CAN_IRQHandler+0x316>
 80010aa:	2b60      	cmp	r3, #96	; 0x60
 80010ac:	d01b      	beq.n	80010e6 <HAL_CAN_IRQHandler+0x320>
 80010ae:	2b40      	cmp	r3, #64	; 0x40
 80010b0:	d00f      	beq.n	80010d2 <HAL_CAN_IRQHandler+0x30c>
            break;
 80010b2:	e01d      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010bc:	e018      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f043 0310 	orr.w	r3, r3, #16
 80010c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010c6:	e013      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010d0:	e00e      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010da:	e009      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010e4:	e004      	b.n	80010f0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80010ee:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	6992      	ldr	r2, [r2, #24]
 80010fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010fe:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2204      	movs	r2, #4
 8001106:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110a:	2b00      	cmp	r3, #0
 800110c:	d008      	beq.n	8001120 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f00a f8a6 	bl	800b26c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001210:	2300      	movs	r3, #0
 8001212:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800121a:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800121c:	7bbb      	ldrb	r3, [r7, #14]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d002      	beq.n	8001228 <HAL_CAN_ResetError+0x20>
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d103      	bne.n	8001230 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
 800122e:	e007      	b.n	8001240 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	4909      	ldr	r1, [pc, #36]	; (80012ec <__NVIC_EnableIRQ+0x38>)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	f002 021f 	and.w	r2, r2, #31
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	490d      	ldr	r1, [pc, #52]	; (800133c <__NVIC_SetPriority+0x4c>)
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	4909      	ldr	r1, [pc, #36]	; (8001340 <__NVIC_SetPriority+0x50>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	3b04      	subs	r3, #4
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	; 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	2201      	movs	r2, #1
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	1e5a      	subs	r2, r3, #1
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	401a      	ands	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138a:	2101      	movs	r1, #1
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	fa01 f303 	lsl.w	r3, r1, r3
 8001392:	1e59      	subs	r1, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	4313      	orrs	r3, r2
         );
}
 800139a:	4618      	mov	r0, r3
 800139c:	3724      	adds	r7, #36	; 0x24
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
	...

080013a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b8:	d301      	bcc.n	80013be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ba:	2301      	movs	r3, #1
 80013bc:	e00f      	b.n	80013de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013be:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <SysTick_Config+0x40>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c6:	210f      	movs	r1, #15
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295
 80013cc:	f7ff ff90 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <SysTick_Config+0x40>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <SysTick_Config+0x40>)
 80013d8:	2207      	movs	r2, #7
 80013da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	e000e010 	.word	0xe000e010

080013ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff2b 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	4603      	mov	r3, r0
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
 800140e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff40 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa2 	bl	80013a8 <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001472:	f008 f88d 	bl	8009590 <HAL_SYSTICK_Callback>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff f90c 	bl	80006a4 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e099      	b.n	80015cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6812      	ldr	r2, [r2, #0]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	f022 0201 	bic.w	r2, r2, #1
 80014b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b8:	e00f      	b.n	80014da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ba:	f7ff f8f3 	bl	80006a4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d908      	bls.n	80014da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2220      	movs	r2, #32
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2203      	movs	r2, #3
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e078      	b.n	80015cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1e8      	bne.n	80014ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <HAL_DMA_Init+0x158>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001506:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001512:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800151e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4313      	orrs	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	2b04      	cmp	r3, #4
 8001532:	d107      	bne.n	8001544 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4313      	orrs	r3, r2
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	4313      	orrs	r3, r2
 8001542:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f023 0307 	bic.w	r3, r3, #7
 800155a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	2b04      	cmp	r3, #4
 800156c:	d117      	bne.n	800159e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	4313      	orrs	r3, r2
 8001576:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00e      	beq.n	800159e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 faa5 	bl	8001ad0 <DMA_CheckFifoParam>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2240      	movs	r2, #64	; 0x40
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800159a:	2301      	movs	r3, #1
 800159c:	e016      	b.n	80015cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa5c 	bl	8001a64 <DMA_CalcBaseAndBitshift>
 80015ac:	4603      	mov	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b4:	223f      	movs	r2, #63	; 0x3f
 80015b6:	409a      	lsls	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	e010803f 	.word	0xe010803f

080015d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_DMA_Start_IT+0x26>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e048      	b.n	8001690 <HAL_DMA_Start_IT+0xb8>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b01      	cmp	r3, #1
 8001610:	d137      	bne.n	8001682 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2202      	movs	r2, #2
 8001616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f9ee 	bl	8001a08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001630:	223f      	movs	r2, #63	; 0x3f
 8001632:	409a      	lsls	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f042 0216 	orr.w	r2, r2, #22
 8001646:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	6952      	ldr	r2, [r2, #20]
 8001652:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001656:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f042 0208 	orr.w	r2, r2, #8
 800166e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	e005      	b.n	800168e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800168a:	2302      	movs	r3, #2
 800168c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800168e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2280      	movs	r2, #128	; 0x80
 80016b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00c      	b.n	80016d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2205      	movs	r2, #5
 80016ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_DMA_IRQHandler+0x258>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a92      	ldr	r2, [pc, #584]	; (8001938 <HAL_DMA_IRQHandler+0x25c>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0a9b      	lsrs	r3, r3, #10
 80016f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2208      	movs	r2, #8
 8001708:	409a      	lsls	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01a      	beq.n	8001748 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	6812      	ldr	r2, [r2, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	2208      	movs	r2, #8
 8001736:	409a      	lsls	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001740:	f043 0201 	orr.w	r2, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	2201      	movs	r2, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d012      	beq.n	800177e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176a:	2201      	movs	r2, #1
 800176c:	409a      	lsls	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f043 0202 	orr.w	r2, r3, #2
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001782:	2204      	movs	r2, #4
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d012      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00b      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a0:	2204      	movs	r2, #4
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ac:	f043 0204 	orr.w	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	2210      	movs	r2, #16
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d043      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03c      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d6:	2210      	movs	r2, #16
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d018      	beq.n	800181e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d108      	bne.n	800180c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d024      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
 800180a:	e01f      	b.n	800184c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01b      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
 800181c:	e016      	b.n	800184c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d107      	bne.n	800183c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6812      	ldr	r2, [r2, #0]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	f022 0208 	bic.w	r2, r2, #8
 800183a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001850:	2220      	movs	r2, #32
 8001852:	409a      	lsls	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 808e 	beq.w	800197a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8086 	beq.w	800197a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2220      	movs	r2, #32
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b05      	cmp	r3, #5
 8001884:	d136      	bne.n	80018f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	f022 0216 	bic.w	r2, r2, #22
 8001894:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	6952      	ldr	r2, [r2, #20]
 80018a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d103      	bne.n	80018b6 <HAL_DMA_IRQHandler+0x1da>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	223f      	movs	r2, #63	; 0x3f
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d07d      	beq.n	80019e6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
        }
        return;
 80018f2:	e078      	b.n	80019e6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d01c      	beq.n	800193c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d108      	bne.n	8001922 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	2b00      	cmp	r3, #0
 8001916:	d030      	beq.n	800197a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	4798      	blx	r3
 8001920:	e02b      	b.n	800197a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	2b00      	cmp	r3, #0
 8001928:	d027      	beq.n	800197a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	4798      	blx	r3
 8001932:	e022      	b.n	800197a <HAL_DMA_IRQHandler+0x29e>
 8001934:	20000010 	.word	0x20000010
 8001938:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10f      	bne.n	800196a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	f022 0210 	bic.w	r2, r2, #16
 8001958:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	2b00      	cmp	r3, #0
 8001980:	d032      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2205      	movs	r2, #5
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d807      	bhi.n	80019c2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f2      	bne.n	80019a6 <HAL_DMA_IRQHandler+0x2ca>
 80019c0:	e000      	b.n	80019c4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019c2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	4798      	blx	r3
 80019e4:	e000      	b.n	80019e8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80019e6:	bf00      	nop
    }
  }
}
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop

080019f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b40      	cmp	r3, #64	; 0x40
 8001a34:	d108      	bne.n	8001a48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a46:	e007      	b.n	8001a58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	60da      	str	r2, [r3, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	3b10      	subs	r3, #16
 8001a74:	4a13      	ldr	r2, [pc, #76]	; (8001ac4 <DMA_CalcBaseAndBitshift+0x60>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	091b      	lsrs	r3, r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d908      	bls.n	8001aa4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <DMA_CalcBaseAndBitshift+0x68>)
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	1d1a      	adds	r2, r3, #4
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa2:	e006      	b.n	8001ab2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b08      	ldr	r3, [pc, #32]	; (8001acc <DMA_CalcBaseAndBitshift+0x68>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	aaaaaaab 	.word	0xaaaaaaab
 8001ac8:	080115a4 	.word	0x080115a4
 8001acc:	fffffc00 	.word	0xfffffc00

08001ad0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d11f      	bne.n	8001b2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d855      	bhi.n	8001b9c <DMA_CheckFifoParam+0xcc>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <DMA_CheckFifoParam+0x28>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b1b 	.word	0x08001b1b
 8001b00:	08001b09 	.word	0x08001b09
 8001b04:	08001b9d 	.word	0x08001b9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d045      	beq.n	8001ba0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b18:	e042      	b.n	8001ba0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b22:	d13f      	bne.n	8001ba4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b28:	e03c      	b.n	8001ba4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b32:	d121      	bne.n	8001b78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d836      	bhi.n	8001ba8 <DMA_CheckFifoParam+0xd8>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <DMA_CheckFifoParam+0x70>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b57 	.word	0x08001b57
 8001b48:	08001b51 	.word	0x08001b51
 8001b4c:	08001b69 	.word	0x08001b69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
      break;
 8001b54:	e02f      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d024      	beq.n	8001bac <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b66:	e021      	b.n	8001bac <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b70:	d11e      	bne.n	8001bb0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b76:	e01b      	b.n	8001bb0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d902      	bls.n	8001b84 <DMA_CheckFifoParam+0xb4>
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d003      	beq.n	8001b8a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b82:	e018      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      break;
 8001b88:	e015      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00e      	beq.n	8001bb4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
      break;
 8001b9a:	e00b      	b.n	8001bb4 <DMA_CheckFifoParam+0xe4>
      break;
 8001b9c:	bf00      	nop
 8001b9e:	e00a      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba0:	bf00      	nop
 8001ba2:	e008      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba4:	bf00      	nop
 8001ba6:	e006      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001ba8:	bf00      	nop
 8001baa:	e004      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bac:	bf00      	nop
 8001bae:	e002      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bb4:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e175      	b.n	8001ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8164 	bne.w	8001eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x4e>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d123      	bne.n	8001c5a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0203 	and.w	r2, r3, #3
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d00b      	beq.n	8001cae <HAL_GPIO_Init+0xea>
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d007      	beq.n	8001cae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca2:	2b11      	cmp	r3, #17
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b12      	cmp	r3, #18
 8001cac:	d130      	bne.n	8001d10 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	2203      	movs	r2, #3
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68da      	ldr	r2, [r3, #12]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	091b      	lsrs	r3, r3, #4
 8001cfa:	f003 0201 	and.w	r2, r3, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80be 	beq.w	8001eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4a65      	ldr	r2, [pc, #404]	; (8001ee4 <HAL_GPIO_Init+0x320>)
 8001d50:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <HAL_GPIO_Init+0x320>)
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b62      	ldr	r3, [pc, #392]	; (8001ee4 <HAL_GPIO_Init+0x320>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d66:	4a60      	ldr	r2, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a57      	ldr	r2, [pc, #348]	; (8001eec <HAL_GPIO_Init+0x328>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d037      	beq.n	8001e02 <HAL_GPIO_Init+0x23e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a56      	ldr	r2, [pc, #344]	; (8001ef0 <HAL_GPIO_Init+0x32c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d031      	beq.n	8001dfe <HAL_GPIO_Init+0x23a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_GPIO_Init+0x330>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x236>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a54      	ldr	r2, [pc, #336]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x232>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <HAL_GPIO_Init+0x338>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x22e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a52      	ldr	r2, [pc, #328]	; (8001f00 <HAL_GPIO_Init+0x33c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x22a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	; (8001f04 <HAL_GPIO_Init+0x340>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x226>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	; (8001f08 <HAL_GPIO_Init+0x344>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x222>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	; (8001f0c <HAL_GPIO_Init+0x348>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x21e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	; (8001f10 <HAL_GPIO_Init+0x34c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x21a>
 8001dda:	2309      	movs	r3, #9
 8001ddc:	e012      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dde:	230a      	movs	r3, #10
 8001de0:	e010      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001de2:	2308      	movs	r3, #8
 8001de4:	e00e      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e14:	4934      	ldr	r1, [pc, #208]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e70:	4a28      	ldr	r2, [pc, #160]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e76:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec4:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae86 	bls.w	8001be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3724      	adds	r7, #36	; 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40021400 	.word	0x40021400
 8001f04:	40021800 	.word	0x40021800
 8001f08:	40021c00 	.word	0x40021c00
 8001f0c:	40022000 	.word	0x40022000
 8001f10:	40022400 	.word	0x40022400
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4a05      	ldr	r2, [pc, #20]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40007000 	.word	0x40007000

08001f6c <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f70:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40007000 	.word	0x40007000

08001f8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f96:	4a23      	ldr	r2, [pc, #140]	; (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f98:	4b22      	ldr	r3, [pc, #136]	; (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fae:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fba:	f7fe fb73 	bl	80006a4 <HAL_GetTick>
 8001fbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fc0:	e009      	b.n	8001fd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fc2:	f7fe fb6f 	bl	80006a4 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e022      	b.n	800201c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fd6:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fe4:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff0:	f7fe fb58 	bl	80006a4 <HAL_GetTick>
 8001ff4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ff6:	e009      	b.n	800200c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ff8:	f7fe fb54 	bl	80006a4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002006:	d901      	bls.n	800200c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e007      	b.n	800201c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_PWREx_EnableOverDrive+0x9c>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002014:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002018:	d1ee      	bne.n	8001ff8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e25e      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 8087 	beq.w	800215e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002050:	4b96      	ldr	r3, [pc, #600]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 030c 	and.w	r3, r3, #12
 8002058:	2b04      	cmp	r3, #4
 800205a:	d00c      	beq.n	8002076 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205c:	4b93      	ldr	r3, [pc, #588]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d112      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
 8002068:	4b90      	ldr	r3, [pc, #576]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002074:	d10b      	bne.n	800208e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	4b8d      	ldr	r3, [pc, #564]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_RCC_OscConfig+0x130>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d168      	bne.n	800215c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e238      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x7a>
 8002098:	4a84      	ldr	r2, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800209a:	4b84      	ldr	r3, [pc, #528]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	e02e      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x9c>
 80020ae:	4a7f      	ldr	r2, [pc, #508]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020b0:	4b7e      	ldr	r3, [pc, #504]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020bc:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0xc0>
 80020d2:	4a76      	ldr	r2, [pc, #472]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020d4:	4b75      	ldr	r3, [pc, #468]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4a73      	ldr	r2, [pc, #460]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020e0:	4b72      	ldr	r3, [pc, #456]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xd8>
 80020ec:	4a6f      	ldr	r2, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020ee:	4b6f      	ldr	r3, [pc, #444]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4a6c      	ldr	r2, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020fa:	4b6c      	ldr	r3, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe faca 	bl	80006a4 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe fac6 	bl	80006a4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1ec      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xe8>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe fab6 	bl	80006a4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe fab2 	bl	80006a4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e1d8      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	4b57      	ldr	r3, [pc, #348]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x110>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d069      	beq.n	800223e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800216a:	4b50      	ldr	r3, [pc, #320]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 030c 	and.w	r3, r3, #12
 800217e:	2b08      	cmp	r3, #8
 8002180:	d11c      	bne.n	80021bc <HAL_RCC_OscConfig+0x190>
 8002182:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	4b47      	ldr	r3, [pc, #284]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d005      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d001      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e1ac      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a6:	4941      	ldr	r1, [pc, #260]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021a8:	4b40      	ldr	r3, [pc, #256]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e040      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d023      	beq.n	800220c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021c4:	4a39      	ldr	r2, [pc, #228]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021c6:	4b39      	ldr	r3, [pc, #228]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fa68 	bl	80006a4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe fa64 	bl	80006a4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e18a      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ea:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	492d      	ldr	r1, [pc, #180]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	4313      	orrs	r3, r2
 8002208:	600b      	str	r3, [r1, #0]
 800220a:	e018      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220c:	4a27      	ldr	r2, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800220e:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 0301 	bic.w	r3, r3, #1
 8002216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe fa44 	bl	80006a4 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe fa40 	bl	80006a4 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e166      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0308 	and.w	r3, r3, #8
 8002246:	2b00      	cmp	r3, #0
 8002248:	d038      	beq.n	80022bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d019      	beq.n	8002286 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002252:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002254:	4b15      	ldr	r3, [pc, #84]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7fe fa21 	bl	80006a4 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002266:	f7fe fa1d 	bl	80006a4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e143      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x23a>
 8002284:	e01a      	b.n	80022bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002286:	4a09      	ldr	r2, [pc, #36]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 8002288:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_RCC_OscConfig+0x280>)
 800228a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe fa07 	bl	80006a4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800229a:	f7fe fa03 	bl	80006a4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d903      	bls.n	80022b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e129      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
 80022ac:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b0:	4b95      	ldr	r3, [pc, #596]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80022b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d1ee      	bne.n	800229a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a4 	beq.w	8002412 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b8f      	ldr	r3, [pc, #572]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4a8c      	ldr	r2, [pc, #560]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80022d8:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f2:	4b86      	ldr	r3, [pc, #536]	; (800250c <HAL_RCC_OscConfig+0x4e0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d118      	bne.n	8002330 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80022fe:	4a83      	ldr	r2, [pc, #524]	; (800250c <HAL_RCC_OscConfig+0x4e0>)
 8002300:	4b82      	ldr	r3, [pc, #520]	; (800250c <HAL_RCC_OscConfig+0x4e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800230a:	f7fe f9cb 	bl	80006a4 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002312:	f7fe f9c7 	bl	80006a4 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b64      	cmp	r3, #100	; 0x64
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0ed      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002324:	4b79      	ldr	r3, [pc, #484]	; (800250c <HAL_RCC_OscConfig+0x4e0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <HAL_RCC_OscConfig+0x31a>
 8002338:	4a73      	ldr	r2, [pc, #460]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800233a:	4b73      	ldr	r3, [pc, #460]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
 8002344:	e02d      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10c      	bne.n	8002368 <HAL_RCC_OscConfig+0x33c>
 800234e:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002350:	4b6d      	ldr	r3, [pc, #436]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	f023 0301 	bic.w	r3, r3, #1
 8002358:	6713      	str	r3, [r2, #112]	; 0x70
 800235a:	4a6b      	ldr	r2, [pc, #428]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800235c:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	f023 0304 	bic.w	r3, r3, #4
 8002364:	6713      	str	r3, [r2, #112]	; 0x70
 8002366:	e01c      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d10c      	bne.n	800238a <HAL_RCC_OscConfig+0x35e>
 8002370:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002372:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6713      	str	r3, [r2, #112]	; 0x70
 800237c:	4a62      	ldr	r2, [pc, #392]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f043 0301 	orr.w	r3, r3, #1
 8002386:	6713      	str	r3, [r2, #112]	; 0x70
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
 800238a:	4a5f      	ldr	r2, [pc, #380]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800238c:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f023 0301 	bic.w	r3, r3, #1
 8002394:	6713      	str	r3, [r2, #112]	; 0x70
 8002396:	4a5c      	ldr	r2, [pc, #368]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002398:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	f023 0304 	bic.w	r3, r3, #4
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d015      	beq.n	80023d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe f97b 	bl	80006a4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe f977 	bl	80006a4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e09b      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c8:	4b4f      	ldr	r3, [pc, #316]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ee      	beq.n	80023b2 <HAL_RCC_OscConfig+0x386>
 80023d4:	e014      	b.n	8002400 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe f965 	bl	80006a4 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7fe f961 	bl	80006a4 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e085      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ee      	bne.n	80023de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002400:	7dfb      	ldrb	r3, [r7, #23]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d105      	bne.n	8002412 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002406:	4a40      	ldr	r2, [pc, #256]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002408:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d071      	beq.n	80024fe <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b08      	cmp	r3, #8
 8002424:	d069      	beq.n	80024fa <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d14b      	bne.n	80024c6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800242e:	4a36      	ldr	r2, [pc, #216]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002430:	4b35      	ldr	r3, [pc, #212]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7fe f933 	bl	80006a4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe f92f 	bl	80006a4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e055      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4929      	ldr	r1, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69da      	ldr	r2, [r3, #28]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	061b      	lsls	r3, r3, #24
 8002486:	431a      	orrs	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	071b      	lsls	r3, r3, #28
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002492:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002494:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800249c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249e:	f7fe f901 	bl	80006a4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a6:	f7fe f8fd 	bl	80006a4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e023      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x47a>
 80024c4:	e01b      	b.n	80024fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c6:	4a10      	ldr	r2, [pc, #64]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe f8e7 	bl	80006a4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7fe f8e3 	bl	80006a4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e009      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ec:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_OscConfig+0x4dc>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f0      	bne.n	80024da <HAL_RCC_OscConfig+0x4ae>
 80024f8:	e001      	b.n	80024fe <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	40007000 	.word	0x40007000

08002510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0ce      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002528:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d210      	bcs.n	8002558 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4966      	ldr	r1, [pc, #408]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002538:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 020f 	bic.w	r2, r3, #15
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b62      	ldr	r3, [pc, #392]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 020f 	and.w	r2, r3, #15
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b6      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002572:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800257a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258a:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002592:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	494f      	ldr	r1, [pc, #316]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4b4f      	ldr	r3, [pc, #316]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d040      	beq.n	8002634 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d115      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07d      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d107      	bne.n	80025e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d2:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e071      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e2:	4b3c      	ldr	r3, [pc, #240]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e069      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025f2:	4938      	ldr	r1, [pc, #224]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 0203 	bic.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4313      	orrs	r3, r2
 8002602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe f84e 	bl	80006a4 <HAL_GetTick>
 8002608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260a:	e00a      	b.n	8002622 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe f84a 	bl	80006a4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e051      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002622:	4b2c      	ldr	r3, [pc, #176]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 020c 	and.w	r2, r3, #12
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	429a      	cmp	r2, r3
 8002632:	d1eb      	bne.n	800260c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002634:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 020f 	and.w	r2, r3, #15
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4923      	ldr	r1, [pc, #140]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 020f 	bic.w	r2, r3, #15
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e030      	b.n	80026c6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4918      	ldr	r1, [pc, #96]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800268e:	4911      	ldr	r1, [pc, #68]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	4b10      	ldr	r3, [pc, #64]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f81d 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 80026a6:	4601      	mov	r1, r0
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	4a09      	ldr	r2, [pc, #36]	; (80026d8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	fa21 f303 	lsr.w	r3, r1, r3
 80026ba:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fd ffac 	bl	800061c <HAL_InitTick>

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023c00 	.word	0x40023c00
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08011a00 	.word	0x08011a00
 80026dc:	20000010 	.word	0x20000010

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026e4:	b08f      	sub	sp, #60	; 0x3c
 80026e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ec:	2300      	movs	r3, #0
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f8:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b04      	cmp	r3, #4
 8002702:	d007      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x34>
 8002704:	2b08      	cmp	r3, #8
 8002706:	d008      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x3a>
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 80b2 	bne.w	8002872 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270e:	4b5e      	ldr	r3, [pc, #376]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002712:	e0b1      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002714:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002718:	e0ae      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271a:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002722:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002724:	4b57      	ldr	r3, [pc, #348]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d04e      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002730:	4b54      	ldr	r3, [pc, #336]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	f04f 0400 	mov.w	r4, #0
 800273a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	ea01 0103 	and.w	r1, r1, r3
 8002746:	ea02 0204 	and.w	r2, r2, r4
 800274a:	460b      	mov	r3, r1
 800274c:	4614      	mov	r4, r2
 800274e:	0160      	lsls	r0, r4, #5
 8002750:	6278      	str	r0, [r7, #36]	; 0x24
 8002752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002754:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002758:	6278      	str	r0, [r7, #36]	; 0x24
 800275a:	015b      	lsls	r3, r3, #5
 800275c:	623b      	str	r3, [r7, #32]
 800275e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002762:	1a5b      	subs	r3, r3, r1
 8002764:	eb64 0402 	sbc.w	r4, r4, r2
 8002768:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800276c:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002770:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002774:	ebb8 0803 	subs.w	r8, r8, r3
 8002778:	eb69 0904 	sbc.w	r9, r9, r4
 800277c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002794:	eb18 0801 	adds.w	r8, r8, r1
 8002798:	eb49 0902 	adc.w	r9, r9, r2
 800279c:	ea4f 2389 	mov.w	r3, r9, lsl #10
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	ea4f 2388 	mov.w	r3, r8, lsl #10
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80027b4:	4640      	mov	r0, r8
 80027b6:	4649      	mov	r1, r9
 80027b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ba:	f04f 0400 	mov.w	r4, #0
 80027be:	461a      	mov	r2, r3
 80027c0:	4623      	mov	r3, r4
 80027c2:	f7fd fd95 	bl	80002f0 <__aeabi_uldivmod>
 80027c6:	4603      	mov	r3, r0
 80027c8:	460c      	mov	r4, r1
 80027ca:	637b      	str	r3, [r7, #52]	; 0x34
 80027cc:	e043      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	f04f 0400 	mov.w	r4, #0
 80027d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	ea01 0103 	and.w	r1, r1, r3
 80027e4:	ea02 0204 	and.w	r2, r2, r4
 80027e8:	460b      	mov	r3, r1
 80027ea:	4614      	mov	r4, r2
 80027ec:	0160      	lsls	r0, r4, #5
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	015b      	lsls	r3, r3, #5
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002800:	1a5b      	subs	r3, r3, r1
 8002802:	eb64 0402 	sbc.w	r4, r4, r2
 8002806:	01a6      	lsls	r6, r4, #6
 8002808:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800280c:	019d      	lsls	r5, r3, #6
 800280e:	1aed      	subs	r5, r5, r3
 8002810:	eb66 0604 	sbc.w	r6, r6, r4
 8002814:	00f3      	lsls	r3, r6, #3
 8002816:	607b      	str	r3, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800281e:	607b      	str	r3, [r7, #4]
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002828:	186d      	adds	r5, r5, r1
 800282a:	eb46 0602 	adc.w	r6, r6, r2
 800282e:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002832:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002836:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 800283a:	4655      	mov	r5, sl
 800283c:	465e      	mov	r6, fp
 800283e:	4628      	mov	r0, r5
 8002840:	4631      	mov	r1, r6
 8002842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002844:	f04f 0400 	mov.w	r4, #0
 8002848:	461a      	mov	r2, r3
 800284a:	4623      	mov	r3, r4
 800284c:	f7fd fd50 	bl	80002f0 <__aeabi_uldivmod>
 8002850:	4603      	mov	r3, r0
 8002852:	460c      	mov	r4, r1
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002856:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	0c1b      	lsrs	r3, r3, #16
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	3301      	adds	r3, #1
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002876:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800287a:	4618      	mov	r0, r3
 800287c:	373c      	adds	r7, #60	; 0x3c
 800287e:	46bd      	mov	sp, r7
 8002880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	00f42400 	.word	0x00f42400

0800288c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	20000010 	.word	0x20000010

080028a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028a8:	f7ff fff0 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028ac:	4601      	mov	r1, r0
 80028ae:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	0a9b      	lsrs	r3, r3, #10
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	4a03      	ldr	r2, [pc, #12]	; (80028c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ba:	5cd3      	ldrb	r3, [r2, r3]
 80028bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	08011a10 	.word	0x08011a10

080028cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028d0:	f7ff ffdc 	bl	800288c <HAL_RCC_GetHCLKFreq>
 80028d4:	4601      	mov	r1, r0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	0b5b      	lsrs	r3, r3, #13
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	4a03      	ldr	r2, [pc, #12]	; (80028f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e2:	5cd3      	ldrb	r3, [r2, r3]
 80028e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08011a10 	.word	0x08011a10

080028f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d012      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800291c:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	4b69      	ldr	r3, [pc, #420]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002926:	6093      	str	r3, [r2, #8]
 8002928:	4966      	ldr	r1, [pc, #408]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	4b66      	ldr	r3, [pc, #408]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002932:	4313      	orrs	r3, r2
 8002934:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800293e:	2301      	movs	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d017      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800294e:	495d      	ldr	r1, [pc, #372]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800296c:	d101      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800296e:	2301      	movs	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800298a:	494e      	ldr	r1, [pc, #312]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298c:	4b4d      	ldr	r3, [pc, #308]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029a8:	d101      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80029b6:	2301      	movs	r3, #1
 80029b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80029c6:	2301      	movs	r3, #1
 80029c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0320 	and.w	r3, r3, #32
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 808b 	beq.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80029d8:	4a3a      	ldr	r2, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6413      	str	r3, [r2, #64]	; 0x40
 80029e4:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029f0:	4a35      	ldr	r2, [pc, #212]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f2:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029fc:	f7fd fe52 	bl	80006a4 <HAL_GetTick>
 8002a00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a04:	f7fd fe4e 	bl	80006a4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e38d      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a16:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a22:	4b28      	ldr	r3, [pc, #160]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d035      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d02e      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a4a:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d114      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a74:	f7fd fe16 	bl	80006a4 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fd fe12 	bl	80006a4 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e34f      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0ee      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002aaa:	d111      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002aac:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	4b05      	ldr	r3, [pc, #20]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002abc:	400b      	ands	r3, r1
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	6083      	str	r3, [r0, #8]
 8002ac2:	e00b      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	0ffffcff 	.word	0x0ffffcff
 8002ad0:	4ab2      	ldr	r2, [pc, #712]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ad2:	4bb2      	ldr	r3, [pc, #712]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ada:	6093      	str	r3, [r2, #8]
 8002adc:	49af      	ldr	r1, [pc, #700]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ade:	4baf      	ldr	r3, [pc, #700]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aea:	4313      	orrs	r3, r2
 8002aec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002afa:	4aa8      	ldr	r2, [pc, #672]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002afc:	4ba7      	ldr	r3, [pc, #668]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002b0a:	49a4      	ldr	r1, [pc, #656]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b0c:	4ba3      	ldr	r3, [pc, #652]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b28:	499c      	ldr	r1, [pc, #624]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b2a:	4b9c      	ldr	r3, [pc, #624]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b4a:	4994      	ldr	r1, [pc, #592]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b4c:	4b93      	ldr	r3, [pc, #588]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b52:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b6c:	498b      	ldr	r1, [pc, #556]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b6e:	4b8b      	ldr	r3, [pc, #556]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002b8e:	4983      	ldr	r1, [pc, #524]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b90:	4b82      	ldr	r3, [pc, #520]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bb0:	497a      	ldr	r1, [pc, #488]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bb2:	4b7a      	ldr	r3, [pc, #488]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	f023 0203 	bic.w	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd2:	4972      	ldr	r1, [pc, #456]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bd4:	4b71      	ldr	r3, [pc, #452]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	f023 020c 	bic.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf4:	4969      	ldr	r1, [pc, #420]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bf6:	4b69      	ldr	r3, [pc, #420]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c16:	4961      	ldr	r1, [pc, #388]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c18:	4b60      	ldr	r3, [pc, #384]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c38:	4958      	ldr	r1, [pc, #352]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c3a:	4b58      	ldr	r3, [pc, #352]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002c5a:	4950      	ldr	r1, [pc, #320]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002c7c:	4947      	ldr	r1, [pc, #284]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002c9e:	493f      	ldr	r1, [pc, #252]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ca0:	4b3e      	ldr	r3, [pc, #248]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cc0:	4936      	ldr	r1, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d011      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ce2:	492e      	ldr	r1, [pc, #184]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ce4:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cea:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d101      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d22:	491e      	ldr	r1, [pc, #120]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d44:	4915      	ldr	r1, [pc, #84]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d46:	4b15      	ldr	r3, [pc, #84]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d56:	4313      	orrs	r3, r2
 8002d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d6a:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00e      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d8e:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e001      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002db6:	4981      	ldr	r1, [pc, #516]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002db8:	4b80      	ldr	r3, [pc, #512]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ddc:	f040 80d6 	bne.w	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002de0:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002de2:	4b76      	ldr	r3, [pc, #472]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dec:	f7fd fc5a 	bl	80006a4 <HAL_GetTick>
 8002df0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002df4:	f7fd fc56 	bl	80006a4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	; 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e195      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d021      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x56e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d11d      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2c:	0c1b      	lsrs	r3, r3, #16
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e34:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e42:	495e      	ldr	r1, [pc, #376]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	019a      	lsls	r2, r3, #6
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	071b      	lsls	r3, r3, #28
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d004      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02e      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e8c:	d129      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e9c:	4b47      	ldr	r3, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	0f1b      	lsrs	r3, r3, #28
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002eaa:	4944      	ldr	r1, [pc, #272]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	019a      	lsls	r2, r3, #6
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	041b      	lsls	r3, r3, #16
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	071b      	lsls	r3, r3, #28
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002eca:	493c      	ldr	r1, [pc, #240]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ed2:	f023 021f 	bic.w	r2, r3, #31
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eda:	3b01      	subs	r3, #1
 8002edc:	4313      	orrs	r3, r2
 8002ede:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d01d      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ef4:	0e1b      	lsrs	r3, r3, #24
 8002ef6:	f003 030f 	and.w	r3, r3, #15
 8002efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002efc:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f02:	0f1b      	lsrs	r3, r3, #28
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f0a:	492c      	ldr	r1, [pc, #176]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	019a      	lsls	r2, r3, #6
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	041b      	lsls	r3, r3, #16
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	071b      	lsls	r3, r3, #28
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d011      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f36:	4921      	ldr	r1, [pc, #132]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	019a      	lsls	r2, r3, #6
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	431a      	orrs	r2, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	061b      	lsls	r3, r3, #24
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	071b      	lsls	r3, r3, #28
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002f5a:	4a18      	ldr	r2, [pc, #96]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f66:	f7fd fb9d 	bl	80006a4 <HAL_GetTick>
 8002f6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f6c:	e008      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f6e:	f7fd fb99 	bl	80006a4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b64      	cmp	r3, #100	; 0x64
 8002f7a:	d901      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e0d8      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0f0      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	f040 80ce 	bne.w	8003130 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f96:	4b09      	ldr	r3, [pc, #36]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fd fb80 	bl	80006a4 <HAL_GetTick>
 8002fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002fa8:	f7fd fb7c 	bl	80006a4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d904      	bls.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e0bb      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002fba:	bf00      	nop
 8002fbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fcc:	d0ec      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d02e      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d12a      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ff6:	4b51      	ldr	r3, [pc, #324]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003004:	4b4d      	ldr	r3, [pc, #308]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	0f1b      	lsrs	r3, r3, #28
 800300c:	f003 0307 	and.w	r3, r3, #7
 8003010:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003012:	494a      	ldr	r1, [pc, #296]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	019a      	lsls	r2, r3, #6
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	041b      	lsls	r3, r3, #16
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	061b      	lsls	r3, r3, #24
 8003026:	431a      	orrs	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	071b      	lsls	r3, r3, #28
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003032:	4942      	ldr	r1, [pc, #264]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003034:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003036:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d022      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800305c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003060:	d11d      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003062:	4b36      	ldr	r3, [pc, #216]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003068:	0e1b      	lsrs	r3, r3, #24
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003070:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	0f1b      	lsrs	r3, r3, #28
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800307e:	492f      	ldr	r1, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	019a      	lsls	r2, r3, #6
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	071b      	lsls	r3, r3, #28
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d028      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	0e1b      	lsrs	r3, r3, #24
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80030c6:	491d      	ldr	r1, [pc, #116]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	019a      	lsls	r2, r3, #6
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	041b      	lsls	r3, r3, #16
 80030d2:	431a      	orrs	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	061b      	lsls	r3, r3, #24
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	071b      	lsls	r3, r3, #28
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80030e6:	4915      	ldr	r1, [pc, #84]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030e8:	4b14      	ldr	r3, [pc, #80]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80030fe:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003108:	f7fd facc 	bl	80006a4 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003110:	f7fd fac8 	bl	80006a4 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e007      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800312a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800312e:	d1ef      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3720      	adds	r7, #32
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e06b      	b.n	800322a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	7f5b      	ldrb	r3, [r3, #29]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d105      	bne.n	8003168 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f006 fcde 	bl	8009b24 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	22ca      	movs	r2, #202	; 0xca
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2253      	movs	r2, #83	; 0x53
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 fa96 	bl	80036b0 <RTC_EnterInitMode>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d008      	beq.n	800319c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	22ff      	movs	r2, #255	; 0xff
 8003190:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2204      	movs	r2, #4
 8003196:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e046      	b.n	800322a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	4b23      	ldr	r3, [pc, #140]	; (8003234 <HAL_RTC_Init+0xf4>)
 80031a8:	400b      	ands	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	6891      	ldr	r1, [r2, #8]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6850      	ldr	r0, [r2, #4]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6912      	ldr	r2, [r2, #16]
 80031be:	4310      	orrs	r0, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6952      	ldr	r2, [r2, #20]
 80031c4:	4302      	orrs	r2, r0
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6812      	ldr	r2, [r2, #0]
 80031dc:	6911      	ldr	r1, [r2, #16]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	0412      	lsls	r2, r2, #16
 80031e4:	430a      	orrs	r2, r1
 80031e6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6812      	ldr	r2, [r2, #0]
 8003200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003202:	f022 0208 	bic.w	r2, r2, #8
 8003206:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6992      	ldr	r2, [r2, #24]
 8003216:	430a      	orrs	r2, r1
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003228:	2300      	movs	r3, #0
  }
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	ff8fffbf 	.word	0xff8fffbf

08003238 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	7f1b      	ldrb	r3, [r3, #28]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_RTC_SetTime+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e0a8      	b.n	80033a6 <HAL_RTC_SetTime+0x16e>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d126      	bne.n	80032b4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fa42 	bl	8003708 <RTC_ByteToBcd2>
 8003284:	4603      	mov	r3, r0
 8003286:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fa3b 	bl	8003708 <RTC_ByteToBcd2>
 8003292:	4603      	mov	r3, r0
 8003294:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8003296:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa33 	bl	8003708 <RTC_ByteToBcd2>
 80032a2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80032a4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	7b1b      	ldrb	r3, [r3, #12]
 80032ac:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e018      	b.n	80032e6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d102      	bne.n	80032c8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	2200      	movs	r2, #0
 80032c6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80032d4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80032da:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	7b1b      	ldrb	r3, [r3, #12]
 80032e0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	22ca      	movs	r2, #202	; 0xca
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2253      	movs	r2, #83	; 0x53
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9da 	bl	80036b0 <RTC_EnterInitMode>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2204      	movs	r2, #4
 800330e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e045      	b.n	80033a6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_RTC_SetTime+0x178>)
 8003322:	400b      	ands	r3, r1
 8003324:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	6812      	ldr	r2, [r2, #0]
 800332e:	6892      	ldr	r2, [r2, #8]
 8003330:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003334:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	6891      	ldr	r1, [r2, #8]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	6910      	ldr	r0, [r2, #16]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	6952      	ldr	r2, [r2, #20]
 8003348:	4302      	orrs	r2, r0
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	6812      	ldr	r2, [r2, #0]
 8003356:	68d2      	ldr	r2, [r2, #12]
 8003358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800335c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d111      	bne.n	8003390 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f977 	bl	8003660 <HAL_RTC_WaitForSynchro>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00b      	beq.n	8003390 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2204      	movs	r2, #4
 8003384:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e00a      	b.n	80033a6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	22ff      	movs	r2, #255	; 0xff
 8003396:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2201      	movs	r2, #1
 800339c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80033a4:	2300      	movs	r3, #0
  }
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
 80033ae:	bf00      	nop
 80033b0:	007f7f7f 	.word	0x007f7f7f

080033b4 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	4b22      	ldr	r3, [pc, #136]	; (800346c <HAL_RTC_GetTime+0xb8>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	0c1b      	lsrs	r3, r3, #16
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003402:	b2da      	uxtb	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d11a      	bne.n	8003462 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f987 	bl	8003744 <RTC_Bcd2ToByte>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	785b      	ldrb	r3, [r3, #1]
 8003442:	4618      	mov	r0, r3
 8003444:	f000 f97e 	bl	8003744 <RTC_Bcd2ToByte>
 8003448:	4603      	mov	r3, r0
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	789b      	ldrb	r3, [r3, #2]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 f975 	bl	8003744 <RTC_Bcd2ToByte>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3718      	adds	r7, #24
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	007f7f7f 	.word	0x007f7f7f

08003470 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	60b9      	str	r1, [r7, #8]
 800347a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	7f1b      	ldrb	r3, [r3, #28]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_RTC_SetDate+0x1c>
 8003488:	2302      	movs	r3, #2
 800348a:	e092      	b.n	80035b2 <HAL_RTC_SetDate+0x142>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2202      	movs	r2, #2
 8003496:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d10e      	bne.n	80034bc <HAL_RTC_SetDate+0x4c>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	785b      	ldrb	r3, [r3, #1]
 80034ae:	f023 0310 	bic.w	r3, r3, #16
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	330a      	adds	r3, #10
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d11c      	bne.n	80034fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	78db      	ldrb	r3, [r3, #3]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f91e 	bl	8003708 <RTC_ByteToBcd2>
 80034cc:	4603      	mov	r3, r0
 80034ce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 f917 	bl	8003708 <RTC_ByteToBcd2>
 80034da:	4603      	mov	r3, r0
 80034dc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034de:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	789b      	ldrb	r3, [r3, #2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 f90f 	bl	8003708 <RTC_ByteToBcd2>
 80034ea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80034ec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e00e      	b.n	800351a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003508:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 800350e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	22ca      	movs	r2, #202	; 0xca
 8003520:	625a      	str	r2, [r3, #36]	; 0x24
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2253      	movs	r2, #83	; 0x53
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f8c0 	bl	80036b0 <RTC_EnterInitMode>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	22ff      	movs	r2, #255	; 0xff
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2204      	movs	r2, #4
 8003542:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e031      	b.n	80035b2 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	6979      	ldr	r1, [r7, #20]
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RTC_SetDate+0x14c>)
 8003556:	400b      	ands	r3, r1
 8003558:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	6812      	ldr	r2, [r2, #0]
 8003562:	68d2      	ldr	r2, [r2, #12]
 8003564:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003568:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f003 0320 	and.w	r3, r3, #32
 8003574:	2b00      	cmp	r3, #0
 8003576:	d111      	bne.n	800359c <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f871 	bl	8003660 <HAL_RTC_WaitForSynchro>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00b      	beq.n	800359c <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	22ff      	movs	r2, #255	; 0xff
 800358a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2204      	movs	r2, #4
 8003590:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e00a      	b.n	80035b2 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
  }
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd90      	pop	{r4, r7, pc}
 80035ba:	bf00      	nop
 80035bc:	00ffff3f 	.word	0x00ffff3f

080035c0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_RTC_GetDate+0x9c>)
 80035d8:	4013      	ands	r3, r2
 80035da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	b2db      	uxtb	r3, r3
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11a      	bne.n	8003650 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f890 	bl	8003744 <RTC_Bcd2ToByte>
 8003624:	4603      	mov	r3, r0
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	785b      	ldrb	r3, [r3, #1]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f887 	bl	8003744 <RTC_Bcd2ToByte>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	789b      	ldrb	r3, [r3, #2]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f87e 	bl	8003744 <RTC_Bcd2ToByte>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	00ffff3f 	.word	0x00ffff3f

08003660 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68d2      	ldr	r2, [r2, #12]
 8003676:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800367a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800367c:	f7fd f812 	bl	80006a4 <HAL_GetTick>
 8003680:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003682:	e009      	b.n	8003698 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003684:	f7fd f80e 	bl	80006a4 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003692:	d901      	bls.n	8003698 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e007      	b.n	80036a8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0ee      	beq.n	8003684 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d119      	bne.n	80036fe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295
 80036d2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036d4:	f7fc ffe6 	bl	80006a4 <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036da:	e009      	b.n	80036f0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036dc:	f7fc ffe2 	bl	80006a4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ea:	d901      	bls.n	80036f0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e007      	b.n	8003700 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8003716:	e005      	b.n	8003724 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	3b0a      	subs	r3, #10
 8003722:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	2b09      	cmp	r3, #9
 8003728:	d8f6      	bhi.n	8003718 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	b2da      	uxtb	r2, r3
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	4313      	orrs	r3, r2
 8003736:	b2db      	uxtb	r3, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4413      	add	r3, r2
 8003772:	b2db      	uxtb	r3, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3350      	adds	r3, #80	; 0x50
 8003796:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4413      	add	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3350      	adds	r3, #80	; 0x50
 80037c8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4413      	add	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3714      	adds	r7, #20
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e01d      	b.n	8003832 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d105      	bne.n	800380e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fbed 	bl	8009fe8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2203      	movs	r2, #3
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f80f 	bl	800383a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800383a:	b5b0      	push	{r4, r5, r7, lr}
 800383c:	b08e      	sub	sp, #56	; 0x38
 800383e:	af04      	add	r7, sp, #16
 8003840:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800384a:	2300      	movs	r3, #0
 800384c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800385a:	2376      	movs	r3, #118	; 0x76
 800385c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681d      	ldr	r5, [r3, #0]
 8003862:	466c      	mov	r4, sp
 8003864:	f107 0318 	add.w	r3, r7, #24
 8003868:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800386c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003876:	4628      	mov	r0, r5
 8003878:	f002 f896 	bl	80059a8 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	6852      	ldr	r2, [r2, #4]
 8003886:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800388a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f002 f8d3 	bl	8005a3c <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 80038a6:	2002      	movs	r0, #2
 80038a8:	f7fc ff08 	bl	80006bc <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 ff7b 	bl	80047a8 <SD_PowerON>
 80038b2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e013      	b.n	80038fa <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fe9f 	bl	8004616 <SD_InitCard>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00b      	beq.n	80038f8 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003904 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08c      	sub	sp, #48	; 0x30
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b0      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	f040 80a9 	bne.w	8003a8c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	429a      	cmp	r2, r3
 800394c:	d907      	bls.n	800395e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003952:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e097      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2203      	movs	r2, #3
 8003962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003978:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800397c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <HAL_SD_ReadBlocks_DMA+0x194>)
 8003984:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398a:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <HAL_SD_ReadBlocks_DMA+0x198>)
 800398c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	2200      	movs	r2, #0
 8003994:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3380      	adds	r3, #128	; 0x80
 80039a0:	4619      	mov	r1, r3
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	025b      	lsls	r3, r3, #9
 80039a8:	089b      	lsrs	r3, r3, #2
 80039aa:	f7fd fe15 	bl	80015d8 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	6812      	ldr	r2, [r2, #0]
 80039b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039b8:	f042 0208 	orr.w	r2, r2, #8
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d002      	beq.n	80039cc <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	025b      	lsls	r3, r3, #9
 80039ca:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	025b      	lsls	r3, r3, #9
 80039d6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80039d8:	2390      	movs	r3, #144	; 0x90
 80039da:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80039dc:	2302      	movs	r3, #2
 80039de:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80039e4:	2301      	movs	r3, #1
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f107 0214 	add.w	r2, r7, #20
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 f88a 	bl	8005b0c <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a00:	4618      	mov	r0, r3
 8003a02:	f002 f8af 	bl	8005b64 <SDMMC_CmdBlockLength>
 8003a06:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d010      	beq.n	8003a30 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e02e      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d90a      	bls.n	8003a4c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2282      	movs	r2, #130	; 0x82
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 f8d6 	bl	8005bf4 <SDMMC_CmdReadMultiBlock>
 8003a48:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003a4a:	e009      	b.n	8003a60 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2281      	movs	r2, #129	; 0x81
 8003a50:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f002 f8a7 	bl	8005bac <SDMMC_CmdReadSingleBlock>
 8003a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003a6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e002      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e000      	b.n	8003a8e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a8c:	2302      	movs	r3, #2
  }
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3730      	adds	r7, #48	; 0x30
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	0800441b 	.word	0x0800441b
 8003a9c:	08004489 	.word	0x08004489

08003aa0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	; 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003abc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0b0      	b.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	f040 80a9 	bne.w	8003c28 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d907      	bls.n	8003afa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e097      	b.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2203      	movs	r2, #3
 8003afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2200      	movs	r2, #0
 8003b08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b14:	f042 021a 	orr.w	r2, r2, #26
 8003b18:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a45      	ldr	r2, [pc, #276]	; (8003c34 <HAL_SD_WriteBlocks_DMA+0x194>)
 8003b20:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a44      	ldr	r2, [pc, #272]	; (8003c38 <HAL_SD_WriteBlocks_DMA+0x198>)
 8003b28:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2200      	movs	r2, #0
 8003b30:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d002      	beq.n	8003b40 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 f80b 	bl	8005b64 <SDMMC_CmdBlockLength>
 8003b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d010      	beq.n	8003b78 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003b5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e058      	b.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d90a      	bls.n	8003b94 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	22a0      	movs	r2, #160	; 0xa0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f002 f87a 	bl	8005c84 <SDMMC_CmdWriteMultiBlock>
 8003b90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b92:	e009      	b.n	8003ba8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2290      	movs	r2, #144	; 0x90
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 f84b 	bl	8005c3c <SDMMC_CmdWriteSingleBlock>
 8003ba6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d010      	beq.n	8003bd0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e02c      	b.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003bda:	f042 0208 	orr.w	r2, r2, #8
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003be4:	68b9      	ldr	r1, [r7, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3380      	adds	r3, #128	; 0x80
 8003bec:	461a      	mov	r2, r3
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	025b      	lsls	r3, r3, #9
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	f7fd fcf0 	bl	80015d8 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfc:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	025b      	lsls	r3, r3, #9
 8003c02:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003c04:	2390      	movs	r3, #144	; 0x90
 8003c06:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f107 0214 	add.w	r2, r7, #20
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 ff74 	bl	8005b0c <SDMMC_ConfigData>
    
    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3730      	adds	r7, #48	; 0x30
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	080043f1 	.word	0x080043f1
 8003c38:	08004489 	.word	0x08004489

08003c3c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 808b 	beq.w	8003d6e <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c60:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003c70:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d03a      	beq.n	8003cf4 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_SD_IRQHandler+0x5a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d011      	beq.n	8003cba <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f002 f816 	bl	8005ccc <SDMMC_CmdStopTransfer>
 8003ca0:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f915 	bl	8003ee4 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d105      	bne.n	8003ce4 <HAL_SD_IRQHandler+0xa8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	f003 0302 	and.w	r3, r3, #2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f005 fb2b 	bl	8009340 <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 8003cea:	e0f3      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f005 fb1d 	bl	800932c <HAL_SD_TxCpltCallback>
}
 8003cf2:	e0ef      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 80e9 	beq.w	8003ed4 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d011      	beq.n	8003d32 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 ffda 	bl	8005ccc <SDMMC_CmdStopTransfer>
 8003d18:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d008      	beq.n	8003d32 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8d9 	bl	8003ee4 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 80ca 	bne.w	8003ed4 <HAL_SD_IRQHandler+0x298>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 80c3 	bne.w	8003ed4 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d58:	f022 0208 	bic.w	r2, r2, #8
 8003d5c:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f005 fae0 	bl	800932c <HAL_SD_TxCpltCallback>
}
 8003d6c:	e0b2      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fe08 	bl	800499c <SD_Write_IT>
}
 8003d8c:	e0a2      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fdd0 	bl	800494c <SD_Read_IT>
}
 8003dac:	e092      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 808b 	beq.w	8003ed4 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d005      	beq.n	8003dd8 <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd0:	f043 0202 	orr.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	f043 0208 	orr.w	r2, r3, #8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	f003 0310 	and.w	r3, r3, #16
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e3a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d036      	beq.n	8003eba <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d011      	beq.n	8003e78 <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <HAL_SD_IRQHandler+0x2a0>)
 8003e5a:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fd fc19 	bl	8001698 <HAL_DMA_Abort_IT>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d033      	beq.n	8003ed4 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fb54 	bl	800451e <SD_DMATxAbort>
}
 8003e76:	e02d      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_SD_IRQHandler+0x2a4>)
 8003e86:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd fc03 	bl	8001698 <HAL_DMA_Abort_IT>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01d      	beq.n	8003ed4 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fb7c 	bl	800459a <SD_DMARxAbort>
}
 8003ea2:	e017      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f005 fa30 	bl	8009318 <HAL_SD_AbortCallback>
}
 8003eb8:	e00c      	b.n	8003ed4 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f808 	bl	8003ee4 <HAL_SD_ErrorCallback>
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	0800451f 	.word	0x0800451f
 8003ee0:	0800459b 	.word	0x0800459b

08003ee4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ef8:	b490      	push	{r4, r7}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0a:	0e1b      	lsrs	r3, r3, #24
 8003f0c:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	0e1b      	lsrs	r3, r3, #24
 8003f76:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f88:	0c1b      	lsrs	r3, r3, #16
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	88db      	ldrh	r3, [r3, #6]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	09db      	lsrs	r3, r3, #7
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	099b      	lsrs	r3, r3, #6
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 8086 	bne.w	800411c <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	029b      	lsls	r3, r3, #10
 8004014:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004020:	b2db      	uxtb	r3, r3
 8004022:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	431a      	orrs	r2, r3
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004036:	0e1b      	lsrs	r3, r3, #24
 8004038:	b2db      	uxtb	r3, r3
 800403a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	099b      	lsrs	r3, r3, #6
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	431a      	orrs	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	b2da      	uxtb	r2, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	b2da      	uxtb	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2db      	uxtb	r3, r3
 8004074:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	b2da      	uxtb	r2, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	089b      	lsrs	r3, r3, #2
 800408a:	b2db      	uxtb	r3, r3
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	b2da      	uxtb	r2, r3
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	7e1b      	ldrb	r3, [r3, #24]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	09db      	lsrs	r3, r3, #7
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	7e1b      	ldrb	r3, [r3, #24]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3302      	adds	r3, #2
 80040de:	2201      	movs	r2, #1
 80040e0:	409a      	lsls	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	fb02 f203 	mul.w	r2, r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	7a1b      	ldrb	r3, [r3, #8]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	2301      	movs	r3, #1
 80040f8:	4093      	lsls	r3, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004108:	0a52      	lsrs	r2, r2, #9
 800410a:	fb02 f203 	mul.w	r2, r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004118:	661a      	str	r2, [r3, #96]	; 0x60
 800411a:	e051      	b.n	80041c0 <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	2b01      	cmp	r3, #1
 8004122:	d13c      	bne.n	800419e <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004128:	b2db      	uxtb	r3, r3
 800412a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413c:	0e1b      	lsrs	r3, r3, #24
 800413e:	b2db      	uxtb	r3, r3
 8004140:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	431a      	orrs	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	b2db      	uxtb	r3, r3
 8004158:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	431a      	orrs	r2, r3
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800416a:	0a1b      	lsrs	r3, r3, #8
 800416c:	b2db      	uxtb	r3, r3
 800416e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f04f 0400 	mov.w	r4, #0
 8004178:	3301      	adds	r3, #1
 800417a:	f144 0400 	adc.w	r4, r4, #0
 800417e:	029a      	lsls	r2, r3, #10
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	655a      	str	r2, [r3, #84]	; 0x54
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004192:	659a      	str	r2, [r3, #88]	; 0x58
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	661a      	str	r2, [r3, #96]	; 0x60
 800419c:	e010      	b.n	80041c0 <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c1      	b.n	8004344 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	099b      	lsrs	r3, r3, #6
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	7e9b      	ldrb	r3, [r3, #26]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	09db      	lsrs	r3, r3, #7
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4313      	orrs	r3, r2
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420c:	b2da      	uxtb	r2, r3
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0e1b      	lsrs	r3, r3, #24
 8004218:	b2db      	uxtb	r3, r3
 800421a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	09db      	lsrs	r3, r3, #7
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	b2da      	uxtb	r2, r3
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	b2db      	uxtb	r3, r3
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	b2db      	uxtb	r3, r3
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	b2da      	uxtb	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004262:	0c1b      	lsrs	r3, r3, #16
 8004264:	b2db      	uxtb	r3, r3
 8004266:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	7fdb      	ldrb	r3, [r3, #31]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	099b      	lsrs	r3, r3, #6
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b2da      	uxtb	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	095b      	lsrs	r3, r3, #5
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	0a1b      	lsrs	r3, r3, #8
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	09db      	lsrs	r3, r3, #7
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	095b      	lsrs	r3, r3, #5
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0303 	and.w	r3, r3, #3
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	b2da      	uxtb	r2, r3
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	b2db      	uxtb	r3, r3
 8004326:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	085b      	lsrs	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004332:	b2da      	uxtb	r2, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bc90      	pop	{r4, r7}
 800434c:	4770      	bx	lr

0800434e <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	370c      	adds	r7, #12
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b086      	sub	sp, #24
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80043ae:	2304      	movs	r3, #4
 80043b0:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 80043ba:	f107 030c 	add.w	r3, r7, #12
 80043be:	4619      	mov	r1, r3
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fa99 	bl	80048f8 <SD_SendStatus>
 80043c6:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	0a5b      	lsrs	r3, r3, #9
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	6812      	ldr	r2, [r2, #0]
 8004406:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800440c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800440e:	bf00      	nop
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004426:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004428:	2300      	movs	r3, #0
 800442a:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b82      	cmp	r3, #130	; 0x82
 8004432:	d111      	bne.n	8004458 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f001 fc47 	bl	8005ccc <SDMMC_CmdStopTransfer>
 800443e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff fd46 	bl	8003ee4 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004462:	f022 0208 	bic.w	r2, r2, #8
 8004466:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004470:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f004 ff60 	bl	8009340 <HAL_SD_RxCpltCallback>
#endif
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004494:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7fd faaa 	bl	80019f0 <HAL_DMA_GetError>
 800449c:	4603      	mov	r3, r0
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d039      	beq.n	8004516 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d004      	beq.n	80044b6 <SD_DMAError+0x2e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d12c      	bne.n	8004510 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80044be:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044ca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f7ff ff62 	bl	80043a6 <HAL_SD_GetCardState>
 80044e2:	4603      	mov	r3, r0
 80044e4:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044e6:	7afb      	ldrb	r3, [r7, #11]
 80044e8:	2b06      	cmp	r3, #6
 80044ea:	d002      	beq.n	80044f2 <SD_DMAError+0x6a>
 80044ec:	7afb      	ldrb	r3, [r7, #11]
 80044ee:	2b05      	cmp	r3, #5
 80044f0:	d10a      	bne.n	8004508 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 fbe8 	bl	8005ccc <SDMMC_CmdStopTransfer>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f7ff fce7 	bl	8003ee4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d127      	bne.n	8004592 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f7ff ff2f 	bl	80043a6 <HAL_SD_GetCardState>
 8004548:	4603      	mov	r3, r0
 800454a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800455a:	7afb      	ldrb	r3, [r7, #11]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d002      	beq.n	8004566 <SD_DMATxAbort+0x48>
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d115      	bne.n	8004592 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fbae 	bl	8005ccc <SDMMC_CmdStopTransfer>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	431a      	orrs	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f004 fec7 	bl	8009318 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 800458a:	e002      	b.n	8004592 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fca9 	bl	8003ee4 <HAL_SD_ErrorCallback>
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d127      	bne.n	800460e <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fef1 	bl	80043a6 <HAL_SD_GetCardState>
 80045c4:	4603      	mov	r3, r0
 80045c6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045d6:	7afb      	ldrb	r3, [r7, #11]
 80045d8:	2b06      	cmp	r3, #6
 80045da:	d002      	beq.n	80045e2 <SD_DMARxAbort+0x48>
 80045dc:	7afb      	ldrb	r3, [r7, #11]
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d115      	bne.n	800460e <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f001 fb70 	bl	8005ccc <SDMMC_CmdStopTransfer>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	431a      	orrs	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f004 fe89 	bl	8009318 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8004606:	e002      	b.n	800460e <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fc6b 	bl	8003ee4 <HAL_SD_ErrorCallback>
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004616:	b5b0      	push	{r4, r5, r7, lr}
 8004618:	b094      	sub	sp, #80	; 0x50
 800461a:	af04      	add	r7, sp, #16
 800461c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800461e:	2300      	movs	r3, #0
 8004620:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fa14 	bl	8005a58 <SDMMC_GetPowerState>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d102      	bne.n	800463c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004636:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800463a:	e0b1      	b.n	80047a0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	2b03      	cmp	r3, #3
 8004642:	d02f      	beq.n	80046a4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f001 fc13 	bl	8005e74 <SDMMC_CmdSendCID>
 800464e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <SD_InitCard+0x44>
    {
      return errorstate;
 8004656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004658:	e0a2      	b.n	80047a0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f001 fa3e 	bl	8005ae2 <SDMMC_GetResponse>
 8004666:	4602      	mov	r2, r0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2104      	movs	r1, #4
 8004672:	4618      	mov	r0, r3
 8004674:	f001 fa35 	bl	8005ae2 <SDMMC_GetResponse>
 8004678:	4602      	mov	r2, r0
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2108      	movs	r1, #8
 8004684:	4618      	mov	r0, r3
 8004686:	f001 fa2c 	bl	8005ae2 <SDMMC_GetResponse>
 800468a:	4602      	mov	r2, r0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	210c      	movs	r1, #12
 8004696:	4618      	mov	r0, r3
 8004698:	f001 fa23 	bl	8005ae2 <SDMMC_GetResponse>
 800469c:	4602      	mov	r2, r0
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d00d      	beq.n	80046c8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f107 020e 	add.w	r2, r7, #14
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fc1d 	bl	8005ef6 <SDMMC_CmdSetRelAdd>
 80046bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	e06b      	b.n	80047a0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d036      	beq.n	800473e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046d0:	89fb      	ldrh	r3, [r7, #14]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e0:	041b      	lsls	r3, r3, #16
 80046e2:	4619      	mov	r1, r3
 80046e4:	4610      	mov	r0, r2
 80046e6:	f001 fbe5 	bl	8005eb4 <SDMMC_CmdSendCSD>
 80046ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <SD_InitCard+0xe0>
    {
      return errorstate;
 80046f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f4:	e054      	b.n	80047a0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f9f0 	bl	8005ae2 <SDMMC_GetResponse>
 8004702:	4602      	mov	r2, r0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2104      	movs	r1, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f001 f9e7 	bl	8005ae2 <SDMMC_GetResponse>
 8004714:	4602      	mov	r2, r0
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2108      	movs	r1, #8
 8004720:	4618      	mov	r0, r3
 8004722:	f001 f9de 	bl	8005ae2 <SDMMC_GetResponse>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	210c      	movs	r1, #12
 8004732:	4618      	mov	r0, r3
 8004734:	f001 f9d5 	bl	8005ae2 <SDMMC_GetResponse>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2104      	movs	r1, #4
 8004744:	4618      	mov	r0, r3
 8004746:	f001 f9cc 	bl	8005ae2 <SDMMC_GetResponse>
 800474a:	4603      	mov	r3, r0
 800474c:	0d1a      	lsrs	r2, r3, #20
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7ff fbcd 	bl	8003ef8 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6819      	ldr	r1, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	041b      	lsls	r3, r3, #16
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	461a      	mov	r2, r3
 800476e:	4623      	mov	r3, r4
 8004770:	4608      	mov	r0, r1
 8004772:	f001 facf 	bl	8005d14 <SDMMC_CmdSelDesel>
 8004776:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <SD_InitCard+0x16c>
  {
    return errorstate;
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	e00e      	b.n	80047a0 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681d      	ldr	r5, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	466c      	mov	r4, sp
 800478a:	f103 0210 	add.w	r2, r3, #16
 800478e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004794:	3304      	adds	r3, #4
 8004796:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004798:	4628      	mov	r0, r5
 800479a:	f001 f905 	bl	80059a8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3740      	adds	r7, #64	; 0x40
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bdb0      	pop	{r4, r5, r7, pc}

080047a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	2300      	movs	r3, #0
 80047ba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f001 faca 	bl	8005d5e <SDMMC_CmdGoIdleState>
 80047ca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	e08c      	b.n	80048f0 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f001 fadf 	bl	8005d9e <SDMMC_CmdOperCond>
 80047e0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d03d      	beq.n	8004864 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80047ee:	e032      	b.n	8004856 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60ba      	str	r2, [r7, #8]
 80047f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d102      	bne.n	8004804 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80047fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004802:	e075      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2100      	movs	r1, #0
 800480a:	4618      	mov	r0, r3
 800480c:	f001 fae8 	bl	8005de0 <SDMMC_CmdAppCommand>
 8004810:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004818:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800481c:	e068      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f001 faff 	bl	8005e28 <SDMMC_CmdAppOperCommand>
 800482a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004832:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004836:	e05b      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2100      	movs	r1, #0
 800483e:	4618      	mov	r0, r3
 8004840:	f001 f94f 	bl	8005ae2 <SDMMC_GetResponse>
 8004844:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	0fdb      	lsrs	r3, r3, #31
 800484a:	2b01      	cmp	r3, #1
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c9      	beq.n	80047f0 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
 8004862:	e044      	b.n	80048ee <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800486a:	e031      	b.n	80048d0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	60ba      	str	r2, [r7, #8]
 8004872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004876:	4293      	cmp	r3, r2
 8004878:	d102      	bne.n	8004880 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800487a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800487e:	e037      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 faaa 	bl	8005de0 <SDMMC_CmdAppCommand>
 800488c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <SD_PowerON+0xf0>
      {
        return errorstate;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	e02b      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80048a0:	4618      	mov	r0, r3
 80048a2:	f001 fac1 	bl	8005e28 <SDMMC_CmdAppOperCommand>
 80048a6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <SD_PowerON+0x10a>
      {
        return errorstate;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	e01e      	b.n	80048f0 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 f912 	bl	8005ae2 <SDMMC_GetResponse>
 80048be:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	0fdb      	lsrs	r3, r3, #31
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0ca      	beq.n	800486c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	645a      	str	r2, [r3, #68]	; 0x44
 80048e6:	e002      	b.n	80048ee <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3718      	adds	r7, #24
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800490c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004910:	e018      	b.n	8004944 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491a:	041b      	lsls	r3, r3, #16
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f001 fb0c 	bl	8005f3c <SDMMC_CmdSendStatus>
 8004924:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <SD_SendStatus+0x38>
  {
    return errorstate;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e009      	b.n	8004944 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f8d3 	bl	8005ae2 <SDMMC_GetResponse>
 800493c:	4602      	mov	r2, r0
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495c:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	e00d      	b.n	8004980 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	18d4      	adds	r4, r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f845 	bl	8005a00 <SDMMC_ReadFIFO>
 8004976:	4603      	mov	r3, r0
 8004978:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3301      	adds	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2b07      	cmp	r3, #7
 8004984:	d9ee      	bls.n	8004964 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	f103 0220 	add.w	r2, r3, #32
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	bd90      	pop	{r4, r7, pc}

0800499c <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e00b      	b.n	80049cc <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	4413      	add	r3, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	f001 f82a 	bl	8005a1a <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3301      	adds	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b07      	cmp	r3, #7
 80049d0:	d9f0      	bls.n	80049b4 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f103 0220 	add.w	r2, r3, #32
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e040      	b.n	8004a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d106      	bne.n	8004a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f005 fce8 	bl	800a3e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2224      	movs	r2, #36	; 0x24
 8004a14:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	f022 0201 	bic.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fa84 	bl	8004f34 <UART_SetConfig>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e022      	b.n	8004a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d002      	beq.n	8004a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fd1c 	bl	800547c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	6852      	ldr	r2, [r2, #4]
 8004a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a62:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fda3 	bl	80055c0 <UART_CheckIdleState>
 8004a7a:	4603      	mov	r3, r0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	f040 808a 	bne.w	8004bb0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_UART_Receive_IT+0x24>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e082      	b.n	8004bb2 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Receive_IT+0x36>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e07b      	b.n	8004bb2 <HAL_UART_Receive_IT+0x12e>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d10e      	bne.n	8004b06 <HAL_UART_Receive_IT+0x82>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <HAL_UART_Receive_IT+0x78>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004af6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004afa:	e02d      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b04:	e028      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <HAL_UART_Receive_IT+0xa6>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <HAL_UART_Receive_IT+0x9c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	22ff      	movs	r2, #255	; 0xff
 8004b1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b1e:	e01b      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	227f      	movs	r2, #127	; 0x7f
 8004b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b28:	e016      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b32:	d10d      	bne.n	8004b50 <HAL_UART_Receive_IT+0xcc>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <HAL_UART_Receive_IT+0xc2>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	227f      	movs	r2, #127	; 0x7f
 8004b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b44:	e008      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	223f      	movs	r2, #63	; 0x3f
 8004b4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004b4e:	e003      	b.n	8004b58 <HAL_UART_Receive_IT+0xd4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2222      	movs	r2, #34	; 0x22
 8004b62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	6892      	ldr	r2, [r2, #8]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b7c:	d107      	bne.n	8004b8e <HAL_UART_Receive_IT+0x10a>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a0d      	ldr	r2, [pc, #52]	; (8004bc0 <HAL_UART_Receive_IT+0x13c>)
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60
 8004b8c:	e002      	b.n	8004b94 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <HAL_UART_Receive_IT+0x140>)
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	6812      	ldr	r2, [r2, #0]
 8004ba6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8004baa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	e000      	b.n	8004bb2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004bb0:	2302      	movs	r3, #2
  }
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	08005901 	.word	0x08005901
 8004bc4:	0800585b 	.word	0x0800585b

08004bc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d164      	bne.n	8004ca8 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_UART_Transmit_DMA+0x22>
 8004be4:	88fb      	ldrh	r3, [r7, #6]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e05d      	b.n	8004caa <HAL_UART_Transmit_DMA+0xe2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d101      	bne.n	8004bfc <HAL_UART_Transmit_DMA+0x34>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	e056      	b.n	8004caa <HAL_UART_Transmit_DMA+0xe2>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	88fa      	ldrh	r2, [r7, #6]
 8004c16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2221      	movs	r2, #33	; 0x21
 8004c24:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d02a      	beq.n	8004c84 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c32:	4a20      	ldr	r2, [pc, #128]	; (8004cb4 <HAL_UART_Transmit_DMA+0xec>)
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c3a:	4a1f      	ldr	r2, [pc, #124]	; (8004cb8 <HAL_UART_Transmit_DMA+0xf0>)
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c42:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <HAL_UART_Transmit_DMA+0xf4>)
 8004c44:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c56:	4619      	mov	r1, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3328      	adds	r3, #40	; 0x28
 8004c5e:	461a      	mov	r2, r3
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	f7fc fcb9 	bl	80015d8 <HAL_DMA_Start_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00b      	beq.n	8004c84 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2210      	movs	r2, #16
 8004c70:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e012      	b.n	8004caa <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	6892      	ldr	r2, [r2, #8]
 8004c9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ca2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08005719 	.word	0x08005719
 8004cb8:	08005769 	.word	0x08005769
 8004cbc:	08005785 	.word	0x08005785

08004cc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f003 030f 	and.w	r3, r3, #15
 8004ce6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d113      	bne.n	8004d16 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00e      	beq.n	8004d16 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d009      	beq.n	8004d16 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80eb 	beq.w	8004ee2 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	4798      	blx	r3
      }
      return;
 8004d14:	e0e5      	b.n	8004ee2 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80c0 	beq.w	8004e9e <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80b5 	beq.w	8004e9e <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00e      	beq.n	8004d5c <HAL_UART_IRQHandler+0x9c>
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d54:	f043 0201 	orr.w	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00e      	beq.n	8004d84 <HAL_UART_IRQHandler+0xc4>
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d009      	beq.n	8004d84 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2202      	movs	r2, #2
 8004d76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0304 	and.w	r3, r3, #4
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <HAL_UART_IRQHandler+0xec>
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d009      	beq.n	8004dac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2204      	movs	r2, #4
 8004d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da4:	f043 0202 	orr.w	r2, r3, #2
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	f003 0308 	and.w	r3, r3, #8
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d013      	beq.n	8004dde <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d104      	bne.n	8004dca <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2208      	movs	r2, #8
 8004dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dd6:	f043 0208 	orr.w	r2, r3, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d07f      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e0e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d004      	beq.n	8004e28 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d031      	beq.n	8004e8c <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fc55 	bl	80056d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e38:	2b40      	cmp	r3, #64	; 0x40
 8004e3a:	d123      	bne.n	8004e84 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6812      	ldr	r2, [r2, #0]
 8004e44:	6892      	ldr	r2, [r2, #8]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e58:	4a26      	ldr	r2, [pc, #152]	; (8004ef4 <HAL_UART_IRQHandler+0x234>)
 8004e5a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7fc fc19 	bl	8001698 <HAL_DMA_Abort_IT>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d016      	beq.n	8004e9a <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004e76:	4610      	mov	r0, r2
 8004e78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e7a:	e00e      	b.n	8004e9a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f009 f945 	bl	800e10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e82:	e00a      	b.n	8004e9a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f009 f941 	bl	800e10c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e8a:	e006      	b.n	8004e9a <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f009 f93d 	bl	800e10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8004e98:	e025      	b.n	8004ee6 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e9a:	bf00      	nop
    return;
 8004e9c:	e023      	b.n	8004ee6 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00d      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
    }
    return;
 8004ec2:	e012      	b.n	8004eea <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <HAL_UART_IRQHandler+0x22c>
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d009      	beq.n	8004eec <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 fca5 	bl	8005828 <UART_EndTransmit_IT>
    return;
 8004ede:	bf00      	nop
 8004ee0:	e004      	b.n	8004eec <HAL_UART_IRQHandler+0x22c>
      return;
 8004ee2:	bf00      	nop
 8004ee4:	e002      	b.n	8004eec <HAL_UART_IRQHandler+0x22c>
    return;
 8004ee6:	bf00      	nop
 8004ee8:	e000      	b.n	8004eec <HAL_UART_IRQHandler+0x22c>
    return;
 8004eea:	bf00      	nop
  }

}
 8004eec:	3720      	adds	r7, #32
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	080057fd 	.word	0x080057fd

08004ef8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t temp1, temp2;
  temp1 = huart->gState;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f18:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f1e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	4313      	orrs	r3, r2
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
	...

08004f34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	4bb3      	ldr	r3, [pc, #716]	; (8005234 <UART_SetConfig+0x300>)
 8004f68:	400b      	ands	r3, r1
 8004f6a:	6939      	ldr	r1, [r7, #16]
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	6852      	ldr	r2, [r2, #4]
 8004f7a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	68d2      	ldr	r2, [r2, #12]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	6892      	ldr	r2, [r2, #8]
 8004fa0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4aa2      	ldr	r2, [pc, #648]	; (8005238 <UART_SetConfig+0x304>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d121      	bne.n	8004ff8 <UART_SetConfig+0xc4>
 8004fb4:	4ba1      	ldr	r3, [pc, #644]	; (800523c <UART_SetConfig+0x308>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d816      	bhi.n	8004ff0 <UART_SetConfig+0xbc>
 8004fc2:	a201      	add	r2, pc, #4	; (adr r2, 8004fc8 <UART_SetConfig+0x94>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fe5 	.word	0x08004fe5
 8004fd0:	08004fdf 	.word	0x08004fdf
 8004fd4:	08004feb 	.word	0x08004feb
 8004fd8:	2301      	movs	r3, #1
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	e150      	b.n	8005280 <UART_SetConfig+0x34c>
 8004fde:	2302      	movs	r3, #2
 8004fe0:	77fb      	strb	r3, [r7, #31]
 8004fe2:	e14d      	b.n	8005280 <UART_SetConfig+0x34c>
 8004fe4:	2304      	movs	r3, #4
 8004fe6:	77fb      	strb	r3, [r7, #31]
 8004fe8:	e14a      	b.n	8005280 <UART_SetConfig+0x34c>
 8004fea:	2308      	movs	r3, #8
 8004fec:	77fb      	strb	r3, [r7, #31]
 8004fee:	e147      	b.n	8005280 <UART_SetConfig+0x34c>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	bf00      	nop
 8004ff6:	e143      	b.n	8005280 <UART_SetConfig+0x34c>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a90      	ldr	r2, [pc, #576]	; (8005240 <UART_SetConfig+0x30c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d134      	bne.n	800506c <UART_SetConfig+0x138>
 8005002:	4b8e      	ldr	r3, [pc, #568]	; (800523c <UART_SetConfig+0x308>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b0c      	cmp	r3, #12
 800500e:	d829      	bhi.n	8005064 <UART_SetConfig+0x130>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0xe4>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	0800504d 	.word	0x0800504d
 800501c:	08005065 	.word	0x08005065
 8005020:	08005065 	.word	0x08005065
 8005024:	08005065 	.word	0x08005065
 8005028:	08005059 	.word	0x08005059
 800502c:	08005065 	.word	0x08005065
 8005030:	08005065 	.word	0x08005065
 8005034:	08005065 	.word	0x08005065
 8005038:	08005053 	.word	0x08005053
 800503c:	08005065 	.word	0x08005065
 8005040:	08005065 	.word	0x08005065
 8005044:	08005065 	.word	0x08005065
 8005048:	0800505f 	.word	0x0800505f
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e116      	b.n	8005280 <UART_SetConfig+0x34c>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e113      	b.n	8005280 <UART_SetConfig+0x34c>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e110      	b.n	8005280 <UART_SetConfig+0x34c>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e10d      	b.n	8005280 <UART_SetConfig+0x34c>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	bf00      	nop
 800506a:	e109      	b.n	8005280 <UART_SetConfig+0x34c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a74      	ldr	r2, [pc, #464]	; (8005244 <UART_SetConfig+0x310>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d120      	bne.n	80050b8 <UART_SetConfig+0x184>
 8005076:	4b71      	ldr	r3, [pc, #452]	; (800523c <UART_SetConfig+0x308>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005080:	2b10      	cmp	r3, #16
 8005082:	d00f      	beq.n	80050a4 <UART_SetConfig+0x170>
 8005084:	2b10      	cmp	r3, #16
 8005086:	d802      	bhi.n	800508e <UART_SetConfig+0x15a>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <UART_SetConfig+0x164>
 800508c:	e010      	b.n	80050b0 <UART_SetConfig+0x17c>
 800508e:	2b20      	cmp	r3, #32
 8005090:	d005      	beq.n	800509e <UART_SetConfig+0x16a>
 8005092:	2b30      	cmp	r3, #48	; 0x30
 8005094:	d009      	beq.n	80050aa <UART_SetConfig+0x176>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x17c>
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e0f0      	b.n	8005280 <UART_SetConfig+0x34c>
 800509e:	2302      	movs	r3, #2
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e0ed      	b.n	8005280 <UART_SetConfig+0x34c>
 80050a4:	2304      	movs	r3, #4
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e0ea      	b.n	8005280 <UART_SetConfig+0x34c>
 80050aa:	2308      	movs	r3, #8
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e0e7      	b.n	8005280 <UART_SetConfig+0x34c>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	bf00      	nop
 80050b6:	e0e3      	b.n	8005280 <UART_SetConfig+0x34c>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a62      	ldr	r2, [pc, #392]	; (8005248 <UART_SetConfig+0x314>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d120      	bne.n	8005104 <UART_SetConfig+0x1d0>
 80050c2:	4b5e      	ldr	r3, [pc, #376]	; (800523c <UART_SetConfig+0x308>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d00f      	beq.n	80050f0 <UART_SetConfig+0x1bc>
 80050d0:	2b40      	cmp	r3, #64	; 0x40
 80050d2:	d802      	bhi.n	80050da <UART_SetConfig+0x1a6>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <UART_SetConfig+0x1b0>
 80050d8:	e010      	b.n	80050fc <UART_SetConfig+0x1c8>
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d005      	beq.n	80050ea <UART_SetConfig+0x1b6>
 80050de:	2bc0      	cmp	r3, #192	; 0xc0
 80050e0:	d009      	beq.n	80050f6 <UART_SetConfig+0x1c2>
 80050e2:	e00b      	b.n	80050fc <UART_SetConfig+0x1c8>
 80050e4:	2300      	movs	r3, #0
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e0ca      	b.n	8005280 <UART_SetConfig+0x34c>
 80050ea:	2302      	movs	r3, #2
 80050ec:	77fb      	strb	r3, [r7, #31]
 80050ee:	e0c7      	b.n	8005280 <UART_SetConfig+0x34c>
 80050f0:	2304      	movs	r3, #4
 80050f2:	77fb      	strb	r3, [r7, #31]
 80050f4:	e0c4      	b.n	8005280 <UART_SetConfig+0x34c>
 80050f6:	2308      	movs	r3, #8
 80050f8:	77fb      	strb	r3, [r7, #31]
 80050fa:	e0c1      	b.n	8005280 <UART_SetConfig+0x34c>
 80050fc:	2310      	movs	r3, #16
 80050fe:	77fb      	strb	r3, [r7, #31]
 8005100:	bf00      	nop
 8005102:	e0bd      	b.n	8005280 <UART_SetConfig+0x34c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a50      	ldr	r2, [pc, #320]	; (800524c <UART_SetConfig+0x318>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d124      	bne.n	8005158 <UART_SetConfig+0x224>
 800510e:	4b4b      	ldr	r3, [pc, #300]	; (800523c <UART_SetConfig+0x308>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d012      	beq.n	8005144 <UART_SetConfig+0x210>
 800511e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005122:	d802      	bhi.n	800512a <UART_SetConfig+0x1f6>
 8005124:	2b00      	cmp	r3, #0
 8005126:	d007      	beq.n	8005138 <UART_SetConfig+0x204>
 8005128:	e012      	b.n	8005150 <UART_SetConfig+0x21c>
 800512a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512e:	d006      	beq.n	800513e <UART_SetConfig+0x20a>
 8005130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005134:	d009      	beq.n	800514a <UART_SetConfig+0x216>
 8005136:	e00b      	b.n	8005150 <UART_SetConfig+0x21c>
 8005138:	2300      	movs	r3, #0
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e0a0      	b.n	8005280 <UART_SetConfig+0x34c>
 800513e:	2302      	movs	r3, #2
 8005140:	77fb      	strb	r3, [r7, #31]
 8005142:	e09d      	b.n	8005280 <UART_SetConfig+0x34c>
 8005144:	2304      	movs	r3, #4
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e09a      	b.n	8005280 <UART_SetConfig+0x34c>
 800514a:	2308      	movs	r3, #8
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e097      	b.n	8005280 <UART_SetConfig+0x34c>
 8005150:	2310      	movs	r3, #16
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	bf00      	nop
 8005156:	e093      	b.n	8005280 <UART_SetConfig+0x34c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3c      	ldr	r2, [pc, #240]	; (8005250 <UART_SetConfig+0x31c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d124      	bne.n	80051ac <UART_SetConfig+0x278>
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <UART_SetConfig+0x308>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d012      	beq.n	8005198 <UART_SetConfig+0x264>
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005176:	d802      	bhi.n	800517e <UART_SetConfig+0x24a>
 8005178:	2b00      	cmp	r3, #0
 800517a:	d007      	beq.n	800518c <UART_SetConfig+0x258>
 800517c:	e012      	b.n	80051a4 <UART_SetConfig+0x270>
 800517e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005182:	d006      	beq.n	8005192 <UART_SetConfig+0x25e>
 8005184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005188:	d009      	beq.n	800519e <UART_SetConfig+0x26a>
 800518a:	e00b      	b.n	80051a4 <UART_SetConfig+0x270>
 800518c:	2301      	movs	r3, #1
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e076      	b.n	8005280 <UART_SetConfig+0x34c>
 8005192:	2302      	movs	r3, #2
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e073      	b.n	8005280 <UART_SetConfig+0x34c>
 8005198:	2304      	movs	r3, #4
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e070      	b.n	8005280 <UART_SetConfig+0x34c>
 800519e:	2308      	movs	r3, #8
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e06d      	b.n	8005280 <UART_SetConfig+0x34c>
 80051a4:	2310      	movs	r3, #16
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	bf00      	nop
 80051aa:	e069      	b.n	8005280 <UART_SetConfig+0x34c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a28      	ldr	r2, [pc, #160]	; (8005254 <UART_SetConfig+0x320>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d124      	bne.n	8005200 <UART_SetConfig+0x2cc>
 80051b6:	4b21      	ldr	r3, [pc, #132]	; (800523c <UART_SetConfig+0x308>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c4:	d012      	beq.n	80051ec <UART_SetConfig+0x2b8>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d802      	bhi.n	80051d2 <UART_SetConfig+0x29e>
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <UART_SetConfig+0x2ac>
 80051d0:	e012      	b.n	80051f8 <UART_SetConfig+0x2c4>
 80051d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d6:	d006      	beq.n	80051e6 <UART_SetConfig+0x2b2>
 80051d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051dc:	d009      	beq.n	80051f2 <UART_SetConfig+0x2be>
 80051de:	e00b      	b.n	80051f8 <UART_SetConfig+0x2c4>
 80051e0:	2300      	movs	r3, #0
 80051e2:	77fb      	strb	r3, [r7, #31]
 80051e4:	e04c      	b.n	8005280 <UART_SetConfig+0x34c>
 80051e6:	2302      	movs	r3, #2
 80051e8:	77fb      	strb	r3, [r7, #31]
 80051ea:	e049      	b.n	8005280 <UART_SetConfig+0x34c>
 80051ec:	2304      	movs	r3, #4
 80051ee:	77fb      	strb	r3, [r7, #31]
 80051f0:	e046      	b.n	8005280 <UART_SetConfig+0x34c>
 80051f2:	2308      	movs	r3, #8
 80051f4:	77fb      	strb	r3, [r7, #31]
 80051f6:	e043      	b.n	8005280 <UART_SetConfig+0x34c>
 80051f8:	2310      	movs	r3, #16
 80051fa:	77fb      	strb	r3, [r7, #31]
 80051fc:	bf00      	nop
 80051fe:	e03f      	b.n	8005280 <UART_SetConfig+0x34c>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a14      	ldr	r2, [pc, #80]	; (8005258 <UART_SetConfig+0x324>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d138      	bne.n	800527c <UART_SetConfig+0x348>
 800520a:	4b0c      	ldr	r3, [pc, #48]	; (800523c <UART_SetConfig+0x308>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005218:	d026      	beq.n	8005268 <UART_SetConfig+0x334>
 800521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800521e:	d802      	bhi.n	8005226 <UART_SetConfig+0x2f2>
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <UART_SetConfig+0x328>
 8005224:	e026      	b.n	8005274 <UART_SetConfig+0x340>
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d01a      	beq.n	8005262 <UART_SetConfig+0x32e>
 800522c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005230:	d01d      	beq.n	800526e <UART_SetConfig+0x33a>
 8005232:	e01f      	b.n	8005274 <UART_SetConfig+0x340>
 8005234:	efff69f3 	.word	0xefff69f3
 8005238:	40011000 	.word	0x40011000
 800523c:	40023800 	.word	0x40023800
 8005240:	40004400 	.word	0x40004400
 8005244:	40004800 	.word	0x40004800
 8005248:	40004c00 	.word	0x40004c00
 800524c:	40005000 	.word	0x40005000
 8005250:	40011400 	.word	0x40011400
 8005254:	40007800 	.word	0x40007800
 8005258:	40007c00 	.word	0x40007c00
 800525c:	2300      	movs	r3, #0
 800525e:	77fb      	strb	r3, [r7, #31]
 8005260:	e00e      	b.n	8005280 <UART_SetConfig+0x34c>
 8005262:	2302      	movs	r3, #2
 8005264:	77fb      	strb	r3, [r7, #31]
 8005266:	e00b      	b.n	8005280 <UART_SetConfig+0x34c>
 8005268:	2304      	movs	r3, #4
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e008      	b.n	8005280 <UART_SetConfig+0x34c>
 800526e:	2308      	movs	r3, #8
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e005      	b.n	8005280 <UART_SetConfig+0x34c>
 8005274:	2310      	movs	r3, #16
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	bf00      	nop
 800527a:	e001      	b.n	8005280 <UART_SetConfig+0x34c>
 800527c:	2310      	movs	r3, #16
 800527e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005288:	d17d      	bne.n	8005386 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800528a:	7ffb      	ldrb	r3, [r7, #31]
 800528c:	2b08      	cmp	r3, #8
 800528e:	d85a      	bhi.n	8005346 <UART_SetConfig+0x412>
 8005290:	a201      	add	r2, pc, #4	; (adr r2, 8005298 <UART_SetConfig+0x364>)
 8005292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005296:	bf00      	nop
 8005298:	080052bd 	.word	0x080052bd
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052f9 	.word	0x080052f9
 80052a4:	08005347 	.word	0x08005347
 80052a8:	08005311 	.word	0x08005311
 80052ac:	08005347 	.word	0x08005347
 80052b0:	08005347 	.word	0x08005347
 80052b4:	08005347 	.word	0x08005347
 80052b8:	0800532f 	.word	0x0800532f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80052bc:	f7fd faf2 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 80052c0:	4603      	mov	r3, r0
 80052c2:	005a      	lsls	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	441a      	add	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	61bb      	str	r3, [r7, #24]
        break;
 80052d8:	e038      	b.n	800534c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80052da:	f7fd faf7 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 80052de:	4603      	mov	r3, r0
 80052e0:	005a      	lsls	r2, r3, #1
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	441a      	add	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	61bb      	str	r3, [r7, #24]
        break;
 80052f6:	e029      	b.n	800534c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	085a      	lsrs	r2, r3, #1
 80052fe:	4b5d      	ldr	r3, [pc, #372]	; (8005474 <UART_SetConfig+0x540>)
 8005300:	4413      	add	r3, r2
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	6852      	ldr	r2, [r2, #4]
 8005306:	fbb3 f3f2 	udiv	r3, r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	61bb      	str	r3, [r7, #24]
        break;
 800530e:	e01d      	b.n	800534c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005310:	f7fd f9e6 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 8005314:	4603      	mov	r3, r0
 8005316:	005a      	lsls	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	441a      	add	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	b29b      	uxth	r3, r3
 800532a:	61bb      	str	r3, [r7, #24]
        break;
 800532c:	e00e      	b.n	800534c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005340:	b29b      	uxth	r3, r3
 8005342:	61bb      	str	r3, [r7, #24]
        break;
 8005344:	e002      	b.n	800534c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
        break;
 800534a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b0f      	cmp	r3, #15
 8005350:	d916      	bls.n	8005380 <UART_SetConfig+0x44c>
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	d212      	bcs.n	8005380 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	b29b      	uxth	r3, r3
 800535e:	f023 030f 	bic.w	r3, r3, #15
 8005362:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	b29b      	uxth	r3, r3
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	b29a      	uxth	r2, r3
 8005370:	89fb      	ldrh	r3, [r7, #14]
 8005372:	4313      	orrs	r3, r2
 8005374:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	89fa      	ldrh	r2, [r7, #14]
 800537c:	60da      	str	r2, [r3, #12]
 800537e:	e06e      	b.n	800545e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]
 8005384:	e06b      	b.n	800545e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d857      	bhi.n	800543c <UART_SetConfig+0x508>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x460>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053b9 	.word	0x080053b9
 8005398:	080053d5 	.word	0x080053d5
 800539c:	080053f1 	.word	0x080053f1
 80053a0:	0800543d 	.word	0x0800543d
 80053a4:	08005409 	.word	0x08005409
 80053a8:	0800543d 	.word	0x0800543d
 80053ac:	0800543d 	.word	0x0800543d
 80053b0:	0800543d 	.word	0x0800543d
 80053b4:	08005425 	.word	0x08005425
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80053b8:	f7fd fa74 	bl	80028a4 <HAL_RCC_GetPCLK1Freq>
 80053bc:	4602      	mov	r2, r0
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	085b      	lsrs	r3, r3, #1
 80053c4:	441a      	add	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	61bb      	str	r3, [r7, #24]
        break;
 80053d2:	e036      	b.n	8005442 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80053d4:	f7fd fa7a 	bl	80028cc <HAL_RCC_GetPCLK2Freq>
 80053d8:	4602      	mov	r2, r0
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	085b      	lsrs	r3, r3, #1
 80053e0:	441a      	add	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	61bb      	str	r3, [r7, #24]
        break;
 80053ee:	e028      	b.n	8005442 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	085a      	lsrs	r2, r3, #1
 80053f6:	4b20      	ldr	r3, [pc, #128]	; (8005478 <UART_SetConfig+0x544>)
 80053f8:	4413      	add	r3, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6852      	ldr	r2, [r2, #4]
 80053fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005402:	b29b      	uxth	r3, r3
 8005404:	61bb      	str	r3, [r7, #24]
        break;
 8005406:	e01c      	b.n	8005442 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005408:	f7fd f96a 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	441a      	add	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	fbb2 f3f3 	udiv	r3, r2, r3
 800541e:	b29b      	uxth	r3, r3
 8005420:	61bb      	str	r3, [r7, #24]
        break;
 8005422:	e00e      	b.n	8005442 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	085b      	lsrs	r3, r3, #1
 800542a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	b29b      	uxth	r3, r3
 8005438:	61bb      	str	r3, [r7, #24]
        break;
 800543a:	e002      	b.n	8005442 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
        break;
 8005440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b0f      	cmp	r3, #15
 8005446:	d908      	bls.n	800545a <UART_SetConfig+0x526>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800544e:	d204      	bcs.n	800545a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	e001      	b.n	800545e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800546a:	7dfb      	ldrb	r3, [r7, #23]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	01e84800 	.word	0x01e84800
 8005478:	00f42400 	.word	0x00f42400

0800547c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00a      	beq.n	80054a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6812      	ldr	r2, [r2, #0]
 8005498:	6852      	ldr	r2, [r2, #4]
 800549a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6852      	ldr	r2, [r2, #4]
 80054bc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054c4:	430a      	orrs	r2, r1
 80054c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00a      	beq.n	80054ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	6852      	ldr	r2, [r2, #4]
 80054de:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054e6:	430a      	orrs	r2, r1
 80054e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d00a      	beq.n	800550c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6852      	ldr	r2, [r2, #4]
 8005500:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005510:	f003 0310 	and.w	r3, r3, #16
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00a      	beq.n	800552e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	6812      	ldr	r2, [r2, #0]
 8005520:	6892      	ldr	r2, [r2, #8]
 8005522:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800552a:	430a      	orrs	r2, r1
 800552c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6812      	ldr	r2, [r2, #0]
 8005542:	6892      	ldr	r2, [r2, #8]
 8005544:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d01a      	beq.n	8005592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	6852      	ldr	r2, [r2, #4]
 8005566:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800556e:	430a      	orrs	r2, r1
 8005570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800557a:	d10a      	bne.n	8005592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	6852      	ldr	r2, [r2, #4]
 8005586:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800558e:	430a      	orrs	r2, r1
 8005590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6812      	ldr	r2, [r2, #0]
 80055a6:	6852      	ldr	r2, [r2, #4]
 80055a8:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055b0:	430a      	orrs	r2, r1
 80055b2:	605a      	str	r2, [r3, #4]
  }
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b086      	sub	sp, #24
 80055c4:	af02      	add	r7, sp, #8
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80055ce:	f7fb f869 	bl	80006a4 <HAL_GetTick>
 80055d2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b08      	cmp	r3, #8
 80055e0:	d10e      	bne.n	8005600 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 f814 	bl	800561e <UART_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00a      	b.n	8005616 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2220      	movs	r2, #32
 800560a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	4613      	mov	r3, r2
 800562c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800562e:	e02a      	b.n	8005686 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005636:	d026      	beq.n	8005686 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005638:	f7fb f834 	bl	80006a4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	1ad2      	subs	r2, r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	429a      	cmp	r2, r3
 8005646:	d802      	bhi.n	800564e <UART_WaitOnFlagUntilTimeout+0x30>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11b      	bne.n	8005686 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	6812      	ldr	r2, [r2, #0]
 8005658:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800565c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	6812      	ldr	r2, [r2, #0]
 8005666:	6892      	ldr	r2, [r2, #8]
 8005668:	f022 0201 	bic.w	r2, r2, #1
 800566c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e00f      	b.n	80056a6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	401a      	ands	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	429a      	cmp	r2, r3
 8005694:	bf0c      	ite	eq
 8005696:	2301      	moveq	r3, #1
 8005698:	2300      	movne	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	461a      	mov	r2, r3
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d0c5      	beq.n	8005630 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	6812      	ldr	r2, [r2, #0]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80056c4:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	6812      	ldr	r2, [r2, #0]
 80056ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6812      	ldr	r2, [r2, #0]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005724:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800572e:	d014      	beq.n	800575a <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	6812      	ldr	r2, [r2, #0]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005746:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	6812      	ldr	r2, [r2, #0]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005756:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005758:	e002      	b.n	8005760 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f008 fcb0 	bl	800e0c0 <HAL_UART_TxCpltCallback>
}
 8005760:	bf00      	nop
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f7ff fbbe 	bl	8004ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b086      	sub	sp, #24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005796:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800579c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a8:	2b80      	cmp	r3, #128	; 0x80
 80057aa:	d109      	bne.n	80057c0 <UART_DMAError+0x3c>
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	2b21      	cmp	r3, #33	; 0x21
 80057b0:	d106      	bne.n	80057c0 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80057ba:	6978      	ldr	r0, [r7, #20]
 80057bc:	f7ff ff77 	bl	80056ae <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ca:	2b40      	cmp	r3, #64	; 0x40
 80057cc:	d109      	bne.n	80057e2 <UART_DMAError+0x5e>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b22      	cmp	r3, #34	; 0x22
 80057d2:	d106      	bne.n	80057e2 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80057dc:	6978      	ldr	r0, [r7, #20]
 80057de:	f7ff ff7b 	bl	80056d8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	f043 0210 	orr.w	r2, r3, #16
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f008 fc8c 	bl	800e10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f008 fc76 	bl	800e10c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005820:	bf00      	nop
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f008 fc37 	bl	800e0c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005852:	bf00      	nop
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005868:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800586e:	2b22      	cmp	r3, #34	; 0x22
 8005870:	d13a      	bne.n	80058e8 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	89ba      	ldrh	r2, [r7, #12]
 8005880:	b2d1      	uxtb	r1, r2
 8005882:	89fa      	ldrh	r2, [r7, #14]
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	400a      	ands	r2, r1
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d121      	bne.n	80058f8 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	6892      	ldr	r2, [r2, #8]
 80058ce:	f022 0201 	bic.w	r2, r2, #1
 80058d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f008 fbff 	bl	800e0e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058e6:	e007      	b.n	80058f8 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6812      	ldr	r2, [r2, #0]
 80058f0:	6992      	ldr	r2, [r2, #24]
 80058f2:	f042 0208 	orr.w	r2, r2, #8
 80058f6:	619a      	str	r2, [r3, #24]
}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800590e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005914:	2b22      	cmp	r3, #34	; 0x22
 8005916:	d13a      	bne.n	800598e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005924:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005926:	89ba      	ldrh	r2, [r7, #12]
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	4013      	ands	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b29a      	uxth	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d121      	bne.n	800599e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6812      	ldr	r2, [r2, #0]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005968:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6812      	ldr	r2, [r2, #0]
 8005972:	6892      	ldr	r2, [r2, #8]
 8005974:	f022 0201 	bic.w	r2, r2, #1
 8005978:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f008 fbac 	bl	800e0e4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800598c:	e007      	b.n	800599e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	6992      	ldr	r2, [r2, #24]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	619a      	str	r2, [r3, #24]
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
	...

080059a8 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80059a8:	b084      	sub	sp, #16
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
 80059b2:	f107 001c 	add.w	r0, r7, #28
 80059b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80059be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80059c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80059c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80059c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80059ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80059ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80059d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80059d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <SDMMC_Init+0x54>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	b004      	add	sp, #16
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	ffff8100 	.word	0xffff8100

08005a00 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	370c      	adds	r7, #12
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8005a1a:	b480      	push	{r7}
 8005a1c:	b083      	sub	sp, #12
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2203      	movs	r2, #3
 8005a48:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0303 	and.w	r3, r3, #3
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005a92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005a98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005a9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68da      	ldr	r2, [r3, #12]
 8005aaa:	4b06      	ldr	r3, [pc, #24]	; (8005ac4 <SDMMC_SendCommand+0x50>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3714      	adds	r7, #20
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	fffff000 	.word	0xfffff000

08005ac8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	b2db      	uxtb	r3, r3
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	3314      	adds	r3, #20
 8005af4:	461a      	mov	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	4413      	add	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
}  
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	685a      	ldr	r2, [r3, #4]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b32:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005b38:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005b3e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0

}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b088      	sub	sp, #32
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005b76:	2310      	movs	r3, #16
 8005b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005b7a:	2340      	movs	r3, #64	; 0x40
 8005b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b86:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005b88:	f107 0308 	add.w	r3, r7, #8
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ff70 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	2110      	movs	r1, #16
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa1c 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005ba0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3720      	adds	r7, #32
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b088      	sub	sp, #32
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005bbe:	2311      	movs	r3, #17
 8005bc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005bc2:	2340      	movs	r3, #64	; 0x40
 8005bc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005bca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005bd0:	f107 0308 	add.w	r3, r7, #8
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f7ff ff4c 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be0:	2111      	movs	r1, #17
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9f8 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005be8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005bea:	69fb      	ldr	r3, [r7, #28]
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3720      	adds	r7, #32
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005c06:	2312      	movs	r3, #18
 8005c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c0a:	2340      	movs	r3, #64	; 0x40
 8005c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c18:	f107 0308 	add.w	r3, r7, #8
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff28 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c28:	2112      	movs	r1, #18
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f9d4 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005c30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c32:	69fb      	ldr	r3, [r7, #28]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b088      	sub	sp, #32
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005c4e:	2318      	movs	r3, #24
 8005c50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c52:	2340      	movs	r3, #64	; 0x40
 8005c54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c56:	2300      	movs	r3, #0
 8005c58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c5e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7ff ff04 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c70:	2118      	movs	r1, #24
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f9b0 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3720      	adds	r7, #32
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b088      	sub	sp, #32
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005c96:	2319      	movs	r3, #25
 8005c98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005c9a:	2340      	movs	r3, #64	; 0x40
 8005c9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ca6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ca8:	f107 0308 	add.w	r3, r7, #8
 8005cac:	4619      	mov	r1, r3
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fee0 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cb8:	2119      	movs	r1, #25
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f98c 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005cc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3720      	adds	r7, #32
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005cdc:	230c      	movs	r3, #12
 8005cde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005ce0:	2340      	movs	r3, #64	; 0x40
 8005ce2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cec:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005cee:	f107 0308 	add.w	r3, r7, #8
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff febd 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8005cfa:	4a05      	ldr	r2, [pc, #20]	; (8005d10 <SDMMC_CmdStopTransfer+0x44>)
 8005cfc:	210c      	movs	r1, #12
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f96a 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005d04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d06:	69fb      	ldr	r3, [r7, #28]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3720      	adds	r7, #32
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	05f5e100 	.word	0x05f5e100

08005d14 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08a      	sub	sp, #40	; 0x28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005d28:	2307      	movs	r3, #7
 8005d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005d2c:	2340      	movs	r3, #64	; 0x40
 8005d2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d30:	2300      	movs	r3, #0
 8005d32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d38:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d3a:	f107 0310 	add.w	r3, r7, #16
 8005d3e:	4619      	mov	r1, r3
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7ff fe97 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005d46:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4a:	2107      	movs	r1, #7
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 f943 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005d52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3728      	adds	r7, #40	; 0x28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b088      	sub	sp, #32
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d7e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005d80:	f107 0308 	add.w	r3, r7, #8
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fe74 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8f9 	bl	8005f84 <SDMMC_GetCmdError>
 8005d92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005d94:	69fb      	ldr	r3, [r7, #28]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8005d9e:	b580      	push	{r7, lr}
 8005da0:	b088      	sub	sp, #32
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005daa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005dae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005db0:	2308      	movs	r3, #8
 8005db2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005db4:	2340      	movs	r3, #64	; 0x40
 8005db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc0:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff fe53 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 faca 	bl	8006368 <SDMMC_GetCmdResp7>
 8005dd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005df2:	2337      	movs	r3, #55	; 0x37
 8005df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005df6:	2340      	movs	r3, #64	; 0x40
 8005df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e02:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e04:	f107 0308 	add.w	r3, r7, #8
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fe32 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8005e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e14:	2137      	movs	r1, #55	; 0x37
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8de 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005e1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3720      	adds	r7, #32
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <SDMMC_CmdAppOperCommand+0x48>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005e3e:	2329      	movs	r3, #41	; 0x29
 8005e40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005e42:	2340      	movs	r3, #64	; 0x40
 8005e44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e46:	2300      	movs	r3, #0
 8005e48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e4e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e50:	f107 0308 	add.w	r3, r7, #8
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fe0c 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f9e1 	bl	8006224 <SDMMC_GetCmdResp3>
 8005e62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005e64:	69fb      	ldr	r3, [r7, #28]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	80100000 	.word	0x80100000

08005e74 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b088      	sub	sp, #32
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005e84:	2302      	movs	r3, #2
 8005e86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005e88:	23c0      	movs	r3, #192	; 0xc0
 8005e8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005e90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e94:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005e96:	f107 0308 	add.w	r3, r7, #8
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff fde9 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f97e 	bl	80061a4 <SDMMC_GetCmdResp2>
 8005ea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3720      	adds	r7, #32
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005ec6:	2309      	movs	r3, #9
 8005ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005eca:	23c0      	movs	r3, #192	; 0xc0
 8005ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ed6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005ed8:	f107 0308 	add.w	r3, r7, #8
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff fdc8 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f95d 	bl	80061a4 <SDMMC_GetCmdResp2>
 8005eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3720      	adds	r7, #32
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b088      	sub	sp, #32
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f0c:	2340      	movs	r3, #64	; 0x40
 8005f0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f10:	2300      	movs	r3, #0
 8005f12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f18:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f1a:	f107 0308 	add.w	r3, r7, #8
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff fda7 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005f26:	683a      	ldr	r2, [r7, #0]
 8005f28:	2103      	movs	r1, #3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9ae 	bl	800628c <SDMMC_GetCmdResp6>
 8005f30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f32:	69fb      	ldr	r3, [r7, #28]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3720      	adds	r7, #32
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b088      	sub	sp, #32
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005f46:	2300      	movs	r3, #0
 8005f48:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005f4e:	230d      	movs	r3, #13
 8005f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005f60:	f107 0308 	add.w	r3, r7, #8
 8005f64:	4619      	mov	r1, r3
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff fd84 	bl	8005a74 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f70:	210d      	movs	r1, #13
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f830 	bl	8005fd8 <SDMMC_GetCmdResp1>
 8005f78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005f84:	b490      	push	{r4, r7}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005f8c:	4b10      	ldr	r3, [pc, #64]	; (8005fd0 <SDMMC_GetCmdError+0x4c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a10      	ldr	r2, [pc, #64]	; (8005fd4 <SDMMC_GetCmdError+0x50>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	0a5b      	lsrs	r3, r3, #9
 8005f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	1e5c      	subs	r4, r3, #1
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005fa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fac:	e00a      	b.n	8005fc4 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f2      	beq.n	8005fa0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bc90      	pop	{r4, r7}
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000010 	.word	0x20000010
 8005fd4:	10624dd3 	.word	0x10624dd3

08005fd8 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005fe6:	4b6c      	ldr	r3, [pc, #432]	; (8006198 <SDMMC_GetCmdResp1+0x1c0>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6c      	ldr	r2, [pc, #432]	; (800619c <SDMMC_GetCmdResp1+0x1c4>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	0a5b      	lsrs	r3, r3, #9
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	1e5c      	subs	r4, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d102      	bne.n	8006006 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006000:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006004:	e0c3      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f2      	beq.n	8005ff8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d004      	beq.n	8006028 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2204      	movs	r2, #4
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006024:	2304      	movs	r3, #4
 8006026:	e0b2      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800603a:	2301      	movs	r3, #1
 800603c:	e0a7      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff fd42 	bl	8005ac8 <SDMMC_GetCommandResponse>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	4293      	cmp	r3, r2
 800604c:	d001      	beq.n	8006052 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800604e:	2301      	movs	r3, #1
 8006050:	e09d      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800605a:	2100      	movs	r1, #0
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff fd40 	bl	8005ae2 <SDMMC_GetResponse>
 8006062:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4b4e      	ldr	r3, [pc, #312]	; (80061a0 <SDMMC_GetCmdResp1+0x1c8>)
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800606e:	2300      	movs	r3, #0
 8006070:	e08d      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da02      	bge.n	800607e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800607c:	e087      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	e080      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	e079      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80060a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060a8:	e071      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80060b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060b8:	e069      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80060c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c8:	e061      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80060d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80060d8:	e059      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80060e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060e8:	e051      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80060f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060f8:	e049      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006104:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006108:	e041      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8006114:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006118:	e039      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006128:	e031      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006134:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006138:	e029      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006144:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006148:	e021      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d002      	beq.n	800615a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006154:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006158:	e019      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006164:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006168:	e011      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006174:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006178:	e009      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006184:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006188:	e001      	b.n	800618e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800618a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800618e:	4618      	mov	r0, r3
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	bd90      	pop	{r4, r7, pc}
 8006196:	bf00      	nop
 8006198:	20000010 	.word	0x20000010
 800619c:	10624dd3 	.word	0x10624dd3
 80061a0:	fdffe008 	.word	0xfdffe008

080061a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80061a4:	b490      	push	{r4, r7}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80061ac:	4b1b      	ldr	r3, [pc, #108]	; (800621c <SDMMC_GetCmdResp2+0x78>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <SDMMC_GetCmdResp2+0x7c>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	0a5b      	lsrs	r3, r3, #9
 80061b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80061c0:	4623      	mov	r3, r4
 80061c2:	1e5c      	subs	r4, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80061c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80061cc:	e020      	b.n	8006210 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d0f2      	beq.n	80061c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d004      	beq.n	80061f0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2204      	movs	r2, #4
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80061ec:	2304      	movs	r3, #4
 80061ee:	e00f      	b.n	8006210 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d004      	beq.n	8006206 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006202:	2301      	movs	r3, #1
 8006204:	e004      	b.n	8006210 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800620c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3708      	adds	r7, #8
 8006214:	46bd      	mov	sp, r7
 8006216:	bc90      	pop	{r4, r7}
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	20000010 	.word	0x20000010
 8006220:	10624dd3 	.word	0x10624dd3

08006224 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006224:	b490      	push	{r4, r7}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800622c:	4b15      	ldr	r3, [pc, #84]	; (8006284 <SDMMC_GetCmdResp3+0x60>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a15      	ldr	r2, [pc, #84]	; (8006288 <SDMMC_GetCmdResp3+0x64>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0a5b      	lsrs	r3, r3, #9
 8006238:	f241 3288 	movw	r2, #5000	; 0x1388
 800623c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006240:	4623      	mov	r3, r4
 8006242:	1e5c      	subs	r4, r3, #1
 8006244:	2b00      	cmp	r3, #0
 8006246:	d102      	bne.n	800624e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800624c:	e015      	b.n	800627a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f2      	beq.n	8006240 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2204      	movs	r2, #4
 800626a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800626c:	2304      	movs	r3, #4
 800626e:	e004      	b.n	800627a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8006276:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bc90      	pop	{r4, r7}
 8006282:	4770      	bx	lr
 8006284:	20000010 	.word	0x20000010
 8006288:	10624dd3 	.word	0x10624dd3

0800628c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	460b      	mov	r3, r1
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800629a:	4b31      	ldr	r3, [pc, #196]	; (8006360 <SDMMC_GetCmdResp6+0xd4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a31      	ldr	r2, [pc, #196]	; (8006364 <SDMMC_GetCmdResp6+0xd8>)
 80062a0:	fba2 2303 	umull	r2, r3, r2, r3
 80062a4:	0a5b      	lsrs	r3, r3, #9
 80062a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062aa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80062ae:	4623      	mov	r3, r4
 80062b0:	1e5c      	subs	r4, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d102      	bne.n	80062bc <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80062b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80062ba:	e04c      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f2      	beq.n	80062ae <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2204      	movs	r2, #4
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80062da:	2304      	movs	r3, #4
 80062dc:	e03b      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2201      	movs	r2, #1
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e030      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f7ff fbe7 	bl	8005ac8 <SDMMC_GetCommandResponse>
 80062fa:	4603      	mov	r3, r0
 80062fc:	461a      	mov	r2, r3
 80062fe:	7afb      	ldrb	r3, [r7, #11]
 8006300:	4293      	cmp	r3, r2
 8006302:	d001      	beq.n	8006308 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006304:	2301      	movs	r3, #1
 8006306:	e026      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006310:	2100      	movs	r1, #0
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f7ff fbe5 	bl	8005ae2 <SDMMC_GetResponse>
 8006318:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	b29a      	uxth	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800632e:	2300      	movs	r3, #0
 8006330:	e011      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800633c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006340:	e009      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d002      	beq.n	8006352 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800634c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006350:	e001      	b.n	8006356 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006356:	4618      	mov	r0, r3
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd90      	pop	{r4, r7, pc}
 800635e:	bf00      	nop
 8006360:	20000010 	.word	0x20000010
 8006364:	10624dd3 	.word	0x10624dd3

08006368 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006368:	b490      	push	{r4, r7}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006370:	4b18      	ldr	r3, [pc, #96]	; (80063d4 <SDMMC_GetCmdResp7+0x6c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <SDMMC_GetCmdResp7+0x70>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	0a5b      	lsrs	r3, r3, #9
 800637c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006380:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8006384:	4623      	mov	r3, r4
 8006386:	1e5c      	subs	r4, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800638c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006390:	e01a      	b.n	80063c8 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006396:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f2      	beq.n	8006384 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a2:	f003 0304 	and.w	r3, r3, #4
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2240      	movs	r2, #64	; 0x40
 80063ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80063b0:	2304      	movs	r3, #4
 80063b2:	e009      	b.n	80063c8 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d002      	beq.n	80063c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
  
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc90      	pop	{r4, r7}
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000010 	.word	0x20000010
 80063d8:	10624dd3 	.word	0x10624dd3

080063dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80063e6:	79fb      	ldrb	r3, [r7, #7]
 80063e8:	4a08      	ldr	r2, [pc, #32]	; (800640c <disk_status+0x30>)
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	79fa      	ldrb	r2, [r7, #7]
 80063f4:	4905      	ldr	r1, [pc, #20]	; (800640c <disk_status+0x30>)
 80063f6:	440a      	add	r2, r1
 80063f8:	7a12      	ldrb	r2, [r2, #8]
 80063fa:	4610      	mov	r0, r2
 80063fc:	4798      	blx	r3
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006402:	7bfb      	ldrb	r3, [r7, #15]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	200002bc 	.word	0x200002bc

08006410 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	4a0d      	ldr	r2, [pc, #52]	; (8006458 <disk_initialize+0x48>)
 8006422:	5cd3      	ldrb	r3, [r2, r3]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d111      	bne.n	800644c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	4a0b      	ldr	r2, [pc, #44]	; (8006458 <disk_initialize+0x48>)
 800642c:	2101      	movs	r1, #1
 800642e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006430:	79fb      	ldrb	r3, [r7, #7]
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <disk_initialize+0x48>)
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	4413      	add	r3, r2
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	79fa      	ldrb	r2, [r7, #7]
 800643e:	4906      	ldr	r1, [pc, #24]	; (8006458 <disk_initialize+0x48>)
 8006440:	440a      	add	r2, r1
 8006442:	7a12      	ldrb	r2, [r2, #8]
 8006444:	4610      	mov	r0, r2
 8006446:	4798      	blx	r3
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	200002bc 	.word	0x200002bc

0800645c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4603      	mov	r3, r0
 800646a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	4a0a      	ldr	r2, [pc, #40]	; (8006498 <disk_read+0x3c>)
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	689c      	ldr	r4, [r3, #8]
 8006478:	7bfb      	ldrb	r3, [r7, #15]
 800647a:	4a07      	ldr	r2, [pc, #28]	; (8006498 <disk_read+0x3c>)
 800647c:	4413      	add	r3, r2
 800647e:	7a18      	ldrb	r0, [r3, #8]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	68b9      	ldr	r1, [r7, #8]
 8006486:	47a0      	blx	r4
 8006488:	4603      	mov	r3, r0
 800648a:	75fb      	strb	r3, [r7, #23]
  return res;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd90      	pop	{r4, r7, pc}
 8006496:	bf00      	nop
 8006498:	200002bc 	.word	0x200002bc

0800649c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b087      	sub	sp, #28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4603      	mov	r3, r0
 80064aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	4a0a      	ldr	r2, [pc, #40]	; (80064d8 <disk_write+0x3c>)
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	68dc      	ldr	r4, [r3, #12]
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	4a07      	ldr	r2, [pc, #28]	; (80064d8 <disk_write+0x3c>)
 80064bc:	4413      	add	r3, r2
 80064be:	7a18      	ldrb	r0, [r3, #8]
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	47a0      	blx	r4
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80064cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200002bc 	.word	0x200002bc

080064dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	603a      	str	r2, [r7, #0]
 80064e6:	71fb      	strb	r3, [r7, #7]
 80064e8:	460b      	mov	r3, r1
 80064ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80064ec:	79fb      	ldrb	r3, [r7, #7]
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <disk_ioctl+0x38>)
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	79fa      	ldrb	r2, [r7, #7]
 80064fa:	4906      	ldr	r1, [pc, #24]	; (8006514 <disk_ioctl+0x38>)
 80064fc:	440a      	add	r2, r1
 80064fe:	7a10      	ldrb	r0, [r2, #8]
 8006500:	79b9      	ldrb	r1, [r7, #6]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	4798      	blx	r3
 8006506:	4603      	mov	r3, r0
 8006508:	73fb      	strb	r3, [r7, #15]
  return res;
 800650a:	7bfb      	ldrb	r3, [r7, #15]
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	200002bc 	.word	0x200002bc

08006518 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3301      	adds	r3, #1
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006528:	89fb      	ldrh	r3, [r7, #14]
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	b21a      	sxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	b21b      	sxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b21b      	sxth	r3, r3
 8006538:	81fb      	strh	r3, [r7, #14]
	return rv;
 800653a:	89fb      	ldrh	r3, [r7, #14]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3303      	adds	r3, #3
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	3202      	adds	r2, #2
 8006560:	7812      	ldrb	r2, [r2, #0]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	3201      	adds	r2, #1
 800656e:	7812      	ldrb	r2, [r2, #0]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7812      	ldrb	r2, [r2, #0]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006580:	68fb      	ldr	r3, [r7, #12]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
 8006596:	460b      	mov	r3, r1
 8006598:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	887a      	ldrh	r2, [r7, #2]
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	887b      	ldrh	r3, [r7, #2]
 80065a8:	0a1b      	lsrs	r3, r3, #8
 80065aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	1c5a      	adds	r2, r3, #1
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	887a      	ldrh	r2, [r7, #2]
 80065b4:	b2d2      	uxtb	r2, r2
 80065b6:	701a      	strb	r2, [r3, #0]
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	1c5a      	adds	r2, r3, #1
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	0a1b      	lsrs	r3, r3, #8
 80065de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	607a      	str	r2, [r7, #4]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	0a1b      	lsrs	r3, r3, #8
 80065f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	607a      	str	r2, [r7, #4]
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	b2d2      	uxtb	r2, r2
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	617a      	str	r2, [r7, #20]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	1c51      	adds	r1, r2, #1
 8006640:	6139      	str	r1, [r7, #16]
 8006642:	7812      	ldrb	r2, [r2, #0]
 8006644:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f1      	bne.n	8006636 <mem_cpy+0x1a>
	}
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	617a      	str	r2, [r7, #20]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3b01      	subs	r3, #1
 800667e:	607b      	str	r3, [r7, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1f3      	bne.n	800666e <mem_set+0x10>
}
 8006686:	bf00      	nop
 8006688:	371c      	adds	r7, #28
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006692:	b480      	push	{r7}
 8006694:	b089      	sub	sp, #36	; 0x24
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	61fb      	str	r3, [r7, #28]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	61fa      	str	r2, [r7, #28]
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	61ba      	str	r2, [r7, #24]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	1acb      	subs	r3, r1, r3
 80066be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <mem_cmp+0x40>
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0eb      	beq.n	80066aa <mem_cmp+0x18>

	return r;
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3724      	adds	r7, #36	; 0x24
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80066ea:	e002      	b.n	80066f2 <chk_chr+0x12>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	3301      	adds	r3, #1
 80066f0:	607b      	str	r3, [r7, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <chk_chr+0x26>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d1f2      	bne.n	80066ec <chk_chr+0xc>
	return *str;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	781b      	ldrb	r3, [r3, #0]
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006722:	2300      	movs	r3, #0
 8006724:	60bb      	str	r3, [r7, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	e029      	b.n	8006780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <chk_lock+0xb4>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	4413      	add	r3, r2
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d01d      	beq.n	8006776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800673a:	4a24      	ldr	r2, [pc, #144]	; (80067cc <chk_lock+0xb4>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	4413      	add	r3, r2
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	429a      	cmp	r2, r3
 800674a:	d116      	bne.n	800677a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800674c:	4a1f      	ldr	r2, [pc, #124]	; (80067cc <chk_lock+0xb4>)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	011b      	lsls	r3, r3, #4
 8006752:	4413      	add	r3, r2
 8006754:	3304      	adds	r3, #4
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800675c:	429a      	cmp	r2, r3
 800675e:	d10c      	bne.n	800677a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006760:	4a1a      	ldr	r2, [pc, #104]	; (80067cc <chk_lock+0xb4>)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	4413      	add	r3, r2
 8006768:	3308      	adds	r3, #8
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006770:	429a      	cmp	r2, r3
 8006772:	d102      	bne.n	800677a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006774:	e007      	b.n	8006786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006776:	2301      	movs	r3, #1
 8006778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3301      	adds	r3, #1
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d9d2      	bls.n	800672c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d109      	bne.n	80067a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <chk_lock+0x80>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b02      	cmp	r3, #2
 8006796:	d101      	bne.n	800679c <chk_lock+0x84>
 8006798:	2300      	movs	r3, #0
 800679a:	e010      	b.n	80067be <chk_lock+0xa6>
 800679c:	2312      	movs	r3, #18
 800679e:	e00e      	b.n	80067be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d108      	bne.n	80067b8 <chk_lock+0xa0>
 80067a6:	4a09      	ldr	r2, [pc, #36]	; (80067cc <chk_lock+0xb4>)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	4413      	add	r3, r2
 80067ae:	330c      	adds	r3, #12
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b6:	d101      	bne.n	80067bc <chk_lock+0xa4>
 80067b8:	2310      	movs	r3, #16
 80067ba:	e000      	b.n	80067be <chk_lock+0xa6>
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3714      	adds	r7, #20
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr
 80067ca:	bf00      	nop
 80067cc:	2000009c 	.word	0x2000009c

080067d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80067d6:	2300      	movs	r3, #0
 80067d8:	607b      	str	r3, [r7, #4]
 80067da:	e002      	b.n	80067e2 <enq_lock+0x12>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3301      	adds	r3, #1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d806      	bhi.n	80067f6 <enq_lock+0x26>
 80067e8:	4a09      	ldr	r2, [pc, #36]	; (8006810 <enq_lock+0x40>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	4413      	add	r3, r2
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f2      	bne.n	80067dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	bf14      	ite	ne
 80067fc:	2301      	movne	r3, #1
 80067fe:	2300      	moveq	r3, #0
 8006800:	b2db      	uxtb	r3, r3
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	2000009c 	.word	0x2000009c

08006814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	e01f      	b.n	8006864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006824:	4a41      	ldr	r2, [pc, #260]	; (800692c <inc_lock+0x118>)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	4413      	add	r3, r2
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	429a      	cmp	r2, r3
 8006834:	d113      	bne.n	800685e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006836:	4a3d      	ldr	r2, [pc, #244]	; (800692c <inc_lock+0x118>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	4413      	add	r3, r2
 800683e:	3304      	adds	r3, #4
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006846:	429a      	cmp	r2, r3
 8006848:	d109      	bne.n	800685e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800684a:	4a38      	ldr	r2, [pc, #224]	; (800692c <inc_lock+0x118>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	4413      	add	r3, r2
 8006852:	3308      	adds	r3, #8
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800685a:	429a      	cmp	r2, r3
 800685c:	d006      	beq.n	800686c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	3301      	adds	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d9dc      	bls.n	8006824 <inc_lock+0x10>
 800686a:	e000      	b.n	800686e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800686c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d132      	bne.n	80068da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006874:	2300      	movs	r3, #0
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e002      	b.n	8006880 <inc_lock+0x6c>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d806      	bhi.n	8006894 <inc_lock+0x80>
 8006886:	4a29      	ldr	r2, [pc, #164]	; (800692c <inc_lock+0x118>)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	4413      	add	r3, r2
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d1f2      	bne.n	800687a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2b02      	cmp	r3, #2
 8006898:	d101      	bne.n	800689e <inc_lock+0x8a>
 800689a:	2300      	movs	r3, #0
 800689c:	e040      	b.n	8006920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	4922      	ldr	r1, [pc, #136]	; (800692c <inc_lock+0x118>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	440b      	add	r3, r1
 80068aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	491e      	ldr	r1, [pc, #120]	; (800692c <inc_lock+0x118>)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	440b      	add	r3, r1
 80068b8:	3304      	adds	r3, #4
 80068ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	695a      	ldr	r2, [r3, #20]
 80068c0:	491a      	ldr	r1, [pc, #104]	; (800692c <inc_lock+0x118>)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	440b      	add	r3, r1
 80068c8:	3308      	adds	r3, #8
 80068ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80068cc:	4a17      	ldr	r2, [pc, #92]	; (800692c <inc_lock+0x118>)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4413      	add	r3, r2
 80068d4:	330c      	adds	r3, #12
 80068d6:	2200      	movs	r2, #0
 80068d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d009      	beq.n	80068f4 <inc_lock+0xe0>
 80068e0:	4a12      	ldr	r2, [pc, #72]	; (800692c <inc_lock+0x118>)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	4413      	add	r3, r2
 80068e8:	330c      	adds	r3, #12
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d001      	beq.n	80068f4 <inc_lock+0xe0>
 80068f0:	2300      	movs	r3, #0
 80068f2:	e015      	b.n	8006920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d108      	bne.n	800690c <inc_lock+0xf8>
 80068fa:	4a0c      	ldr	r2, [pc, #48]	; (800692c <inc_lock+0x118>)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	4413      	add	r3, r2
 8006902:	330c      	adds	r3, #12
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	3301      	adds	r3, #1
 8006908:	b29a      	uxth	r2, r3
 800690a:	e001      	b.n	8006910 <inc_lock+0xfc>
 800690c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006910:	4906      	ldr	r1, [pc, #24]	; (800692c <inc_lock+0x118>)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	011b      	lsls	r3, r3, #4
 8006916:	440b      	add	r3, r1
 8006918:	330c      	adds	r3, #12
 800691a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
}
 8006920:	4618      	mov	r0, r3
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	2000009c 	.word	0x2000009c

08006930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3b01      	subs	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d825      	bhi.n	8006990 <dec_lock+0x60>
		n = Files[i].ctr;
 8006944:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <dec_lock+0x74>)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	4413      	add	r3, r2
 800694c:	330c      	adds	r3, #12
 800694e:	881b      	ldrh	r3, [r3, #0]
 8006950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006952:	89fb      	ldrh	r3, [r7, #14]
 8006954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006958:	d101      	bne.n	800695e <dec_lock+0x2e>
 800695a:	2300      	movs	r3, #0
 800695c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <dec_lock+0x3a>
 8006964:	89fb      	ldrh	r3, [r7, #14]
 8006966:	3b01      	subs	r3, #1
 8006968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800696a:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <dec_lock+0x74>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4413      	add	r3, r2
 8006972:	330c      	adds	r3, #12
 8006974:	89fa      	ldrh	r2, [r7, #14]
 8006976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006978:	89fb      	ldrh	r3, [r7, #14]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <dec_lock+0x5a>
 800697e:	4a09      	ldr	r2, [pc, #36]	; (80069a4 <dec_lock+0x74>)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	4413      	add	r3, r2
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	737b      	strb	r3, [r7, #13]
 800698e:	e001      	b.n	8006994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006990:	2302      	movs	r3, #2
 8006992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006994:	7b7b      	ldrb	r3, [r7, #13]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	2000009c 	.word	0x2000009c

080069a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e010      	b.n	80069d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80069b6:	4a0d      	ldr	r2, [pc, #52]	; (80069ec <clear_lock+0x44>)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d105      	bne.n	80069d2 <clear_lock+0x2a>
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <clear_lock+0x44>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	4413      	add	r3, r2
 80069ce:	2200      	movs	r2, #0
 80069d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3301      	adds	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d9eb      	bls.n	80069b6 <clear_lock+0xe>
	}
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	2000009c 	.word	0x2000009c

080069f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	78db      	ldrb	r3, [r3, #3]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d034      	beq.n	8006a6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7858      	ldrb	r0, [r3, #1]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a14:	2301      	movs	r3, #1
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	f7ff fd40 	bl	800649c <disk_write>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	73fb      	strb	r3, [r7, #15]
 8006a26:	e022      	b.n	8006a6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d217      	bcs.n	8006a6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	789b      	ldrb	r3, [r3, #2]
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	e010      	b.n	8006a68 <sync_window+0x78>
					wsect += fs->fsize;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7858      	ldrb	r0, [r3, #1]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	f7ff fd1d 	bl	800649c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3b01      	subs	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d8eb      	bhi.n	8006a46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3718      	adds	r7, #24
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d01b      	beq.n	8006ac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7ff ffad 	bl	80069f0 <sync_window>
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d113      	bne.n	8006ac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	7858      	ldrb	r0, [r3, #1]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006aaa:	2301      	movs	r3, #1
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	f7ff fcd5 	bl	800645c <disk_read>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8006abc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff87 	bl	80069f0 <sync_window>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d158      	bne.n	8006b9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d148      	bne.n	8006b86 <sync_fs+0xb2>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d144      	bne.n	8006b86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3334      	adds	r3, #52	; 0x34
 8006b00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fda9 	bl	800665e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3334      	adds	r3, #52	; 0x34
 8006b10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006b14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff fd38 	bl	800658e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3334      	adds	r3, #52	; 0x34
 8006b22:	4921      	ldr	r1, [pc, #132]	; (8006ba8 <sync_fs+0xd4>)
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fd4d 	bl	80065c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	3334      	adds	r3, #52	; 0x34
 8006b2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006b32:	491e      	ldr	r1, [pc, #120]	; (8006bac <sync_fs+0xd8>)
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff fd45 	bl	80065c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	3334      	adds	r3, #52	; 0x34
 8006b3e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f7ff fd3b 	bl	80065c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	3334      	adds	r3, #52	; 0x34
 8006b52:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7ff fd31 	bl	80065c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	7858      	ldrb	r0, [r3, #1]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f7ff fc8e 	bl	800649c <disk_write>
			fs->fsi_flag = 0;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	785b      	ldrb	r3, [r3, #1]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fca4 	bl	80064dc <disk_ioctl>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <sync_fs+0xca>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	41615252 	.word	0x41615252
 8006bac:	61417272 	.word	0x61417272

08006bb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	3b02      	subs	r3, #2
 8006bbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	1e9a      	subs	r2, r3, #2
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d801      	bhi.n	8006bd0 <clust2sect+0x20>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	e008      	b.n	8006be2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	895b      	ldrh	r3, [r3, #10]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	fb03 f202 	mul.w	r2, r3, r2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4413      	add	r3, r2
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d904      	bls.n	8006c0e <get_fat+0x20>
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d802      	bhi.n	8006c14 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c0e:	2301      	movs	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e08c      	b.n	8006d2e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295
 8006c18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d045      	beq.n	8006cae <get_fat+0xc0>
 8006c22:	2b03      	cmp	r3, #3
 8006c24:	d05d      	beq.n	8006ce2 <get_fat+0xf4>
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d177      	bne.n	8006d1a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	0a5b      	lsrs	r3, r3, #9
 8006c40:	4413      	add	r3, r2
 8006c42:	4619      	mov	r1, r3
 8006c44:	6938      	ldr	r0, [r7, #16]
 8006c46:	f7ff ff17 	bl	8006a78 <move_window>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d167      	bne.n	8006d20 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	60fa      	str	r2, [r7, #12]
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c62:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	0a5b      	lsrs	r3, r3, #9
 8006c6c:	4413      	add	r3, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6938      	ldr	r0, [r7, #16]
 8006c72:	f7ff ff01 	bl	8006a78 <move_window>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d153      	bne.n	8006d24 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4413      	add	r3, r2
 8006c86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c8a:	021b      	lsls	r3, r3, #8
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f003 0301 	and.w	r3, r3, #1
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <get_fat+0xb6>
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	091b      	lsrs	r3, r3, #4
 8006ca2:	e002      	b.n	8006caa <get_fat+0xbc>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006caa:	617b      	str	r3, [r7, #20]
			break;
 8006cac:	e03f      	b.n	8006d2e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	0a1b      	lsrs	r3, r3, #8
 8006cb6:	4413      	add	r3, r2
 8006cb8:	4619      	mov	r1, r3
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f7ff fedc 	bl	8006a78 <move_window>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d130      	bne.n	8006d28 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff fc1e 	bl	8006518 <ld_word>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	617b      	str	r3, [r7, #20]
			break;
 8006ce0:	e025      	b.n	8006d2e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	09db      	lsrs	r3, r3, #7
 8006cea:	4413      	add	r3, r2
 8006cec:	4619      	mov	r1, r3
 8006cee:	6938      	ldr	r0, [r7, #16]
 8006cf0:	f7ff fec2 	bl	8006a78 <move_window>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d118      	bne.n	8006d2c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006d08:	4413      	add	r3, r2
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7ff fc1c 	bl	8006548 <ld_dword>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d16:	617b      	str	r3, [r7, #20]
			break;
 8006d18:	e009      	b.n	8006d2e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	e006      	b.n	8006d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d20:	bf00      	nop
 8006d22:	e004      	b.n	8006d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d24:	bf00      	nop
 8006d26:	e002      	b.n	8006d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d28:	bf00      	nop
 8006d2a:	e000      	b.n	8006d2e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d2c:	bf00      	nop
		}
	}

	return val;
 8006d2e:	697b      	ldr	r3, [r7, #20]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006d38:	b590      	push	{r4, r7, lr}
 8006d3a:	b089      	sub	sp, #36	; 0x24
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006d44:	2302      	movs	r3, #2
 8006d46:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	f240 80d6 	bls.w	8006efc <put_fat+0x1c4>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	f240 80d0 	bls.w	8006efc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d073      	beq.n	8006e4c <put_fat+0x114>
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	f000 8091 	beq.w	8006e8c <put_fat+0x154>
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	f040 80c6 	bne.w	8006efc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	085b      	lsrs	r3, r3, #1
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	0a5b      	lsrs	r3, r3, #9
 8006d86:	4413      	add	r3, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7ff fe74 	bl	8006a78 <move_window>
 8006d90:	4603      	mov	r3, r0
 8006d92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d94:	7ffb      	ldrb	r3, [r7, #31]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 80a9 	bne.w	8006eee <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	1c59      	adds	r1, r3, #1
 8006da6:	61b9      	str	r1, [r7, #24]
 8006da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dac:	4413      	add	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00d      	beq.n	8006dd6 <put_fat+0x9e>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	b25b      	sxtb	r3, r3
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	b25a      	sxtb	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	b25b      	sxtb	r3, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	e001      	b.n	8006dda <put_fat+0xa2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	0a5b      	lsrs	r3, r3, #9
 8006dec:	4413      	add	r3, r2
 8006dee:	4619      	mov	r1, r3
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff fe41 	bl	8006a78 <move_window>
 8006df6:	4603      	mov	r3, r0
 8006df8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006dfa:	7ffb      	ldrb	r3, [r7, #31]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d178      	bne.n	8006ef2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0c:	4413      	add	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0301 	and.w	r3, r3, #1
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <put_fat+0xea>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	e00e      	b.n	8006e40 <put_fat+0x108>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	b25b      	sxtb	r3, r3
 8006e28:	f023 030f 	bic.w	r3, r3, #15
 8006e2c:	b25a      	sxtb	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	b25b      	sxtb	r3, r3
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	b25b      	sxtb	r3, r3
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	b25b      	sxtb	r3, r3
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2201      	movs	r2, #1
 8006e48:	70da      	strb	r2, [r3, #3]
			break;
 8006e4a:	e057      	b.n	8006efc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	4413      	add	r3, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff fe0d 	bl	8006a78 <move_window>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e62:	7ffb      	ldrb	r3, [r7, #31]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d146      	bne.n	8006ef6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006e76:	4413      	add	r3, r2
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	b292      	uxth	r2, r2
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff fb85 	bl	800658e <st_word>
			fs->wflag = 1;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	70da      	strb	r2, [r3, #3]
			break;
 8006e8a:	e037      	b.n	8006efc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	4413      	add	r3, r2
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7ff fded 	bl	8006a78 <move_window>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ea2:	7ffb      	ldrb	r3, [r7, #31]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d128      	bne.n	8006efa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fb42 	bl	8006548 <ld_dword>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006eca:	4323      	orrs	r3, r4
 8006ecc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006edc:	4413      	add	r3, r2
 8006ede:	6879      	ldr	r1, [r7, #4]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fb6f 	bl	80065c4 <st_dword>
			fs->wflag = 1;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	70da      	strb	r2, [r3, #3]
			break;
 8006eec:	e006      	b.n	8006efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006eee:	bf00      	nop
 8006ef0:	e004      	b.n	8006efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006ef2:	bf00      	nop
 8006ef4:	e002      	b.n	8006efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006ef6:	bf00      	nop
 8006ef8:	e000      	b.n	8006efc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006efa:	bf00      	nop
		}
	}
	return res;
 8006efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3724      	adds	r7, #36	; 0x24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd90      	pop	{r4, r7, pc}

08006f06 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b088      	sub	sp, #32
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d904      	bls.n	8006f2c <remove_chain+0x26>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	699a      	ldr	r2, [r3, #24]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d801      	bhi.n	8006f30 <remove_chain+0x2a>
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	e04b      	b.n	8006fc8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00c      	beq.n	8006f50 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	69b8      	ldr	r0, [r7, #24]
 8006f3e:	f7ff fefb 	bl	8006d38 <put_fat>
 8006f42:	4603      	mov	r3, r0
 8006f44:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006f46:	7ffb      	ldrb	r3, [r7, #31]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d001      	beq.n	8006f50 <remove_chain+0x4a>
 8006f4c:	7ffb      	ldrb	r3, [r7, #31]
 8006f4e:	e03b      	b.n	8006fc8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f7ff fe4b 	bl	8006bee <get_fat>
 8006f58:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d031      	beq.n	8006fc4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <remove_chain+0x64>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e02e      	b.n	8006fc8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d101      	bne.n	8006f76 <remove_chain+0x70>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e028      	b.n	8006fc8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006f76:	2200      	movs	r2, #0
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	69b8      	ldr	r0, [r7, #24]
 8006f7c:	f7ff fedc 	bl	8006d38 <put_fat>
 8006f80:	4603      	mov	r3, r0
 8006f82:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006f84:	7ffb      	ldrb	r3, [r7, #31]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <remove_chain+0x88>
 8006f8a:	7ffb      	ldrb	r3, [r7, #31]
 8006f8c:	e01c      	b.n	8006fc8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	695a      	ldr	r2, [r3, #20]
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	3b02      	subs	r3, #2
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d20b      	bcs.n	8006fb4 <remove_chain+0xae>
			fs->free_clst++;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	791b      	ldrb	r3, [r3, #4]
 8006faa:	f043 0301 	orr.w	r3, r3, #1
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	699a      	ldr	r2, [r3, #24]
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d8c6      	bhi.n	8006f50 <remove_chain+0x4a>
 8006fc2:	e000      	b.n	8006fc6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006fc4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10d      	bne.n	8007002 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d004      	beq.n	8006ffc <create_chain+0x2c>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	699a      	ldr	r2, [r3, #24]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d81b      	bhi.n	8007034 <create_chain+0x64>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	e018      	b.n	8007034 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fdf2 	bl	8006bee <get_fat>
 800700a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d801      	bhi.n	8007016 <create_chain+0x46>
 8007012:	2301      	movs	r3, #1
 8007014:	e070      	b.n	80070f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d101      	bne.n	8007022 <create_chain+0x52>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	e06a      	b.n	80070f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	699a      	ldr	r2, [r3, #24]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	429a      	cmp	r2, r3
 800702a:	d901      	bls.n	8007030 <create_chain+0x60>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	e063      	b.n	80070f8 <create_chain+0x128>
		scl = clst;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	3301      	adds	r3, #1
 800703c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	699a      	ldr	r2, [r3, #24]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	429a      	cmp	r2, r3
 8007046:	d807      	bhi.n	8007058 <create_chain+0x88>
				ncl = 2;
 8007048:	2302      	movs	r3, #2
 800704a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800704c:	69fa      	ldr	r2, [r7, #28]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	429a      	cmp	r2, r3
 8007052:	d901      	bls.n	8007058 <create_chain+0x88>
 8007054:	2300      	movs	r3, #0
 8007056:	e04f      	b.n	80070f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007058:	69f9      	ldr	r1, [r7, #28]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7ff fdc7 	bl	8006bee <get_fat>
 8007060:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00e      	beq.n	8007086 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d003      	beq.n	8007076 <create_chain+0xa6>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d101      	bne.n	800707a <create_chain+0xaa>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e03e      	b.n	80070f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	429a      	cmp	r2, r3
 8007080:	d1da      	bne.n	8007038 <create_chain+0x68>
 8007082:	2300      	movs	r3, #0
 8007084:	e038      	b.n	80070f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007086:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007088:	f04f 32ff 	mov.w	r2, #4294967295
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	6938      	ldr	r0, [r7, #16]
 8007090:	f7ff fe52 	bl	8006d38 <put_fat>
 8007094:	4603      	mov	r3, r0
 8007096:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007098:	7dfb      	ldrb	r3, [r7, #23]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <create_chain+0xe2>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d006      	beq.n	80070b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6938      	ldr	r0, [r7, #16]
 80070aa:	f7ff fe45 	bl	8006d38 <put_fat>
 80070ae:	4603      	mov	r3, r0
 80070b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d116      	bne.n	80070e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	69fa      	ldr	r2, [r7, #28]
 80070bc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	3b02      	subs	r3, #2
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d804      	bhi.n	80070d6 <create_chain+0x106>
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	1e5a      	subs	r2, r3, #1
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	791b      	ldrb	r3, [r3, #4]
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	b2da      	uxtb	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	711a      	strb	r2, [r3, #4]
 80070e4:	e007      	b.n	80070f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d102      	bne.n	80070f2 <create_chain+0x122>
 80070ec:	f04f 33ff 	mov.w	r3, #4294967295
 80070f0:	e000      	b.n	80070f4 <create_chain+0x124>
 80070f2:	2301      	movs	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80070f6:	69fb      	ldr	r3, [r7, #28]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007114:	3304      	adds	r3, #4
 8007116:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	0a5b      	lsrs	r3, r3, #9
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	8952      	ldrh	r2, [r2, #10]
 8007120:	fbb3 f3f2 	udiv	r3, r3, r2
 8007124:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1d1a      	adds	r2, r3, #4
 800712a:	613a      	str	r2, [r7, #16]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <clmt_clust+0x3a>
 8007136:	2300      	movs	r3, #0
 8007138:	e010      	b.n	800715c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	429a      	cmp	r2, r3
 8007140:	d307      	bcc.n	8007152 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	617b      	str	r3, [r7, #20]
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	3304      	adds	r3, #4
 800714e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007150:	e7e9      	b.n	8007126 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007152:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
}
 800715c:	4618      	mov	r0, r3
 800715e:	371c      	adds	r7, #28
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800717e:	d204      	bcs.n	800718a <dir_sdi+0x22>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	f003 031f 	and.w	r3, r3, #31
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <dir_sdi+0x26>
		return FR_INT_ERR;
 800718a:	2302      	movs	r3, #2
 800718c:	e063      	b.n	8007256 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <dir_sdi+0x46>
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d902      	bls.n	80071ae <dir_sdi+0x46>
		clst = fs->dirbase;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10c      	bne.n	80071ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	095b      	lsrs	r3, r3, #5
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	8912      	ldrh	r2, [r2, #8]
 80071bc:	4293      	cmp	r3, r2
 80071be:	d301      	bcc.n	80071c4 <dir_sdi+0x5c>
 80071c0:	2302      	movs	r3, #2
 80071c2:	e048      	b.n	8007256 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	61da      	str	r2, [r3, #28]
 80071cc:	e029      	b.n	8007222 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	895b      	ldrh	r3, [r3, #10]
 80071d2:	025b      	lsls	r3, r3, #9
 80071d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80071d6:	e019      	b.n	800720c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6979      	ldr	r1, [r7, #20]
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fd06 	bl	8006bee <get_fat>
 80071e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ea:	d101      	bne.n	80071f0 <dir_sdi+0x88>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e032      	b.n	8007256 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d904      	bls.n	8007200 <dir_sdi+0x98>
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	699a      	ldr	r2, [r3, #24]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d801      	bhi.n	8007204 <dir_sdi+0x9c>
 8007200:	2302      	movs	r3, #2
 8007202:	e028      	b.n	8007256 <dir_sdi+0xee>
			ofs -= csz;
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	429a      	cmp	r2, r3
 8007212:	d2e1      	bcs.n	80071d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007214:	6979      	ldr	r1, [r7, #20]
 8007216:	6938      	ldr	r0, [r7, #16]
 8007218:	f7ff fcca 	bl	8006bb0 <clust2sect>
 800721c:	4602      	mov	r2, r0
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	69db      	ldr	r3, [r3, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d101      	bne.n	8007234 <dir_sdi+0xcc>
 8007230:	2302      	movs	r3, #2
 8007232:	e010      	b.n	8007256 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	69da      	ldr	r2, [r3, #28]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	441a      	add	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800724e:	441a      	add	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b086      	sub	sp, #24
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	3320      	adds	r3, #32
 8007274:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <dir_next+0x28>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007284:	d301      	bcc.n	800728a <dir_next+0x2c>
 8007286:	2304      	movs	r3, #4
 8007288:	e0aa      	b.n	80073e0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007290:	2b00      	cmp	r3, #0
 8007292:	f040 8098 	bne.w	80073c6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	8912      	ldrh	r2, [r2, #8]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	f0c0 8088 	bcc.w	80073c6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	61da      	str	r2, [r3, #28]
 80072bc:	2304      	movs	r3, #4
 80072be:	e08f      	b.n	80073e0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	0a5b      	lsrs	r3, r3, #9
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	8952      	ldrh	r2, [r2, #10]
 80072c8:	3a01      	subs	r2, #1
 80072ca:	4013      	ands	r3, r2
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d17a      	bne.n	80073c6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7ff fc88 	bl	8006bee <get_fat>
 80072de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d801      	bhi.n	80072ea <dir_next+0x8c>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e07a      	b.n	80073e0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d101      	bne.n	80072f6 <dir_next+0x98>
 80072f2:	2301      	movs	r3, #1
 80072f4:	e074      	b.n	80073e0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d858      	bhi.n	80073b2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d104      	bne.n	8007310 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	61da      	str	r2, [r3, #28]
 800730c:	2304      	movs	r3, #4
 800730e:	e067      	b.n	80073e0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f7ff fe59 	bl	8006fd0 <create_chain>
 800731e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <dir_next+0xcc>
 8007326:	2307      	movs	r3, #7
 8007328:	e05a      	b.n	80073e0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d101      	bne.n	8007334 <dir_next+0xd6>
 8007330:	2302      	movs	r3, #2
 8007332:	e055      	b.n	80073e0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d101      	bne.n	8007340 <dir_next+0xe2>
 800733c:	2301      	movs	r3, #1
 800733e:	e04f      	b.n	80073e0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fb55 	bl	80069f0 <sync_window>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d001      	beq.n	8007350 <dir_next+0xf2>
 800734c:	2301      	movs	r3, #1
 800734e:	e047      	b.n	80073e0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3334      	adds	r3, #52	; 0x34
 8007354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f97f 	bl	800665e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	6979      	ldr	r1, [r7, #20]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f7ff fc22 	bl	8006bb0 <clust2sect>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
 8007372:	e012      	b.n	800739a <dir_next+0x13c>
						fs->wflag = 1;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f7ff fb38 	bl	80069f0 <sync_window>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d001      	beq.n	800738a <dir_next+0x12c>
 8007386:	2301      	movs	r3, #1
 8007388:	e02a      	b.n	80073e0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3301      	adds	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007394:	1c5a      	adds	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	631a      	str	r2, [r3, #48]	; 0x30
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	895b      	ldrh	r3, [r3, #10]
 800739e:	461a      	mov	r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d8e6      	bhi.n	8007374 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad2      	subs	r2, r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80073b8:	6979      	ldr	r1, [r7, #20]
 80073ba:	68f8      	ldr	r0, [r7, #12]
 80073bc:	f7ff fbf8 	bl	8006bb0 <clust2sect>
 80073c0:	4602      	mov	r2, r0
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d8:	441a      	add	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80073f8:	2100      	movs	r1, #0
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7ff feb4 	bl	8007168 <dir_sdi>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d12b      	bne.n	8007462 <dir_alloc+0x7a>
		n = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	4619      	mov	r1, r3
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7ff fb2f 	bl	8006a78 <move_window>
 800741a:	4603      	mov	r3, r0
 800741c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800741e:	7dfb      	ldrb	r3, [r7, #23]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11d      	bne.n	8007460 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	2be5      	cmp	r3, #229	; 0xe5
 800742c:	d004      	beq.n	8007438 <dir_alloc+0x50>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d107      	bne.n	8007448 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3301      	adds	r3, #1
 800743c:	613b      	str	r3, [r7, #16]
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d102      	bne.n	800744c <dir_alloc+0x64>
 8007446:	e00c      	b.n	8007462 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800744c:	2101      	movs	r1, #1
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff ff05 	bl	800725e <dir_next>
 8007454:	4603      	mov	r3, r0
 8007456:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0d7      	beq.n	800740e <dir_alloc+0x26>
 800745e:	e000      	b.n	8007462 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007460:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	2b04      	cmp	r3, #4
 8007466:	d101      	bne.n	800746c <dir_alloc+0x84>
 8007468:	2307      	movs	r3, #7
 800746a:	75fb      	strb	r3, [r7, #23]
	return res;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	331a      	adds	r3, #26
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff f847 	bl	8006518 <ld_word>
 800748a:	4603      	mov	r3, r0
 800748c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d109      	bne.n	80074aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	3314      	adds	r3, #20
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff f83c 	bl	8006518 <ld_word>
 80074a0:	4603      	mov	r3, r0
 80074a2:	041b      	lsls	r3, r3, #16
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80074aa:	68fb      	ldr	r3, [r7, #12]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	331a      	adds	r3, #26
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	b292      	uxth	r2, r2
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff f85f 	bl	800658e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b03      	cmp	r3, #3
 80074d6:	d109      	bne.n	80074ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f103 0214 	add.w	r2, r3, #20
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	0c1b      	lsrs	r3, r3, #16
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	4619      	mov	r1, r3
 80074e6:	4610      	mov	r0, r2
 80074e8:	f7ff f851 	bl	800658e <st_word>
	}
}
 80074ec:	bf00      	nop
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80074f4:	b590      	push	{r4, r7, lr}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	331a      	adds	r3, #26
 8007502:	4618      	mov	r0, r3
 8007504:	f7ff f808 	bl	8006518 <ld_word>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d001      	beq.n	8007512 <cmp_lfn+0x1e>
 800750e:	2300      	movs	r3, #0
 8007510:	e059      	b.n	80075c6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751a:	1e5a      	subs	r2, r3, #1
 800751c:	4613      	mov	r3, r2
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007528:	2301      	movs	r3, #1
 800752a:	81fb      	strh	r3, [r7, #14]
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]
 8007530:	e033      	b.n	800759a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007532:	4a27      	ldr	r2, [pc, #156]	; (80075d0 <cmp_lfn+0xdc>)
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	4413      	add	r3, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe ffe9 	bl	8006518 <ld_word>
 8007546:	4603      	mov	r3, r0
 8007548:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800754a:	89fb      	ldrh	r3, [r7, #14]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01a      	beq.n	8007586 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2bfe      	cmp	r3, #254	; 0xfe
 8007554:	d812      	bhi.n	800757c <cmp_lfn+0x88>
 8007556:	89bb      	ldrh	r3, [r7, #12]
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fde9 	bl	8009130 <ff_wtoupper>
 800755e:	4603      	mov	r3, r0
 8007560:	461c      	mov	r4, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	617a      	str	r2, [r7, #20]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	4413      	add	r3, r2
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f001 fddd 	bl	8009130 <ff_wtoupper>
 8007576:	4603      	mov	r3, r0
 8007578:	429c      	cmp	r4, r3
 800757a:	d001      	beq.n	8007580 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800757c:	2300      	movs	r3, #0
 800757e:	e022      	b.n	80075c6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007580:	89bb      	ldrh	r3, [r7, #12]
 8007582:	81fb      	strh	r3, [r7, #14]
 8007584:	e006      	b.n	8007594 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007586:	89bb      	ldrh	r3, [r7, #12]
 8007588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800758c:	4293      	cmp	r3, r2
 800758e:	d001      	beq.n	8007594 <cmp_lfn+0xa0>
 8007590:	2300      	movs	r3, #0
 8007592:	e018      	b.n	80075c6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	3301      	adds	r3, #1
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	2b0c      	cmp	r3, #12
 800759e:	d9c8      	bls.n	8007532 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <cmp_lfn+0xd0>
 80075ac:	89fb      	ldrh	r3, [r7, #14]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d008      	beq.n	80075c4 <cmp_lfn+0xd0>
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	4413      	add	r3, r2
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <cmp_lfn+0xd0>
 80075c0:	2300      	movs	r3, #0
 80075c2:	e000      	b.n	80075c6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80075c4:	2301      	movs	r3, #1
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd90      	pop	{r4, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	0801162c 	.word	0x0801162c

080075d4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4611      	mov	r1, r2
 80075e0:	461a      	mov	r2, r3
 80075e2:	460b      	mov	r3, r1
 80075e4:	71fb      	strb	r3, [r7, #7]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	330d      	adds	r3, #13
 80075ee:	79ba      	ldrb	r2, [r7, #6]
 80075f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	330b      	adds	r3, #11
 80075f6:	220f      	movs	r2, #15
 80075f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	330c      	adds	r3, #12
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	331a      	adds	r3, #26
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f7fe ffc0 	bl	800658e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800760e:	79fb      	ldrb	r3, [r7, #7]
 8007610:	1e5a      	subs	r2, r3, #1
 8007612:	4613      	mov	r3, r2
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	4413      	add	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	82fb      	strh	r3, [r7, #22]
 8007622:	2300      	movs	r3, #0
 8007624:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007626:	8afb      	ldrh	r3, [r7, #22]
 8007628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <put_lfn+0x6c>
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	61fa      	str	r2, [r7, #28]
 8007636:	005b      	lsls	r3, r3, #1
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	881b      	ldrh	r3, [r3, #0]
 800763e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007640:	4a17      	ldr	r2, [pc, #92]	; (80076a0 <put_lfn+0xcc>)
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	4413      	add	r3, r2
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	461a      	mov	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	4413      	add	r3, r2
 800764e:	8afa      	ldrh	r2, [r7, #22]
 8007650:	4611      	mov	r1, r2
 8007652:	4618      	mov	r0, r3
 8007654:	f7fe ff9b 	bl	800658e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007658:	8afb      	ldrh	r3, [r7, #22]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <put_lfn+0x90>
 800765e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007662:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	3301      	adds	r3, #1
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b0c      	cmp	r3, #12
 800766e:	d9da      	bls.n	8007626 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007670:	8afb      	ldrh	r3, [r7, #22]
 8007672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007676:	4293      	cmp	r3, r2
 8007678:	d006      	beq.n	8007688 <put_lfn+0xb4>
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4413      	add	r3, r2
 8007682:	881b      	ldrh	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d103      	bne.n	8007690 <put_lfn+0xbc>
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800768e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	79fa      	ldrb	r2, [r7, #7]
 8007694:	701a      	strb	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	0801162c 	.word	0x0801162c

080076a4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b08c      	sub	sp, #48	; 0x30
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076b2:	220b      	movs	r2, #11
 80076b4:	68b9      	ldr	r1, [r7, #8]
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7fe ffb0 	bl	800661c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b05      	cmp	r3, #5
 80076c0:	d929      	bls.n	8007716 <gen_numname+0x72>
		sr = seq;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076c6:	e020      	b.n	800770a <gen_numname+0x66>
			wc = *lfn++;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	1c9a      	adds	r2, r3, #2
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	881b      	ldrh	r3, [r3, #0]
 80076d0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076d2:	2300      	movs	r3, #0
 80076d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80076d6:	e015      	b.n	8007704 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	005a      	lsls	r2, r3, #1
 80076dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	4413      	add	r3, r2
 80076e4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076e8:	085b      	lsrs	r3, r3, #1
 80076ea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <gen_numname+0x5a>
 80076f6:	69fa      	ldr	r2, [r7, #28]
 80076f8:	4b30      	ldr	r3, [pc, #192]	; (80077bc <gen_numname+0x118>)
 80076fa:	4053      	eors	r3, r2
 80076fc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007700:	3301      	adds	r3, #1
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	2b0f      	cmp	r3, #15
 8007708:	d9e6      	bls.n	80076d8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1da      	bne.n	80076c8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007716:	2307      	movs	r3, #7
 8007718:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	b2db      	uxtb	r3, r3
 8007724:	3330      	adds	r3, #48	; 0x30
 8007726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800772a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800772e:	2b39      	cmp	r3, #57	; 0x39
 8007730:	d904      	bls.n	800773c <gen_numname+0x98>
 8007732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007736:	3307      	adds	r3, #7
 8007738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800773c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800773e:	1e5a      	subs	r2, r3, #1
 8007740:	62ba      	str	r2, [r7, #40]	; 0x28
 8007742:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007746:	4413      	add	r3, r2
 8007748:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800774c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	091b      	lsrs	r3, r3, #4
 8007754:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1de      	bne.n	800771a <gen_numname+0x76>
	ns[i] = '~';
 800775c:	f107 0214 	add.w	r2, r7, #20
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	4413      	add	r3, r2
 8007764:	227e      	movs	r2, #126	; 0x7e
 8007766:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007768:	2300      	movs	r3, #0
 800776a:	627b      	str	r3, [r7, #36]	; 0x24
 800776c:	e002      	b.n	8007774 <gen_numname+0xd0>
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	3301      	adds	r3, #1
 8007772:	627b      	str	r3, [r7, #36]	; 0x24
 8007774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	429a      	cmp	r2, r3
 800777a:	d205      	bcs.n	8007788 <gen_numname+0xe4>
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	4413      	add	r3, r2
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b20      	cmp	r3, #32
 8007786:	d1f2      	bne.n	800776e <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	627a      	str	r2, [r7, #36]	; 0x24
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	441a      	add	r2, r3
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	2b07      	cmp	r3, #7
 8007796:	d808      	bhi.n	80077aa <gen_numname+0x106>
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	62b9      	str	r1, [r7, #40]	; 0x28
 800779e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80077a2:	440b      	add	r3, r1
 80077a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80077a8:	e000      	b.n	80077ac <gen_numname+0x108>
 80077aa:	2320      	movs	r3, #32
 80077ac:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	2b07      	cmp	r3, #7
 80077b2:	d9e9      	bls.n	8007788 <gen_numname+0xe4>
}
 80077b4:	bf00      	nop
 80077b6:	3730      	adds	r7, #48	; 0x30
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	00011021 	.word	0x00011021

080077c0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077cc:	230b      	movs	r3, #11
 80077ce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	0852      	lsrs	r2, r2, #1
 80077d6:	01db      	lsls	r3, r3, #7
 80077d8:	4313      	orrs	r3, r2
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	1c59      	adds	r1, r3, #1
 80077e0:	6079      	str	r1, [r7, #4]
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	4413      	add	r3, r2
 80077e6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	3b01      	subs	r3, #1
 80077ec:	60bb      	str	r3, [r7, #8]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1ed      	bne.n	80077d0 <sum_sfn+0x10>
	return sum;
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fca8 	bl	8007168 <dir_sdi>
 8007818:	4603      	mov	r3, r0
 800781a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d001      	beq.n	8007826 <dir_find+0x24>
 8007822:	7dfb      	ldrb	r3, [r7, #23]
 8007824:	e0a9      	b.n	800797a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007826:	23ff      	movs	r3, #255	; 0xff
 8007828:	753b      	strb	r3, [r7, #20]
 800782a:	7d3b      	ldrb	r3, [r7, #20]
 800782c:	757b      	strb	r3, [r7, #21]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	4619      	mov	r1, r3
 800783c:	6938      	ldr	r0, [r7, #16]
 800783e:	f7ff f91b 	bl	8006a78 <move_window>
 8007842:	4603      	mov	r3, r0
 8007844:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f040 8090 	bne.w	800796e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a1b      	ldr	r3, [r3, #32]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007856:	7dbb      	ldrb	r3, [r7, #22]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <dir_find+0x60>
 800785c:	2304      	movs	r3, #4
 800785e:	75fb      	strb	r3, [r7, #23]
 8007860:	e08a      	b.n	8007978 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	330b      	adds	r3, #11
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7bfa      	ldrb	r2, [r7, #15]
 8007874:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007876:	7dbb      	ldrb	r3, [r7, #22]
 8007878:	2be5      	cmp	r3, #229	; 0xe5
 800787a:	d007      	beq.n	800788c <dir_find+0x8a>
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	f003 0308 	and.w	r3, r3, #8
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <dir_find+0x98>
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b0f      	cmp	r3, #15
 800788a:	d006      	beq.n	800789a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800788c:	23ff      	movs	r3, #255	; 0xff
 800788e:	757b      	strb	r3, [r7, #21]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f04f 32ff 	mov.w	r2, #4294967295
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
 8007898:	e05e      	b.n	8007958 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d136      	bne.n	800790e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d154      	bne.n	8007958 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078ae:	7dbb      	ldrb	r3, [r7, #22]
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	7b5b      	ldrb	r3, [r3, #13]
 80078be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80078c0:	7dbb      	ldrb	r3, [r7, #22]
 80078c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c6:	75bb      	strb	r3, [r7, #22]
 80078c8:	7dbb      	ldrb	r3, [r7, #22]
 80078ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80078d4:	7dba      	ldrb	r2, [r7, #22]
 80078d6:	7d7b      	ldrb	r3, [r7, #21]
 80078d8:	429a      	cmp	r2, r3
 80078da:	d115      	bne.n	8007908 <dir_find+0x106>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	330d      	adds	r3, #13
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	7d3a      	ldrb	r2, [r7, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d10e      	bne.n	8007908 <dir_find+0x106>
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7ff fdfd 	bl	80074f4 <cmp_lfn>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d003      	beq.n	8007908 <dir_find+0x106>
 8007900:	7d7b      	ldrb	r3, [r7, #21]
 8007902:	3b01      	subs	r3, #1
 8007904:	b2db      	uxtb	r3, r3
 8007906:	e000      	b.n	800790a <dir_find+0x108>
 8007908:	23ff      	movs	r3, #255	; 0xff
 800790a:	757b      	strb	r3, [r7, #21]
 800790c:	e024      	b.n	8007958 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800790e:	7d7b      	ldrb	r3, [r7, #21]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d109      	bne.n	8007928 <dir_find+0x126>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	4618      	mov	r0, r3
 800791a:	f7ff ff51 	bl	80077c0 <sum_sfn>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	7d3b      	ldrb	r3, [r7, #20]
 8007924:	4293      	cmp	r3, r2
 8007926:	d024      	beq.n	8007972 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10a      	bne.n	800794c <dir_find+0x14a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a18      	ldr	r0, [r3, #32]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3324      	adds	r3, #36	; 0x24
 800793e:	220b      	movs	r2, #11
 8007940:	4619      	mov	r1, r3
 8007942:	f7fe fea6 	bl	8006692 <mem_cmp>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d014      	beq.n	8007976 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800794c:	23ff      	movs	r3, #255	; 0xff
 800794e:	757b      	strb	r3, [r7, #21]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f04f 32ff 	mov.w	r2, #4294967295
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007958:	2100      	movs	r1, #0
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff fc7f 	bl	800725e <dir_next>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f43f af65 	beq.w	8007836 <dir_find+0x34>
 800796c:	e004      	b.n	8007978 <dir_find+0x176>
		if (res != FR_OK) break;
 800796e:	bf00      	nop
 8007970:	e002      	b.n	8007978 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007972:	bf00      	nop
 8007974:	e000      	b.n	8007978 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007976:	bf00      	nop

	return res;
 8007978:	7dfb      	ldrb	r3, [r7, #23]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	; 0x30
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007998:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <dir_register+0x20>
 80079a0:	2306      	movs	r3, #6
 80079a2:	e0e0      	b.n	8007b66 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80079a4:	2300      	movs	r3, #0
 80079a6:	627b      	str	r3, [r7, #36]	; 0x24
 80079a8:	e002      	b.n	80079b0 <dir_register+0x2c>
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	3301      	adds	r3, #1
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	68da      	ldr	r2, [r3, #12]
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	4413      	add	r3, r2
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1f4      	bne.n	80079aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80079c6:	f107 030c 	add.w	r3, r7, #12
 80079ca:	220c      	movs	r2, #12
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fe fe25 	bl	800661c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079d2:	7dfb      	ldrb	r3, [r7, #23]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d032      	beq.n	8007a42 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2240      	movs	r2, #64	; 0x40
 80079e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80079e4:	2301      	movs	r3, #1
 80079e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e8:	e016      	b.n	8007a18 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	f107 010c 	add.w	r1, r7, #12
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f7ff fe53 	bl	80076a4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f7ff feff 	bl	8007802 <dir_find>
 8007a04:	4603      	mov	r3, r0
 8007a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d106      	bne.n	8007a20 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	3301      	adds	r3, #1
 8007a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	2b63      	cmp	r3, #99	; 0x63
 8007a1c:	d9e5      	bls.n	80079ea <dir_register+0x66>
 8007a1e:	e000      	b.n	8007a22 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007a20:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a24:	2b64      	cmp	r3, #100	; 0x64
 8007a26:	d101      	bne.n	8007a2c <dir_register+0xa8>
 8007a28:	2307      	movs	r3, #7
 8007a2a:	e09c      	b.n	8007b66 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d002      	beq.n	8007a3a <dir_register+0xb6>
 8007a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a38:	e095      	b.n	8007b66 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007a3a:	7dfa      	ldrb	r2, [r7, #23]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	f003 0302 	and.w	r3, r3, #2
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d007      	beq.n	8007a5c <dir_register+0xd8>
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	330c      	adds	r3, #12
 8007a50:	4a47      	ldr	r2, [pc, #284]	; (8007b70 <dir_register+0x1ec>)
 8007a52:	fba2 2303 	umull	r2, r3, r2, r3
 8007a56:	089b      	lsrs	r3, r3, #2
 8007a58:	3301      	adds	r3, #1
 8007a5a:	e000      	b.n	8007a5e <dir_register+0xda>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a60:	6a39      	ldr	r1, [r7, #32]
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fcc0 	bl	80073e8 <dir_alloc>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d148      	bne.n	8007b08 <dir_register+0x184>
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	623b      	str	r3, [r7, #32]
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d042      	beq.n	8007b08 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	695a      	ldr	r2, [r3, #20]
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	015b      	lsls	r3, r3, #5
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7ff fb6a 	bl	8007168 <dir_sdi>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d132      	bne.n	8007b08 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3324      	adds	r3, #36	; 0x24
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fe8a 	bl	80077c0 <sum_sfn>
 8007aac:	4603      	mov	r3, r0
 8007aae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	69f8      	ldr	r0, [r7, #28]
 8007ab8:	f7fe ffde 	bl	8006a78 <move_window>
 8007abc:	4603      	mov	r3, r0
 8007abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d11d      	bne.n	8007b06 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	68d8      	ldr	r0, [r3, #12]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a19      	ldr	r1, [r3, #32]
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	7efb      	ldrb	r3, [r7, #27]
 8007ad8:	f7ff fd7c 	bl	80075d4 <put_lfn>
				fs->wflag = 1;
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff fbba 	bl	800725e <dir_next>
 8007aea:	4603      	mov	r3, r0
 8007aec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d107      	bne.n	8007b08 <dir_register+0x184>
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	623b      	str	r3, [r7, #32]
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1d5      	bne.n	8007ab0 <dir_register+0x12c>
 8007b04:	e000      	b.n	8007b08 <dir_register+0x184>
				if (res != FR_OK) break;
 8007b06:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007b08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d128      	bne.n	8007b62 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	69db      	ldr	r3, [r3, #28]
 8007b14:	4619      	mov	r1, r3
 8007b16:	69f8      	ldr	r0, [r7, #28]
 8007b18:	f7fe ffae 	bl	8006a78 <move_window>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d11b      	bne.n	8007b62 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fd93 	bl	800665e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a18      	ldr	r0, [r3, #32]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3324      	adds	r3, #36	; 0x24
 8007b40:	220b      	movs	r2, #11
 8007b42:	4619      	mov	r1, r3
 8007b44:	f7fe fd6a 	bl	800661c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a1b      	ldr	r3, [r3, #32]
 8007b4c:	330c      	adds	r3, #12
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8007b54:	f002 0218 	and.w	r2, r2, #24
 8007b58:	b2d2      	uxtb	r2, r2
 8007b5a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3730      	adds	r7, #48	; 0x30
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	4ec4ec4f 	.word	0x4ec4ec4f

08007b74 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	613b      	str	r3, [r7, #16]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	1c5a      	adds	r2, r3, #1
 8007b98:	61ba      	str	r2, [r7, #24]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ba4:	2b1f      	cmp	r3, #31
 8007ba6:	d940      	bls.n	8007c2a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007baa:	2b2f      	cmp	r3, #47	; 0x2f
 8007bac:	d006      	beq.n	8007bbc <create_name+0x48>
 8007bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bb0:	2b5c      	cmp	r3, #92	; 0x5c
 8007bb2:	d110      	bne.n	8007bd6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007bb4:	e002      	b.n	8007bbc <create_name+0x48>
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	61bb      	str	r3, [r7, #24]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	2b2f      	cmp	r3, #47	; 0x2f
 8007bc6:	d0f6      	beq.n	8007bb6 <create_name+0x42>
 8007bc8:	693a      	ldr	r2, [r7, #16]
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	4413      	add	r3, r2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b5c      	cmp	r3, #92	; 0x5c
 8007bd2:	d0f0      	beq.n	8007bb6 <create_name+0x42>
			break;
 8007bd4:	e02a      	b.n	8007c2c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8007bda:	d901      	bls.n	8007be0 <create_name+0x6c>
 8007bdc:	2306      	movs	r3, #6
 8007bde:	e177      	b.n	8007ed0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007be8:	2101      	movs	r1, #1
 8007bea:	4618      	mov	r0, r3
 8007bec:	f001 fa64 	bl	80090b8 <ff_convert>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <create_name+0x8a>
 8007bfa:	2306      	movs	r3, #6
 8007bfc:	e168      	b.n	8007ed0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c00:	2b7f      	cmp	r3, #127	; 0x7f
 8007c02:	d809      	bhi.n	8007c18 <create_name+0xa4>
 8007c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c06:	4619      	mov	r1, r3
 8007c08:	48b3      	ldr	r0, [pc, #716]	; (8007ed8 <create_name+0x364>)
 8007c0a:	f7fe fd69 	bl	80066e0 <chk_chr>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <create_name+0xa4>
 8007c14:	2306      	movs	r3, #6
 8007c16:	e15b      	b.n	8007ed0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	617a      	str	r2, [r7, #20]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	4413      	add	r3, r2
 8007c24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c26:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c28:	e7b4      	b.n	8007b94 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007c2a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c2c:	693a      	ldr	r2, [r7, #16]
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	441a      	add	r2, r3
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007c36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c38:	2b1f      	cmp	r3, #31
 8007c3a:	d801      	bhi.n	8007c40 <create_name+0xcc>
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	e000      	b.n	8007c42 <create_name+0xce>
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c46:	e011      	b.n	8007c6c <create_name+0xf8>
		w = lfn[di - 1];
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007c4e:	4413      	add	r3, r2
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d002      	beq.n	8007c66 <create_name+0xf2>
 8007c60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c62:	2b2e      	cmp	r3, #46	; 0x2e
 8007c64:	d106      	bne.n	8007c74 <create_name+0x100>
		di--;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	3b01      	subs	r3, #1
 8007c6a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1ea      	bne.n	8007c48 <create_name+0xd4>
 8007c72:	e000      	b.n	8007c76 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007c74:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d101      	bne.n	8007c8c <create_name+0x118>
 8007c88:	2306      	movs	r3, #6
 8007c8a:	e121      	b.n	8007ed0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3324      	adds	r3, #36	; 0x24
 8007c90:	220b      	movs	r2, #11
 8007c92:	2120      	movs	r1, #32
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fce2 	bl	800665e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	e002      	b.n	8007ca6 <create_name+0x132>
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	68fa      	ldr	r2, [r7, #12]
 8007cac:	4413      	add	r3, r2
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d0f5      	beq.n	8007ca0 <create_name+0x12c>
 8007cb4:	69bb      	ldr	r3, [r7, #24]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4413      	add	r3, r2
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007cc0:	d0ee      	beq.n	8007ca0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d009      	beq.n	8007cdc <create_name+0x168>
 8007cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ccc:	f043 0303 	orr.w	r3, r3, #3
 8007cd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007cd4:	e002      	b.n	8007cdc <create_name+0x168>
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d009      	beq.n	8007cf6 <create_name+0x182>
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007ce8:	4413      	add	r3, r2
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	881b      	ldrh	r3, [r3, #0]
 8007cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8007cf4:	d1ef      	bne.n	8007cd6 <create_name+0x162>

	i = b = 0; ni = 8;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	623b      	str	r3, [r7, #32]
 8007d00:	2308      	movs	r3, #8
 8007d02:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	1c5a      	adds	r2, r3, #1
 8007d08:	61ba      	str	r2, [r7, #24]
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4413      	add	r3, r2
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007d14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 8090 	beq.w	8007e3c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d006      	beq.n	8007d30 <create_name+0x1bc>
 8007d22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d24:	2b2e      	cmp	r3, #46	; 0x2e
 8007d26:	d10a      	bne.n	8007d3e <create_name+0x1ca>
 8007d28:	69ba      	ldr	r2, [r7, #24]
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d006      	beq.n	8007d3e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d34:	f043 0303 	orr.w	r3, r3, #3
 8007d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d3c:	e07d      	b.n	8007e3a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	429a      	cmp	r2, r3
 8007d44:	d203      	bcs.n	8007d4e <create_name+0x1da>
 8007d46:	69ba      	ldr	r2, [r7, #24]
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d123      	bne.n	8007d96 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	2b0b      	cmp	r3, #11
 8007d52:	d106      	bne.n	8007d62 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007d54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d58:	f043 0303 	orr.w	r3, r3, #3
 8007d5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d60:	e06f      	b.n	8007e42 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007d62:	69ba      	ldr	r2, [r7, #24]
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d005      	beq.n	8007d76 <create_name+0x202>
 8007d6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d6e:	f043 0303 	orr.w	r3, r3, #3
 8007d72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d860      	bhi.n	8007e40 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	61bb      	str	r3, [r7, #24]
 8007d82:	2308      	movs	r3, #8
 8007d84:	623b      	str	r3, [r7, #32]
 8007d86:	230b      	movs	r3, #11
 8007d88:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d94:	e051      	b.n	8007e3a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d98:	2b7f      	cmp	r3, #127	; 0x7f
 8007d9a:	d914      	bls.n	8007dc6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007d9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f001 f989 	bl	80090b8 <ff_convert>
 8007da6:	4603      	mov	r3, r0
 8007da8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <create_name+0x246>
 8007db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007db2:	3b80      	subs	r3, #128	; 0x80
 8007db4:	4a49      	ldr	r2, [pc, #292]	; (8007edc <create_name+0x368>)
 8007db6:	5cd3      	ldrb	r3, [r2, r3]
 8007db8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007dba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dbe:	f043 0302 	orr.w	r3, r3, #2
 8007dc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <create_name+0x268>
 8007dcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4843      	ldr	r0, [pc, #268]	; (8007ee0 <create_name+0x36c>)
 8007dd2:	f7fe fc85 	bl	80066e0 <chk_chr>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d008      	beq.n	8007dee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007ddc:	235f      	movs	r3, #95	; 0x5f
 8007dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007de0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de4:	f043 0303 	orr.w	r3, r3, #3
 8007de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dec:	e01b      	b.n	8007e26 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007dee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df0:	2b40      	cmp	r3, #64	; 0x40
 8007df2:	d909      	bls.n	8007e08 <create_name+0x294>
 8007df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df6:	2b5a      	cmp	r3, #90	; 0x5a
 8007df8:	d806      	bhi.n	8007e08 <create_name+0x294>
					b |= 2;
 8007dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dfe:	f043 0302 	orr.w	r3, r3, #2
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e06:	e00e      	b.n	8007e26 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0a:	2b60      	cmp	r3, #96	; 0x60
 8007e0c:	d90b      	bls.n	8007e26 <create_name+0x2b2>
 8007e0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e10:	2b7a      	cmp	r3, #122	; 0x7a
 8007e12:	d808      	bhi.n	8007e26 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	f043 0301 	orr.w	r3, r3, #1
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e22:	3b20      	subs	r3, #32
 8007e24:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	623a      	str	r2, [r7, #32]
 8007e2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e2e:	b2d1      	uxtb	r1, r2
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	4413      	add	r3, r2
 8007e34:	460a      	mov	r2, r1
 8007e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007e3a:	e763      	b.n	8007d04 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007e3c:	bf00      	nop
 8007e3e:	e000      	b.n	8007e42 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007e40:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e48:	2be5      	cmp	r3, #229	; 0xe5
 8007e4a:	d103      	bne.n	8007e54 <create_name+0x2e0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007e54:	69fb      	ldr	r3, [r7, #28]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d104      	bne.n	8007e64 <create_name+0x2f0>
 8007e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b0c      	cmp	r3, #12
 8007e6e:	d005      	beq.n	8007e7c <create_name+0x308>
 8007e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e74:	f003 0303 	and.w	r3, r3, #3
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d105      	bne.n	8007e88 <create_name+0x314>
 8007e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e80:	f043 0302 	orr.w	r3, r3, #2
 8007e84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007e88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e8c:	f003 0302 	and.w	r3, r3, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d117      	bne.n	8007ec4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d105      	bne.n	8007eac <create_name+0x338>
 8007ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ea4:	f043 0310 	orr.w	r3, r3, #16
 8007ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb0:	f003 030c 	and.w	r3, r3, #12
 8007eb4:	2b04      	cmp	r3, #4
 8007eb6:	d105      	bne.n	8007ec4 <create_name+0x350>
 8007eb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ebc:	f043 0308 	orr.w	r3, r3, #8
 8007ec0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007eca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007ece:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3728      	adds	r7, #40	; 0x28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	080110b4 	.word	0x080110b4
 8007edc:	080115ac 	.word	0x080115ac
 8007ee0:	080110c0 	.word	0x080110c0

08007ee4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ef8:	e002      	b.n	8007f00 <follow_path+0x1c>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	3301      	adds	r3, #1
 8007efe:	603b      	str	r3, [r7, #0]
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b2f      	cmp	r3, #47	; 0x2f
 8007f06:	d0f8      	beq.n	8007efa <follow_path+0x16>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	2b5c      	cmp	r3, #92	; 0x5c
 8007f0e:	d0f4      	beq.n	8007efa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2200      	movs	r2, #0
 8007f14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b1f      	cmp	r3, #31
 8007f1c:	d80a      	bhi.n	8007f34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2280      	movs	r2, #128	; 0x80
 8007f22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007f26:	2100      	movs	r1, #0
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f91d 	bl	8007168 <dir_sdi>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75fb      	strb	r3, [r7, #23]
 8007f32:	e043      	b.n	8007fbc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f34:	463b      	mov	r3, r7
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff fe1b 	bl	8007b74 <create_name>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d134      	bne.n	8007fb2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff fc5a 	bl	8007802 <dir_find>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007f58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007f60:	7dfb      	ldrb	r3, [r7, #23]
 8007f62:	2b04      	cmp	r3, #4
 8007f64:	d127      	bne.n	8007fb6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	f003 0304 	and.w	r3, r3, #4
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d122      	bne.n	8007fb6 <follow_path+0xd2>
 8007f70:	2305      	movs	r3, #5
 8007f72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007f74:	e01f      	b.n	8007fb6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11c      	bne.n	8007fba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	799b      	ldrb	r3, [r3, #6]
 8007f84:	f003 0310 	and.w	r3, r3, #16
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007f8c:	2305      	movs	r3, #5
 8007f8e:	75fb      	strb	r3, [r7, #23]
 8007f90:	e014      	b.n	8007fbc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa0:	4413      	add	r3, r2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f7ff fa66 	bl	8007476 <ld_clust>
 8007faa:	4602      	mov	r2, r0
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007fb0:	e7c0      	b.n	8007f34 <follow_path+0x50>
			if (res != FR_OK) break;
 8007fb2:	bf00      	nop
 8007fb4:	e002      	b.n	8007fbc <follow_path+0xd8>
				break;
 8007fb6:	bf00      	nop
 8007fb8:	e000      	b.n	8007fbc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fba:	bf00      	nop
			}
		}
	}

	return res;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007fce:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d031      	beq.n	8008040 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e002      	b.n	8007fea <get_ldnumber+0x24>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b1f      	cmp	r3, #31
 8007ff0:	d903      	bls.n	8007ffa <get_ldnumber+0x34>
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b3a      	cmp	r3, #58	; 0x3a
 8007ff8:	d1f4      	bne.n	8007fe4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b3a      	cmp	r3, #58	; 0x3a
 8008000:	d11c      	bne.n	800803c <get_ldnumber+0x76>
			tp = *path;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	60fa      	str	r2, [r7, #12]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	3b30      	subs	r3, #48	; 0x30
 8008012:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2b09      	cmp	r3, #9
 8008018:	d80e      	bhi.n	8008038 <get_ldnumber+0x72>
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	429a      	cmp	r2, r3
 8008020:	d10a      	bne.n	8008038 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d107      	bne.n	8008038 <get_ldnumber+0x72>
					vol = (int)i;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	3301      	adds	r3, #1
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	e002      	b.n	8008042 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800803c:	2300      	movs	r3, #0
 800803e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008040:	693b      	ldr	r3, [r7, #16]
}
 8008042:	4618      	mov	r0, r3
 8008044:	371c      	adds	r7, #28
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	70da      	strb	r2, [r3, #3]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7fe fd04 	bl	8006a78 <move_window>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <check_fs+0x2a>
 8008076:	2304      	movs	r3, #4
 8008078:	e038      	b.n	80080ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3334      	adds	r3, #52	; 0x34
 800807e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fa48 	bl	8006518 <ld_word>
 8008088:	4603      	mov	r3, r0
 800808a:	461a      	mov	r2, r3
 800808c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008090:	429a      	cmp	r2, r3
 8008092:	d001      	beq.n	8008098 <check_fs+0x48>
 8008094:	2303      	movs	r3, #3
 8008096:	e029      	b.n	80080ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800809e:	2be9      	cmp	r3, #233	; 0xe9
 80080a0:	d009      	beq.n	80080b6 <check_fs+0x66>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080a8:	2beb      	cmp	r3, #235	; 0xeb
 80080aa:	d11e      	bne.n	80080ea <check_fs+0x9a>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80080b2:	2b90      	cmp	r3, #144	; 0x90
 80080b4:	d119      	bne.n	80080ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3334      	adds	r3, #52	; 0x34
 80080ba:	3336      	adds	r3, #54	; 0x36
 80080bc:	4618      	mov	r0, r3
 80080be:	f7fe fa43 	bl	8006548 <ld_dword>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80080c8:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <check_fs+0xa4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d101      	bne.n	80080d2 <check_fs+0x82>
 80080ce:	2300      	movs	r3, #0
 80080d0:	e00c      	b.n	80080ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3334      	adds	r3, #52	; 0x34
 80080d6:	3352      	adds	r3, #82	; 0x52
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fa35 	bl	8006548 <ld_dword>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <check_fs+0xa8>)
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d101      	bne.n	80080ea <check_fs+0x9a>
 80080e6:	2300      	movs	r3, #0
 80080e8:	e000      	b.n	80080ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80080ea:	2302      	movs	r3, #2
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	00544146 	.word	0x00544146
 80080f8:	33544146 	.word	0x33544146

080080fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b096      	sub	sp, #88	; 0x58
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2200      	movs	r2, #0
 800810e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f7ff ff58 	bl	8007fc6 <get_ldnumber>
 8008116:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800811a:	2b00      	cmp	r3, #0
 800811c:	da01      	bge.n	8008122 <find_volume+0x26>
 800811e:	230b      	movs	r3, #11
 8008120:	e231      	b.n	8008586 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008122:	4aa8      	ldr	r2, [pc, #672]	; (80083c4 <find_volume+0x2c8>)
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800812c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <find_volume+0x3a>
 8008132:	230c      	movs	r3, #12
 8008134:	e227      	b.n	8008586 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	f023 0301 	bic.w	r3, r3, #1
 8008142:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01a      	beq.n	8008182 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	785b      	ldrb	r3, [r3, #1]
 8008150:	4618      	mov	r0, r3
 8008152:	f7fe f943 	bl	80063dc <disk_status>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800815c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10c      	bne.n	8008182 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d007      	beq.n	800817e <find_volume+0x82>
 800816e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008172:	f003 0304 	and.w	r3, r3, #4
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800817a:	230a      	movs	r3, #10
 800817c:	e203      	b.n	8008586 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 800817e:	2300      	movs	r3, #0
 8008180:	e201      	b.n	8008586 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818a:	b2da      	uxtb	r2, r3
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	4618      	mov	r0, r3
 8008196:	f7fe f93b 	bl	8006410 <disk_initialize>
 800819a:	4603      	mov	r3, r0
 800819c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80081a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80081ac:	2303      	movs	r3, #3
 80081ae:	e1ea      	b.n	8008586 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d007      	beq.n	80081c6 <find_volume+0xca>
 80081b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ba:	f003 0304 	and.w	r3, r3, #4
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80081c2:	230a      	movs	r3, #10
 80081c4:	e1df      	b.n	8008586 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80081ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ce:	f7ff ff3f 	bl	8008050 <check_fs>
 80081d2:	4603      	mov	r3, r0
 80081d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80081d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d14b      	bne.n	8008278 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80081e0:	2300      	movs	r3, #0
 80081e2:	643b      	str	r3, [r7, #64]	; 0x40
 80081e4:	e01f      	b.n	8008226 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80081ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80081f4:	4413      	add	r3, r2
 80081f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80081f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fa:	3304      	adds	r3, #4
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d006      	beq.n	8008210 <find_volume+0x114>
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	3308      	adds	r3, #8
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe f99e 	bl	8006548 <ld_dword>
 800820c:	4602      	mov	r2, r0
 800820e:	e000      	b.n	8008212 <find_volume+0x116>
 8008210:	2200      	movs	r2, #0
 8008212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800821a:	440b      	add	r3, r1
 800821c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008222:	3301      	adds	r3, #1
 8008224:	643b      	str	r3, [r7, #64]	; 0x40
 8008226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008228:	2b03      	cmp	r3, #3
 800822a:	d9dc      	bls.n	80081e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800822c:	2300      	movs	r3, #0
 800822e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008232:	2b00      	cmp	r3, #0
 8008234:	d002      	beq.n	800823c <find_volume+0x140>
 8008236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008238:	3b01      	subs	r3, #1
 800823a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800823c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008244:	4413      	add	r3, r2
 8008246:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800824a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800824c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <find_volume+0x162>
 8008252:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008256:	f7ff fefb 	bl	8008050 <check_fs>
 800825a:	4603      	mov	r3, r0
 800825c:	e000      	b.n	8008260 <find_volume+0x164>
 800825e:	2303      	movs	r3, #3
 8008260:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008264:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008268:	2b01      	cmp	r3, #1
 800826a:	d905      	bls.n	8008278 <find_volume+0x17c>
 800826c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826e:	3301      	adds	r3, #1
 8008270:	643b      	str	r3, [r7, #64]	; 0x40
 8008272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008274:	2b03      	cmp	r3, #3
 8008276:	d9e1      	bls.n	800823c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800827c:	2b04      	cmp	r3, #4
 800827e:	d101      	bne.n	8008284 <find_volume+0x188>
 8008280:	2301      	movs	r3, #1
 8008282:	e180      	b.n	8008586 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008288:	2b01      	cmp	r3, #1
 800828a:	d901      	bls.n	8008290 <find_volume+0x194>
 800828c:	230d      	movs	r3, #13
 800828e:	e17a      	b.n	8008586 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008292:	3334      	adds	r3, #52	; 0x34
 8008294:	330b      	adds	r3, #11
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe f93e 	bl	8006518 <ld_word>
 800829c:	4603      	mov	r3, r0
 800829e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a2:	d001      	beq.n	80082a8 <find_volume+0x1ac>
 80082a4:	230d      	movs	r3, #13
 80082a6:	e16e      	b.n	8008586 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	3334      	adds	r3, #52	; 0x34
 80082ac:	3316      	adds	r3, #22
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe f932 	bl	8006518 <ld_word>
 80082b4:	4603      	mov	r3, r0
 80082b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80082b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d106      	bne.n	80082cc <find_volume+0x1d0>
 80082be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082c0:	3334      	adds	r3, #52	; 0x34
 80082c2:	3324      	adds	r3, #36	; 0x24
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe f93f 	bl	8006548 <ld_dword>
 80082ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80082d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80082d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	789b      	ldrb	r3, [r3, #2]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d005      	beq.n	80082f0 <find_volume+0x1f4>
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	789b      	ldrb	r3, [r3, #2]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d001      	beq.n	80082f0 <find_volume+0x1f4>
 80082ec:	230d      	movs	r3, #13
 80082ee:	e14a      	b.n	8008586 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80082f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082f2:	789b      	ldrb	r3, [r3, #2]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082f8:	fb02 f303 	mul.w	r3, r2, r3
 80082fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008304:	b29a      	uxth	r2, r3
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008308:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800830a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800830c:	895b      	ldrh	r3, [r3, #10]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d008      	beq.n	8008324 <find_volume+0x228>
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	895b      	ldrh	r3, [r3, #10]
 8008316:	461a      	mov	r2, r3
 8008318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831a:	895b      	ldrh	r3, [r3, #10]
 800831c:	3b01      	subs	r3, #1
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <find_volume+0x22c>
 8008324:	230d      	movs	r3, #13
 8008326:	e12e      	b.n	8008586 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	3334      	adds	r3, #52	; 0x34
 800832c:	3311      	adds	r3, #17
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f8f2 	bl	8006518 <ld_word>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800833c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800833e:	891b      	ldrh	r3, [r3, #8]
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d001      	beq.n	800834e <find_volume+0x252>
 800834a:	230d      	movs	r3, #13
 800834c:	e11b      	b.n	8008586 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800834e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008350:	3334      	adds	r3, #52	; 0x34
 8008352:	3313      	adds	r3, #19
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe f8df 	bl	8006518 <ld_word>
 800835a:	4603      	mov	r3, r0
 800835c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800835e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008360:	2b00      	cmp	r3, #0
 8008362:	d106      	bne.n	8008372 <find_volume+0x276>
 8008364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008366:	3334      	adds	r3, #52	; 0x34
 8008368:	3320      	adds	r3, #32
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe f8ec 	bl	8006548 <ld_dword>
 8008370:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008374:	3334      	adds	r3, #52	; 0x34
 8008376:	330e      	adds	r3, #14
 8008378:	4618      	mov	r0, r3
 800837a:	f7fe f8cd 	bl	8006518 <ld_word>
 800837e:	4603      	mov	r3, r0
 8008380:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008382:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <find_volume+0x290>
 8008388:	230d      	movs	r3, #13
 800838a:	e0fc      	b.n	8008586 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800838c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800838e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008390:	4413      	add	r3, r2
 8008392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008394:	8912      	ldrh	r2, [r2, #8]
 8008396:	0912      	lsrs	r2, r2, #4
 8008398:	b292      	uxth	r2, r2
 800839a:	4413      	add	r3, r2
 800839c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800839e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d201      	bcs.n	80083aa <find_volume+0x2ae>
 80083a6:	230d      	movs	r3, #13
 80083a8:	e0ed      	b.n	8008586 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80083aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b2:	8952      	ldrh	r2, [r2, #10]
 80083b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <find_volume+0x2cc>
 80083c0:	230d      	movs	r3, #13
 80083c2:	e0e0      	b.n	8008586 <find_volume+0x48a>
 80083c4:	20000094 	.word	0x20000094
		fmt = FS_FAT32;
 80083c8:	2303      	movs	r3, #3
 80083ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d802      	bhi.n	80083de <find_volume+0x2e2>
 80083d8:	2302      	movs	r3, #2
 80083da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d802      	bhi.n	80083ee <find_volume+0x2f2>
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	1c9a      	adds	r2, r3, #2
 80083f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80083f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083fa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80083fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80083fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008400:	441a      	add	r2, r3
 8008402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008404:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008406:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	441a      	add	r2, r3
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008414:	2b03      	cmp	r3, #3
 8008416:	d11e      	bne.n	8008456 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	3334      	adds	r3, #52	; 0x34
 800841c:	332a      	adds	r3, #42	; 0x2a
 800841e:	4618      	mov	r0, r3
 8008420:	f7fe f87a 	bl	8006518 <ld_word>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <find_volume+0x332>
 800842a:	230d      	movs	r3, #13
 800842c:	e0ab      	b.n	8008586 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	891b      	ldrh	r3, [r3, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <find_volume+0x33e>
 8008436:	230d      	movs	r3, #13
 8008438:	e0a5      	b.n	8008586 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800843a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843c:	3334      	adds	r3, #52	; 0x34
 800843e:	332c      	adds	r3, #44	; 0x2c
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe f881 	bl	8006548 <ld_dword>
 8008446:	4602      	mov	r2, r0
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	647b      	str	r3, [r7, #68]	; 0x44
 8008454:	e01f      	b.n	8008496 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	891b      	ldrh	r3, [r3, #8]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <find_volume+0x366>
 800845e:	230d      	movs	r3, #13
 8008460:	e091      	b.n	8008586 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008468:	441a      	add	r2, r3
 800846a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800846e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008472:	2b02      	cmp	r3, #2
 8008474:	d103      	bne.n	800847e <find_volume+0x382>
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	e00a      	b.n	8008494 <find_volume+0x398>
 800847e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008480:	699a      	ldr	r2, [r3, #24]
 8008482:	4613      	mov	r3, r2
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	4413      	add	r3, r2
 8008488:	085a      	lsrs	r2, r3, #1
 800848a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008494:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008498:	69da      	ldr	r2, [r3, #28]
 800849a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80084a0:	0a5b      	lsrs	r3, r3, #9
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d201      	bcs.n	80084aa <find_volume+0x3ae>
 80084a6:	230d      	movs	r3, #13
 80084a8:	e06d      	b.n	8008586 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80084aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	615a      	str	r2, [r3, #20]
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	695a      	ldr	r2, [r3, #20]
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	2280      	movs	r2, #128	; 0x80
 80084be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80084c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d149      	bne.n	800855c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	3334      	adds	r3, #52	; 0x34
 80084cc:	3330      	adds	r3, #48	; 0x30
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe f822 	bl	8006518 <ld_word>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d140      	bne.n	800855c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80084da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084dc:	3301      	adds	r3, #1
 80084de:	4619      	mov	r1, r3
 80084e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084e2:	f7fe fac9 	bl	8006a78 <move_window>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d137      	bne.n	800855c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	2200      	movs	r2, #0
 80084f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80084f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f4:	3334      	adds	r3, #52	; 0x34
 80084f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe f80c 	bl	8006518 <ld_word>
 8008500:	4603      	mov	r3, r0
 8008502:	461a      	mov	r2, r3
 8008504:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008508:	429a      	cmp	r2, r3
 800850a:	d127      	bne.n	800855c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	3334      	adds	r3, #52	; 0x34
 8008510:	4618      	mov	r0, r3
 8008512:	f7fe f819 	bl	8006548 <ld_dword>
 8008516:	4602      	mov	r2, r0
 8008518:	4b1d      	ldr	r3, [pc, #116]	; (8008590 <find_volume+0x494>)
 800851a:	429a      	cmp	r2, r3
 800851c:	d11e      	bne.n	800855c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	3334      	adds	r3, #52	; 0x34
 8008522:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe f80e 	bl	8006548 <ld_dword>
 800852c:	4602      	mov	r2, r0
 800852e:	4b19      	ldr	r3, [pc, #100]	; (8008594 <find_volume+0x498>)
 8008530:	429a      	cmp	r2, r3
 8008532:	d113      	bne.n	800855c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	3334      	adds	r3, #52	; 0x34
 8008538:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe f803 	bl	8006548 <ld_dword>
 8008542:	4602      	mov	r2, r0
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	3334      	adds	r3, #52	; 0x34
 800854c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008550:	4618      	mov	r0, r3
 8008552:	f7fd fff9 	bl	8006548 <ld_dword>
 8008556:	4602      	mov	r2, r0
 8008558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008562:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008564:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <find_volume+0x49c>)
 8008566:	881b      	ldrh	r3, [r3, #0]
 8008568:	3301      	adds	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <find_volume+0x49c>)
 800856e:	801a      	strh	r2, [r3, #0]
 8008570:	4b09      	ldr	r3, [pc, #36]	; (8008598 <find_volume+0x49c>)
 8008572:	881a      	ldrh	r2, [r3, #0]
 8008574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008576:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	4a08      	ldr	r2, [pc, #32]	; (800859c <find_volume+0x4a0>)
 800857c:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800857e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008580:	f7fe fa12 	bl	80069a8 <clear_lock>
#endif
	return FR_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	3758      	adds	r7, #88	; 0x58
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	41615252 	.word	0x41615252
 8008594:	61417272 	.word	0x61417272
 8008598:	20000098 	.word	0x20000098
 800859c:	200000bc 	.word	0x200000bc

080085a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80085aa:	2309      	movs	r3, #9
 80085ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01c      	beq.n	80085ee <validate+0x4e>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d018      	beq.n	80085ee <validate+0x4e>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d013      	beq.n	80085ee <validate+0x4e>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	889a      	ldrh	r2, [r3, #4]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	88db      	ldrh	r3, [r3, #6]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d10c      	bne.n	80085ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	785b      	ldrb	r3, [r3, #1]
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fd fefe 	bl	80063dc <disk_status>
 80085e0:	4603      	mov	r3, r0
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <validate+0x4e>
			res = FR_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d102      	bne.n	80085fa <validate+0x5a>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	e000      	b.n	80085fc <validate+0x5c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	6013      	str	r3, [r2, #0]
	return res;
 8008600:	7bfb      	ldrb	r3, [r7, #15]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
	...

0800860c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	4613      	mov	r3, r2
 8008618:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800861e:	f107 0310 	add.w	r3, r7, #16
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fccf 	bl	8007fc6 <get_ldnumber>
 8008628:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	2b00      	cmp	r3, #0
 800862e:	da01      	bge.n	8008634 <f_mount+0x28>
 8008630:	230b      	movs	r3, #11
 8008632:	e02b      	b.n	800868c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008634:	4a17      	ldr	r2, [pc, #92]	; (8008694 <f_mount+0x88>)
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800863c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008644:	69b8      	ldr	r0, [r7, #24]
 8008646:	f7fe f9af 	bl	80069a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d002      	beq.n	800865c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	490d      	ldr	r1, [pc, #52]	; (8008694 <f_mount+0x88>)
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d002      	beq.n	8008672 <f_mount+0x66>
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	2b01      	cmp	r3, #1
 8008670:	d001      	beq.n	8008676 <f_mount+0x6a>
 8008672:	2300      	movs	r3, #0
 8008674:	e00a      	b.n	800868c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008676:	f107 010c 	add.w	r1, r7, #12
 800867a:	f107 0308 	add.w	r3, r7, #8
 800867e:	2200      	movs	r2, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f7ff fd3b 	bl	80080fc <find_volume>
 8008686:	4603      	mov	r3, r0
 8008688:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800868a:	7dfb      	ldrb	r3, [r7, #23]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3720      	adds	r7, #32
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000094 	.word	0x20000094

08008698 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b09a      	sub	sp, #104	; 0x68
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <f_open+0x18>
 80086ac:	2309      	movs	r3, #9
 80086ae:	e194      	b.n	80089da <f_open+0x342>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80086b8:	79fa      	ldrb	r2, [r7, #7]
 80086ba:	f107 0114 	add.w	r1, r7, #20
 80086be:	f107 0308 	add.w	r3, r7, #8
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fd1a 	bl	80080fc <find_volume>
 80086c8:	4603      	mov	r3, r0
 80086ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80086ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 8178 	bne.w	80089c8 <f_open+0x330>
		dj.obj.fs = fs;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	f107 0318 	add.w	r3, r7, #24
 80086e2:	4611      	mov	r1, r2
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7ff fbfd 	bl	8007ee4 <follow_path>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80086f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d11a      	bne.n	800872e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80086f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80086fc:	b25b      	sxtb	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	da03      	bge.n	800870a <f_open+0x72>
				res = FR_INVALID_NAME;
 8008702:	2306      	movs	r3, #6
 8008704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008708:	e011      	b.n	800872e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	f023 0301 	bic.w	r3, r3, #1
 8008710:	2b00      	cmp	r3, #0
 8008712:	bf14      	ite	ne
 8008714:	2301      	movne	r3, #1
 8008716:	2300      	moveq	r3, #0
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	f107 0318 	add.w	r3, r7, #24
 8008720:	4611      	mov	r1, r2
 8008722:	4618      	mov	r0, r3
 8008724:	f7fd fff8 	bl	8006718 <chk_lock>
 8008728:	4603      	mov	r3, r0
 800872a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	f003 031c 	and.w	r3, r3, #28
 8008734:	2b00      	cmp	r3, #0
 8008736:	d07f      	beq.n	8008838 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008738:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800873c:	2b00      	cmp	r3, #0
 800873e:	d017      	beq.n	8008770 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008740:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008744:	2b04      	cmp	r3, #4
 8008746:	d10e      	bne.n	8008766 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008748:	f7fe f842 	bl	80067d0 <enq_lock>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d006      	beq.n	8008760 <f_open+0xc8>
 8008752:	f107 0318 	add.w	r3, r7, #24
 8008756:	4618      	mov	r0, r3
 8008758:	f7ff f914 	bl	8007984 <dir_register>
 800875c:	4603      	mov	r3, r0
 800875e:	e000      	b.n	8008762 <f_open+0xca>
 8008760:	2312      	movs	r3, #18
 8008762:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008766:	79fb      	ldrb	r3, [r7, #7]
 8008768:	f043 0308 	orr.w	r3, r3, #8
 800876c:	71fb      	strb	r3, [r7, #7]
 800876e:	e010      	b.n	8008792 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008770:	7fbb      	ldrb	r3, [r7, #30]
 8008772:	f003 0311 	and.w	r3, r3, #17
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <f_open+0xea>
					res = FR_DENIED;
 800877a:	2307      	movs	r3, #7
 800877c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008780:	e007      	b.n	8008792 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	f003 0304 	and.w	r3, r3, #4
 8008788:	2b00      	cmp	r3, #0
 800878a:	d002      	beq.n	8008792 <f_open+0xfa>
 800878c:	2308      	movs	r3, #8
 800878e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008796:	2b00      	cmp	r3, #0
 8008798:	d168      	bne.n	800886c <f_open+0x1d4>
 800879a:	79fb      	ldrb	r3, [r7, #7]
 800879c:	f003 0308 	and.w	r3, r3, #8
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d063      	beq.n	800886c <f_open+0x1d4>
				dw = GET_FATTIME();
 80087a4:	f000 fe66 	bl	8009474 <get_fattime>
 80087a8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80087aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ac:	330e      	adds	r3, #14
 80087ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd ff07 	bl	80065c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80087b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b8:	3316      	adds	r3, #22
 80087ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80087bc:	4618      	mov	r0, r3
 80087be:	f7fd ff01 	bl	80065c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	330b      	adds	r3, #11
 80087c6:	2220      	movs	r2, #32
 80087c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ce:	4611      	mov	r1, r2
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fe50 	bl	8007476 <ld_clust>
 80087d6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087dc:	2200      	movs	r2, #0
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fe fe68 	bl	80074b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e6:	331c      	adds	r3, #28
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd feea 	bl	80065c4 <st_dword>
					fs->wflag = 1;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2201      	movs	r2, #1
 80087f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d037      	beq.n	800886c <f_open+0x1d4>
						dw = fs->winsect;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008800:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8008802:	f107 0318 	add.w	r3, r7, #24
 8008806:	2200      	movs	r2, #0
 8008808:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe fb7b 	bl	8006f06 <remove_chain>
 8008810:	4603      	mov	r3, r0
 8008812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008816:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800881a:	2b00      	cmp	r3, #0
 800881c:	d126      	bne.n	800886c <f_open+0x1d4>
							res = move_window(fs, dw);
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008822:	4618      	mov	r0, r3
 8008824:	f7fe f928 	bl	8006a78 <move_window>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008832:	3a01      	subs	r2, #1
 8008834:	611a      	str	r2, [r3, #16]
 8008836:	e019      	b.n	800886c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800883c:	2b00      	cmp	r3, #0
 800883e:	d115      	bne.n	800886c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008840:	7fbb      	ldrb	r3, [r7, #30]
 8008842:	f003 0310 	and.w	r3, r3, #16
 8008846:	2b00      	cmp	r3, #0
 8008848:	d003      	beq.n	8008852 <f_open+0x1ba>
					res = FR_NO_FILE;
 800884a:	2304      	movs	r3, #4
 800884c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008850:	e00c      	b.n	800886c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008852:	79fb      	ldrb	r3, [r7, #7]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d007      	beq.n	800886c <f_open+0x1d4>
 800885c:	7fbb      	ldrb	r3, [r7, #30]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d002      	beq.n	800886c <f_open+0x1d4>
						res = FR_DENIED;
 8008866:	2307      	movs	r3, #7
 8008868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800886c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008870:	2b00      	cmp	r3, #0
 8008872:	d128      	bne.n	80088c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f003 0308 	and.w	r3, r3, #8
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008884:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800888e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008894:	79fb      	ldrb	r3, [r7, #7]
 8008896:	f023 0301 	bic.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf14      	ite	ne
 800889e:	2301      	movne	r3, #1
 80088a0:	2300      	moveq	r3, #0
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	461a      	mov	r2, r3
 80088a6:	f107 0318 	add.w	r3, r7, #24
 80088aa:	4611      	mov	r1, r2
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fd ffb1 	bl	8006814 <inc_lock>
 80088b2:	4602      	mov	r2, r0
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d102      	bne.n	80088c6 <f_open+0x22e>
 80088c0:	2302      	movs	r3, #2
 80088c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d17c      	bne.n	80089c8 <f_open+0x330>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fdce 	bl	8007476 <ld_clust>
 80088da:	4602      	mov	r2, r0
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80088e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e2:	331c      	adds	r3, #28
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fd fe2f 	bl	8006548 <ld_dword>
 80088ea:	4602      	mov	r2, r0
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	88da      	ldrh	r2, [r3, #6]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	79fa      	ldrb	r2, [r7, #7]
 8008908:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800891c:	79fb      	ldrb	r3, [r7, #7]
 800891e:	f003 0320 	and.w	r3, r3, #32
 8008922:	2b00      	cmp	r3, #0
 8008924:	d050      	beq.n	80089c8 <f_open+0x330>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d04c      	beq.n	80089c8 <f_open+0x330>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	895b      	ldrh	r3, [r3, #10]
 800893a:	025b      	lsls	r3, r3, #9
 800893c:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	65fb      	str	r3, [r7, #92]	; 0x5c
 800894a:	e016      	b.n	800897a <f_open+0x2e2>
					clst = get_fat(&fp->obj, clst);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008950:	4618      	mov	r0, r3
 8008952:	f7fe f94c 	bl	8006bee <get_fat>
 8008956:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800895a:	2b01      	cmp	r3, #1
 800895c:	d802      	bhi.n	8008964 <f_open+0x2cc>
 800895e:	2302      	movs	r3, #2
 8008960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800896a:	d102      	bne.n	8008972 <f_open+0x2da>
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008972:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	65fb      	str	r3, [r7, #92]	; 0x5c
 800897a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800897e:	2b00      	cmp	r3, #0
 8008980:	d103      	bne.n	800898a <f_open+0x2f2>
 8008982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008984:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008986:	429a      	cmp	r2, r3
 8008988:	d8e0      	bhi.n	800894c <f_open+0x2b4>
				}
				fp->clust = clst;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800898e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008990:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008994:	2b00      	cmp	r3, #0
 8008996:	d117      	bne.n	80089c8 <f_open+0x330>
 8008998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d012      	beq.n	80089c8 <f_open+0x330>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fe f902 	bl	8006bb0 <clust2sect>
 80089ac:	64f8      	str	r0, [r7, #76]	; 0x4c
 80089ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <f_open+0x324>
						res = FR_INT_ERR;
 80089b4:	2302      	movs	r3, #2
 80089b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80089ba:	e005      	b.n	80089c8 <f_open+0x330>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80089bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089be:	0a5a      	lsrs	r2, r3, #9
 80089c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c2:	441a      	add	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	621a      	str	r2, [r3, #32]
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80089c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d002      	beq.n	80089d6 <f_open+0x33e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80089d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3768      	adds	r7, #104	; 0x68
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b08e      	sub	sp, #56	; 0x38
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	60b9      	str	r1, [r7, #8]
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f107 0214 	add.w	r2, r7, #20
 8008a00:	4611      	mov	r1, r2
 8008a02:	4618      	mov	r0, r3
 8008a04:	f7ff fdcc 	bl	80085a0 <validate>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008a0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <f_read+0x44>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	7d5b      	ldrb	r3, [r3, #21]
 8008a1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008a1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <f_read+0x4a>
 8008a26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008a2a:	e0ef      	b.n	8008c0c <f_read+0x22a>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	7d1b      	ldrb	r3, [r3, #20]
 8008a30:	f003 0301 	and.w	r3, r3, #1
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <f_read+0x5a>
 8008a38:	2307      	movs	r3, #7
 8008a3a:	e0e7      	b.n	8008c0c <f_read+0x22a>
	remain = fp->obj.objsize - fp->fptr;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	f240 80d8 	bls.w	8008c02 <f_read+0x220>
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008a56:	e0d4      	b.n	8008c02 <f_read+0x220>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	699b      	ldr	r3, [r3, #24]
 8008a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 8091 	bne.w	8008b88 <f_read+0x1a6>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	0a5b      	lsrs	r3, r3, #9
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	8952      	ldrh	r2, [r2, #10]
 8008a70:	3a01      	subs	r2, #1
 8008a72:	4013      	ands	r3, r2
 8008a74:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d12f      	bne.n	8008adc <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d103      	bne.n	8008a8c <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	633b      	str	r3, [r7, #48]	; 0x30
 8008a8a:	e013      	b.n	8008ab4 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7fe fb30 	bl	8007100 <clmt_clust>
 8008aa0:	6338      	str	r0, [r7, #48]	; 0x30
 8008aa2:	e007      	b.n	8008ab4 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7fe f89e 	bl	8006bee <get_fat>
 8008ab2:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d804      	bhi.n	8008ac4 <f_read+0xe2>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2202      	movs	r2, #2
 8008abe:	755a      	strb	r2, [r3, #21]
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e0a3      	b.n	8008c0c <f_read+0x22a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aca:	d104      	bne.n	8008ad6 <f_read+0xf4>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	755a      	strb	r2, [r3, #21]
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e09a      	b.n	8008c0c <f_read+0x22a>
				fp->clust = clst;				/* Update current cluster */
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ada:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7fe f863 	bl	8006bb0 <clust2sect>
 8008aea:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d104      	bne.n	8008afc <f_read+0x11a>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2202      	movs	r2, #2
 8008af6:	755a      	strb	r2, [r3, #21]
 8008af8:	2302      	movs	r3, #2
 8008afa:	e087      	b.n	8008c0c <f_read+0x22a>
			sect += csect;
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	4413      	add	r3, r2
 8008b02:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	0a5b      	lsrs	r3, r3, #9
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d038      	beq.n	8008b82 <f_read+0x1a0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b14:	4413      	add	r3, r2
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	8952      	ldrh	r2, [r2, #10]
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d905      	bls.n	8008b2a <f_read+0x148>
					cc = fs->csize - csect;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	895b      	ldrh	r3, [r3, #10]
 8008b22:	461a      	mov	r2, r3
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	7858      	ldrb	r0, [r3, #1]
 8008b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b34:	f7fd fc92 	bl	800645c <disk_read>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d004      	beq.n	8008b48 <f_read+0x166>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2201      	movs	r2, #1
 8008b42:	755a      	strb	r2, [r3, #21]
 8008b44:	2301      	movs	r3, #1
 8008b46:	e061      	b.n	8008c0c <f_read+0x22a>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	78db      	ldrb	r3, [r3, #3]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d014      	beq.n	8008b7a <f_read+0x198>
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b54:	69bb      	ldr	r3, [r7, #24]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d20d      	bcs.n	8008b7a <f_read+0x198>
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	1ad3      	subs	r3, r2, r3
 8008b66:	025b      	lsls	r3, r3, #9
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	18d0      	adds	r0, r2, r3
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	3334      	adds	r3, #52	; 0x34
 8008b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b74:	4619      	mov	r1, r3
 8008b76:	f7fd fd51 	bl	800661c <mem_cpy>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	025b      	lsls	r3, r3, #9
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008b80:	e02b      	b.n	8008bda <f_read+0x1f8>
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
			}
#endif
			fp->sect = sect;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b90:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b94:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008b96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d901      	bls.n	8008ba2 <f_read+0x1c0>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1b      	ldr	r3, [r3, #32]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4610      	mov	r0, r2
 8008bac:	f7fd ff64 	bl	8006a78 <move_window>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d004      	beq.n	8008bc0 <f_read+0x1de>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	755a      	strb	r2, [r3, #21]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e025      	b.n	8008c0c <f_read+0x22a>
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	699b      	ldr	r3, [r3, #24]
 8008bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bce:	4413      	add	r3, r2
 8008bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008bd6:	f7fd fd21 	bl	800661c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bde:	4413      	add	r3, r2
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be8:	441a      	add	r2, r3
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	619a      	str	r2, [r3, #24]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf4:	441a      	add	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	601a      	str	r2, [r3, #0]
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f47f af27 	bne.w	8008a58 <f_read+0x76>
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3738      	adds	r7, #56	; 0x38
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08c      	sub	sp, #48	; 0x30
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
 8008c20:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f107 0210 	add.w	r2, r7, #16
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fcb3 	bl	80085a0 <validate>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <f_write+0x44>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	7d5b      	ldrb	r3, [r3, #21]
 8008c4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008c50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <f_write+0x4a>
 8008c58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c5c:	e13f      	b.n	8008ede <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	7d1b      	ldrb	r3, [r3, #20]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <f_write+0x5a>
 8008c6a:	2307      	movs	r3, #7
 8008c6c:	e137      	b.n	8008ede <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	f080 8121 	bcs.w	8008ec2 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	43db      	mvns	r3, r3
 8008c86:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c88:	e11b      	b.n	8008ec2 <f_write+0x2ae>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	699b      	ldr	r3, [r3, #24]
 8008c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f040 80cc 	bne.w	8008e30 <f_write+0x21c>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	0a5b      	lsrs	r3, r3, #9
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	8952      	ldrh	r2, [r2, #10]
 8008ca2:	3a01      	subs	r2, #1
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d143      	bne.n	8008d36 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10c      	bne.n	8008cd0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d11a      	bne.n	8008cf8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe f982 	bl	8006fd0 <create_chain>
 8008ccc:	62b8      	str	r0, [r7, #40]	; 0x28
 8008cce:	e013      	b.n	8008cf8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	4619      	mov	r1, r3
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7fe fa0e 	bl	8007100 <clmt_clust>
 8008ce4:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ce6:	e007      	b.n	8008cf8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f7fe f96d 	bl	8006fd0 <create_chain>
 8008cf6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80e6 	beq.w	8008ecc <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d104      	bne.n	8008d10 <f_write+0xfc>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2202      	movs	r2, #2
 8008d0a:	755a      	strb	r2, [r3, #21]
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e0e6      	b.n	8008ede <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d16:	d104      	bne.n	8008d22 <f_write+0x10e>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	755a      	strb	r2, [r3, #21]
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e0dd      	b.n	8008ede <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d102      	bne.n	8008d36 <f_write+0x122>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d10b      	bne.n	8008d5a <f_write+0x146>
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fd fe53 	bl	80069f0 <sync_window>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d004      	beq.n	8008d5a <f_write+0x146>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2201      	movs	r2, #1
 8008d54:	755a      	strb	r2, [r3, #21]
 8008d56:	2301      	movs	r3, #1
 8008d58:	e0c1      	b.n	8008ede <f_write+0x2ca>
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7fd ff24 	bl	8006bb0 <clust2sect>
 8008d68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d104      	bne.n	8008d7a <f_write+0x166>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2202      	movs	r2, #2
 8008d74:	755a      	strb	r2, [r3, #21]
 8008d76:	2302      	movs	r3, #2
 8008d78:	e0b1      	b.n	8008ede <f_write+0x2ca>
			sect += csect;
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	4413      	add	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	0a5b      	lsrs	r3, r3, #9
 8008d86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d038      	beq.n	8008e00 <f_write+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	4413      	add	r3, r2
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	8952      	ldrh	r2, [r2, #10]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d905      	bls.n	8008da8 <f_write+0x194>
					cc = fs->csize - csect;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	895b      	ldrh	r3, [r3, #10]
 8008da0:	461a      	mov	r2, r3
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	7858      	ldrb	r0, [r3, #1]
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	f7fd fb73 	bl	800649c <disk_write>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <f_write+0x1b2>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	755a      	strb	r2, [r3, #21]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e08b      	b.n	8008ede <f_write+0x2ca>
#if _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	1ad2      	subs	r2, r2, r3
 8008dce:	6a3b      	ldr	r3, [r7, #32]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d211      	bcs.n	8008df8 <f_write+0x1e4>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	025b      	lsls	r3, r3, #9
 8008de4:	69fa      	ldr	r2, [r7, #28]
 8008de6:	4413      	add	r3, r2
 8008de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008dec:	4619      	mov	r1, r3
 8008dee:	f7fd fc15 	bl	800661c <mem_cpy>
					fs->wflag = 0;
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	2200      	movs	r2, #0
 8008df6:	70da      	strb	r2, [r3, #3]
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	025b      	lsls	r3, r3, #9
 8008dfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008dfe:	e043      	b.n	8008e88 <f_write+0x274>
			}
#if _FS_TINY
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	699a      	ldr	r2, [r3, #24]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	68db      	ldr	r3, [r3, #12]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d30e      	bcc.n	8008e2a <f_write+0x216>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fd fdee 	bl	80069f0 <sync_window>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d004      	beq.n	8008e24 <f_write+0x210>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	755a      	strb	r2, [r3, #21]
 8008e20:	2301      	movs	r3, #1
 8008e22:	e05c      	b.n	8008ede <f_write+0x2ca>
				fs->winsect = sect;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	631a      	str	r2, [r3, #48]	; 0x30
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d901      	bls.n	8008e4a <f_write+0x236>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	4619      	mov	r1, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	f7fd fe10 	bl	8006a78 <move_window>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <f_write+0x254>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	755a      	strb	r2, [r3, #21]
 8008e64:	2301      	movs	r3, #1
 8008e66:	e03a      	b.n	8008ede <f_write+0x2ca>
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e76:	4413      	add	r3, r2
 8008e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7a:	69f9      	ldr	r1, [r7, #28]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7fd fbcd 	bl	800661c <mem_cpy>
		fs->wflag = 1;
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2201      	movs	r2, #1
 8008e86:	70da      	strb	r2, [r3, #3]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008e88:	69fa      	ldr	r2, [r7, #28]
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	699a      	ldr	r2, [r3, #24]
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	441a      	add	r2, r3
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	619a      	str	r2, [r3, #24]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bf38      	it	cc
 8008ea8:	461a      	movcc	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	441a      	add	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f47f aee0 	bne.w	8008c8a <f_write+0x76>
 8008eca:	e000      	b.n	8008ece <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ecc:	bf00      	nop
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	7d1b      	ldrb	r3, [r3, #20]
 8008ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3730      	adds	r7, #48	; 0x30
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f107 0208 	add.w	r2, r7, #8
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7ff fb52 	bl	80085a0 <validate>
 8008efc:	4603      	mov	r3, r0
 8008efe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d14d      	bne.n	8008fa2 <f_sync+0xbc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7d1b      	ldrb	r3, [r3, #20]
 8008f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d047      	beq.n	8008fa2 <f_sync+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008f12:	f000 faaf 	bl	8009474 <get_fattime>
 8008f16:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1e:	4619      	mov	r1, r3
 8008f20:	4610      	mov	r0, r2
 8008f22:	f7fd fda9 	bl	8006a78 <move_window>
 8008f26:	4603      	mov	r3, r0
 8008f28:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008f2a:	7dfb      	ldrb	r3, [r7, #23]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d138      	bne.n	8008fa2 <f_sync+0xbc>
					dir = fp->dir_ptr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f34:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	330b      	adds	r3, #11
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	320b      	adds	r2, #11
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	f042 0220 	orr.w	r2, r2, #32
 8008f44:	b2d2      	uxtb	r2, r2
 8008f46:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	461a      	mov	r2, r3
 8008f52:	68f9      	ldr	r1, [r7, #12]
 8008f54:	f7fe faae 	bl	80074b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f103 021c 	add.w	r2, r3, #28
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	4619      	mov	r1, r3
 8008f64:	4610      	mov	r0, r2
 8008f66:	f7fd fb2d 	bl	80065c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3316      	adds	r3, #22
 8008f6e:	6939      	ldr	r1, [r7, #16]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fd fb27 	bl	80065c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3312      	adds	r3, #18
 8008f7a:	2100      	movs	r1, #0
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f7fd fb06 	bl	800658e <st_word>
					fs->wflag = 1;
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	2201      	movs	r2, #1
 8008f86:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fd fda2 	bl	8006ad4 <sync_fs>
 8008f90:	4603      	mov	r3, r0
 8008f92:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
 8008f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff ff96 	bl	8008ee6 <f_sync>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d118      	bne.n	8008ff6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f107 0208 	add.w	r2, r7, #8
 8008fca:	4611      	mov	r1, r2
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fae7 	bl	80085a0 <validate>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10c      	bne.n	8008ff6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fca5 	bl	8006930 <dec_lock>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008fea:	7bfb      	ldrb	r3, [r7, #15]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d102      	bne.n	8008ff6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009000:	b480      	push	{r7}
 8009002:	b087      	sub	sp, #28
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	4613      	mov	r3, r2
 800900c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800900e:	2301      	movs	r3, #1
 8009010:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009012:	2300      	movs	r3, #0
 8009014:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009016:	4b1f      	ldr	r3, [pc, #124]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009018:	7a5b      	ldrb	r3, [r3, #9]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d131      	bne.n	8009084 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009020:	4b1c      	ldr	r3, [pc, #112]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009022:	7a5b      	ldrb	r3, [r3, #9]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	461a      	mov	r2, r3
 8009028:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 800902a:	2100      	movs	r1, #0
 800902c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800902e:	4b19      	ldr	r3, [pc, #100]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009030:	7a5b      	ldrb	r3, [r3, #9]
 8009032:	b2db      	uxtb	r3, r3
 8009034:	4a17      	ldr	r2, [pc, #92]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800903e:	4b15      	ldr	r3, [pc, #84]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009040:	7a5b      	ldrb	r3, [r3, #9]
 8009042:	b2db      	uxtb	r3, r3
 8009044:	461a      	mov	r2, r3
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009048:	4413      	add	r3, r2
 800904a:	79fa      	ldrb	r2, [r7, #7]
 800904c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800904e:	4b11      	ldr	r3, [pc, #68]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 8009050:	7a5b      	ldrb	r3, [r3, #9]
 8009052:	b2db      	uxtb	r3, r3
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	b2d1      	uxtb	r1, r2
 8009058:	4a0e      	ldr	r2, [pc, #56]	; (8009094 <FATFS_LinkDriverEx+0x94>)
 800905a:	7251      	strb	r1, [r2, #9]
 800905c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800905e:	7dbb      	ldrb	r3, [r7, #22]
 8009060:	3330      	adds	r3, #48	; 0x30
 8009062:	b2da      	uxtb	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	3301      	adds	r3, #1
 800906c:	223a      	movs	r2, #58	; 0x3a
 800906e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	3302      	adds	r3, #2
 8009074:	222f      	movs	r2, #47	; 0x2f
 8009076:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	3303      	adds	r3, #3
 800907c:	2200      	movs	r2, #0
 800907e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
}
 8009086:	4618      	mov	r0, r3
 8009088:	371c      	adds	r7, #28
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	200002bc 	.word	0x200002bc

08009098 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7ff ffaa 	bl	8009000 <FATFS_LinkDriverEx>
 80090ac:	4603      	mov	r3, r0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3708      	adds	r7, #8
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
	...

080090b8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	4603      	mov	r3, r0
 80090c0:	6039      	str	r1, [r7, #0]
 80090c2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	2b7f      	cmp	r3, #127	; 0x7f
 80090c8:	d802      	bhi.n	80090d0 <ff_convert+0x18>
		c = chr;
 80090ca:	88fb      	ldrh	r3, [r7, #6]
 80090cc:	81fb      	strh	r3, [r7, #14]
 80090ce:	e025      	b.n	800911c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80090d6:	88fb      	ldrh	r3, [r7, #6]
 80090d8:	2bff      	cmp	r3, #255	; 0xff
 80090da:	d805      	bhi.n	80090e8 <ff_convert+0x30>
 80090dc:	88fb      	ldrh	r3, [r7, #6]
 80090de:	3b80      	subs	r3, #128	; 0x80
 80090e0:	4a12      	ldr	r2, [pc, #72]	; (800912c <ff_convert+0x74>)
 80090e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e6:	e000      	b.n	80090ea <ff_convert+0x32>
 80090e8:	2300      	movs	r3, #0
 80090ea:	81fb      	strh	r3, [r7, #14]
 80090ec:	e016      	b.n	800911c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80090ee:	2300      	movs	r3, #0
 80090f0:	81fb      	strh	r3, [r7, #14]
 80090f2:	e009      	b.n	8009108 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80090f4:	89fb      	ldrh	r3, [r7, #14]
 80090f6:	4a0d      	ldr	r2, [pc, #52]	; (800912c <ff_convert+0x74>)
 80090f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090fc:	88fa      	ldrh	r2, [r7, #6]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d006      	beq.n	8009110 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009102:	89fb      	ldrh	r3, [r7, #14]
 8009104:	3301      	adds	r3, #1
 8009106:	81fb      	strh	r3, [r7, #14]
 8009108:	89fb      	ldrh	r3, [r7, #14]
 800910a:	2b7f      	cmp	r3, #127	; 0x7f
 800910c:	d9f2      	bls.n	80090f4 <ff_convert+0x3c>
 800910e:	e000      	b.n	8009112 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009110:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009112:	89fb      	ldrh	r3, [r7, #14]
 8009114:	3380      	adds	r3, #128	; 0x80
 8009116:	b29b      	uxth	r3, r3
 8009118:	b2db      	uxtb	r3, r3
 800911a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800911c:	89fb      	ldrh	r3, [r7, #14]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	0801163c 	.word	0x0801163c

08009130 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009130:	b480      	push	{r7}
 8009132:	b087      	sub	sp, #28
 8009134:	af00      	add	r7, sp, #0
 8009136:	4603      	mov	r3, r0
 8009138:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800913a:	88fb      	ldrh	r3, [r7, #6]
 800913c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009140:	d201      	bcs.n	8009146 <ff_wtoupper+0x16>
 8009142:	4b3e      	ldr	r3, [pc, #248]	; (800923c <ff_wtoupper+0x10c>)
 8009144:	e000      	b.n	8009148 <ff_wtoupper+0x18>
 8009146:	4b3e      	ldr	r3, [pc, #248]	; (8009240 <ff_wtoupper+0x110>)
 8009148:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	1c9a      	adds	r2, r3, #2
 800914e:	617a      	str	r2, [r7, #20]
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009154:	8a7b      	ldrh	r3, [r7, #18]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d068      	beq.n	800922c <ff_wtoupper+0xfc>
 800915a:	88fa      	ldrh	r2, [r7, #6]
 800915c:	8a7b      	ldrh	r3, [r7, #18]
 800915e:	429a      	cmp	r2, r3
 8009160:	d364      	bcc.n	800922c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	1c9a      	adds	r2, r3, #2
 8009166:	617a      	str	r2, [r7, #20]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	823b      	strh	r3, [r7, #16]
 800916c:	8a3b      	ldrh	r3, [r7, #16]
 800916e:	0a1b      	lsrs	r3, r3, #8
 8009170:	81fb      	strh	r3, [r7, #14]
 8009172:	8a3b      	ldrh	r3, [r7, #16]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009178:	88fa      	ldrh	r2, [r7, #6]
 800917a:	8a79      	ldrh	r1, [r7, #18]
 800917c:	8a3b      	ldrh	r3, [r7, #16]
 800917e:	440b      	add	r3, r1
 8009180:	429a      	cmp	r2, r3
 8009182:	da49      	bge.n	8009218 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009184:	89fb      	ldrh	r3, [r7, #14]
 8009186:	2b08      	cmp	r3, #8
 8009188:	d84f      	bhi.n	800922a <ff_wtoupper+0xfa>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <ff_wtoupper+0x60>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091c7 	.word	0x080091c7
 8009198:	080091dd 	.word	0x080091dd
 800919c:	080091e5 	.word	0x080091e5
 80091a0:	080091ed 	.word	0x080091ed
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091fd 	.word	0x080091fd
 80091ac:	08009205 	.word	0x08009205
 80091b0:	0800920d 	.word	0x0800920d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80091b4:	88fa      	ldrh	r2, [r7, #6]
 80091b6:	8a7b      	ldrh	r3, [r7, #18]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	005b      	lsls	r3, r3, #1
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	80fb      	strh	r3, [r7, #6]
 80091c4:	e027      	b.n	8009216 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	8a7b      	ldrh	r3, [r7, #18]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	f003 0301 	and.w	r3, r3, #1
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	1ad3      	subs	r3, r2, r3
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	e01c      	b.n	8009216 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80091dc:	88fb      	ldrh	r3, [r7, #6]
 80091de:	3b10      	subs	r3, #16
 80091e0:	80fb      	strh	r3, [r7, #6]
 80091e2:	e018      	b.n	8009216 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80091e4:	88fb      	ldrh	r3, [r7, #6]
 80091e6:	3b20      	subs	r3, #32
 80091e8:	80fb      	strh	r3, [r7, #6]
 80091ea:	e014      	b.n	8009216 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80091ec:	88fb      	ldrh	r3, [r7, #6]
 80091ee:	3b30      	subs	r3, #48	; 0x30
 80091f0:	80fb      	strh	r3, [r7, #6]
 80091f2:	e010      	b.n	8009216 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80091f4:	88fb      	ldrh	r3, [r7, #6]
 80091f6:	3b1a      	subs	r3, #26
 80091f8:	80fb      	strh	r3, [r7, #6]
 80091fa:	e00c      	b.n	8009216 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80091fc:	88fb      	ldrh	r3, [r7, #6]
 80091fe:	3308      	adds	r3, #8
 8009200:	80fb      	strh	r3, [r7, #6]
 8009202:	e008      	b.n	8009216 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	3b50      	subs	r3, #80	; 0x50
 8009208:	80fb      	strh	r3, [r7, #6]
 800920a:	e004      	b.n	8009216 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800920c:	88fb      	ldrh	r3, [r7, #6]
 800920e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8009212:	80fb      	strh	r3, [r7, #6]
 8009214:	bf00      	nop
			}
			break;
 8009216:	e008      	b.n	800922a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009218:	89fb      	ldrh	r3, [r7, #14]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d195      	bne.n	800914a <ff_wtoupper+0x1a>
 800921e:	8a3b      	ldrh	r3, [r7, #16]
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	4413      	add	r3, r2
 8009226:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009228:	e78f      	b.n	800914a <ff_wtoupper+0x1a>
			break;
 800922a:	bf00      	nop
	}

	return chr;
 800922c:	88fb      	ldrh	r3, [r7, #6]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	0801173c 	.word	0x0801173c
 8009240:	08011930 	.word	0x08011930

08009244 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800924e:	f000 f888 	bl	8009362 <BSP_SD_IsDetected>
 8009252:	4603      	mov	r3, r0
 8009254:	2b01      	cmp	r3, #1
 8009256:	d001      	beq.n	800925c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009258:	2302      	movs	r3, #2
 800925a:	e005      	b.n	8009268 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800925c:	4804      	ldr	r0, [pc, #16]	; (8009270 <BSP_SD_Init+0x2c>)
 800925e:	f7fa fac1 	bl	80037e4 <HAL_SD_Init>
 8009262:	4603      	mov	r3, r0
 8009264:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8009266:	79fb      	ldrb	r3, [r7, #7]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	2000f188 	.word	0x2000f188

08009274 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	4806      	ldr	r0, [pc, #24]	; (80092a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800928c:	f7fa fb3a 	bl	8003904 <HAL_SD_ReadBlocks_DMA>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	2000f188 	.word	0x2000f188

080092a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80092b4:	2300      	movs	r3, #0
 80092b6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	68f9      	ldr	r1, [r7, #12]
 80092be:	4806      	ldr	r0, [pc, #24]	; (80092d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80092c0:	f7fa fbee 	bl	8003aa0 <HAL_SD_WriteBlocks_DMA>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80092ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3718      	adds	r7, #24
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	2000f188 	.word	0x2000f188

080092dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80092e0:	4805      	ldr	r0, [pc, #20]	; (80092f8 <BSP_SD_GetCardState+0x1c>)
 80092e2:	f7fb f860 	bl	80043a6 <HAL_SD_GetCardState>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b04      	cmp	r3, #4
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	2000f188 	.word	0x2000f188

080092fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	4803      	ldr	r0, [pc, #12]	; (8009314 <BSP_SD_GetCardInfo+0x18>)
 8009308:	f7fb f821 	bl	800434e <HAL_SD_GetCardInfo>
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	2000f188 	.word	0x2000f188

08009318 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009320:	f000 f818 	bl	8009354 <BSP_SD_AbortCallback>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009334:	f000 fe1e 	bl	8009f74 <BSP_SD_WriteCpltCallback>
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009348:	f000 fe20 	bl	8009f8c <BSP_SD_ReadCpltCallback>
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009354:	b480      	push	{r7}
 8009356:	af00      	add	r7, sp, #0

}
 8009358:	bf00      	nop
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8009362:	b480      	push	{r7}
 8009364:	b083      	sub	sp, #12
 8009366:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009368:	2301      	movs	r3, #1
 800936a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	b2db      	uxtb	r3, r3
}
 8009370:	4618      	mov	r0, r3
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	; 0x28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a17      	ldr	r2, [pc, #92]	; (80093f8 <HAL_CAN_MspInit+0x7c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d128      	bne.n	80093f0 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800939e:	4a17      	ldr	r2, [pc, #92]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093a0:	4b16      	ldr	r3, [pc, #88]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80093a8:	6413      	str	r3, [r2, #64]	; 0x40
 80093aa:	4b14      	ldr	r3, [pc, #80]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093b2:	613b      	str	r3, [r7, #16]
 80093b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093b6:	4a11      	ldr	r2, [pc, #68]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093b8:	4b10      	ldr	r3, [pc, #64]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	6313      	str	r3, [r2, #48]	; 0x30
 80093c2:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <HAL_CAN_MspInit+0x80>)
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80093d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093d4:	2302      	movs	r3, #2
 80093d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093d8:	2301      	movs	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093dc:	2303      	movs	r3, #3
 80093de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80093e0:	2309      	movs	r3, #9
 80093e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093e4:	f107 0314 	add.w	r3, r7, #20
 80093e8:	4619      	mov	r1, r3
 80093ea:	4805      	ldr	r0, [pc, #20]	; (8009400 <HAL_CAN_MspInit+0x84>)
 80093ec:	f7f8 fbea 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80093f0:	bf00      	nop
 80093f2:	3728      	adds	r7, #40	; 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40006400 	.word	0x40006400
 80093fc:	40023800 	.word	0x40023800
 8009400:	40020000 	.word	0x40020000

08009404 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800940a:	4a10      	ldr	r2, [pc, #64]	; (800944c <MX_DMA_Init+0x48>)
 800940c:	4b0f      	ldr	r3, [pc, #60]	; (800944c <MX_DMA_Init+0x48>)
 800940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009410:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009414:	6313      	str	r3, [r2, #48]	; 0x30
 8009416:	4b0d      	ldr	r3, [pc, #52]	; (800944c <MX_DMA_Init+0x48>)
 8009418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800941a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800941e:	607b      	str	r3, [r7, #4]
 8009420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	203b      	movs	r0, #59	; 0x3b
 8009428:	f7f7 ffeb 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800942c:	203b      	movs	r0, #59	; 0x3b
 800942e:	f7f8 f804 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	2045      	movs	r0, #69	; 0x45
 8009438:	f7f7 ffe3 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800943c:	2045      	movs	r0, #69	; 0x45
 800943e:	f7f7 fffc 	bl	800143a <HAL_NVIC_EnableIRQ>

}
 8009442:	bf00      	nop
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40023800 	.word	0x40023800

08009450 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009454:	4904      	ldr	r1, [pc, #16]	; (8009468 <MX_FATFS_Init+0x18>)
 8009456:	4805      	ldr	r0, [pc, #20]	; (800946c <MX_FATFS_Init+0x1c>)
 8009458:	f7ff fe1e 	bl	8009098 <FATFS_LinkDriver>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	4b03      	ldr	r3, [pc, #12]	; (8009470 <MX_FATFS_Init+0x20>)
 8009462:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009464:	bf00      	nop
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000510 	.word	0x20000510
 800946c:	080119ec 	.word	0x080119ec
 8009470:	2000050c 	.word	0x2000050c

08009474 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009478:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800947a:	4618      	mov	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b08a      	sub	sp, #40	; 0x28
 8009488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	605a      	str	r2, [r3, #4]
 8009494:	609a      	str	r2, [r3, #8]
 8009496:	60da      	str	r2, [r3, #12]
 8009498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800949a:	4a3a      	ldr	r2, [pc, #232]	; (8009584 <MX_GPIO_Init+0x100>)
 800949c:	4b39      	ldr	r3, [pc, #228]	; (8009584 <MX_GPIO_Init+0x100>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	f043 0304 	orr.w	r3, r3, #4
 80094a4:	6313      	str	r3, [r2, #48]	; 0x30
 80094a6:	4b37      	ldr	r3, [pc, #220]	; (8009584 <MX_GPIO_Init+0x100>)
 80094a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094aa:	f003 0304 	and.w	r3, r3, #4
 80094ae:	613b      	str	r3, [r7, #16]
 80094b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80094b2:	4a34      	ldr	r2, [pc, #208]	; (8009584 <MX_GPIO_Init+0x100>)
 80094b4:	4b33      	ldr	r3, [pc, #204]	; (8009584 <MX_GPIO_Init+0x100>)
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b31      	ldr	r3, [pc, #196]	; (8009584 <MX_GPIO_Init+0x100>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094ca:	4a2e      	ldr	r2, [pc, #184]	; (8009584 <MX_GPIO_Init+0x100>)
 80094cc:	4b2d      	ldr	r3, [pc, #180]	; (8009584 <MX_GPIO_Init+0x100>)
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	f043 0302 	orr.w	r3, r3, #2
 80094d4:	6313      	str	r3, [r2, #48]	; 0x30
 80094d6:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <MX_GPIO_Init+0x100>)
 80094d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094da:	f003 0302 	and.w	r3, r3, #2
 80094de:	60bb      	str	r3, [r7, #8]
 80094e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80094e2:	4a28      	ldr	r2, [pc, #160]	; (8009584 <MX_GPIO_Init+0x100>)
 80094e4:	4b27      	ldr	r3, [pc, #156]	; (8009584 <MX_GPIO_Init+0x100>)
 80094e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e8:	f043 0308 	orr.w	r3, r3, #8
 80094ec:	6313      	str	r3, [r2, #48]	; 0x30
 80094ee:	4b25      	ldr	r3, [pc, #148]	; (8009584 <MX_GPIO_Init+0x100>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	f003 0308 	and.w	r3, r3, #8
 80094f6:	607b      	str	r3, [r7, #4]
 80094f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80094fa:	4a22      	ldr	r2, [pc, #136]	; (8009584 <MX_GPIO_Init+0x100>)
 80094fc:	4b21      	ldr	r3, [pc, #132]	; (8009584 <MX_GPIO_Init+0x100>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	f043 0301 	orr.w	r3, r3, #1
 8009504:	6313      	str	r3, [r2, #48]	; 0x30
 8009506:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <MX_GPIO_Init+0x100>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, my_LED_DEBUG2_Pin|my_LED_DEBUG1_Pin, GPIO_PIN_RESET);
 8009512:	2200      	movs	r2, #0
 8009514:	2103      	movs	r1, #3
 8009516:	481c      	ldr	r0, [pc, #112]	; (8009588 <MX_GPIO_Init+0x104>)
 8009518:	f7f8 fcfe 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(my_GPS_RESET_N_GPIO_Port, my_GPS_RESET_N_Pin, GPIO_PIN_RESET);
 800951c:	2200      	movs	r2, #0
 800951e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009522:	481a      	ldr	r0, [pc, #104]	; (800958c <MX_GPIO_Init+0x108>)
 8009524:	f7f8 fcf8 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = my_LED_DEBUG2_Pin|my_LED_DEBUG1_Pin;
 8009528:	2303      	movs	r3, #3
 800952a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800952c:	2301      	movs	r3, #1
 800952e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009530:	2300      	movs	r3, #0
 8009532:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009534:	2300      	movs	r3, #0
 8009536:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009538:	f107 0314 	add.w	r3, r7, #20
 800953c:	4619      	mov	r1, r3
 800953e:	4812      	ldr	r0, [pc, #72]	; (8009588 <MX_GPIO_Init+0x104>)
 8009540:	f7f8 fb40 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = my_GPS_RESET_N_Pin;
 8009544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800954a:	2301      	movs	r3, #1
 800954c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954e:	2300      	movs	r3, #0
 8009550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009552:	2300      	movs	r3, #0
 8009554:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(my_GPS_RESET_N_GPIO_Port, &GPIO_InitStruct);
 8009556:	f107 0314 	add.w	r3, r7, #20
 800955a:	4619      	mov	r1, r3
 800955c:	480b      	ldr	r0, [pc, #44]	; (800958c <MX_GPIO_Init+0x108>)
 800955e:	f7f8 fb31 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = my_SDMMC_IRQ_Pin|my_SDMMC_CS_CD_Pin;
 8009562:	2303      	movs	r3, #3
 8009564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009566:	2300      	movs	r3, #0
 8009568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800956a:	2300      	movs	r3, #0
 800956c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800956e:	f107 0314 	add.w	r3, r7, #20
 8009572:	4619      	mov	r1, r3
 8009574:	4805      	ldr	r0, [pc, #20]	; (800958c <MX_GPIO_Init+0x108>)
 8009576:	f7f8 fb25 	bl	8001bc4 <HAL_GPIO_Init>

}
 800957a:	bf00      	nop
 800957c:	3728      	adds	r7, #40	; 0x28
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40023800 	.word	0x40023800
 8009588:	40020400 	.word	0x40020400
 800958c:	40020c00 	.word	0x40020c00

08009590 <HAL_SYSTICK_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SYSTICK_Callback(void){
 8009590:	b580      	push	{r7, lr}
 8009592:	af00      	add	r7, sp, #0
	if (LedDriver_1msElapsedCallbackHandler(&ledDebug1Driver) != LedDriver_Status_OK){
 8009594:	4808      	ldr	r0, [pc, #32]	; (80095b8 <HAL_SYSTICK_Callback+0x28>)
 8009596:	f003 ff37 	bl	800d408 <LedDriver_1msElapsedCallbackHandler>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_SYSTICK_Callback+0x14>
		Error_Handler();
 80095a0:	f000 fa94 	bl	8009acc <Error_Handler>
	}
	if (LedDriver_1msElapsedCallbackHandler(&ledDebug2Driver) != LedDriver_Status_OK){
 80095a4:	4805      	ldr	r0, [pc, #20]	; (80095bc <HAL_SYSTICK_Callback+0x2c>)
 80095a6:	f003 ff2f 	bl	800d408 <LedDriver_1msElapsedCallbackHandler>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_SYSTICK_Callback+0x24>
		Error_Handler();
 80095b0:	f000 fa8c 	bl	8009acc <Error_Handler>
	}
	/*if (ActionScheduler_1msElapsedCallbackHandler(&actionScheduler) != ActionScheduler_Status_OK){
		Error_Handler();
	}*/
}
 80095b4:	bf00      	nop
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	2000ccb0 	.word	0x2000ccb0
 80095bc:	2000ed60 	.word	0x2000ed60

080095c0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80095c6:	f7f7 f81b 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80095ca:	f000 f98b 	bl	80098e4 <SystemClock_Config>
#endif

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80095ce:	f7ff ff59 	bl	8009484 <MX_GPIO_Init>
  MX_DMA_Init();
 80095d2:	f7ff ff17 	bl	8009404 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80095d6:	f000 fce5 	bl	8009fa4 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80095da:	f7ff ff39 	bl	8009450 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80095de:	f000 fa27 	bl	8009a30 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  if (LedDriver_init(&ledDebug1Driver, (LedDriver_Port_TypeDef*)my_LED_DEBUG1_GPIO_Port, &ledDebug1Pin) != LedDriver_Status_OK){
 80095e2:	4a9f      	ldr	r2, [pc, #636]	; (8009860 <main+0x2a0>)
 80095e4:	499f      	ldr	r1, [pc, #636]	; (8009864 <main+0x2a4>)
 80095e6:	48a0      	ldr	r0, [pc, #640]	; (8009868 <main+0x2a8>)
 80095e8:	f003 fe86 	bl	800d2f8 <LedDriver_init>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <main+0x36>
	  Error_Handler();
 80095f2:	f000 fa6b 	bl	8009acc <Error_Handler>
  }
  if (LedDriver_init(&ledDebug2Driver, (LedDriver_Port_TypeDef*)my_LED_DEBUG2_GPIO_Port, &ledDebug2Pin) != LedDriver_Status_OK){
 80095f6:	4a9d      	ldr	r2, [pc, #628]	; (800986c <main+0x2ac>)
 80095f8:	499a      	ldr	r1, [pc, #616]	; (8009864 <main+0x2a4>)
 80095fa:	489d      	ldr	r0, [pc, #628]	; (8009870 <main+0x2b0>)
 80095fc:	f003 fe7c 	bl	800d2f8 <LedDriver_init>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <main+0x4a>
	  Error_Handler();
 8009606:	f000 fa61 	bl	8009acc <Error_Handler>
  }

  if (LedDriver_BlinkingLed(&ledDebug2Driver, INITIALIZATION_LED_ON, INITIALIZATION_LED_OFF) != LedDriver_Status_OK){
 800960a:	2232      	movs	r2, #50	; 0x32
 800960c:	f240 31b6 	movw	r1, #950	; 0x3b6
 8009610:	4897      	ldr	r0, [pc, #604]	; (8009870 <main+0x2b0>)
 8009612:	f003 fed3 	bl	800d3bc <LedDriver_BlinkingLed>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <main+0x60>
	  return ActionScheduler_Status_Error;
 800961c:	2303      	movs	r3, #3
 800961e:	e11b      	b.n	8009858 <main+0x298>
  }

  if (RTCDriver_init(&rtcDriver, &hrtc) != RTCDriver_Status_OK){
 8009620:	4994      	ldr	r1, [pc, #592]	; (8009874 <main+0x2b4>)
 8009622:	4895      	ldr	r0, [pc, #596]	; (8009878 <main+0x2b8>)
 8009624:	f004 f880 	bl	800d728 <RTCDriver_init>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <main+0x72>
	  Error_Handler();
 800962e:	f000 fa4d 	bl	8009acc <Error_Handler>
  }

  if (MSTimerDriver_init(&msTimerDriver) != MSTimerDriver_Status_OK){
 8009632:	4892      	ldr	r0, [pc, #584]	; (800987c <main+0x2bc>)
 8009634:	f003 ff21 	bl	800d47a <MSTimerDriver_init>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <main+0x82>
	  Error_Handler();
 800963e:	f000 fa45 	bl	8009acc <Error_Handler>
  }
  if (MSTimerDriver_startCounting(&msTimerDriver) != MSTimerDriver_Status_OK){
 8009642:	488e      	ldr	r0, [pc, #568]	; (800987c <main+0x2bc>)
 8009644:	f003 ff2c 	bl	800d4a0 <MSTimerDriver_startCounting>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <main+0x92>
	  Error_Handler();
 800964e:	f000 fa3d 	bl	8009acc <Error_Handler>
  }

  if (FileSystemWrapper_init(&fileSystem) != FileSystemWrapper_Status_OK){
 8009652:	488b      	ldr	r0, [pc, #556]	; (8009880 <main+0x2c0>)
 8009654:	f003 fb70 	bl	800cd38 <FileSystemWrapper_init>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d001      	beq.n	8009662 <main+0xa2>
	  Error_Handler();
 800965e:	f000 fa35 	bl	8009acc <Error_Handler>
  }

  if (ConfigDataManager_init(&configDataManager, &fileSystem) != ConfigDataManager_Status_OK){
 8009662:	4987      	ldr	r1, [pc, #540]	; (8009880 <main+0x2c0>)
 8009664:	4887      	ldr	r0, [pc, #540]	; (8009884 <main+0x2c4>)
 8009666:	f001 fe71 	bl	800b34c <ConfigDataManager_init>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d001      	beq.n	8009674 <main+0xb4>
	  Error_Handler();
 8009670:	f000 fa2c 	bl	8009acc <Error_Handler>
  }

  Config_TypeDef* pConfig;
  if (ConfigDataManager_getConfigPointer(&configDataManager, &pConfig) != ConfigDataManager_Status_OK){
 8009674:	f107 0308 	add.w	r3, r7, #8
 8009678:	4619      	mov	r1, r3
 800967a:	4882      	ldr	r0, [pc, #520]	; (8009884 <main+0x2c4>)
 800967c:	f002 f886 	bl	800b78c <ConfigDataManager_getConfigPointer>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <main+0xca>
	  Error_Handler();
 8009686:	f000 fa21 	bl	8009acc <Error_Handler>
  }

  if (DataSaver_init(&dataSaver, pConfig, &fileSystem) != DataSaver_Status_OK){
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4a7c      	ldr	r2, [pc, #496]	; (8009880 <main+0x2c0>)
 800968e:	4619      	mov	r1, r3
 8009690:	487d      	ldr	r0, [pc, #500]	; (8009888 <main+0x2c8>)
 8009692:	f002 f891 	bl	800b7b8 <DataSaver_init>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <main+0xe0>
	  Error_Handler();
 800969c:	f000 fa16 	bl	8009acc <Error_Handler>
  }

  if (DODriver_init(&gpsResetDriver, (DODriver_Port_TypeDef*)my_GPS_RESET_N_GPIO_Port, &gpsResetPin, false) != DODriver_Status_OK){
 80096a0:	2300      	movs	r3, #0
 80096a2:	4a7a      	ldr	r2, [pc, #488]	; (800988c <main+0x2cc>)
 80096a4:	497a      	ldr	r1, [pc, #488]	; (8009890 <main+0x2d0>)
 80096a6:	487b      	ldr	r0, [pc, #492]	; (8009894 <main+0x2d4>)
 80096a8:	f002 fcc3 	bl	800c032 <DODriver_init>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <main+0xf6>
	  Error_Handler();
 80096b2:	f000 fa0b 	bl	8009acc <Error_Handler>
  }

  GPSDriver_Status_TypeDef					retGps		= GPSDriver_Status_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	73fb      	strb	r3, [r7, #15]
  UartDriver_Status_TypeDef					retUartDrv	= UartDriver_Status_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73bb      	strb	r3, [r7, #14]
  UartReceiverStartTerm_Status_TypeDef		retUartRcv	= UartReceiverStartTerm_Status_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	737b      	strb	r3, [r7, #13]
  UartReceiverStartLength_Status_TypeDef	retUartRcv2	= UartReceiverStartLength_Status_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	733b      	strb	r3, [r7, #12]

  while (pConfig->gpsFrequency != Config_GPSFrequency_OFF){ //< one time loop
 80096c6:	bf00      	nop
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	7a1b      	ldrb	r3, [r3, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d056      	beq.n	800977e <main+0x1be>
	  if ((retUartDrv = UartDriver_init(&uartGpsDriver, &huart1, USART1, &msTimerDriver, 115200)) != UartDriver_Status_OK){
 80096d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	4b69      	ldr	r3, [pc, #420]	; (800987c <main+0x2bc>)
 80096d8:	4a6f      	ldr	r2, [pc, #444]	; (8009898 <main+0x2d8>)
 80096da:	4970      	ldr	r1, [pc, #448]	; (800989c <main+0x2dc>)
 80096dc:	4870      	ldr	r0, [pc, #448]	; (80098a0 <main+0x2e0>)
 80096de:	f004 fa99 	bl	800dc14 <UartDriver_init>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73bb      	strb	r3, [r7, #14]
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d005      	beq.n	80096f8 <main+0x138>
		  Warning_Handler("UartDriver initialization problem.");
 80096ec:	486d      	ldr	r0, [pc, #436]	; (80098a4 <main+0x2e4>)
 80096ee:	f000 f9e3 	bl	8009ab8 <Warning_Handler>
		  retGps = GPSDriver_Status_UartDriverError;
 80096f2:	230c      	movs	r3, #12
 80096f4:	73fb      	strb	r3, [r7, #15]
		  break;
 80096f6:	e042      	b.n	800977e <main+0x1be>
	  }
	  if ((retUartRcv = UartReceiverStartTerm_init(&uartGpsNMEAReceiverTerm, &uartGpsDriver)) != UartReceiverStartTerm_Status_OK){
 80096f8:	4969      	ldr	r1, [pc, #420]	; (80098a0 <main+0x2e0>)
 80096fa:	486b      	ldr	r0, [pc, #428]	; (80098a8 <main+0x2e8>)
 80096fc:	f005 f8b0 	bl	800e860 <UartReceiverStartTerm_init>
 8009700:	4603      	mov	r3, r0
 8009702:	737b      	strb	r3, [r7, #13]
 8009704:	7b7b      	ldrb	r3, [r7, #13]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d005      	beq.n	8009716 <main+0x156>
		  Warning_Handler("UartReceiver initialization problem.");
 800970a:	4868      	ldr	r0, [pc, #416]	; (80098ac <main+0x2ec>)
 800970c:	f000 f9d4 	bl	8009ab8 <Warning_Handler>
		  retGps = GPSDriver_Status_UartReceiverStartTermError;
 8009710:	230e      	movs	r3, #14
 8009712:	73fb      	strb	r3, [r7, #15]
		  break;
 8009714:	e033      	b.n	800977e <main+0x1be>
	  }
	  if ((retUartRcv2 = UartReceiverStartLength_init(&uartGpsUBXReceiverTerm, &uartGpsDriver)) != UartReceiverStartLength_Status_OK){
 8009716:	4962      	ldr	r1, [pc, #392]	; (80098a0 <main+0x2e0>)
 8009718:	4865      	ldr	r0, [pc, #404]	; (80098b0 <main+0x2f0>)
 800971a:	f004 fd0b 	bl	800e134 <UartReceiverStartLength_init>
 800971e:	4603      	mov	r3, r0
 8009720:	733b      	strb	r3, [r7, #12]
 8009722:	7b3b      	ldrb	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d005      	beq.n	8009734 <main+0x174>
		  Warning_Handler("UartReceiver initialization problem.");
 8009728:	4860      	ldr	r0, [pc, #384]	; (80098ac <main+0x2ec>)
 800972a:	f000 f9c5 	bl	8009ab8 <Warning_Handler>
		  retGps = GPSDriver_Status_UartReceiverStartLengthError;
 800972e:	230f      	movs	r3, #15
 8009730:	73fb      	strb	r3, [r7, #15]
		  break;
 8009732:	e024      	b.n	800977e <main+0x1be>
	  }
	  if ((retUartDrv = UartDriver_startReceiver(&uartGpsDriver)) != UartDriver_Status_OK){
 8009734:	485a      	ldr	r0, [pc, #360]	; (80098a0 <main+0x2e0>)
 8009736:	f004 fb8b 	bl	800de50 <UartDriver_startReceiver>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]
 800973e:	7bbb      	ldrb	r3, [r7, #14]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d005      	beq.n	8009750 <main+0x190>
		  Warning_Handler("UartDriver startReceiver problem.");
 8009744:	485b      	ldr	r0, [pc, #364]	; (80098b4 <main+0x2f4>)
 8009746:	f000 f9b7 	bl	8009ab8 <Warning_Handler>
		  retGps = GPSDriver_Status_UartDriverError;
 800974a:	230c      	movs	r3, #12
 800974c:	73fb      	strb	r3, [r7, #15]
		  break;
 800974e:	e016      	b.n	800977e <main+0x1be>
	  }
	  if ((retGps = GPSDriver_init(&gpsDriver, &uartGpsDriver, &uartGpsNMEAReceiverTerm, &uartGpsUBXReceiverTerm, &msTimerDriver, &gpsResetDriver, pConfig->gpsFrequency)) != GPSDriver_Status_OK){
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	7a1b      	ldrb	r3, [r3, #8]
 8009754:	9302      	str	r3, [sp, #8]
 8009756:	4b4f      	ldr	r3, [pc, #316]	; (8009894 <main+0x2d4>)
 8009758:	9301      	str	r3, [sp, #4]
 800975a:	4b48      	ldr	r3, [pc, #288]	; (800987c <main+0x2bc>)
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	4b54      	ldr	r3, [pc, #336]	; (80098b0 <main+0x2f0>)
 8009760:	4a51      	ldr	r2, [pc, #324]	; (80098a8 <main+0x2e8>)
 8009762:	494f      	ldr	r1, [pc, #316]	; (80098a0 <main+0x2e0>)
 8009764:	4854      	ldr	r0, [pc, #336]	; (80098b8 <main+0x2f8>)
 8009766:	f005 fc0b 	bl	800ef80 <GPSDriver_init>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d003      	beq.n	800977c <main+0x1bc>
		  Warning_Handler("GPS initialization problem.");
 8009774:	4851      	ldr	r0, [pc, #324]	; (80098bc <main+0x2fc>)
 8009776:	f000 f99f 	bl	8009ab8 <Warning_Handler>
		  break;
 800977a:	e000      	b.n	800977e <main+0x1be>
	  }
	  break;
 800977c:	bf00      	nop
  }

  if (retGps != GPSDriver_Status_OK){
 800977e:	7bfb      	ldrb	r3, [r7, #15]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00a      	beq.n	800979a <main+0x1da>
	  if ((retGps = GPSDriver_setOFF(&gpsDriver)) != GPSDriver_Status_OK){
 8009784:	484c      	ldr	r0, [pc, #304]	; (80098b8 <main+0x2f8>)
 8009786:	f005 fea2 	bl	800f4ce <GPSDriver_setOFF>
 800978a:	4603      	mov	r3, r0
 800978c:	73fb      	strb	r3, [r7, #15]
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <main+0x1da>
		  Warning_Handler("GPS switching off problem.");
 8009794:	484a      	ldr	r0, [pc, #296]	; (80098c0 <main+0x300>)
 8009796:	f000 f98f 	bl	8009ab8 <Warning_Handler>
	  }
  }

  if (CANTransceiverDriver_init(&canTransceiverDriver, pConfig, &hcan1, CAN1) != CANTransceiverDriver_Status_OK){
 800979a:	68b9      	ldr	r1, [r7, #8]
 800979c:	4b49      	ldr	r3, [pc, #292]	; (80098c4 <main+0x304>)
 800979e:	4a4a      	ldr	r2, [pc, #296]	; (80098c8 <main+0x308>)
 80097a0:	484a      	ldr	r0, [pc, #296]	; (80098cc <main+0x30c>)
 80097a2:	f001 fa80 	bl	800aca6 <CANTransceiverDriver_init>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <main+0x1f0>
	  Error_Handler();
 80097ac:	f000 f98e 	bl	8009acc <Error_Handler>
  }
  if (CANReceiver_init(&canReceiver, pConfig, &canTransceiverDriver, &msTimerDriver) != CANReceiver_Status_OK){
 80097b0:	68b9      	ldr	r1, [r7, #8]
 80097b2:	4b32      	ldr	r3, [pc, #200]	; (800987c <main+0x2bc>)
 80097b4:	4a45      	ldr	r2, [pc, #276]	; (80098cc <main+0x30c>)
 80097b6:	4846      	ldr	r0, [pc, #280]	; (80098d0 <main+0x310>)
 80097b8:	f001 f8ec 	bl	800a994 <CANReceiver_init>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <main+0x206>
	  Error_Handler();
 80097c2:	f000 f983 	bl	8009acc <Error_Handler>
  }

  if (ActionScheduler_init(&actionScheduler, &configDataManager, &dataSaver, &canReceiver, &gpsDriver, &rtcDriver, &ledDebug2Driver) != ActionScheduler_Status_OK){
 80097c6:	4b2a      	ldr	r3, [pc, #168]	; (8009870 <main+0x2b0>)
 80097c8:	9302      	str	r3, [sp, #8]
 80097ca:	4b2b      	ldr	r3, [pc, #172]	; (8009878 <main+0x2b8>)
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	4b3a      	ldr	r3, [pc, #232]	; (80098b8 <main+0x2f8>)
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4b3f      	ldr	r3, [pc, #252]	; (80098d0 <main+0x310>)
 80097d4:	4a2c      	ldr	r2, [pc, #176]	; (8009888 <main+0x2c8>)
 80097d6:	492b      	ldr	r1, [pc, #172]	; (8009884 <main+0x2c4>)
 80097d8:	483e      	ldr	r0, [pc, #248]	; (80098d4 <main+0x314>)
 80097da:	f000 fe79 	bl	800a4d0 <ActionScheduler_init>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <main+0x228>
	  Error_Handler();
 80097e4:	f000 f972 	bl	8009acc <Error_Handler>
  }
  if (ActionScheduler_startScheduler(&actionScheduler) != ActionScheduler_Status_OK){
 80097e8:	483a      	ldr	r0, [pc, #232]	; (80098d4 <main+0x314>)
 80097ea:	f000 febf 	bl	800a56c <ActionScheduler_startScheduler>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <main+0x238>
	  Error_Handler();
 80097f4:	f000 f96a 	bl	8009acc <Error_Handler>
  }

  GPSDriver_State_TypeDef gpsState;
  if ((retGps = GPSDriver_getState(&gpsDriver, &gpsState)) != GPSDriver_Status_OK){
 80097f8:	1dfb      	adds	r3, r7, #7
 80097fa:	4619      	mov	r1, r3
 80097fc:	482e      	ldr	r0, [pc, #184]	; (80098b8 <main+0x2f8>)
 80097fe:	f005 fe4d 	bl	800f49c <GPSDriver_getState>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d002      	beq.n	8009812 <main+0x252>
	  Warning_Handler("GPS initialization error");
 800980c:	4832      	ldr	r0, [pc, #200]	; (80098d8 <main+0x318>)
 800980e:	f000 f953 	bl	8009ab8 <Warning_Handler>
  }

  if ((retGps == GPSDriver_Status_OK) && (gpsState == GPSDriver_State_Initialized)){
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10c      	bne.n	8009832 <main+0x272>
 8009818:	79fb      	ldrb	r3, [r7, #7]
 800981a:	2b02      	cmp	r3, #2
 800981c:	d109      	bne.n	8009832 <main+0x272>
	  if (LedDriver_OnLed(&ledDebug1Driver) != LedDriver_Status_OK){
 800981e:	4812      	ldr	r0, [pc, #72]	; (8009868 <main+0x2a8>)
 8009820:	f003 fd96 	bl	800d350 <LedDriver_OnLed>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00c      	beq.n	8009844 <main+0x284>
		  Warning_Handler("LED driver problem.");
 800982a:	482c      	ldr	r0, [pc, #176]	; (80098dc <main+0x31c>)
 800982c:	f000 f944 	bl	8009ab8 <Warning_Handler>
	  if (LedDriver_OnLed(&ledDebug1Driver) != LedDriver_Status_OK){
 8009830:	e008      	b.n	8009844 <main+0x284>
	  }
  } else {
	  if (LedDriver_OffLed(&ledDebug1Driver) != LedDriver_Status_OK){
 8009832:	480d      	ldr	r0, [pc, #52]	; (8009868 <main+0x2a8>)
 8009834:	f003 fda7 	bl	800d386 <LedDriver_OffLed>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <main+0x284>
		  Warning_Handler("LED driver problem.");
 800983e:	4827      	ldr	r0, [pc, #156]	; (80098dc <main+0x31c>)
 8009840:	f000 f93a 	bl	8009ab8 <Warning_Handler>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	if (ActionScheduler_thread(&actionScheduler) != ActionScheduler_Status_OK){
 8009844:	4823      	ldr	r0, [pc, #140]	; (80098d4 <main+0x314>)
 8009846:	f000 fead 	bl	800a5a4 <ActionScheduler_thread>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f9      	beq.n	8009844 <main+0x284>
		Warning_Handler("ActionScheduler_thread returned error.");
 8009850:	4823      	ldr	r0, [pc, #140]	; (80098e0 <main+0x320>)
 8009852:	f000 f931 	bl	8009ab8 <Warning_Handler>
	if (ActionScheduler_thread(&actionScheduler) != ActionScheduler_Status_OK){
 8009856:	e7f5      	b.n	8009844 <main+0x284>
	}

  }
  /* USER CODE END 3 */
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20000006 	.word	0x20000006
 8009864:	40020400 	.word	0x40020400
 8009868:	2000ccb0 	.word	0x2000ccb0
 800986c:	20000008 	.word	0x20000008
 8009870:	2000ed60 	.word	0x2000ed60
 8009874:	2000f168 	.word	0x2000f168
 8009878:	2000edac 	.word	0x2000edac
 800987c:	2000f15c 	.word	0x2000f15c
 8009880:	2000ef24 	.word	0x2000ef24
 8009884:	20000778 	.word	0x20000778
 8009888:	2000edd4 	.word	0x2000edd4
 800988c:	2000000a 	.word	0x2000000a
 8009890:	40020c00 	.word	0x40020c00
 8009894:	2000bc00 	.word	0x2000bc00
 8009898:	40011000 	.word	0x40011000
 800989c:	2000f32c 	.word	0x2000f32c
 80098a0:	2000bbc4 	.word	0x2000bbc4
 80098a4:	0801114c 	.word	0x0801114c
 80098a8:	2000bc10 	.word	0x2000bc10
 80098ac:	08011170 	.word	0x08011170
 80098b0:	2000ab1c 	.word	0x2000ab1c
 80098b4:	08011198 	.word	0x08011198
 80098b8:	2000ccc8 	.word	0x2000ccc8
 80098bc:	080111bc 	.word	0x080111bc
 80098c0:	080111d8 	.word	0x080111d8
 80098c4:	40006400 	.word	0x40006400
 80098c8:	200004e4 	.word	0x200004e4
 80098cc:	2000ed78 	.word	0x2000ed78
 80098d0:	2000cd44 	.word	0x2000cd44
 80098d4:	2000edb4 	.word	0x2000edb4
 80098d8:	080111f4 	.word	0x080111f4
 80098dc:	08011210 	.word	0x08011210
 80098e0:	08011224 	.word	0x08011224

080098e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b0b8      	sub	sp, #224	; 0xe0
 80098e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80098ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80098ee:	2234      	movs	r2, #52	; 0x34
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f006 ffb7 	bl	8010866 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80098f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	605a      	str	r2, [r3, #4]
 8009902:	609a      	str	r2, [r3, #8]
 8009904:	60da      	str	r2, [r3, #12]
 8009906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009908:	f107 0308 	add.w	r3, r7, #8
 800990c:	2290      	movs	r2, #144	; 0x90
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f006 ffa8 	bl	8010866 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8009916:	f7f8 fb19 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800991a:	4a42      	ldr	r2, [pc, #264]	; (8009a24 <SystemClock_Config+0x140>)
 800991c:	4b41      	ldr	r3, [pc, #260]	; (8009a24 <SystemClock_Config+0x140>)
 800991e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009920:	f023 0318 	bic.w	r3, r3, #24
 8009924:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009926:	4a3f      	ldr	r2, [pc, #252]	; (8009a24 <SystemClock_Config+0x140>)
 8009928:	4b3e      	ldr	r3, [pc, #248]	; (8009a24 <SystemClock_Config+0x140>)
 800992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009930:	6413      	str	r3, [r2, #64]	; 0x40
 8009932:	4b3c      	ldr	r3, [pc, #240]	; (8009a24 <SystemClock_Config+0x140>)
 8009934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993a:	607b      	str	r3, [r7, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800993e:	4a3a      	ldr	r2, [pc, #232]	; (8009a28 <SystemClock_Config+0x144>)
 8009940:	4b39      	ldr	r3, [pc, #228]	; (8009a28 <SystemClock_Config+0x144>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	4b36      	ldr	r3, [pc, #216]	; (8009a28 <SystemClock_Config+0x144>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009956:	603b      	str	r3, [r7, #0]
 8009958:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800995a:	2305      	movs	r3, #5
 800995c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8009960:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8009964:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8009968:	2301      	movs	r3, #1
 800996a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800996e:	2302      	movs	r3, #2
 8009970:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009974:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009978:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 800997c:	2308      	movs	r3, #8
 800997e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8009982:	2360      	movs	r3, #96	; 0x60
 8009984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009988:	2302      	movs	r3, #2
 800998a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800998e:	2304      	movs	r3, #4
 8009990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009994:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009998:	4618      	mov	r0, r3
 800999a:	f7f8 fb47 	bl	800202c <HAL_RCC_OscConfig>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80099a4:	f000 f892 	bl	8009acc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80099a8:	f7f8 faf0 	bl	8001f8c <HAL_PWREx_EnableOverDrive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80099b2:	f000 f88b 	bl	8009acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80099b6:	230f      	movs	r3, #15
 80099b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80099bc:	2302      	movs	r3, #2
 80099be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80099c2:	2300      	movs	r3, #0
 80099c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80099c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80099d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80099d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80099dc:	2103      	movs	r1, #3
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f8 fd96 	bl	8002510 <HAL_RCC_ClockConfig>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <SystemClock_Config+0x10a>
  {
    Error_Handler();
 80099ea:	f000 f86f 	bl	8009acc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <SystemClock_Config+0x148>)
 80099f0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80099f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80099f8:	2300      	movs	r3, #0
 80099fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80099fc:	2300      	movs	r3, #0
 80099fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8009a02:	2300      	movs	r3, #0
 8009a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a08:	f107 0308 	add.w	r3, r7, #8
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7f8 ff71 	bl	80028f4 <HAL_RCCEx_PeriphCLKConfig>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <SystemClock_Config+0x138>
  {
    Error_Handler();
 8009a18:	f000 f858 	bl	8009acc <Error_Handler>
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	37e0      	adds	r7, #224	; 0xe0
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	40023800 	.word	0x40023800
 8009a28:	40007000 	.word	0x40007000
 8009a2c:	00a00060 	.word	0x00a00060

08009a30 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 1, 0);
 8009a34:	2200      	movs	r2, #0
 8009a36:	2101      	movs	r1, #1
 8009a38:	2005      	movs	r0, #5
 8009a3a:	f7f7 fce2 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8009a3e:	2005      	movs	r0, #5
 8009a40:	f7f7 fcfb 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 2, 0);
 8009a44:	2200      	movs	r2, #0
 8009a46:	2102      	movs	r1, #2
 8009a48:	2013      	movs	r0, #19
 8009a4a:	f7f7 fcda 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8009a4e:	2013      	movs	r0, #19
 8009a50:	f7f7 fcf3 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8009a54:	2200      	movs	r2, #0
 8009a56:	2102      	movs	r1, #2
 8009a58:	2014      	movs	r0, #20
 8009a5a:	f7f7 fcd2 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8009a5e:	2014      	movs	r0, #20
 8009a60:	f7f7 fceb 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8009a64:	2200      	movs	r2, #0
 8009a66:	2102      	movs	r1, #2
 8009a68:	2015      	movs	r0, #21
 8009a6a:	f7f7 fcca 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8009a6e:	2015      	movs	r0, #21
 8009a70:	f7f7 fce3 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8009a74:	2200      	movs	r2, #0
 8009a76:	2102      	movs	r1, #2
 8009a78:	2016      	movs	r0, #22
 8009a7a:	f7f7 fcc2 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8009a7e:	2016      	movs	r0, #22
 8009a80:	f7f7 fcdb 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8009a84:	2200      	movs	r2, #0
 8009a86:	2102      	movs	r1, #2
 8009a88:	2025      	movs	r0, #37	; 0x25
 8009a8a:	f7f7 fcba 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009a8e:	2025      	movs	r0, #37	; 0x25
 8009a90:	f7f7 fcd3 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* SDMMC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 2, 0);
 8009a94:	2200      	movs	r2, #0
 8009a96:	2102      	movs	r1, #2
 8009a98:	2031      	movs	r0, #49	; 0x31
 8009a9a:	f7f7 fcb2 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009a9e:	2031      	movs	r0, #49	; 0x31
 8009aa0:	f7f7 fccb 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 2, 0);
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2102      	movs	r1, #2
 8009aa8:	2046      	movs	r0, #70	; 0x46
 8009aaa:	f7f7 fcaa 	bl	8001402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8009aae:	2046      	movs	r0, #70	; 0x46
 8009ab0:	f7f7 fcc3 	bl	800143a <HAL_NVIC_EnableIRQ>
}
 8009ab4:	bf00      	nop
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <Warning_Handler>:

/* USER CODE BEGIN 4 */

void Warning_Handler(char* description){
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  if (errorInCounter++ > 0){
 8009ad0:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <Error_Handler+0x50>)
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	1c5a      	adds	r2, r3, #1
 8009ad6:	b291      	uxth	r1, r2
 8009ad8:	4a10      	ldr	r2, [pc, #64]	; (8009b1c <Error_Handler+0x50>)
 8009ada:	8011      	strh	r1, [r2, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d11a      	bne.n	8009b16 <Error_Handler+0x4a>
	  return;
  }
  while(1)
  {
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_SET);
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2101      	movs	r1, #1
 8009ae4:	480e      	ldr	r0, [pc, #56]	; (8009b20 <Error_Handler+0x54>)
 8009ae6:	f7f8 fa17 	bl	8001f18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(my_LED_DEBUG1_GPIO_Port, my_LED_DEBUG1_Pin, GPIO_PIN_SET);
 8009aea:	2201      	movs	r2, #1
 8009aec:	2102      	movs	r1, #2
 8009aee:	480c      	ldr	r0, [pc, #48]	; (8009b20 <Error_Handler+0x54>)
 8009af0:	f7f8 fa12 	bl	8001f18 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8009af4:	2032      	movs	r0, #50	; 0x32
 8009af6:	f7f6 fde1 	bl	80006bc <HAL_Delay>
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_RESET);
 8009afa:	2200      	movs	r2, #0
 8009afc:	2101      	movs	r1, #1
 8009afe:	4808      	ldr	r0, [pc, #32]	; (8009b20 <Error_Handler+0x54>)
 8009b00:	f7f8 fa0a 	bl	8001f18 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(my_LED_DEBUG1_GPIO_Port, my_LED_DEBUG1_Pin, GPIO_PIN_RESET);
 8009b04:	2200      	movs	r2, #0
 8009b06:	2102      	movs	r1, #2
 8009b08:	4805      	ldr	r0, [pc, #20]	; (8009b20 <Error_Handler+0x54>)
 8009b0a:	f7f8 fa05 	bl	8001f18 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8009b0e:	2032      	movs	r0, #50	; 0x32
 8009b10:	f7f6 fdd4 	bl	80006bc <HAL_Delay>
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_SET);
 8009b14:	e7e4      	b.n	8009ae0 <Error_Handler+0x14>
	  return;
 8009b16:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	200002c8 	.word	0x200002c8
 8009b20:	40020400 	.word	0x40020400

08009b24 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a07      	ldr	r2, [pc, #28]	; (8009b50 <HAL_RTC_MspInit+0x2c>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d105      	bne.n	8009b42 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8009b36:	4a07      	ldr	r2, [pc, #28]	; (8009b54 <HAL_RTC_MspInit+0x30>)
 8009b38:	4b06      	ldr	r3, [pc, #24]	; (8009b54 <HAL_RTC_MspInit+0x30>)
 8009b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b40:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	40002800 	.word	0x40002800
 8009b54:	40023800 	.word	0x40023800

08009b58 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009b60:	f7f6 fda0 	bl	80006a4 <HAL_GetTick>
 8009b64:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009b66:	e006      	b.n	8009b76 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b68:	f7ff fbb8 	bl	80092dc <BSP_SD_GetCardState>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	e009      	b.n	8009b8a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009b76:	f7f6 fd95 	bl	80006a4 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d3f0      	bcc.n	8009b68 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009b86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b9e:	4b0b      	ldr	r3, [pc, #44]	; (8009bcc <SD_CheckStatus+0x38>)
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009ba4:	f7ff fb9a 	bl	80092dc <BSP_SD_GetCardState>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d107      	bne.n	8009bbe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009bae:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <SD_CheckStatus+0x38>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f023 0301 	bic.w	r3, r3, #1
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b04      	ldr	r3, [pc, #16]	; (8009bcc <SD_CheckStatus+0x38>)
 8009bbc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009bbe:	4b03      	ldr	r3, [pc, #12]	; (8009bcc <SD_CheckStatus+0x38>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	2000000c 	.word	0x2000000c

08009bd0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009bda:	f7ff fb33 	bl	8009244 <BSP_SD_Init>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d107      	bne.n	8009bf4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009be4:	79fb      	ldrb	r3, [r7, #7]
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7ff ffd4 	bl	8009b94 <SD_CheckStatus>
 8009bec:	4603      	mov	r3, r0
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4b04      	ldr	r3, [pc, #16]	; (8009c04 <SD_initialize+0x34>)
 8009bf2:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8009bf4:	4b03      	ldr	r3, [pc, #12]	; (8009c04 <SD_initialize+0x34>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	b2db      	uxtb	r3, r3
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	2000000c 	.word	0x2000000c

08009c08 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c12:	79fb      	ldrb	r3, [r7, #7]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff ffbd 	bl	8009b94 <SD_CheckStatus>
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60b9      	str	r1, [r7, #8]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c38:	f247 5030 	movw	r0, #30000	; 0x7530
 8009c3c:	f7ff ff8c 	bl	8009b58 <SD_CheckStatusWithTimeout>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	da01      	bge.n	8009c4a <SD_read+0x26>
  {
    return res;
 8009c46:	7ffb      	ldrb	r3, [r7, #31]
 8009c48:	e08b      	b.n	8009d62 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f040 8085 	bne.w	8009d60 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	6879      	ldr	r1, [r7, #4]
 8009c5a:	68b8      	ldr	r0, [r7, #8]
 8009c5c:	f7ff fb0a 	bl	8009274 <BSP_SD_ReadBlocks_DMA>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d133      	bne.n	8009cce <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009c66:	4b41      	ldr	r3, [pc, #260]	; (8009d6c <SD_read+0x148>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009c6c:	f7f6 fd1a 	bl	80006a4 <HAL_GetTick>
 8009c70:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009c72:	bf00      	nop
 8009c74:	4b3d      	ldr	r3, [pc, #244]	; (8009d6c <SD_read+0x148>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <SD_read+0x6a>
 8009c7c:	f7f6 fd12 	bl	80006a4 <HAL_GetTick>
 8009c80:	4602      	mov	r2, r0
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	f247 522f 	movw	r2, #29999	; 0x752f
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d9f2      	bls.n	8009c74 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8009c8e:	4b37      	ldr	r3, [pc, #220]	; (8009d6c <SD_read+0x148>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d102      	bne.n	8009c9c <SD_read+0x78>
      {
        res = RES_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	77fb      	strb	r3, [r7, #31]
 8009c9a:	e061      	b.n	8009d60 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8009c9c:	4b33      	ldr	r3, [pc, #204]	; (8009d6c <SD_read+0x148>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009ca2:	f7f6 fcff 	bl	80006a4 <HAL_GetTick>
 8009ca6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009ca8:	e007      	b.n	8009cba <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009caa:	f7ff fb17 	bl	80092dc <BSP_SD_GetCardState>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <SD_read+0x96>
          {
            res = RES_OK;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009cb8:	e052      	b.n	8009d60 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009cba:	f7f6 fcf3 	bl	80006a4 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	f247 522f 	movw	r2, #29999	; 0x752f
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d9ee      	bls.n	8009caa <SD_read+0x86>
 8009ccc:	e048      	b.n	8009d60 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	e034      	b.n	8009d3e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	607a      	str	r2, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4824      	ldr	r0, [pc, #144]	; (8009d70 <SD_read+0x14c>)
 8009ce0:	f7ff fac8 	bl	8009274 <BSP_SD_ReadBlocks_DMA>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009ce8:	7fbb      	ldrb	r3, [r7, #30]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d12c      	bne.n	8009d48 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8009cee:	4b1f      	ldr	r3, [pc, #124]	; (8009d6c <SD_read+0x148>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8009cf4:	f7f6 fcd6 	bl	80006a4 <HAL_GetTick>
 8009cf8:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009cfa:	bf00      	nop
 8009cfc:	4b1b      	ldr	r3, [pc, #108]	; (8009d6c <SD_read+0x148>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d108      	bne.n	8009d16 <SD_read+0xf2>
 8009d04:	f7f6 fcce 	bl	80006a4 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d9f2      	bls.n	8009cfc <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8009d16:	4b15      	ldr	r3, [pc, #84]	; (8009d6c <SD_read+0x148>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d016      	beq.n	8009d4c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4a13      	ldr	r2, [pc, #76]	; (8009d70 <SD_read+0x14c>)
 8009d22:	4618      	mov	r0, r3
 8009d24:	4611      	mov	r1, r2
 8009d26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	f006 fd90 	bl	8010850 <memcpy>
          buff += BLOCKSIZE;
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009d36:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	61bb      	str	r3, [r7, #24]
 8009d3e:	69ba      	ldr	r2, [r7, #24]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d3c6      	bcc.n	8009cd4 <SD_read+0xb0>
 8009d46:	e002      	b.n	8009d4e <SD_read+0x12a>
        }
        else
        {
          break;
 8009d48:	bf00      	nop
 8009d4a:	e000      	b.n	8009d4e <SD_read+0x12a>
            break;
 8009d4c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8009d4e:	69ba      	ldr	r2, [r7, #24]
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d104      	bne.n	8009d60 <SD_read+0x13c>
 8009d56:	7fbb      	ldrb	r3, [r7, #30]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d101      	bne.n	8009d60 <SD_read+0x13c>
        res = RES_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8009d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3720      	adds	r7, #32
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	200004d0 	.word	0x200004d0
 8009d70:	200002cc 	.word	0x200002cc

08009d74 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b088      	sub	sp, #32
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60b9      	str	r1, [r7, #8]
 8009d7c:	607a      	str	r2, [r7, #4]
 8009d7e:	603b      	str	r3, [r7, #0]
 8009d80:	4603      	mov	r3, r0
 8009d82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009d84:	2301      	movs	r3, #1
 8009d86:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8009d88:	4b4c      	ldr	r3, [pc, #304]	; (8009ebc <SD_write+0x148>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d8e:	f247 5030 	movw	r0, #30000	; 0x7530
 8009d92:	f7ff fee1 	bl	8009b58 <SD_CheckStatusWithTimeout>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	da01      	bge.n	8009da0 <SD_write+0x2c>
  {
    return res;
 8009d9c:	7ffb      	ldrb	r3, [r7, #31]
 8009d9e:	e088      	b.n	8009eb2 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f040 8082 	bne.w	8009eb0 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	6879      	ldr	r1, [r7, #4]
 8009db0:	68b8      	ldr	r0, [r7, #8]
 8009db2:	f7ff fa79 	bl	80092a8 <BSP_SD_WriteBlocks_DMA>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d130      	bne.n	8009e1e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009dbc:	f7f6 fc72 	bl	80006a4 <HAL_GetTick>
 8009dc0:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009dc2:	bf00      	nop
 8009dc4:	4b3d      	ldr	r3, [pc, #244]	; (8009ebc <SD_write+0x148>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d108      	bne.n	8009dde <SD_write+0x6a>
 8009dcc:	f7f6 fc6a 	bl	80006a4 <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d9f2      	bls.n	8009dc4 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8009dde:	4b37      	ldr	r3, [pc, #220]	; (8009ebc <SD_write+0x148>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <SD_write+0x78>
      {
        res = RES_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	77fb      	strb	r3, [r7, #31]
 8009dea:	e061      	b.n	8009eb0 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8009dec:	4b33      	ldr	r3, [pc, #204]	; (8009ebc <SD_write+0x148>)
 8009dee:	2200      	movs	r2, #0
 8009df0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009df2:	f7f6 fc57 	bl	80006a4 <HAL_GetTick>
 8009df6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009df8:	e007      	b.n	8009e0a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009dfa:	f7ff fa6f 	bl	80092dc <BSP_SD_GetCardState>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d102      	bne.n	8009e0a <SD_write+0x96>
          {
            res = RES_OK;
 8009e04:	2300      	movs	r3, #0
 8009e06:	77fb      	strb	r3, [r7, #31]
            break;
 8009e08:	e052      	b.n	8009eb0 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e0a:	f7f6 fc4b 	bl	80006a4 <HAL_GetTick>
 8009e0e:	4602      	mov	r2, r0
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	1ad3      	subs	r3, r2, r3
 8009e14:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d9ee      	bls.n	8009dfa <SD_write+0x86>
 8009e1c:	e048      	b.n	8009eb0 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8009e1e:	2300      	movs	r3, #0
 8009e20:	61bb      	str	r3, [r7, #24]
 8009e22:	e034      	b.n	8009e8e <SD_write+0x11a>
      {
        WriteStatus = 0;
 8009e24:	4b25      	ldr	r3, [pc, #148]	; (8009ebc <SD_write+0x148>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	1c5a      	adds	r2, r3, #1
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	4619      	mov	r1, r3
 8009e34:	4822      	ldr	r0, [pc, #136]	; (8009ec0 <SD_write+0x14c>)
 8009e36:	f7ff fa37 	bl	80092a8 <BSP_SD_WriteBlocks_DMA>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009e3e:	7fbb      	ldrb	r3, [r7, #30]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d129      	bne.n	8009e98 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8009e44:	f7f6 fc2e 	bl	80006a4 <HAL_GetTick>
 8009e48:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e4a:	bf00      	nop
 8009e4c:	4b1b      	ldr	r3, [pc, #108]	; (8009ebc <SD_write+0x148>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d108      	bne.n	8009e66 <SD_write+0xf2>
 8009e54:	f7f6 fc26 	bl	80006a4 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d9f2      	bls.n	8009e4c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8009e66:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <SD_write+0x148>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d016      	beq.n	8009e9c <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	4a13      	ldr	r2, [pc, #76]	; (8009ec0 <SD_write+0x14c>)
 8009e72:	4618      	mov	r0, r3
 8009e74:	4611      	mov	r1, r2
 8009e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	f006 fce8 	bl	8010850 <memcpy>
          buff += BLOCKSIZE;
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009e86:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d3c6      	bcc.n	8009e24 <SD_write+0xb0>
 8009e96:	e002      	b.n	8009e9e <SD_write+0x12a>
        }
        else
        {
          break;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <SD_write+0x12a>
            break;
 8009e9c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d104      	bne.n	8009eb0 <SD_write+0x13c>
 8009ea6:	7fbb      	ldrb	r3, [r7, #30]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d101      	bne.n	8009eb0 <SD_write+0x13c>
        res = RES_OK;
 8009eac:	2300      	movs	r3, #0
 8009eae:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8009eb0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3720      	adds	r7, #32
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}
 8009eba:	bf00      	nop
 8009ebc:	200004cc 	.word	0x200004cc
 8009ec0:	200002cc 	.word	0x200002cc

08009ec4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08c      	sub	sp, #48	; 0x30
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	603a      	str	r2, [r7, #0]
 8009ece:	71fb      	strb	r3, [r7, #7]
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009eda:	4b25      	ldr	r3, [pc, #148]	; (8009f70 <SD_ioctl+0xac>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0301 	and.w	r3, r3, #1
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <SD_ioctl+0x28>
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e03c      	b.n	8009f66 <SD_ioctl+0xa2>

  switch (cmd)
 8009eec:	79bb      	ldrb	r3, [r7, #6]
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d834      	bhi.n	8009f5c <SD_ioctl+0x98>
 8009ef2:	a201      	add	r2, pc, #4	; (adr r2, 8009ef8 <SD_ioctl+0x34>)
 8009ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef8:	08009f09 	.word	0x08009f09
 8009efc:	08009f11 	.word	0x08009f11
 8009f00:	08009f29 	.word	0x08009f29
 8009f04:	08009f43 	.word	0x08009f43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f0e:	e028      	b.n	8009f62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f10:	f107 030c 	add.w	r3, r7, #12
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff f9f1 	bl	80092fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f26:	e01c      	b.n	8009f62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f28:	f107 030c 	add.w	r3, r7, #12
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7ff f9e5 	bl	80092fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f40:	e00f      	b.n	8009f62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f42:	f107 030c 	add.w	r3, r7, #12
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7ff f9d8 	bl	80092fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	0a5a      	lsrs	r2, r3, #9
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f54:	2300      	movs	r3, #0
 8009f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f5a:	e002      	b.n	8009f62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009f5c:	2304      	movs	r3, #4
 8009f5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3730      	adds	r7, #48	; 0x30
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	2000000c 	.word	0x2000000c

08009f74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
             
  WriteStatus = 1;
 8009f78:	4b03      	ldr	r3, [pc, #12]	; (8009f88 <BSP_SD_WriteCpltCallback+0x14>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	601a      	str	r2, [r3, #0]
}
 8009f7e:	bf00      	nop
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr
 8009f88:	200004cc 	.word	0x200004cc

08009f8c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009f90:	4b03      	ldr	r3, [pc, #12]	; (8009fa0 <BSP_SD_ReadCpltCallback+0x14>)
 8009f92:	2201      	movs	r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
}
 8009f96:	bf00      	nop
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	200004d0 	.word	0x200004d0

08009fa4 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8009fa8:	4b0d      	ldr	r3, [pc, #52]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009faa:	4a0e      	ldr	r2, [pc, #56]	; (8009fe4 <MX_SDMMC1_SD_Init+0x40>)
 8009fac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8009fae:	4b0c      	ldr	r3, [pc, #48]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8009fb4:	4b0a      	ldr	r3, [pc, #40]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009fba:	4b09      	ldr	r3, [pc, #36]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8009fc6:	4b06      	ldr	r3, [pc, #24]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fc8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009fcc:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8009fce:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <MX_SDMMC1_SD_Init+0x3c>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	619a      	str	r2, [r3, #24]

}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	2000f188 	.word	0x2000f188
 8009fe4:	40012c00 	.word	0x40012c00

08009fe8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	; 0x28
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ff0:	f107 0314 	add.w	r3, r7, #20
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	605a      	str	r2, [r3, #4]
 8009ffa:	609a      	str	r2, [r3, #8]
 8009ffc:	60da      	str	r2, [r3, #12]
 8009ffe:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a61      	ldr	r2, [pc, #388]	; (800a18c <HAL_SD_MspInit+0x1a4>)
 800a006:	4293      	cmp	r3, r2
 800a008:	f040 80bb 	bne.w	800a182 <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a00c:	4a60      	ldr	r2, [pc, #384]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a00e:	4b60      	ldr	r3, [pc, #384]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a016:	6453      	str	r3, [r2, #68]	; 0x44
 800a018:	4b5d      	ldr	r3, [pc, #372]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a020:	613b      	str	r3, [r7, #16]
 800a022:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a024:	4a5a      	ldr	r2, [pc, #360]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a026:	4b5a      	ldr	r3, [pc, #360]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02a:	f043 0304 	orr.w	r3, r3, #4
 800a02e:	6313      	str	r3, [r2, #48]	; 0x30
 800a030:	4b57      	ldr	r3, [pc, #348]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a034:	f003 0304 	and.w	r3, r3, #4
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a03c:	4a54      	ldr	r2, [pc, #336]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a03e:	4b54      	ldr	r3, [pc, #336]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a042:	f043 0308 	orr.w	r3, r3, #8
 800a046:	6313      	str	r3, [r2, #48]	; 0x30
 800a048:	4b51      	ldr	r3, [pc, #324]	; (800a190 <HAL_SD_MspInit+0x1a8>)
 800a04a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04c:	f003 0308 	and.w	r3, r3, #8
 800a050:	60bb      	str	r3, [r7, #8]
 800a052:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800a054:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800a058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a05a:	2302      	movs	r3, #2
 800a05c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a05e:	2300      	movs	r3, #0
 800a060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a062:	2303      	movs	r3, #3
 800a064:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a066:	230c      	movs	r3, #12
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a06a:	f107 0314 	add.w	r3, r7, #20
 800a06e:	4619      	mov	r1, r3
 800a070:	4848      	ldr	r0, [pc, #288]	; (800a194 <HAL_SD_MspInit+0x1ac>)
 800a072:	f7f7 fda7 	bl	8001bc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a076:	2304      	movs	r3, #4
 800a078:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a07a:	2302      	movs	r3, #2
 800a07c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a082:	2303      	movs	r3, #3
 800a084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a086:	230c      	movs	r3, #12
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a08a:	f107 0314 	add.w	r3, r7, #20
 800a08e:	4619      	mov	r1, r3
 800a090:	4841      	ldr	r0, [pc, #260]	; (800a198 <HAL_SD_MspInit+0x1b0>)
 800a092:	f7f7 fd97 	bl	8001bc4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800a096:	4b41      	ldr	r3, [pc, #260]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a098:	4a41      	ldr	r2, [pc, #260]	; (800a1a0 <HAL_SD_MspInit+0x1b8>)
 800a09a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800a09c:	4b3f      	ldr	r3, [pc, #252]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a09e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0a2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0a4:	4b3d      	ldr	r3, [pc, #244]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a0aa:	4b3c      	ldr	r3, [pc, #240]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a0b0:	4b3a      	ldr	r3, [pc, #232]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0b6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a0b8:	4b38      	ldr	r3, [pc, #224]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0be:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a0c0:	4b36      	ldr	r3, [pc, #216]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a0c6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 800a0c8:	4b34      	ldr	r3, [pc, #208]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0ca:	2220      	movs	r2, #32
 800a0cc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a0ce:	4b33      	ldr	r3, [pc, #204]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a0d4:	4b31      	ldr	r3, [pc, #196]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a0da:	4b30      	ldr	r3, [pc, #192]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0dc:	2203      	movs	r2, #3
 800a0de:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800a0e0:	4b2e      	ldr	r3, [pc, #184]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a0e8:	4b2c      	ldr	r3, [pc, #176]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800a0f0:	482a      	ldr	r0, [pc, #168]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a0f2:	f7f7 f9c3 	bl	800147c <HAL_DMA_Init>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 800a0fc:	f7ff fce6 	bl	8009acc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a26      	ldr	r2, [pc, #152]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a104:	63da      	str	r2, [r3, #60]	; 0x3c
 800a106:	4a25      	ldr	r2, [pc, #148]	; (800a19c <HAL_SD_MspInit+0x1b4>)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800a10c:	4b25      	ldr	r3, [pc, #148]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a10e:	4a26      	ldr	r2, [pc, #152]	; (800a1a8 <HAL_SD_MspInit+0x1c0>)
 800a110:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800a112:	4b24      	ldr	r3, [pc, #144]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a118:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a11a:	4b22      	ldr	r3, [pc, #136]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a11c:	2240      	movs	r2, #64	; 0x40
 800a11e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a120:	4b20      	ldr	r3, [pc, #128]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a122:	2200      	movs	r2, #0
 800a124:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a126:	4b1f      	ldr	r3, [pc, #124]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a128:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a12c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a12e:	4b1d      	ldr	r3, [pc, #116]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a130:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a134:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a136:	4b1b      	ldr	r3, [pc, #108]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a138:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a13c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800a13e:	4b19      	ldr	r3, [pc, #100]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a140:	2220      	movs	r2, #32
 800a142:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a144:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a146:	2200      	movs	r2, #0
 800a148:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a14a:	4b16      	ldr	r3, [pc, #88]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a14c:	2204      	movs	r2, #4
 800a14e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800a150:	4b14      	ldr	r3, [pc, #80]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a152:	2203      	movs	r2, #3
 800a154:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800a156:	4b13      	ldr	r3, [pc, #76]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a158:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a15c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800a15e:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a160:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a164:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800a166:	480f      	ldr	r0, [pc, #60]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a168:	f7f7 f988 	bl	800147c <HAL_DMA_Init>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800a172:	f7ff fcab 	bl	8009acc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a17a:	641a      	str	r2, [r3, #64]	; 0x40
 800a17c:	4a09      	ldr	r2, [pc, #36]	; (800a1a4 <HAL_SD_MspInit+0x1bc>)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800a182:	bf00      	nop
 800a184:	3728      	adds	r7, #40	; 0x28
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40012c00 	.word	0x40012c00
 800a190:	40023800 	.word	0x40023800
 800a194:	40020800 	.word	0x40020800
 800a198:	40020c00 	.word	0x40020c00
 800a19c:	2000f20c 	.word	0x2000f20c
 800a1a0:	40026458 	.word	0x40026458
 800a1a4:	2000f26c 	.word	0x2000f26c
 800a1a8:	400264a0 	.word	0x400264a0

0800a1ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a1b2:	4a0f      	ldr	r2, [pc, #60]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1bc:	6413      	str	r3, [r2, #64]	; 0x40
 800a1be:	4b0c      	ldr	r3, [pc, #48]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1c6:	607b      	str	r3, [r7, #4]
 800a1c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a1ca:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1cc:	4b08      	ldr	r3, [pc, #32]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1d4:	6453      	str	r3, [r2, #68]	; 0x44
 800a1d6:	4b06      	ldr	r3, [pc, #24]	; (800a1f0 <HAL_MspInit+0x44>)
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a1e2:	bf00      	nop
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	40023800 	.word	0x40023800

0800a1f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a1f8:	bf00      	nop
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 800a206:	f7ff fc61 	bl	8009acc <Error_Handler>
 800a20a:	e7fc      	b.n	800a206 <HardFault_Handler+0x4>

0800a20c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a20c:	b480      	push	{r7}
 800a20e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a210:	e7fe      	b.n	800a210 <MemManage_Handler+0x4>

0800a212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a212:	b480      	push	{r7}
 800a214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a216:	e7fe      	b.n	800a216 <BusFault_Handler+0x4>

0800a218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a21c:	e7fe      	b.n	800a21c <UsageFault_Handler+0x4>

0800a21e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a21e:	b480      	push	{r7}
 800a220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a222:	bf00      	nop
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a230:	bf00      	nop
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr

0800a23a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a23a:	b480      	push	{r7}
 800a23c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a23e:	bf00      	nop
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a24c:	f7f6 fa16 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 800a250:	f7f7 f90d 	bl	800146e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800a254:	bf00      	nop
 800a256:	bd80      	pop	{r7, pc}

0800a258 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800a258:	b480      	push	{r7}
 800a25a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800a25c:	bf00      	nop
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
	...

0800a268 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a26c:	4802      	ldr	r0, [pc, #8]	; (800a278 <CAN1_TX_IRQHandler+0x10>)
 800a26e:	f7f6 fdaa 	bl	8000dc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800a272:	bf00      	nop
 800a274:	bd80      	pop	{r7, pc}
 800a276:	bf00      	nop
 800a278:	200004e4 	.word	0x200004e4

0800a27c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a280:	4802      	ldr	r0, [pc, #8]	; (800a28c <CAN1_RX0_IRQHandler+0x10>)
 800a282:	f7f6 fda0 	bl	8000dc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a286:	bf00      	nop
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	200004e4 	.word	0x200004e4

0800a290 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a294:	4802      	ldr	r0, [pc, #8]	; (800a2a0 <CAN1_RX1_IRQHandler+0x10>)
 800a296:	f7f6 fd96 	bl	8000dc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800a29a:	bf00      	nop
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	200004e4 	.word	0x200004e4

0800a2a4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a2a8:	4802      	ldr	r0, [pc, #8]	; (800a2b4 <CAN1_SCE_IRQHandler+0x10>)
 800a2aa:	f7f6 fd8c 	bl	8000dc6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800a2ae:	bf00      	nop
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	200004e4 	.word	0x200004e4

0800a2b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a2bc:	4802      	ldr	r0, [pc, #8]	; (800a2c8 <USART1_IRQHandler+0x10>)
 800a2be:	f7fa fcff 	bl	8004cc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a2c2:	bf00      	nop
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	2000f32c 	.word	0x2000f32c

0800a2cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800a2d0:	4802      	ldr	r0, [pc, #8]	; (800a2dc <SDMMC1_IRQHandler+0x10>)
 800a2d2:	f7f9 fcb3 	bl	8003c3c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800a2d6:	bf00      	nop
 800a2d8:	bd80      	pop	{r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	2000f188 	.word	0x2000f188

0800a2e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800a2e4:	4802      	ldr	r0, [pc, #8]	; (800a2f0 <DMA2_Stream3_IRQHandler+0x10>)
 800a2e6:	f7f7 f9f9 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800a2ea:	bf00      	nop
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	2000f20c 	.word	0x2000f20c

0800a2f4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800a2f8:	4802      	ldr	r0, [pc, #8]	; (800a304 <DMA2_Stream6_IRQHandler+0x10>)
 800a2fa:	f7f7 f9ef 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800a2fe:	bf00      	nop
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	2000f26c 	.word	0x2000f26c

0800a308 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a30c:	4802      	ldr	r0, [pc, #8]	; (800a318 <DMA2_Stream7_IRQHandler+0x10>)
 800a30e:	f7f7 f9e5 	bl	80016dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a312:	bf00      	nop
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	2000f2cc 	.word	0x2000f2cc

0800a31c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800a324:	4b11      	ldr	r3, [pc, #68]	; (800a36c <_sbrk+0x50>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <_sbrk+0x16>
		heap_end = &end;
 800a32c:	4b0f      	ldr	r3, [pc, #60]	; (800a36c <_sbrk+0x50>)
 800a32e:	4a10      	ldr	r2, [pc, #64]	; (800a370 <_sbrk+0x54>)
 800a330:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800a332:	4b0e      	ldr	r3, [pc, #56]	; (800a36c <_sbrk+0x50>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800a338:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <_sbrk+0x50>)
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4413      	add	r3, r2
 800a340:	466a      	mov	r2, sp
 800a342:	4293      	cmp	r3, r2
 800a344:	d907      	bls.n	800a356 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800a346:	f006 fa59 	bl	80107fc <__errno>
 800a34a:	4602      	mov	r2, r0
 800a34c:	230c      	movs	r3, #12
 800a34e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	e006      	b.n	800a364 <_sbrk+0x48>
	}

	heap_end += incr;
 800a356:	4b05      	ldr	r3, [pc, #20]	; (800a36c <_sbrk+0x50>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	4413      	add	r3, r2
 800a35e:	4a03      	ldr	r2, [pc, #12]	; (800a36c <_sbrk+0x50>)
 800a360:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800a362:	68fb      	ldr	r3, [r7, #12]
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	200004d4 	.word	0x200004d4
 800a370:	2000f3b0 	.word	0x2000f3b0

0800a374 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a378:	4a15      	ldr	r2, [pc, #84]	; (800a3d0 <SystemInit+0x5c>)
 800a37a:	4b15      	ldr	r3, [pc, #84]	; (800a3d0 <SystemInit+0x5c>)
 800a37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a388:	4a12      	ldr	r2, [pc, #72]	; (800a3d4 <SystemInit+0x60>)
 800a38a:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <SystemInit+0x60>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f043 0301 	orr.w	r3, r3, #1
 800a392:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a394:	4b0f      	ldr	r3, [pc, #60]	; (800a3d4 <SystemInit+0x60>)
 800a396:	2200      	movs	r2, #0
 800a398:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a39a:	490e      	ldr	r1, [pc, #56]	; (800a3d4 <SystemInit+0x60>)
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <SystemInit+0x60>)
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <SystemInit+0x64>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <SystemInit+0x60>)
 800a3a8:	4a0c      	ldr	r2, [pc, #48]	; (800a3dc <SystemInit+0x68>)
 800a3aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a3ac:	4a09      	ldr	r2, [pc, #36]	; (800a3d4 <SystemInit+0x60>)
 800a3ae:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <SystemInit+0x60>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <SystemInit+0x60>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a3be:	4b04      	ldr	r3, [pc, #16]	; (800a3d0 <SystemInit+0x5c>)
 800a3c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a3c4:	609a      	str	r2, [r3, #8]
#endif
}
 800a3c6:	bf00      	nop
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	e000ed00 	.word	0xe000ed00
 800a3d4:	40023800 	.word	0x40023800
 800a3d8:	fef6ffff 	.word	0xfef6ffff
 800a3dc:	24003010 	.word	0x24003010

0800a3e0 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08a      	sub	sp, #40	; 0x28
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3e8:	f107 0314 	add.w	r3, r7, #20
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	605a      	str	r2, [r3, #4]
 800a3f2:	609a      	str	r2, [r3, #8]
 800a3f4:	60da      	str	r2, [r3, #12]
 800a3f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a2f      	ldr	r2, [pc, #188]	; (800a4bc <HAL_UART_MspInit+0xdc>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d157      	bne.n	800a4b2 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a402:	4a2f      	ldr	r2, [pc, #188]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a404:	4b2e      	ldr	r3, [pc, #184]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a408:	f043 0310 	orr.w	r3, r3, #16
 800a40c:	6453      	str	r3, [r2, #68]	; 0x44
 800a40e:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a412:	f003 0310 	and.w	r3, r3, #16
 800a416:	613b      	str	r3, [r7, #16]
 800a418:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a41a:	4a29      	ldr	r2, [pc, #164]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a41c:	4b28      	ldr	r3, [pc, #160]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a420:	f043 0302 	orr.w	r3, r3, #2
 800a424:	6313      	str	r3, [r2, #48]	; 0x30
 800a426:	4b26      	ldr	r3, [pc, #152]	; (800a4c0 <HAL_UART_MspInit+0xe0>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = my_GPS_UART_TX_Pin|my_GPS_UART_RX_Pin;
 800a432:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a438:	2302      	movs	r3, #2
 800a43a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a43c:	2301      	movs	r3, #1
 800a43e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a440:	2303      	movs	r3, #3
 800a442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a444:	2304      	movs	r3, #4
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a448:	f107 0314 	add.w	r3, r7, #20
 800a44c:	4619      	mov	r1, r3
 800a44e:	481d      	ldr	r0, [pc, #116]	; (800a4c4 <HAL_UART_MspInit+0xe4>)
 800a450:	f7f7 fbb8 	bl	8001bc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a454:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a456:	4a1d      	ldr	r2, [pc, #116]	; (800a4cc <HAL_UART_MspInit+0xec>)
 800a458:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a45a:	4b1b      	ldr	r3, [pc, #108]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a45c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a460:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a462:	4b19      	ldr	r3, [pc, #100]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a464:	2240      	movs	r2, #64	; 0x40
 800a466:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a468:	4b17      	ldr	r3, [pc, #92]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a46e:	4b16      	ldr	r3, [pc, #88]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a474:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a476:	4b14      	ldr	r3, [pc, #80]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a478:	2200      	movs	r2, #0
 800a47a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a47c:	4b12      	ldr	r3, [pc, #72]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a47e:	2200      	movs	r2, #0
 800a480:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a482:	4b11      	ldr	r3, [pc, #68]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a484:	2200      	movs	r2, #0
 800a486:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a48a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a48e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a492:	2200      	movs	r2, #0
 800a494:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a496:	480c      	ldr	r0, [pc, #48]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a498:	f7f6 fff0 	bl	800147c <HAL_DMA_Init>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800a4a2:	f7ff fb13 	bl	8009acc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a07      	ldr	r2, [pc, #28]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a4aa:	669a      	str	r2, [r3, #104]	; 0x68
 800a4ac:	4a06      	ldr	r2, [pc, #24]	; (800a4c8 <HAL_UART_MspInit+0xe8>)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a4b2:	bf00      	nop
 800a4b4:	3728      	adds	r7, #40	; 0x28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	40011000 	.word	0x40011000
 800a4c0:	40023800 	.word	0x40023800
 800a4c4:	40020400 	.word	0x40020400
 800a4c8:	2000f2cc 	.word	0x2000f2cc
 800a4cc:	400264b8 	.word	0x400264b8

0800a4d0 <ActionScheduler_init>:
static ActionScheduler_Status_TypeDef _ActionScheduler_logCloseState(ActionScheduler_TypeDef* pSelf);

//< ----- Public functions ----- >//

ActionScheduler_Status_TypeDef ActionScheduler_init(ActionScheduler_TypeDef* pSelf, ConfigDataManager_TypeDef* pConfigManager,
		DataSaver_TypeDef* pDataSaver, CANReceiver_TypeDef* pCANReceiver, GPSDriver_TypeDef* pGPSDriver, RTCDriver_TypeDef* pRTCDriver, LedDriver_TypeDef* pStatusLedDriver) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]

	if (pSelf == NULL || pConfigManager == NULL || pDataSaver == NULL || pCANReceiver == NULL || pGPSDriver == NULL || pRTCDriver == NULL || pStatusLedDriver == NULL){
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d011      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00e      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d008      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d005      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d002      	beq.n	800a508 <ActionScheduler_init+0x38>
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <ActionScheduler_init+0x3c>
		return ActionScheduler_Status_NullPointerError;
 800a508:	2301      	movs	r3, #1
 800a50a:	e02b      	b.n	800a564 <ActionScheduler_init+0x94>
	}

	if (pSelf->state != ActionScheduler_State_UnInitialized){
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <ActionScheduler_init+0x48>
		return ActionScheduler_Status_Error;
 800a514:	2303      	movs	r3, #3
 800a516:	e025      	b.n	800a564 <ActionScheduler_init+0x94>
	}

	ConfigDataManager_getConfigPointer(pConfigManager, &pSelf->pConfig);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3304      	adds	r3, #4
 800a51c:	4619      	mov	r1, r3
 800a51e:	68b8      	ldr	r0, [r7, #8]
 800a520:	f001 f934 	bl	800b78c <ConfigDataManager_getConfigPointer>
	pSelf->pDataSaver		= pDataSaver;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]
	pSelf->pCANReceiver		= pCANReceiver;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	60da      	str	r2, [r3, #12]
	pSelf->pGPSDriver		= pGPSDriver;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	69ba      	ldr	r2, [r7, #24]
 800a534:	611a      	str	r2, [r3, #16]
	pSelf->pRTCDriver		= pRTCDriver;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	619a      	str	r2, [r3, #24]
	pSelf->pStatusLedDriver	= pStatusLedDriver;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a3a      	ldr	r2, [r7, #32]
 800a540:	615a      	str	r2, [r3, #20]
	if (RTCDriver_getDateAndTime(pSelf->pRTCDriver, &(pSelf->stopLoggingTimeout)) != RTCDriver_Status_OK){
		return ActionScheduler_Status_Error;
	}
#endif

	if (LedDriver_BlinkingLed(pSelf->pStatusLedDriver, ACTION_SCHEDULER_IDLE_LED_ON_TIME, ACTION_SCHEDULER_IDLE_LED_OFF_TIME) != LedDriver_Status_OK){
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a54a:	2132      	movs	r1, #50	; 0x32
 800a54c:	4618      	mov	r0, r3
 800a54e:	f002 ff35 	bl	800d3bc <LedDriver_BlinkingLed>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <ActionScheduler_init+0x8c>
		return ActionScheduler_Status_Error;
 800a558:	2303      	movs	r3, #3
 800a55a:	e003      	b.n	800a564 <ActionScheduler_init+0x94>
	}
	pSelf->state = ActionScheduler_State_Idle;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	701a      	strb	r2, [r3, #0]

	return ActionScheduler_Status_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <ActionScheduler_startScheduler>:

ActionScheduler_Status_TypeDef ActionScheduler_startScheduler(ActionScheduler_TypeDef* pSelf){
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]

	if (pSelf->state == ActionScheduler_State_UnInitialized){
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <ActionScheduler_startScheduler+0x14>
		return ActionScheduler_Status_UnInitializedError;
 800a57c:	2302      	movs	r3, #2
 800a57e:	e00d      	b.n	800a59c <ActionScheduler_startScheduler+0x30>
	}

	if (CANReceiver_start(pSelf->pCANReceiver) != CANReceiver_Status_OK){
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	68db      	ldr	r3, [r3, #12]
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fab7 	bl	800aaf8 <CANReceiver_start>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <ActionScheduler_startScheduler+0x28>
		return ActionScheduler_Status_Error;
 800a590:	2303      	movs	r3, #3
 800a592:	e003      	b.n	800a59c <ActionScheduler_startScheduler+0x30>
	if (RTCDriver_getDateAndTime(pSelf->pRTCDriver, &(pSelf->stopLoggingTimeout)) != RTCDriver_Status_OK){
		return ActionScheduler_Status_Error;
	}
#endif

	pSelf->state = ActionScheduler_State_Idle;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2201      	movs	r2, #1
 800a598:	701a      	strb	r2, [r3, #0]

	return ActionScheduler_Status_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <ActionScheduler_thread>:

ActionScheduler_Status_TypeDef ActionScheduler_thread(ActionScheduler_TypeDef* pSelf){
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]

	switch (pSelf->state){
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	2b03      	cmp	r3, #3
 800a5b4:	d80a      	bhi.n	800a5cc <ActionScheduler_thread+0x28>
 800a5b6:	a201      	add	r2, pc, #4	; (adr r2, 800a5bc <ActionScheduler_thread+0x18>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d1 	.word	0x0800a5d1
 800a5c0:	0800a5db 	.word	0x0800a5db
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ef 	.word	0x0800a5ef
	case ActionScheduler_State_UnInitialized:
	default:
		return ActionScheduler_Status_UnInitializedError;
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e012      	b.n	800a5f6 <ActionScheduler_thread+0x52>
		break;
	case ActionScheduler_State_Idle:
		return _ActionScheduler_idleState(pSelf);
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f000 f89d 	bl	800a710 <_ActionScheduler_idleState>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	e00d      	b.n	800a5f6 <ActionScheduler_thread+0x52>
		break;
	case ActionScheduler_State_LogInit:
		return _ActionScheduler_logInitState(pSelf);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f8cb 	bl	800a776 <_ActionScheduler_logInitState>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	e008      	b.n	800a5f6 <ActionScheduler_thread+0x52>
		break;
	case ActionScheduler_State_Logging:
		return _ActionScheduler_loggingState(pSelf);
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f000 f906 	bl	800a7f6 <_ActionScheduler_loggingState>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	e003      	b.n	800a5f6 <ActionScheduler_thread+0x52>
		break;
	case ActionScheduler_State_LogClose:
		return _ActionScheduler_logCloseState(pSelf);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f99d 	bl	800a92e <_ActionScheduler_logCloseState>
 800a5f4:	4603      	mov	r3, r0
		break;
	}

	return ActionScheduler_Status_Error;
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop

0800a600 <_ActionScheduler_SetDateAndTimeFrameHandler>:

//< ----- Private functions ----- >//

static ActionScheduler_Status_TypeDef _ActionScheduler_SetDateAndTimeFrameHandler(ActionScheduler_TypeDef* pSelf, CANData_TypeDef* pData){
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]

	if ((pData->ID == ACTION_SCHEDULER_RTC_SETUP_FRAME_ID) && (pData->DLC == ACTION_SCHEDULER_RTC_SETUP_FRAME_DLC)){
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a612:	4293      	cmp	r3, r2
 800a614:	d139      	bne.n	800a68a <_ActionScheduler_SetDateAndTimeFrameHandler+0x8a>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	789b      	ldrb	r3, [r3, #2]
 800a61a:	2b07      	cmp	r3, #7
 800a61c:	d135      	bne.n	800a68a <_ActionScheduler_SetDateAndTimeFrameHandler+0x8a>

		DateTime_TypeDef dateAndTime = {0};
 800a61e:	f107 030c 	add.w	r3, r7, #12
 800a622:	2200      	movs	r2, #0
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	605a      	str	r2, [r3, #4]
 800a628:	811a      	strh	r2, [r3, #8]
		dateAndTime.year 	= (pData->Data[0] | ((pData->Data[1]) << 8));
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	7a1b      	ldrb	r3, [r3, #8]
 800a62e:	b21a      	sxth	r2, r3
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	7a5b      	ldrb	r3, [r3, #9]
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	b21b      	sxth	r3, r3
 800a638:	4313      	orrs	r3, r2
 800a63a:	b21b      	sxth	r3, r3
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	81bb      	strh	r3, [r7, #12]
		dateAndTime.month	= pData->Data[2];
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	7a9b      	ldrb	r3, [r3, #10]
 800a644:	73bb      	strb	r3, [r7, #14]
		dateAndTime.day		= pData->Data[3];
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	7adb      	ldrb	r3, [r3, #11]
 800a64a:	73fb      	strb	r3, [r7, #15]
		dateAndTime.hour	= pData->Data[4];
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	7b1b      	ldrb	r3, [r3, #12]
 800a650:	743b      	strb	r3, [r7, #16]
		dateAndTime.minute	= pData->Data[5];
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	7b5b      	ldrb	r3, [r3, #13]
 800a656:	747b      	strb	r3, [r7, #17]
		dateAndTime.second	= pData->Data[6];
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	7b9b      	ldrb	r3, [r3, #14]
 800a65c:	74bb      	strb	r3, [r7, #18]

		RTCDriver_Status_TypeDef ret = RTCDriver_setDateAndTime(pSelf->pRTCDriver, dateAndTime);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6998      	ldr	r0, [r3, #24]
 800a662:	f107 030c 	add.w	r3, r7, #12
 800a666:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a668:	f003 f90f 	bl	800d88a <RTCDriver_setDateAndTime>
 800a66c:	4603      	mov	r3, r0
 800a66e:	75fb      	strb	r3, [r7, #23]

		if ((ret == RTCDriver_Status_WrongDateFormatError) || (ret == RTCDriver_Status_WrongTimeFormatError)){
 800a670:	7dfb      	ldrb	r3, [r7, #23]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d002      	beq.n	800a67c <_ActionScheduler_SetDateAndTimeFrameHandler+0x7c>
 800a676:	7dfb      	ldrb	r3, [r7, #23]
 800a678:	2b04      	cmp	r3, #4
 800a67a:	d101      	bne.n	800a680 <_ActionScheduler_SetDateAndTimeFrameHandler+0x80>
			//TODO log wrong format warning
			return ActionScheduler_Status_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e005      	b.n	800a68c <_ActionScheduler_SetDateAndTimeFrameHandler+0x8c>
		} else if (ret != RTCDriver_Status_OK){
 800a680:	7dfb      	ldrb	r3, [r7, #23]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <_ActionScheduler_SetDateAndTimeFrameHandler+0x8a>
			return ActionScheduler_Status_Error;
 800a686:	2303      	movs	r3, #3
 800a688:	e000      	b.n	800a68c <_ActionScheduler_SetDateAndTimeFrameHandler+0x8c>
		}
	}

	return ActionScheduler_Status_OK;
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3718      	adds	r7, #24
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <_AcionScheduler_StartLogTrigger>:

static bool _AcionScheduler_StartLogTrigger(ActionScheduler_TypeDef* pSelf, CANData_TypeDef* pData){
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]

#ifndef CAR_DEF
	#error "Missing CAR_DEF definition."
#elif CAR_DEF == CAR_DEF_GRAZYNA
	if ((pData->ID == 0x600) &&
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a6a6:	d10d      	bne.n	800a6c4 <_AcionScheduler_StartLogTrigger+0x30>
		((uint16_t)(pData->Data[0] | ((pData->Data[1])<<8)) > 50)){	//TODO make it not hardcoded
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	7a1b      	ldrb	r3, [r3, #8]
 800a6ac:	b21a      	sxth	r2, r3
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	7a5b      	ldrb	r3, [r3, #9]
 800a6b2:	021b      	lsls	r3, r3, #8
 800a6b4:	b21b      	sxth	r3, r3
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	b21b      	sxth	r3, r3
 800a6ba:	b29b      	uxth	r3, r3
	if ((pData->ID == 0x600) &&
 800a6bc:	2b32      	cmp	r3, #50	; 0x32
 800a6be:	d901      	bls.n	800a6c4 <_AcionScheduler_StartLogTrigger+0x30>
		//(pData->Data[2] > 10)){
			return true;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e000      	b.n	800a6c6 <_AcionScheduler_StartLogTrigger+0x32>
	}
	return false;
 800a6c4:	2300      	movs	r3, #0
	}
	return false;
#else
	#error "Unexpected value of CAR_DEF definition."
#endif
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <_AcionScheduler_StopLogTrigger>:

static bool _AcionScheduler_StopLogTrigger(ActionScheduler_TypeDef* pSelf, CANData_TypeDef* pData){
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
 800a6da:	6039      	str	r1, [r7, #0]

#ifndef CAR_DEF
	#error "Missing CAR_DEF definition."
#elif CAR_DEF == CAR_DEF_GRAZYNA
	if ((pData->ID == 0x600) &&
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a6e4:	d10d      	bne.n	800a702 <_AcionScheduler_StopLogTrigger+0x30>
		((uint16_t)(pData->Data[0] | ((pData->Data[1])<<8)) < 50)){
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	7a1b      	ldrb	r3, [r3, #8]
 800a6ea:	b21a      	sxth	r2, r3
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	7a5b      	ldrb	r3, [r3, #9]
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	b21b      	sxth	r3, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b21b      	sxth	r3, r3
 800a6f8:	b29b      	uxth	r3, r3
	if ((pData->ID == 0x600) &&
 800a6fa:	2b31      	cmp	r3, #49	; 0x31
 800a6fc:	d801      	bhi.n	800a702 <_AcionScheduler_StopLogTrigger+0x30>
		//	(pData->Data[2] <5)){
			return true;
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <_AcionScheduler_StopLogTrigger+0x32>
	}
	return false;
 800a702:	2300      	movs	r3, #0
	return false;
#else
	#error "Unexpected value of CAR_DEF definition."
#endif

}
 800a704:	4618      	mov	r0, r3
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <_ActionScheduler_idleState>:

static ActionScheduler_Status_TypeDef _ActionScheduler_idleState(ActionScheduler_TypeDef* pSelf){
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
	CANData_TypeDef msg;
	CANReceiver_Status_TypeDef status;

	while(1) {

		status = CANReceiver_pullLastFrame(pSelf->pCANReceiver, &msg);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f107 020c 	add.w	r2, r7, #12
 800a720:	4611      	mov	r1, r2
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f9fe 	bl	800ab24 <CANReceiver_pullLastFrame>
 800a728:	4603      	mov	r3, r0
 800a72a:	77fb      	strb	r3, [r7, #31]

		if (status == CANReceiver_Status_OK){
 800a72c:	7ffb      	ldrb	r3, [r7, #31]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d116      	bne.n	800a760 <_ActionScheduler_idleState+0x50>

			if (_AcionScheduler_StartLogTrigger(pSelf, &msg) != 0){
 800a732:	f107 030c 	add.w	r3, r7, #12
 800a736:	4619      	mov	r1, r3
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f7ff ffab 	bl	800a694 <_AcionScheduler_StartLogTrigger>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d006      	beq.n	800a752 <_ActionScheduler_idleState+0x42>
				pSelf->state = ActionScheduler_State_LogInit;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	701a      	strb	r2, [r3, #0]
				pSelf->logStartMsTime = msg.msTime;
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	61da      	str	r2, [r3, #28]
				break;
 800a750:	e00c      	b.n	800a76c <_ActionScheduler_idleState+0x5c>
			} else {
				_ActionScheduler_SetDateAndTimeFrameHandler(pSelf, &msg);
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7ff ff51 	bl	800a600 <_ActionScheduler_SetDateAndTimeFrameHandler>
 800a75e:	e7db      	b.n	800a718 <_ActionScheduler_idleState+0x8>
			}
		} else if (status ==  CANReceiver_Status_Empty) {
 800a760:	7ffb      	ldrb	r3, [r7, #31]
 800a762:	2b01      	cmp	r3, #1
 800a764:	d001      	beq.n	800a76a <_ActionScheduler_idleState+0x5a>
			break;
		} else { //CANReceiver_Status_Error:
			return ActionScheduler_Status_Error;
 800a766:	2303      	movs	r3, #3
 800a768:	e001      	b.n	800a76e <_ActionScheduler_idleState+0x5e>
			break;
 800a76a:	bf00      	nop
		}
	}
	return ActionScheduler_Status_OK;
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3720      	adds	r7, #32
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}

0800a776 <_ActionScheduler_logInitState>:

static ActionScheduler_Status_TypeDef _ActionScheduler_logInitState(ActionScheduler_TypeDef* pSelf){
 800a776:	b580      	push	{r7, lr}
 800a778:	b086      	sub	sp, #24
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]

	DateTime_TypeDef dateTime;
	if (RTCDriver_getDateAndTime(pSelf->pRTCDriver, &dateTime) != RTCDriver_Status_OK){
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	f107 020c 	add.w	r2, r7, #12
 800a786:	4611      	mov	r1, r2
 800a788:	4618      	mov	r0, r3
 800a78a:	f003 f831 	bl	800d7f0 <RTCDriver_getDateAndTime>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <_ActionScheduler_logInitState+0x22>
		return ActionScheduler_Status_Error;
 800a794:	2303      	movs	r3, #3
 800a796:	e02a      	b.n	800a7ee <_ActionScheduler_logInitState+0x78>
	}

	if (pSelf->pConfig->gpsFrequency != Config_GPSFrequency_OFF){
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	7a1b      	ldrb	r3, [r3, #8]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d009      	beq.n	800a7b6 <_ActionScheduler_logInitState+0x40>
		if (GPSDriver_startReceiver(pSelf->pGPSDriver) != GPSDriver_Status_OK){
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f004 fc80 	bl	800f0ac <GPSDriver_startReceiver>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d001      	beq.n	800a7b6 <_ActionScheduler_logInitState+0x40>
			return ActionScheduler_Status_Error;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e01b      	b.n	800a7ee <_ActionScheduler_logInitState+0x78>
		}
	}

	if (DataSaver_startLogging(pSelf->pDataSaver, dateTime) != DataSaver_Status_OK){
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6898      	ldr	r0, [r3, #8]
 800a7ba:	f107 030c 	add.w	r3, r7, #12
 800a7be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7c0:	f001 f81a 	bl	800b7f8 <DataSaver_startLogging>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <_ActionScheduler_logInitState+0x58>
		return ActionScheduler_Status_Error;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e00f      	b.n	800a7ee <_ActionScheduler_logInitState+0x78>
	}

	if (LedDriver_BlinkingLed(pSelf->pStatusLedDriver, ACTION_SCHEDULER_LOGGING_LED_ON, ACTION_SCHEDULER_LOGGING_LED_OFF) != LedDriver_Status_OK){
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	2264      	movs	r2, #100	; 0x64
 800a7d4:	2164      	movs	r1, #100	; 0x64
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f002 fdf0 	bl	800d3bc <LedDriver_BlinkingLed>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <_ActionScheduler_logInitState+0x70>
		return ActionScheduler_Status_Error;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e003      	b.n	800a7ee <_ActionScheduler_logInitState+0x78>
	}
	pSelf->state = ActionScheduler_State_Logging;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2203      	movs	r2, #3
 800a7ea:	701a      	strb	r2, [r3, #0]

	return ActionScheduler_Status_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <_ActionScheduler_loggingState>:

static ActionScheduler_Status_TypeDef _ActionScheduler_loggingState(ActionScheduler_TypeDef* pSelf){
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b09c      	sub	sp, #112	; 0x70
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
	GPSData_TypeDef					gpsData;
	GPSDriver_Status_TypeDef		gpsStatus;

	ActionScheduler_Status_TypeDef	ret;

	bool							breakFlagCAN = false;
 800a7fe:	2300      	movs	r3, #0
 800a800:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool							breakFlagGPS = false;
 800a804:	2300      	movs	r3, #0
 800a806:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	while(breakFlagCAN == false || breakFlagGPS == false) {
 800a80a:	e07b      	b.n	800a904 <_ActionScheduler_loggingState+0x10e>
		canStatus = CANReceiver_pullLastFrame(pSelf->pCANReceiver, &canData);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f000 f984 	bl	800ab24 <CANReceiver_pullLastFrame>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d

		if (canStatus == CANReceiver_Status_OK){
 800a822:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800a826:	2b00      	cmp	r3, #0
 800a828:	d130      	bne.n	800a88c <_ActionScheduler_loggingState+0x96>

			canData.msTime -= pSelf->logStartMsTime;
 800a82a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	69db      	ldr	r3, [r3, #28]
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	65fb      	str	r3, [r7, #92]	; 0x5c

			if (_AcionScheduler_StopLogTrigger(pSelf, &canData) != 0){
 800a834:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f7ff ff49 	bl	800a6d2 <_AcionScheduler_StopLogTrigger>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d005      	beq.n	800a852 <_ActionScheduler_loggingState+0x5c>
				pSelf->state = ActionScheduler_State_LogClose;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2204      	movs	r2, #4
 800a84a:	701a      	strb	r2, [r3, #0]
				breakFlagCAN = true;
 800a84c:	2301      	movs	r3, #1
 800a84e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			}

			if (DataSaver_writeCANData(pSelf->pDataSaver, &canData) != DataSaver_Status_OK){
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a85a:	4611      	mov	r1, r2
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f897 	bl	800b990 <DataSaver_writeCANData>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <_ActionScheduler_loggingState+0x76>
				return ActionScheduler_Status_Error;
 800a868:	2303      	movs	r3, #3
 800a86a:	e05c      	b.n	800a926 <_ActionScheduler_loggingState+0x130>
			}

			if ((ret = _ActionScheduler_SetDateAndTimeFrameHandler(pSelf, &canData)) != ActionScheduler_Status_OK){
 800a86c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800a870:	4619      	mov	r1, r3
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f7ff fec4 	bl	800a600 <_ActionScheduler_SetDateAndTimeFrameHandler>
 800a878:	4603      	mov	r3, r0
 800a87a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800a87e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00c      	beq.n	800a8a0 <_ActionScheduler_loggingState+0xaa>
				return ret;
 800a886:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800a88a:	e04c      	b.n	800a926 <_ActionScheduler_loggingState+0x130>
			}

		} else if (canStatus ==  CANReceiver_Status_Empty) {
 800a88c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800a890:	2b01      	cmp	r3, #1
 800a892:	d103      	bne.n	800a89c <_ActionScheduler_loggingState+0xa6>
			breakFlagCAN = true;
 800a894:	2301      	movs	r3, #1
 800a896:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800a89a:	e001      	b.n	800a8a0 <_ActionScheduler_loggingState+0xaa>
		} else { //CANReceiver_Status_Error:
			return ActionScheduler_Status_Error;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e042      	b.n	800a926 <_ActionScheduler_loggingState+0x130>
		}

		if (pSelf->pConfig->gpsFrequency != Config_GPSFrequency_OFF){
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	7a1b      	ldrb	r3, [r3, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d029      	beq.n	800a8fe <_ActionScheduler_loggingState+0x108>
			gpsStatus = GPSDriver_pullLastFrame(pSelf->pGPSDriver, &gpsData);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	691b      	ldr	r3, [r3, #16]
 800a8ae:	f107 0208 	add.w	r2, r7, #8
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f004 fc75 	bl	800f1a4 <GPSDriver_pullLastFrame>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c

			if (gpsStatus == GPSDriver_Status_OK){
 800a8c0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d110      	bne.n	800a8ea <_ActionScheduler_loggingState+0xf4>
				if (DataSaver_writeGPSData(pSelf->pDataSaver, &gpsData) != DataSaver_Status_OK){
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	f107 0208 	add.w	r2, r7, #8
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f001 f8ad 	bl	800ba32 <DataSaver_writeGPSData>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <_ActionScheduler_loggingState+0xec>
					return ActionScheduler_Status_Error;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e021      	b.n	800a926 <_ActionScheduler_loggingState+0x130>
				}
				breakFlagGPS = false;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800a8e8:	e00c      	b.n	800a904 <_ActionScheduler_loggingState+0x10e>
			} else if (gpsStatus == GPSDriver_Status_Empty){
 800a8ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800a8ee:	2b03      	cmp	r3, #3
 800a8f0:	d103      	bne.n	800a8fa <_ActionScheduler_loggingState+0x104>
				breakFlagGPS = true;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800a8f8:	e004      	b.n	800a904 <_ActionScheduler_loggingState+0x10e>
			} else {
				return ActionScheduler_Status_Error;
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e013      	b.n	800a926 <_ActionScheduler_loggingState+0x130>
			}
		} else {
			breakFlagGPS = true;
 800a8fe:	2301      	movs	r3, #1
 800a900:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	while(breakFlagCAN == false || breakFlagGPS == false) {
 800a904:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a908:	f083 0301 	eor.w	r3, r3, #1
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f af7c 	bne.w	800a80c <_ActionScheduler_loggingState+0x16>
 800a914:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800a918:	f083 0301 	eor.w	r3, r3, #1
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b00      	cmp	r3, #0
 800a920:	f47f af74 	bne.w	800a80c <_ActionScheduler_loggingState+0x16>
		}
	}

	return ActionScheduler_Status_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3770      	adds	r7, #112	; 0x70
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <_ActionScheduler_logCloseState>:

static ActionScheduler_Status_TypeDef _ActionScheduler_logCloseState(ActionScheduler_TypeDef* pSelf){
 800a92e:	b580      	push	{r7, lr}
 800a930:	b082      	sub	sp, #8
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]

	if (pSelf->pConfig->gpsFrequency != Config_GPSFrequency_OFF){
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	7a1b      	ldrb	r3, [r3, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d009      	beq.n	800a954 <_ActionScheduler_logCloseState+0x26>
		if (GPSDriver_stopReceiver(pSelf->pGPSDriver) != GPSDriver_Status_OK){
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	691b      	ldr	r3, [r3, #16]
 800a944:	4618      	mov	r0, r3
 800a946:	f004 fbf8 	bl	800f13a <GPSDriver_stopReceiver>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <_ActionScheduler_logCloseState+0x26>
			return ActionScheduler_Status_Error;
 800a950:	2303      	movs	r3, #3
 800a952:	e01a      	b.n	800a98a <_ActionScheduler_logCloseState+0x5c>
		}
	}

	if (DataSaver_stopLogging(pSelf->pDataSaver) != DataSaver_Status_OK){
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 ffe7 	bl	800b92c <DataSaver_stopLogging>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <_ActionScheduler_logCloseState+0x3a>
		return ActionScheduler_Status_Error;
 800a964:	2303      	movs	r3, #3
 800a966:	e010      	b.n	800a98a <_ActionScheduler_logCloseState+0x5c>
	}
	if (LedDriver_BlinkingLed(pSelf->pStatusLedDriver, ACTION_SCHEDULER_IDLE_LED_ON_TIME, ACTION_SCHEDULER_IDLE_LED_OFF_TIME) != LedDriver_Status_OK){
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	695b      	ldr	r3, [r3, #20]
 800a96c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a970:	2132      	movs	r1, #50	; 0x32
 800a972:	4618      	mov	r0, r3
 800a974:	f002 fd22 	bl	800d3bc <LedDriver_BlinkingLed>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <_ActionScheduler_logCloseState+0x54>
		return ActionScheduler_Status_Error;
 800a97e:	2303      	movs	r3, #3
 800a980:	e003      	b.n	800a98a <_ActionScheduler_logCloseState+0x5c>
	}
	pSelf->state = ActionScheduler_State_Idle;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]

	return ActionScheduler_Status_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
	...

0800a994 <CANReceiver_init>:
CANReceiver_Status_TypeDef	CANReceiver_ErrorCallback(CANReceiver_TypeDef* pSelf, CANTransceiverDriver_ErrorCode_TypeDef errorcode);
void						CANReceiver_ErrorCallbackWrapper(CANTransceiverDriver_ErrorCode_TypeDef errorcode, void* pVoidSelf);

//< ----- Public functions ----- >//

CANReceiver_Status_TypeDef CANReceiver_init(CANReceiver_TypeDef* pSelf, Config_TypeDef* pConfig, CANTransceiverDriver_TypeDef* pCanTransceiverHandler, MSTimerDriver_TypeDef* pMsTimerDriverHandler){
 800a994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a998:	b089      	sub	sp, #36	; 0x24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
 800a9a2:	603b      	str	r3, [r7, #0]

	pSelf->pConfig = pConfig;
 800a9a4:	68fa      	ldr	r2, [r7, #12]
 800a9a6:	f242 0318 	movw	r3, #8216	; 0x2018
 800a9aa:	4413      	add	r3, r2
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	601a      	str	r2, [r3, #0]
	pSelf->pCanTransceiverHandler = pCanTransceiverHandler;
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	f242 0310 	movw	r3, #8208	; 0x2010
 800a9b6:	4413      	add	r3, r2
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]
	pSelf->pMsTimerDriverHandler = pMsTimerDriverHandler;
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	f242 0314 	movw	r3, #8212	; 0x2014
 800a9c2:	4413      	add	r3, r2
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	601a      	str	r2, [r3, #0]

	if (FIFOQueue_init(&(pSelf->framesFIFO), pSelf->aReceiverQueueBuffer, sizeof(CANData_TypeDef), CAN_MSG_QUEUE_SIZE) != FIFO_Status_OK){ //TODO czy alignment nie popusje sizeof
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f503 5000 	add.w	r0, r3, #8192	; 0x2000
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9d4:	2210      	movs	r2, #16
 800a9d6:	f001 fb9a 	bl	800c10e <FIFOQueue_init>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d001      	beq.n	800a9e4 <CANReceiver_init+0x50>
		return CANReceiver_Status_InitError;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e07f      	b.n	800aae4 <CANReceiver_init+0x150>
	}

	for (uint16_t i=0; i<CAN_MSG_QUEUE_SIZE; i++){
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	83fb      	strh	r3, [r7, #30]
 800a9e8:	e00c      	b.n	800aa04 <CANReceiver_init+0x70>
		pSelf->aReceiverQueueBuffer[i] = (CANData_TypeDef){0};
 800a9ea:	8bfb      	ldrh	r3, [r7, #30]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	011b      	lsls	r3, r3, #4
 800a9f0:	4413      	add	r3, r2
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6013      	str	r3, [r2, #0]
 800a9f8:	6053      	str	r3, [r2, #4]
 800a9fa:	6093      	str	r3, [r2, #8]
 800a9fc:	60d3      	str	r3, [r2, #12]
	for (uint16_t i=0; i<CAN_MSG_QUEUE_SIZE; i++){
 800a9fe:	8bfb      	ldrh	r3, [r7, #30]
 800aa00:	3301      	adds	r3, #1
 800aa02:	83fb      	strh	r3, [r7, #30]
 800aa04:	8bfb      	ldrh	r3, [r7, #30]
 800aa06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa0a:	d3ee      	bcc.n	800a9ea <CANReceiver_init+0x56>
	}

	uint16_t aFilterIDsTab[pConfig->numOfFrames];
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	8899      	ldrh	r1, [r3, #4]
 800aa10:	466b      	mov	r3, sp
 800aa12:	461e      	mov	r6, r3
 800aa14:	460b      	mov	r3, r1
 800aa16:	3b01      	subs	r3, #1
 800aa18:	61bb      	str	r3, [r7, #24]
 800aa1a:	b28a      	uxth	r2, r1
 800aa1c:	f04f 0300 	mov.w	r3, #0
 800aa20:	ea4f 1903 	mov.w	r9, r3, lsl #4
 800aa24:	ea49 7912 	orr.w	r9, r9, r2, lsr #28
 800aa28:	ea4f 1802 	mov.w	r8, r2, lsl #4
 800aa2c:	b28a      	uxth	r2, r1
 800aa2e:	f04f 0300 	mov.w	r3, #0
 800aa32:	011d      	lsls	r5, r3, #4
 800aa34:	ea45 7512 	orr.w	r5, r5, r2, lsr #28
 800aa38:	0114      	lsls	r4, r2, #4
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	005b      	lsls	r3, r3, #1
 800aa3e:	3301      	adds	r3, #1
 800aa40:	3307      	adds	r3, #7
 800aa42:	08db      	lsrs	r3, r3, #3
 800aa44:	00db      	lsls	r3, r3, #3
 800aa46:	ebad 0d03 	sub.w	sp, sp, r3
 800aa4a:	466b      	mov	r3, sp
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	085b      	lsrs	r3, r3, #1
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	617b      	str	r3, [r7, #20]

	for (uint16_t i=0; i<pConfig->numOfFrames; i++){
 800aa54:	2300      	movs	r3, #0
 800aa56:	83bb      	strh	r3, [r7, #28]
 800aa58:	e00f      	b.n	800aa7a <CANReceiver_init+0xe6>
		aFilterIDsTab[i] = pConfig->canFrames[i].ID;
 800aa5a:	8bba      	ldrh	r2, [r7, #28]
 800aa5c:	8bbb      	ldrh	r3, [r7, #28]
 800aa5e:	68b9      	ldr	r1, [r7, #8]
 800aa60:	f44f 7016 	mov.w	r0, #600	; 0x258
 800aa64:	fb00 f303 	mul.w	r3, r0, r3
 800aa68:	440b      	add	r3, r1
 800aa6a:	330a      	adds	r3, #10
 800aa6c:	8819      	ldrh	r1, [r3, #0]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i=0; i<pConfig->numOfFrames; i++){
 800aa74:	8bbb      	ldrh	r3, [r7, #28]
 800aa76:	3301      	adds	r3, #1
 800aa78:	83bb      	strh	r3, [r7, #28]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	889b      	ldrh	r3, [r3, #4]
 800aa7e:	8bba      	ldrh	r2, [r7, #28]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d3ea      	bcc.n	800aa5a <CANReceiver_init+0xc6>
	}

	if (CANTransceiverDriver_configFiltering(pSelf->pCanTransceiverHandler, aFilterIDsTab, pConfig->numOfFrames) != CANTransceiverDriver_Status_OK){
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	f242 0310 	movw	r3, #8208	; 0x2010
 800aa8a:	4413      	add	r3, r2
 800aa8c:	6818      	ldr	r0, [r3, #0]
 800aa8e:	6979      	ldr	r1, [r7, #20]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	889b      	ldrh	r3, [r3, #4]
 800aa94:	461a      	mov	r2, r3
 800aa96:	f000 f987 	bl	800ada8 <CANTransceiverDriver_configFiltering>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <CANReceiver_init+0x110>
		return CANReceiver_Status_InitError;
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	e01e      	b.n	800aae2 <CANReceiver_init+0x14e>
	}

	if (CANTransceiverDriver_registerReceiveCallbackToCall(pSelf->pCanTransceiverHandler, CANReceiver_RxCallbackWrapper, (void*) pSelf) != CANTransceiverDriver_Status_OK){
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	f242 0310 	movw	r3, #8208	; 0x2010
 800aaaa:	4413      	add	r3, r2
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	490f      	ldr	r1, [pc, #60]	; (800aaf0 <CANReceiver_init+0x15c>)
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fa3a 	bl	800af2c <CANTransceiverDriver_registerReceiveCallbackToCall>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <CANReceiver_init+0x12e>
		return CANReceiver_Status_InitError;
 800aabe:	2302      	movs	r3, #2
 800aac0:	e00f      	b.n	800aae2 <CANReceiver_init+0x14e>
	}

	if (CANTransceiverDriver_registerErrorCallbackToCall(pSelf->pCanTransceiverHandler, CANReceiver_ErrorCallbackWrapper, (void*) pSelf) != CANTransceiverDriver_Status_OK){
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	f242 0310 	movw	r3, #8208	; 0x2010
 800aac8:	4413      	add	r3, r2
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4909      	ldr	r1, [pc, #36]	; (800aaf4 <CANReceiver_init+0x160>)
 800aad0:	4618      	mov	r0, r3
 800aad2:	f000 fb15 	bl	800b100 <CANTransceiverDriver_registerErrorCallbackToCall>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d001      	beq.n	800aae0 <CANReceiver_init+0x14c>
		return CANReceiver_Status_InitError;
 800aadc:	2302      	movs	r3, #2
 800aade:	e000      	b.n	800aae2 <CANReceiver_init+0x14e>
	}

	return CANReceiver_Status_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	46b5      	mov	sp, r6

}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3724      	adds	r7, #36	; 0x24
 800aae8:	46bd      	mov	sp, r7
 800aaea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aaee:	bf00      	nop
 800aaf0:	0800abb3 	.word	0x0800abb3
 800aaf4:	0800ac0d 	.word	0x0800ac0d

0800aaf8 <CANReceiver_start>:

CANReceiver_Status_TypeDef CANReceiver_start(CANReceiver_TypeDef* pSelf){
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]

	if (CANTransceiverDriver_start(pSelf->pCanTransceiverHandler) != CANTransceiverDriver_Status_OK){
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	f242 0310 	movw	r3, #8208	; 0x2010
 800ab06:	4413      	add	r3, r2
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f000 fb2a 	bl	800b164 <CANTransceiverDriver_start>
 800ab10:	4603      	mov	r3, r0
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d001      	beq.n	800ab1a <CANReceiver_start+0x22>
		return CANReceiver_Status_Error;
 800ab16:	2304      	movs	r3, #4
 800ab18:	e000      	b.n	800ab1c <CANReceiver_start+0x24>
	}

	return CANReceiver_Status_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <CANReceiver_pullLastFrame>:

	//TODO to nigdzie nie jest wywolywane, a powinno byc
}


CANReceiver_Status_TypeDef CANReceiver_pullLastFrame(CANReceiver_TypeDef* pSelf, CANData_TypeDef* pRetMsg){
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b084      	sub	sp, #16
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]

	FIFO_Status_TypeDef fifoStatus = FIFO_Status_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]

	fifoStatus = FIFOQueue_dequeue(&(pSelf->framesFIFO), pRetMsg);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f001 fb67 	bl	800c20e <FIFOQueue_dequeue>
 800ab40:	4603      	mov	r3, r0
 800ab42:	73fb      	strb	r3, [r7, #15]

	switch(fifoStatus){
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <CANReceiver_pullLastFrame+0x2c>
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d002      	beq.n	800ab54 <CANReceiver_pullLastFrame+0x30>
 800ab4e:	e003      	b.n	800ab58 <CANReceiver_pullLastFrame+0x34>
		case FIFO_Status_OK:
			return CANReceiver_Status_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	e002      	b.n	800ab5a <CANReceiver_pullLastFrame+0x36>
		case FIFO_Status_Empty:
			return CANReceiver_Status_Empty;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e000      	b.n	800ab5a <CANReceiver_pullLastFrame+0x36>
		case FIFO_Status_Error:
		default:
			return CANReceiver_Status_Error;
 800ab58:	2304      	movs	r3, #4
	}

	return CANReceiver_Status_OK;

}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}

0800ab62 <CANReceiver_RxCallback>:

//< ----- Callback functions ----- >//

CANReceiver_Status_TypeDef CANReceiver_RxCallback(CANReceiver_TypeDef* pSelf, CANData_TypeDef* pData){
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	6039      	str	r1, [r7, #0]

	if (MSTimerDriver_getMSTime(pSelf->pMsTimerDriverHandler, &pData->msTime) != MSTimerDriver_Status_OK){ //TODO trzeba tu wykorzystac ten czas z CANa
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	f242 0314 	movw	r3, #8212	; 0x2014
 800ab72:	4413      	add	r3, r2
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	3304      	adds	r3, #4
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f002 fcc5 	bl	800d50c <MSTimerDriver_getMSTime>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d001      	beq.n	800ab8c <CANReceiver_RxCallback+0x2a>
		return CANReceiver_Status_RunTimeError;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e00e      	b.n	800abaa <CANReceiver_RxCallback+0x48>
	}

	FIFO_Status_TypeDef fifoStatus;
	if ((fifoStatus = FIFOQueue_enqueue(&(pSelf->framesFIFO), pData)) != FIFO_Status_OK){
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ab92:	6839      	ldr	r1, [r7, #0]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f001 faf0 	bl	800c17a <FIFOQueue_enqueue>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73fb      	strb	r3, [r7, #15]
 800ab9e:	7bfb      	ldrb	r3, [r7, #15]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <CANReceiver_RxCallback+0x46>
		return CANReceiver_Status_RunTimeError;	//TODO moze jak sie nie zmiesci do kolejki, to nie Error tylko jakas sytuacja wyjatkowa???
 800aba4:	2303      	movs	r3, #3
 800aba6:	e000      	b.n	800abaa <CANReceiver_RxCallback+0x48>
	}

	return CANReceiver_Status_OK;
 800aba8:	2300      	movs	r3, #0

}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <CANReceiver_RxCallbackWrapper>:

void CANReceiver_RxCallbackWrapper(CANData_TypeDef* pData, void* pVoidSelf){
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b082      	sub	sp, #8
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]

	if(CANReceiver_RxCallback((CANReceiver_TypeDef*) pVoidSelf, pData) != CANReceiver_Status_OK){
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	6838      	ldr	r0, [r7, #0]
 800abc0:	f7ff ffcf 	bl	800ab62 <CANReceiver_RxCallback>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <CANReceiver_RxCallbackWrapper+0x1c>
		Error_Handler();
 800abca:	f7fe ff7f 	bl	8009acc <Error_Handler>
	}

}
 800abce:	bf00      	nop
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <CANReceiver_ErrorCallback>:

CANReceiver_Status_TypeDef CANReceiver_ErrorCallback(CANReceiver_TypeDef* pSelf, CANTransceiverDriver_ErrorCode_TypeDef errorcode){
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b084      	sub	sp, #16
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	460b      	mov	r3, r1
 800abe0:	807b      	strh	r3, [r7, #2]

	uint32_t msTime;
	if (MSTimerDriver_getMSTime(pSelf->pMsTimerDriverHandler, &msTime) != MSTimerDriver_Status_OK){ //TODO trzeba tu wykorzystac ten czas z CANa
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	f242 0314 	movw	r3, #8212	; 0x2014
 800abe8:	4413      	add	r3, r2
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f107 020c 	add.w	r2, r7, #12
 800abf0:	4611      	mov	r1, r2
 800abf2:	4618      	mov	r0, r3
 800abf4:	f002 fc8a 	bl	800d50c <MSTimerDriver_getMSTime>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d001      	beq.n	800ac02 <CANReceiver_ErrorCallback+0x2c>
		return CANReceiver_Status_RunTimeError;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e000      	b.n	800ac04 <CANReceiver_ErrorCallback+0x2e>

		//TODO

	}

	return CANReceiver_Status_OK;
 800ac02:	2300      	movs	r3, #0

}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <CANReceiver_ErrorCallbackWrapper>:

void CANReceiver_ErrorCallbackWrapper(CANTransceiverDriver_ErrorCode_TypeDef errorcode, void* pVoidSelf){
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	4603      	mov	r3, r0
 800ac14:	6039      	str	r1, [r7, #0]
 800ac16:	80fb      	strh	r3, [r7, #6]

	if (CANReceiver_ErrorCallback((CANReceiver_TypeDef*) pVoidSelf, errorcode) != CANReceiver_Status_OK){
 800ac18:	88fb      	ldrh	r3, [r7, #6]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	6838      	ldr	r0, [r7, #0]
 800ac1e:	f7ff ffda 	bl	800abd6 <CANReceiver_ErrorCallback>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d001      	beq.n	800ac2c <CANReceiver_ErrorCallbackWrapper+0x20>
		Error_Handler();
 800ac28:	f7fe ff50 	bl	8009acc <Error_Handler>
	}

}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <CANTransceiverDriver_HALCANInit>:
#define CAN_ID_MASK_bp				5

#define	CAN_SYNC_JUMP_WIDTH		CAN_SJW_3TQ


static CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_HALCANInit(CAN_HandleTypeDef* pHcan, uint32_t prescalerValue, CAN_TypeDef* pCANInstance, uint32_t timeSeg1, uint32_t timeSeg2){
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]
 800ac40:	603b      	str	r3, [r7, #0]

	pHcan->Instance = pCANInstance;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	601a      	str	r2, [r3, #0]
	pHcan->Init.Prescaler = prescalerValue;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	605a      	str	r2, [r3, #4]
	pHcan->Init.Mode = CAN_MODE_NORMAL;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2200      	movs	r2, #0
 800ac52:	609a      	str	r2, [r3, #8]
	pHcan->Init.SyncJumpWidth = CAN_SYNC_JUMP_WIDTH;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ac5a:	60da      	str	r2, [r3, #12]
	pHcan->Init.TimeSeg1 = timeSeg1;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	683a      	ldr	r2, [r7, #0]
 800ac60:	611a      	str	r2, [r3, #16]
	pHcan->Init.TimeSeg2 = timeSeg2;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	69ba      	ldr	r2, [r7, #24]
 800ac66:	615a      	str	r2, [r3, #20]
	pHcan->Init.TimeTriggeredMode = DISABLE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	761a      	strb	r2, [r3, #24]
	pHcan->Init.AutoBusOff = DISABLE;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	765a      	strb	r2, [r3, #25]
	pHcan->Init.AutoWakeUp = ENABLE;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2201      	movs	r2, #1
 800ac78:	769a      	strb	r2, [r3, #26]
	pHcan->Init.AutoRetransmission = DISABLE;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	76da      	strb	r2, [r3, #27]
	pHcan->Init.ReceiveFifoLocked = DISABLE;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2200      	movs	r2, #0
 800ac84:	771a      	strb	r2, [r3, #28]
	pHcan->Init.TransmitFifoPriority = DISABLE;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	775a      	strb	r2, [r3, #29]

	if (HAL_CAN_Init(pHcan) != HAL_OK)
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f7f5 fd37 	bl	8000700 <HAL_CAN_Init>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d001      	beq.n	800ac9c <CANTransceiverDriver_HALCANInit+0x68>
	{
		return CANTransceiverDriver_Status_Error;
 800ac98:	2304      	movs	r3, #4
 800ac9a:	e000      	b.n	800ac9e <CANTransceiverDriver_HALCANInit+0x6a>
	}
	return CANTransceiverDriver_Status_OK;
 800ac9c:	2300      	movs	r3, #0

}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <CANTransceiverDriver_init>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_init(CANTransceiverDriver_TypeDef* pSelf, Config_TypeDef* pConfig, CAN_HandleTypeDef* pHcan, CAN_TypeDef* pCANInstance){
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b092      	sub	sp, #72	; 0x48
 800acaa:	af02      	add	r7, sp, #8
 800acac:	60f8      	str	r0, [r7, #12]
 800acae:	60b9      	str	r1, [r7, #8]
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	603b      	str	r3, [r7, #0]

	if (pHcan == NULL){
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <CANTransceiverDriver_init+0x18>
		return CANTransceiverDriver_Status_Error;
 800acba:	2304      	movs	r3, #4
 800acbc:	e070      	b.n	800ada0 <CANTransceiverDriver_init+0xfa>
	}
	CANTransceiverDriver_Status_TypeDef ret = CANTransceiverDriver_Status_OK;
 800acbe:	2300      	movs	r3, #0
 800acc0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	pSelf->pHcan = pHcan;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]

	uint32_t prescalerValue;

	switch (pConfig->canSpeed){
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	88db      	ldrh	r3, [r3, #6]
 800acce:	2bfa      	cmp	r3, #250	; 0xfa
 800acd0:	d012      	beq.n	800acf8 <CANTransceiverDriver_init+0x52>
 800acd2:	2bfa      	cmp	r3, #250	; 0xfa
 800acd4:	dc04      	bgt.n	800ace0 <CANTransceiverDriver_init+0x3a>
 800acd6:	2b32      	cmp	r3, #50	; 0x32
 800acd8:	d014      	beq.n	800ad04 <CANTransceiverDriver_init+0x5e>
 800acda:	2b7d      	cmp	r3, #125	; 0x7d
 800acdc:	d00f      	beq.n	800acfe <CANTransceiverDriver_init+0x58>
 800acde:	e014      	b.n	800ad0a <CANTransceiverDriver_init+0x64>
 800ace0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ace4:	d005      	beq.n	800acf2 <CANTransceiverDriver_init+0x4c>
 800ace6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acea:	d10e      	bne.n	800ad0a <CANTransceiverDriver_init+0x64>
	case Config_CANBitrate_1Mbps:
		prescalerValue = 6;
 800acec:	2306      	movs	r3, #6
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800acf0:	e00d      	b.n	800ad0e <CANTransceiverDriver_init+0x68>
	case Config_CANBitrate_500kbps:
		prescalerValue = 12;
 800acf2:	230c      	movs	r3, #12
 800acf4:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800acf6:	e00a      	b.n	800ad0e <CANTransceiverDriver_init+0x68>
	case Config_CANBitrate_250kbps:
		prescalerValue = 24;
 800acf8:	2318      	movs	r3, #24
 800acfa:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800acfc:	e007      	b.n	800ad0e <CANTransceiverDriver_init+0x68>
	case Config_CANBitrate_125kbps:
		prescalerValue = 48;
 800acfe:	2330      	movs	r3, #48	; 0x30
 800ad00:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800ad02:	e004      	b.n	800ad0e <CANTransceiverDriver_init+0x68>
	case Config_CANBitrate_50kbps:
		prescalerValue = 120;
 800ad04:	2378      	movs	r3, #120	; 0x78
 800ad06:	63fb      	str	r3, [r7, #60]	; 0x3c
		break;
 800ad08:	e001      	b.n	800ad0e <CANTransceiverDriver_init+0x68>
	default:
		return CANTransceiverDriver_Status_IncorrectCANBitrateValueError;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	e048      	b.n	800ada0 <CANTransceiverDriver_init+0xfa>
	}
	if ((ret = CANTransceiverDriver_HALCANInit(pSelf->pHcan, prescalerValue, pCANInstance, CAN_BS1_6TQ, CAN_BS2_1TQ)) != CANTransceiverDriver_Status_OK){//TODO pass proper prescaller
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6818      	ldr	r0, [r3, #0]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800ad1a:	683a      	ldr	r2, [r7, #0]
 800ad1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad1e:	f7ff ff89 	bl	800ac34 <CANTransceiverDriver_HALCANInit>
 800ad22:	4603      	mov	r3, r0
 800ad24:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800ad28:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <CANTransceiverDriver_init+0x90>
		return ret;
 800ad30:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ad34:	e034      	b.n	800ada0 <CANTransceiverDriver_init+0xfa>
	}

	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800ad36:	2300      	movs	r3, #0
 800ad38:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad3a:	e00e      	b.n	800ad5a <CANTransceiverDriver_init+0xb4>
		pSelf->pRxCallbackFunctions[i] = NULL;
 800ad3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4413      	add	r3, r2
 800ad44:	2200      	movs	r2, #0
 800ad46:	605a      	str	r2, [r3, #4]
		pSelf->pRxCallbackArguemnts[i] = NULL;
 800ad48:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3204      	adds	r2, #4
 800ad4e:	2100      	movs	r1, #0
 800ad50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800ad54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad56:	3301      	adds	r3, #1
 800ad58:	877b      	strh	r3, [r7, #58]	; 0x3a
 800ad5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad5c:	2b02      	cmp	r3, #2
 800ad5e:	d9ed      	bls.n	800ad3c <CANTransceiverDriver_init+0x96>
	}

	CAN_FilterTypeDef filterConfig;

	filterConfig.FilterIdHigh 			= 0x00;
 800ad60:	2300      	movs	r3, #0
 800ad62:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdLow			= 0x00;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
	filterConfig.FilterMaskIdHigh		= 0x00;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdLow		= 0x00;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61fb      	str	r3, [r7, #28]

	filterConfig.FilterFIFOAssignment	= CAN_FILTER_FIFO0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	623b      	str	r3, [r7, #32]
	filterConfig.FilterBank				= 0;
 800ad74:	2300      	movs	r3, #0
 800ad76:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterMode 			= CAN_FILTERMODE_IDMASK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterScale 			= CAN_FILTERSCALE_32BIT;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterActivation		= ENABLE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_CAN_ConfigFilter(pSelf->pHcan, &filterConfig) != HAL_OK) {
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f107 0210 	add.w	r2, r7, #16
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7f5 fdb0 	bl	80008f4 <HAL_CAN_ConfigFilter>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d001      	beq.n	800ad9e <CANTransceiverDriver_init+0xf8>
		return CANTransceiverDriver_Status_Error;
 800ad9a:	2304      	movs	r3, #4
 800ad9c:	e000      	b.n	800ada0 <CANTransceiverDriver_init+0xfa>
	}

	return CANTransceiverDriver_Status_OK;
 800ad9e:	2300      	movs	r3, #0

}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3740      	adds	r7, #64	; 0x40
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <CANTransceiverDriver_configFiltering>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_configFiltering(CANTransceiverDriver_TypeDef* pSelf, uint16_t* pFilters, uint16_t filtersNumber){
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b090      	sub	sp, #64	; 0x40
 800adac:	af00      	add	r7, sp, #0
 800adae:	60f8      	str	r0, [r7, #12]
 800adb0:	60b9      	str	r1, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	80fb      	strh	r3, [r7, #6]

	//TODO zrobic obsluge wiekszej ilosci filtrow niz 14*4

	CAN_FilterTypeDef filterConfig;

	filterConfig.FilterMode 			= CAN_FILTERMODE_IDLIST;
 800adb6:	2301      	movs	r3, #1
 800adb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterScale 			= CAN_FILTERSCALE_16BIT;
 800adba:	2300      	movs	r3, #0
 800adbc:	633b      	str	r3, [r7, #48]	; 0x30
	filterConfig.FilterActivation		= ENABLE;
 800adbe:	2301      	movs	r3, #1
 800adc0:	637b      	str	r3, [r7, #52]	; 0x34

	for(uint16_t i=0; i<filtersNumber; i+=CAN_FRAMES_PER_FILTER_BANK){
 800adc2:	2300      	movs	r3, #0
 800adc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800adc6:	e06b      	b.n	800aea0 <CANTransceiverDriver_configFiltering+0xf8>

		if (i > (CAN_BANKS_NUMBER * CAN_FRAMES_PER_FILTER_BANK)){
 800adc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800adca:	2b38      	cmp	r3, #56	; 0x38
 800adcc:	d901      	bls.n	800add2 <CANTransceiverDriver_configFiltering+0x2a>
			return CANTransceiverDriver_Status_TooManyFramesIDsError;
 800adce:	2302      	movs	r3, #2
 800add0:	e06b      	b.n	800aeaa <CANTransceiverDriver_configFiltering+0x102>
		}

		filterConfig.FilterFIFOAssignment	= (i%2 == 0) ? CAN_FILTER_FIFO0 : CAN_FILTER_FIFO1;
 800add2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	bf14      	ite	ne
 800adde:	2301      	movne	r3, #1
 800ade0:	2300      	moveq	r3, #0
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	627b      	str	r3, [r7, #36]	; 0x24
		filterConfig.FilterBank				= i % CAN_BANKS_NUMBER;
 800ade6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ade8:	0853      	lsrs	r3, r2, #1
 800adea:	4932      	ldr	r1, [pc, #200]	; (800aeb4 <CANTransceiverDriver_configFiltering+0x10c>)
 800adec:	fba1 1303 	umull	r1, r3, r1, r3
 800adf0:	0899      	lsrs	r1, r3, #2
 800adf2:	460b      	mov	r3, r1
 800adf4:	00db      	lsls	r3, r3, #3
 800adf6:	1a5b      	subs	r3, r3, r1
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	62bb      	str	r3, [r7, #40]	; 0x28

		filterConfig.FilterIdLow			= pFilters[i] << CAN_ID_MASK_bp;
 800ae00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae02:	005b      	lsls	r3, r3, #1
 800ae04:	68ba      	ldr	r2, [r7, #8]
 800ae06:	4413      	add	r3, r2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	015b      	lsls	r3, r3, #5
 800ae0c:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterIdHigh			= (i+1 < filtersNumber) ? (pFilters[i+1] << CAN_ID_MASK_bp) : pFilters[i];
 800ae0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	88fb      	ldrh	r3, [r7, #6]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	da07      	bge.n	800ae28 <CANTransceiverDriver_configFiltering+0x80>
 800ae18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	005b      	lsls	r3, r3, #1
 800ae1e:	68ba      	ldr	r2, [r7, #8]
 800ae20:	4413      	add	r3, r2
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	015b      	lsls	r3, r3, #5
 800ae26:	e004      	b.n	800ae32 <CANTransceiverDriver_configFiltering+0x8a>
 800ae28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	68ba      	ldr	r2, [r7, #8]
 800ae2e:	4413      	add	r3, r2
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdLow		= (i+2 < filtersNumber) ? (pFilters[i+2] << CAN_ID_MASK_bp) : pFilters[i];
 800ae34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae36:	1c9a      	adds	r2, r3, #2
 800ae38:	88fb      	ldrh	r3, [r7, #6]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	da07      	bge.n	800ae4e <CANTransceiverDriver_configFiltering+0xa6>
 800ae3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae40:	3302      	adds	r3, #2
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	68ba      	ldr	r2, [r7, #8]
 800ae46:	4413      	add	r3, r2
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	015b      	lsls	r3, r3, #5
 800ae4c:	e004      	b.n	800ae58 <CANTransceiverDriver_configFiltering+0xb0>
 800ae4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae50:	005b      	lsls	r3, r3, #1
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	4413      	add	r3, r2
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	623b      	str	r3, [r7, #32]
		filterConfig.FilterMaskIdHigh		= (i+3 < filtersNumber) ? (pFilters[i+3] << CAN_ID_MASK_bp) : pFilters[i];
 800ae5a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae5c:	1cda      	adds	r2, r3, #3
 800ae5e:	88fb      	ldrh	r3, [r7, #6]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	da07      	bge.n	800ae74 <CANTransceiverDriver_configFiltering+0xcc>
 800ae64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae66:	3303      	adds	r3, #3
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	015b      	lsls	r3, r3, #5
 800ae72:	e004      	b.n	800ae7e <CANTransceiverDriver_configFiltering+0xd6>
 800ae74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae76:	005b      	lsls	r3, r3, #1
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	4413      	add	r3, r2
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	61fb      	str	r3, [r7, #28]

		if (HAL_CAN_ConfigFilter(pSelf->pHcan, &filterConfig) != HAL_OK) {
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f107 0214 	add.w	r2, r7, #20
 800ae88:	4611      	mov	r1, r2
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7f5 fd32 	bl	80008f4 <HAL_CAN_ConfigFilter>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d001      	beq.n	800ae9a <CANTransceiverDriver_configFiltering+0xf2>
			return CANTransceiverDriver_Status_Error;
 800ae96:	2304      	movs	r3, #4
 800ae98:	e007      	b.n	800aeaa <CANTransceiverDriver_configFiltering+0x102>
	for(uint16_t i=0; i<filtersNumber; i+=CAN_FRAMES_PER_FILTER_BANK){
 800ae9a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aea0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800aea2:	88fb      	ldrh	r3, [r7, #6]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d38f      	bcc.n	800adc8 <CANTransceiverDriver_configFiltering+0x20>
		}

	}

	return CANTransceiverDriver_Status_OK;
 800aea8:	2300      	movs	r3, #0

}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3740      	adds	r7, #64	; 0x40
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	92492493 	.word	0x92492493

0800aeb8 <CANTransceiverDriver_receivedMsgCallbackHandler>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_receivedMsgCallbackHandler(CANTransceiverDriver_TypeDef* pSelf, uint16_t ID, uint8_t DLC, uint8_t aData[8], uint16_t timestamp){
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	607b      	str	r3, [r7, #4]
 800aec2:	460b      	mov	r3, r1
 800aec4:	817b      	strh	r3, [r7, #10]
 800aec6:	4613      	mov	r3, r2
 800aec8:	727b      	strb	r3, [r7, #9]

	CANData_TypeDef canData;
	canData.DLC = DLC;
 800aeca:	7a7b      	ldrb	r3, [r7, #9]
 800aecc:	75bb      	strb	r3, [r7, #22]
	canData.ID = ID;
 800aece:	897b      	ldrh	r3, [r7, #10]
 800aed0:	82bb      	strh	r3, [r7, #20]
	memcpy(canData.Data, aData, 8);
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	f107 031c 	add.w	r3, r7, #28
 800aed8:	6810      	ldr	r0, [r2, #0]
 800aeda:	6851      	ldr	r1, [r2, #4]
 800aedc:	c303      	stmia	r3!, {r0, r1}
	canData.msTime = timestamp; //TODO !!!!! to jest zle, ale niech bedzie na razie
 800aede:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aee0:	61bb      	str	r3, [r7, #24]

	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800aee2:	2300      	movs	r3, #0
 800aee4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aee6:	e017      	b.n	800af18 <CANTransceiverDriver_receivedMsgCallbackHandler+0x60>

		if (pSelf->pRxCallbackFunctions[i] == NULL){
 800aee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	4413      	add	r3, r2
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d014      	beq.n	800af20 <CANTransceiverDriver_receivedMsgCallbackHandler+0x68>
			break;
		}

		pSelf->pRxCallbackFunctions[i](&canData, pSelf->pRxCallbackArguemnts[i]);
 800aef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	3104      	adds	r1, #4
 800af06:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800af0a:	f107 0214 	add.w	r2, r7, #20
 800af0e:	4610      	mov	r0, r2
 800af10:	4798      	blx	r3
	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800af12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af14:	3301      	adds	r3, #1
 800af16:	84fb      	strh	r3, [r7, #38]	; 0x26
 800af18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d9e4      	bls.n	800aee8 <CANTransceiverDriver_receivedMsgCallbackHandler+0x30>
 800af1e:	e000      	b.n	800af22 <CANTransceiverDriver_receivedMsgCallbackHandler+0x6a>
			break;
 800af20:	bf00      	nop
	}

	return CANTransceiverDriver_Status_OK;
 800af22:	2300      	movs	r3, #0

}
 800af24:	4618      	mov	r0, r3
 800af26:	3728      	adds	r7, #40	; 0x28
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <CANTransceiverDriver_registerReceiveCallbackToCall>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_registerReceiveCallbackToCall(CANTransceiverDriver_TypeDef* pSelf, void (*pCallbackFunction) (CANData_TypeDef* pData, void* arg), void* pArgument){
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]

	uint16_t i;

	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800af38:	2300      	movs	r3, #0
 800af3a:	82fb      	strh	r3, [r7, #22]
 800af3c:	e017      	b.n	800af6e <CANTransceiverDriver_registerReceiveCallbackToCall+0x42>
		if (pSelf->pRxCallbackFunctions[i] != NULL){
 800af3e:	8afb      	ldrh	r3, [r7, #22]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d003      	beq.n	800af54 <CANTransceiverDriver_registerReceiveCallbackToCall+0x28>
	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800af4c:	8afb      	ldrh	r3, [r7, #22]
 800af4e:	3301      	adds	r3, #1
 800af50:	82fb      	strh	r3, [r7, #22]
 800af52:	e00c      	b.n	800af6e <CANTransceiverDriver_registerReceiveCallbackToCall+0x42>
			continue;
		} else {
			pSelf->pRxCallbackFunctions[i] = pCallbackFunction;
 800af54:	8afb      	ldrh	r3, [r7, #22]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	605a      	str	r2, [r3, #4]
			pSelf->pRxCallbackArguemnts[i] = pArgument;
 800af60:	8afa      	ldrh	r2, [r7, #22]
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3204      	adds	r2, #4
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 800af6c:	e002      	b.n	800af74 <CANTransceiverDriver_registerReceiveCallbackToCall+0x48>
	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800af6e:	8afb      	ldrh	r3, [r7, #22]
 800af70:	2b02      	cmp	r3, #2
 800af72:	d9e4      	bls.n	800af3e <CANTransceiverDriver_registerReceiveCallbackToCall+0x12>
		}
	}

	if (i >= CAN_MAX_CALLBACK_NUMBER){
 800af74:	8afb      	ldrh	r3, [r7, #22]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <CANTransceiverDriver_registerReceiveCallbackToCall+0x52>
		return CANTransceiverDriver_Status_Error;
 800af7a:	2304      	movs	r3, #4
 800af7c:	e000      	b.n	800af80 <CANTransceiverDriver_registerReceiveCallbackToCall+0x54>
	}

	return CANTransceiverDriver_Status_OK;
 800af7e:	2300      	movs	r3, #0

}
 800af80:	4618      	mov	r0, r3
 800af82:	371c      	adds	r7, #28
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <checkErrorcode>:

static void checkErrorcode(uint32_t errorcodeHAL, uint32_t errorMask, CANTransceiverDriver_ErrorCode_TypeDef* errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TypeDef errorTracsceiverMaskOut){
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	807b      	strh	r3, [r7, #2]

	if ((errorcodeHAL & errorMask) != 0){
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	4013      	ands	r3, r2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <checkErrorcode+0x26>
		*errorcodeTransceiverOut |= errorTracsceiverMaskOut;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	881a      	ldrh	r2, [r3, #0]
 800afa8:	887b      	ldrh	r3, [r7, #2]
 800afaa:	4313      	orrs	r3, r2
 800afac:	b29a      	uxth	r2, r3
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	801a      	strh	r2, [r3, #0]
	}
}
 800afb2:	bf00      	nop
 800afb4:	3714      	adds	r7, #20
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr

0800afbe <CANTransceiverDriver_errorCallbackHandler>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_errorCallbackHandler(CANTransceiverDriver_TypeDef* pSelf){
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b086      	sub	sp, #24
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]

	uint32_t errorcodeHAL = HAL_CAN_GetError(pSelf->pHcan);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f6 f910 	bl	80011f0 <HAL_CAN_GetError>
 800afd0:	6138      	str	r0, [r7, #16]

	CANTransceiverDriver_ErrorCode_TypeDef	errorcodeTransceiverOut = CANTransceiverDriver_ErrorCode_None;
 800afd2:	2300      	movs	r3, #0
 800afd4:	81fb      	strh	r3, [r7, #14]

	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_EWG, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ProtocolErrWarn);
 800afd6:	f107 020e 	add.w	r2, r7, #14
 800afda:	2301      	movs	r3, #1
 800afdc:	2101      	movs	r1, #1
 800afde:	6938      	ldr	r0, [r7, #16]
 800afe0:	f7ff ffd4 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_EPV, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ErrPassive);
 800afe4:	f107 020e 	add.w	r2, r7, #14
 800afe8:	2302      	movs	r3, #2
 800afea:	2102      	movs	r1, #2
 800afec:	6938      	ldr	r0, [r7, #16]
 800afee:	f7ff ffcd 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BOF, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BusOff);
 800aff2:	f107 020e 	add.w	r2, r7, #14
 800aff6:	2304      	movs	r3, #4
 800aff8:	2104      	movs	r1, #4
 800affa:	6938      	ldr	r0, [r7, #16]
 800affc:	f7ff ffc6 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_STF, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitStuffingError);
 800b000:	f107 020e 	add.w	r2, r7, #14
 800b004:	2308      	movs	r3, #8
 800b006:	2108      	movs	r1, #8
 800b008:	6938      	ldr	r0, [r7, #16]
 800b00a:	f7ff ffbf 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_FOR, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_FormError);
 800b00e:	f107 020e 	add.w	r2, r7, #14
 800b012:	2310      	movs	r3, #16
 800b014:	2110      	movs	r1, #16
 800b016:	6938      	ldr	r0, [r7, #16]
 800b018:	f7ff ffb8 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_ACK, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ACKError);
 800b01c:	f107 020e 	add.w	r2, r7, #14
 800b020:	2320      	movs	r3, #32
 800b022:	2120      	movs	r1, #32
 800b024:	6938      	ldr	r0, [r7, #16]
 800b026:	f7ff ffb1 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BR,  &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitRecessiveError);
 800b02a:	f107 020e 	add.w	r2, r7, #14
 800b02e:	2340      	movs	r3, #64	; 0x40
 800b030:	2140      	movs	r1, #64	; 0x40
 800b032:	6938      	ldr	r0, [r7, #16]
 800b034:	f7ff ffaa 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BD,  &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitDominantError);
 800b038:	f107 020e 	add.w	r2, r7, #14
 800b03c:	2380      	movs	r3, #128	; 0x80
 800b03e:	2180      	movs	r1, #128	; 0x80
 800b040:	6938      	ldr	r0, [r7, #16]
 800b042:	f7ff ffa3 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_CRC, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_CRCError);
 800b046:	f107 020e 	add.w	r2, r7, #14
 800b04a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b04e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b052:	6938      	ldr	r0, [r7, #16]
 800b054:	f7ff ff9a 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL,
 800b058:	f107 020e 	add.w	r2, r7, #14
 800b05c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b060:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b064:	6938      	ldr	r0, [r7, #16]
 800b066:	f7ff ff91 	bl	800af8c <checkErrorcode>
			HAL_CAN_ERROR_RX_FOV0 |
			HAL_CAN_ERROR_RX_FOV1, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_RxFIFOError);
	checkErrorcode(errorcodeHAL,
 800b06a:	f107 020e 	add.w	r2, r7, #14
 800b06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b072:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 800b076:	6938      	ldr	r0, [r7, #16]
 800b078:	f7ff ff88 	bl	800af8c <checkErrorcode>
			HAL_CAN_ERROR_TX_TERR0 |
			HAL_CAN_ERROR_TX_ALST1 |
			HAL_CAN_ERROR_TX_TERR1 |
			HAL_CAN_ERROR_TX_ALST2 |
			HAL_CAN_ERROR_TX_TERR2, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TxMailboxError);
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_TIMEOUT, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TimeoutError);
 800b07c:	f107 020e 	add.w	r2, r7, #14
 800b080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b084:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800b088:	6938      	ldr	r0, [r7, #16]
 800b08a:	f7ff ff7f 	bl	800af8c <checkErrorcode>
	checkErrorcode(errorcodeHAL,
 800b08e:	f107 020e 	add.w	r2, r7, #14
 800b092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b096:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 800b09a:	6938      	ldr	r0, [r7, #16]
 800b09c:	f7ff ff76 	bl	800af8c <checkErrorcode>
			HAL_CAN_ERROR_NOT_INITIALIZED |
			HAL_CAN_ERROR_NOT_READY |
			HAL_CAN_ERROR_NOT_STARTED |
			HAL_CAN_ERROR_PARAM, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_OtherError);

	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	82fb      	strh	r3, [r7, #22]
 800b0a4:	e018      	b.n	800b0d8 <CANTransceiverDriver_errorCallbackHandler+0x11a>

		if (pSelf->pErrorCallbackFunctions[i] == NULL){
 800b0a6:	8afb      	ldrh	r3, [r7, #22]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	3306      	adds	r3, #6
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	4413      	add	r3, r2
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d014      	beq.n	800b0e0 <CANTransceiverDriver_errorCallbackHandler+0x122>
			break;
		}

		pSelf->pErrorCallbackFunctions[i](errorcodeTransceiverOut, pSelf->pErrorCallbackArguemnts[i]);
 800b0b6:	8afb      	ldrh	r3, [r7, #22]
 800b0b8:	687a      	ldr	r2, [r7, #4]
 800b0ba:	3306      	adds	r3, #6
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	89f8      	ldrh	r0, [r7, #14]
 800b0c4:	8af9      	ldrh	r1, [r7, #22]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	310a      	adds	r1, #10
 800b0ca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	4798      	blx	r3
	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800b0d2:	8afb      	ldrh	r3, [r7, #22]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	82fb      	strh	r3, [r7, #22]
 800b0d8:	8afb      	ldrh	r3, [r7, #22]
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d9e3      	bls.n	800b0a6 <CANTransceiverDriver_errorCallbackHandler+0xe8>
 800b0de:	e000      	b.n	800b0e2 <CANTransceiverDriver_errorCallbackHandler+0x124>
			break;
 800b0e0:	bf00      	nop
	}

	if (HAL_CAN_ResetError(pSelf->pHcan) != HAL_OK){
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7f6 f88e 	bl	8001208 <HAL_CAN_ResetError>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d001      	beq.n	800b0f6 <CANTransceiverDriver_errorCallbackHandler+0x138>
		Error_Handler();
 800b0f2:	f7fe fceb 	bl	8009acc <Error_Handler>
	}

	return CANTransceiverDriver_Status_OK;
 800b0f6:	2300      	movs	r3, #0

}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3718      	adds	r7, #24
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <CANTransceiverDriver_registerErrorCallbackToCall>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_registerErrorCallbackToCall(CANTransceiverDriver_TypeDef* pSelf, void (*pCallbackFunction) (uint16_t errorcode, void* arg), void* pArgument){
 800b100:	b480      	push	{r7}
 800b102:	b087      	sub	sp, #28
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]

	uint16_t i;

	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800b10c:	2300      	movs	r3, #0
 800b10e:	82fb      	strh	r3, [r7, #22]
 800b110:	e019      	b.n	800b146 <CANTransceiverDriver_registerErrorCallbackToCall+0x46>
		if (pSelf->pErrorCallbackFunctions[i] != NULL){
 800b112:	8afb      	ldrh	r3, [r7, #22]
 800b114:	68fa      	ldr	r2, [r7, #12]
 800b116:	3306      	adds	r3, #6
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d003      	beq.n	800b12a <CANTransceiverDriver_registerErrorCallbackToCall+0x2a>
	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800b122:	8afb      	ldrh	r3, [r7, #22]
 800b124:	3301      	adds	r3, #1
 800b126:	82fb      	strh	r3, [r7, #22]
 800b128:	e00d      	b.n	800b146 <CANTransceiverDriver_registerErrorCallbackToCall+0x46>
			continue;
		} else {
			pSelf->pErrorCallbackFunctions[i] = pCallbackFunction;
 800b12a:	8afb      	ldrh	r3, [r7, #22]
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	3306      	adds	r3, #6
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	68ba      	ldr	r2, [r7, #8]
 800b136:	605a      	str	r2, [r3, #4]
			pSelf->pErrorCallbackArguemnts[i] = pArgument;
 800b138:	8afa      	ldrh	r2, [r7, #22]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	320a      	adds	r2, #10
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 800b144:	e002      	b.n	800b14c <CANTransceiverDriver_registerErrorCallbackToCall+0x4c>
	for (i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 800b146:	8afb      	ldrh	r3, [r7, #22]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d9e2      	bls.n	800b112 <CANTransceiverDriver_registerErrorCallbackToCall+0x12>
		}
	}

	if (i >= CAN_MAX_CALLBACK_NUMBER){
 800b14c:	8afb      	ldrh	r3, [r7, #22]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <CANTransceiverDriver_registerErrorCallbackToCall+0x56>
		return CANTransceiverDriver_Status_Error;
 800b152:	2304      	movs	r3, #4
 800b154:	e000      	b.n	800b158 <CANTransceiverDriver_registerErrorCallbackToCall+0x58>
	}

	return CANTransceiverDriver_Status_OK;
 800b156:	2300      	movs	r3, #0

}
 800b158:	4618      	mov	r0, r3
 800b15a:	371c      	adds	r7, #28
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <CANTransceiverDriver_start>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_start(CANTransceiverDriver_TypeDef* pSelf){
 800b164:	b580      	push	{r7, lr}
 800b166:	b082      	sub	sp, #8
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_ActivateNotification(pSelf->pHcan,	CAN_IT_RX_FIFO0_MSG_PENDING |
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f648 7112 	movw	r1, #36626	; 0x8f12
 800b174:	4618      	mov	r0, r3
 800b176:	f7f5 fe00 	bl	8000d7a <HAL_CAN_ActivateNotification>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <CANTransceiverDriver_start+0x20>
													CAN_IT_ERROR_WARNING |
													CAN_IT_ERROR_PASSIVE |
													CAN_IT_BUSOFF |
													CAN_IT_LAST_ERROR_CODE |
													CAN_IT_ERROR) != HAL_OK){
		return CANTransceiverDriver_Status_StartError;
 800b180:	2301      	movs	r3, #1
 800b182:	e00a      	b.n	800b19a <CANTransceiverDriver_start+0x36>
	}

	if (HAL_CAN_Start(pSelf->pHcan) != HAL_OK){
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	4618      	mov	r0, r3
 800b18a:	f7f5 fc9f 	bl	8000acc <HAL_CAN_Start>
 800b18e:	4603      	mov	r3, r0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d001      	beq.n	800b198 <CANTransceiverDriver_start+0x34>
		return CANTransceiverDriver_Status_StartError;
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <CANTransceiverDriver_start+0x36>
	}

	return CANTransceiverDriver_Status_OK;
 800b198:	2300      	movs	r3, #0

}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/****************************** Implementations of stm32f7xx_hal_can.h __weak functions placeholders ******************************/

extern CANTransceiverDriver_TypeDef canTransceiverDriver;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b08e      	sub	sp, #56	; 0x38
 800b1a8:	af02      	add	r7, sp, #8
 800b1aa:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a14      	ldr	r2, [pc, #80]	; (800b200 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d001      	beq.n	800b1b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
		Error_Handler();
 800b1b4:	f7fe fc8a 	bl	8009acc <Error_Handler>
	}

	CAN_RxHeaderTypeDef	header;
	uint8_t				data[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, data) != HAL_OK){
 800b1b8:	f107 030c 	add.w	r3, r7, #12
 800b1bc:	f107 0214 	add.w	r2, r7, #20
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7f5 fcc6 	bl	8000b54 <HAL_CAN_GetRxMessage>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		Error_Handler();
 800b1ce:	f7fe fc7d 	bl	8009acc <Error_Handler>
	}

	if (CANTransceiverDriver_receivedMsgCallbackHandler(&canTransceiverDriver, header.StdId, header.DLC, data, header.Timestamp) != CANTransceiverDriver_Status_OK){
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	b299      	uxth	r1, r3
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f107 000c 	add.w	r0, r7, #12
 800b1e2:	9300      	str	r3, [sp, #0]
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	4807      	ldr	r0, [pc, #28]	; (800b204 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 800b1e8:	f7ff fe66 	bl	800aeb8 <CANTransceiverDriver_receivedMsgCallbackHandler>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d001      	beq.n	800b1f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		Error_Handler();
 800b1f2:	f7fe fc6b 	bl	8009acc <Error_Handler>
	}

}
 800b1f6:	bf00      	nop
 800b1f8:	3730      	adds	r7, #48	; 0x30
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	200004e4 	.word	0x200004e4
 800b204:	2000ed78 	.word	0x2000ed78

0800b208 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08e      	sub	sp, #56	; 0x38
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	4a14      	ldr	r2, [pc, #80]	; (800b264 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d001      	beq.n	800b21c <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
		Error_Handler();
 800b218:	f7fe fc58 	bl	8009acc <Error_Handler>
	}

	CAN_RxHeaderTypeDef	header;
	uint8_t				data[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &header, data) != HAL_OK){
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	f107 0214 	add.w	r2, r7, #20
 800b224:	2101      	movs	r1, #1
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f7f5 fc94 	bl	8000b54 <HAL_CAN_GetRxMessage>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		Error_Handler();
 800b232:	f7fe fc4b 	bl	8009acc <Error_Handler>
	}

	if (CANTransceiverDriver_receivedMsgCallbackHandler(&canTransceiverDriver, header.StdId, header.DLC, data, header.Timestamp) != CANTransceiverDriver_Status_OK){
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	b299      	uxth	r1, r3
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	b2da      	uxtb	r2, r3
 800b23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b240:	b29b      	uxth	r3, r3
 800b242:	f107 000c 	add.w	r0, r7, #12
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	4603      	mov	r3, r0
 800b24a:	4807      	ldr	r0, [pc, #28]	; (800b268 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 800b24c:	f7ff fe34 	bl	800aeb8 <CANTransceiverDriver_receivedMsgCallbackHandler>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d001      	beq.n	800b25a <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
		Error_Handler();
 800b256:	f7fe fc39 	bl	8009acc <Error_Handler>
	}

}
 800b25a:	bf00      	nop
 800b25c:	3730      	adds	r7, #48	; 0x30
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	200004e4 	.word	0x200004e4
 800b268:	2000ed78 	.word	0x2000ed78

0800b26c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a08      	ldr	r2, [pc, #32]	; (800b298 <HAL_CAN_ErrorCallback+0x2c>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d001      	beq.n	800b280 <HAL_CAN_ErrorCallback+0x14>
		Error_Handler();
 800b27c:	f7fe fc26 	bl	8009acc <Error_Handler>
	}

	if (CANTransceiverDriver_errorCallbackHandler(&canTransceiverDriver) != CANTransceiverDriver_Status_OK){
 800b280:	4806      	ldr	r0, [pc, #24]	; (800b29c <HAL_CAN_ErrorCallback+0x30>)
 800b282:	f7ff fe9c 	bl	800afbe <CANTransceiverDriver_errorCallbackHandler>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <HAL_CAN_ErrorCallback+0x24>
		Error_Handler();
 800b28c:	f7fe fc1e 	bl	8009acc <Error_Handler>
	}

}
 800b290:	bf00      	nop
 800b292:	3708      	adds	r7, #8
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200004e4 	.word	0x200004e4
 800b29c:	2000ed78 	.word	0x2000ed78

0800b2a0 <_ConfigDataManager_validateCorrectFrame>:

#include "user/file_system_wrapper.h"
#include "user/config.h"
#include "user/utils.h"

static ConfigDataManager_Status_TypeDef _ConfigDataManager_validateCorrectFrame(ConfigDataManager_TypeDef* pSelf, uint16_t id, uint16_t dlc){
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	807b      	strh	r3, [r7, #2]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	803b      	strh	r3, [r7, #0]

	if (id >= CONFIG_ID_NUMBER){
 800b2b0:	887b      	ldrh	r3, [r7, #2]
 800b2b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2b6:	d301      	bcc.n	800b2bc <_ConfigDataManager_validateCorrectFrame+0x1c>
		return ConfigDataManager_Status_WrongIDError;
 800b2b8:	2307      	movs	r3, #7
 800b2ba:	e011      	b.n	800b2e0 <_ConfigDataManager_validateCorrectFrame+0x40>
	}

	if (pSelf->sConfig.canFramesByID[id] != NULL){
 800b2bc:	8879      	ldrh	r1, [r7, #2]
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	f242 03d2 	movw	r3, #8402	; 0x20d2
 800b2c4:	440b      	add	r3, r1
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	4413      	add	r3, r2
 800b2ca:	689b      	ldr	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <_ConfigDataManager_validateCorrectFrame+0x34>
		return ConfigDataManager_Status_FrameIDPreviouslyUsedError;
 800b2d0:	230a      	movs	r3, #10
 800b2d2:	e005      	b.n	800b2e0 <_ConfigDataManager_validateCorrectFrame+0x40>
	}

	if (dlc > CONFIG_MAX_DLC_VALUE){
 800b2d4:	883b      	ldrh	r3, [r7, #0]
 800b2d6:	2b08      	cmp	r3, #8
 800b2d8:	d901      	bls.n	800b2de <_ConfigDataManager_validateCorrectFrame+0x3e>
		return ConfigDataManager_Status_WrongDLCError;
 800b2da:	2308      	movs	r3, #8
 800b2dc:	e000      	b.n	800b2e0 <_ConfigDataManager_validateCorrectFrame+0x40>
	}

	return ConfigDataManager_Status_OK;
 800b2de:	2300      	movs	r3, #0

}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <_ConfigDataManager_validateGPSFrequency>:

static ConfigDataManager_Status_TypeDef _ConfigDataManager_validateGPSFrequency(ConfigDataManager_TypeDef* pSelf){
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]

	switch (pSelf->sConfig.gpsFrequency){
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	7b1b      	ldrb	r3, [r3, #12]
 800b2f8:	3300      	adds	r3, #0
 800b2fa:	2b05      	cmp	r3, #5
 800b2fc:	d801      	bhi.n	800b302 <_ConfigDataManager_validateGPSFrequency+0x16>
	case Config_GPSFrequency_0_5Hz:
	case Config_GPSFrequency_1Hz:
	case Config_GPSFrequency_2Hz:
	case Config_GPSFrequency_5Hz:
	case Config_GPSFrequency_10Hz:
		return ConfigDataManager_Status_OK;
 800b2fe:	2300      	movs	r3, #0
 800b300:	e000      	b.n	800b304 <_ConfigDataManager_validateGPSFrequency+0x18>
	default:
		return ConfigDataManager_Status_WrongGPSFrequencyError;
 800b302:	230b      	movs	r3, #11
	}
}
 800b304:	4618      	mov	r0, r3
 800b306:	370c      	adds	r7, #12
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <_ConfigDataManager_validateCANSpeed>:

static ConfigDataManager_Status_TypeDef _ConfigDataManager_validateCANSpeed(ConfigDataManager_TypeDef* pSelf){
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]

	switch (pSelf->sConfig.canSpeed){
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	895b      	ldrh	r3, [r3, #10]
 800b31c:	2bfa      	cmp	r3, #250	; 0xfa
 800b31e:	d00c      	beq.n	800b33a <_ConfigDataManager_validateCANSpeed+0x2a>
 800b320:	2bfa      	cmp	r3, #250	; 0xfa
 800b322:	dc04      	bgt.n	800b32e <_ConfigDataManager_validateCANSpeed+0x1e>
 800b324:	2b32      	cmp	r3, #50	; 0x32
 800b326:	d008      	beq.n	800b33a <_ConfigDataManager_validateCANSpeed+0x2a>
 800b328:	2b7d      	cmp	r3, #125	; 0x7d
 800b32a:	d006      	beq.n	800b33a <_ConfigDataManager_validateCANSpeed+0x2a>
 800b32c:	e007      	b.n	800b33e <_ConfigDataManager_validateCANSpeed+0x2e>
 800b32e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b332:	d002      	beq.n	800b33a <_ConfigDataManager_validateCANSpeed+0x2a>
 800b334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b338:	d101      	bne.n	800b33e <_ConfigDataManager_validateCANSpeed+0x2e>
	case Config_CANBitrate_50kbps:
	case Config_CANBitrate_125kbps:
	case Config_CANBitrate_250kbps:
	case Config_CANBitrate_500kbps:
	case Config_CANBitrate_1Mbps:
		return ConfigDataManager_Status_OK;
 800b33a:	2300      	movs	r3, #0
 800b33c:	e000      	b.n	800b340 <_ConfigDataManager_validateCANSpeed+0x30>
	default:
		return ConfigDataManager_Status_WrongCANBitrateError;
 800b33e:	230c      	movs	r3, #12
	}
}
 800b340:	4618      	mov	r0, r3
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <ConfigDataManager_init>:

//TODO dopisac w dokumentacji, ze file system musi byc init, lub zrobic ze init wywolw
ConfigDataManager_Status_TypeDef ConfigDataManager_init(ConfigDataManager_TypeDef* pSelf, FileSystemWrapper_TypeDef* pFileSystem){
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]

	pSelf->state = ConfigDataManager_State_DuringInit;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	701a      	strb	r2, [r3, #0]

	FileSystemWrapper_Status_TypeDef	status;
	ConfigDataManager_Status_TypeDef	ret = ConfigDataManager_Status_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	72fb      	strb	r3, [r7, #11]

	status = FileSystemWrapper_open(pFileSystem, &(pSelf->sConfigFileHandler), CONFIG_FILENAME);
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	f24a 3350 	movw	r3, #41808	; 0xa350
 800b366:	4413      	add	r3, r2
 800b368:	4abf      	ldr	r2, [pc, #764]	; (800b668 <ConfigDataManager_init+0x31c>)
 800b36a:	4619      	mov	r1, r3
 800b36c:	6838      	ldr	r0, [r7, #0]
 800b36e:	f001 fd13 	bl	800cd98 <FileSystemWrapper_open>
 800b372:	4603      	mov	r3, r0
 800b374:	72bb      	strb	r3, [r7, #10]

	if (status == FileSystemWrapper_Status_NO_FILE){
 800b376:	7abb      	ldrb	r3, [r7, #10]
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d101      	bne.n	800b380 <ConfigDataManager_init+0x34>
		return ConfigDataManager_Status_NoConfigFileError;
 800b37c:	2302      	movs	r3, #2
 800b37e:	e201      	b.n	800b784 <ConfigDataManager_init+0x438>
	} else if (status != FileSystemWrapper_Status_OK){
 800b380:	7abb      	ldrb	r3, [r7, #10]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d001      	beq.n	800b38a <ConfigDataManager_init+0x3e>
		return ConfigDataManager_Status_Error;
 800b386:	230d      	movs	r3, #13
 800b388:	e1fc      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if (FileReadingBuffer_init(&pSelf->sReadingBuffer, &pSelf->sConfigFileHandler) != FileReadingBuffer_Status_OK){
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b390:	4413      	add	r3, r2
 800b392:	6879      	ldr	r1, [r7, #4]
 800b394:	f24a 3250 	movw	r2, #41808	; 0xa350
 800b398:	440a      	add	r2, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 fb73 	bl	800ca88 <FileReadingBuffer_init>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d001      	beq.n	800b3ac <ConfigDataManager_init+0x60>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b3a8:	2305      	movs	r3, #5
 800b3aa:	e1eb      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.version) != FileReadingBuffer_Status_OK){
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b3b2:	4413      	add	r3, r2
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	3204      	adds	r2, #4
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 fbd7 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d001      	beq.n	800b3ca <ConfigDataManager_init+0x7e>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b3c6:	2305      	movs	r3, #5
 800b3c8:	e1dc      	b.n	800b784 <ConfigDataManager_init+0x438>
	}
	if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.subversion) != FileReadingBuffer_Status_OK){
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b3d0:	4413      	add	r3, r2
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	3206      	adds	r2, #6
 800b3d6:	4611      	mov	r1, r2
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f001 fbc8 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d001      	beq.n	800b3e8 <ConfigDataManager_init+0x9c>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b3e4:	2305      	movs	r3, #5
 800b3e6:	e1cd      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if ((pSelf->sConfig.version != CONFIG_FILE_USED_VERSION) || (pSelf->sConfig.subversion != CONFIG_FILE_USED_SUBVERSION)){
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	889b      	ldrh	r3, [r3, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d103      	bne.n	800b3f8 <ConfigDataManager_init+0xac>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	88db      	ldrh	r3, [r3, #6]
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d001      	beq.n	800b3fc <ConfigDataManager_init+0xb0>
		return ConfigDataManager_Status_ConfigFileWrongVersionError;
 800b3f8:	2304      	movs	r3, #4
 800b3fa:	e1c3      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.canSpeed) != FileReadingBuffer_Status_OK){
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b402:	4413      	add	r3, r2
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	320a      	adds	r2, #10
 800b408:	4611      	mov	r1, r2
 800b40a:	4618      	mov	r0, r3
 800b40c:	f001 fbaf 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b410:	4603      	mov	r3, r0
 800b412:	2b00      	cmp	r3, #0
 800b414:	d001      	beq.n	800b41a <ConfigDataManager_init+0xce>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b416:	2305      	movs	r3, #5
 800b418:	e1b4      	b.n	800b784 <ConfigDataManager_init+0x438>
	}
	if ((ret = _ConfigDataManager_validateCANSpeed(pSelf)) != ConfigDataManager_Status_OK){
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff ff78 	bl	800b310 <_ConfigDataManager_validateCANSpeed>
 800b420:	4603      	mov	r3, r0
 800b422:	72fb      	strb	r3, [r7, #11]
 800b424:	7afb      	ldrb	r3, [r7, #11]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d001      	beq.n	800b42e <ConfigDataManager_init+0xe2>
		return ret;
 800b42a:	7afb      	ldrb	r3, [r7, #11]
 800b42c:	e1aa      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if (FileReadingBuffer_readUInt8(&pSelf->sReadingBuffer, &pSelf->sConfig.gpsFrequency) != FileReadingBuffer_Status_OK){
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b434:	4413      	add	r3, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	320c      	adds	r2, #12
 800b43a:	4611      	mov	r1, r2
 800b43c:	4618      	mov	r0, r3
 800b43e:	f001 fb69 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800b442:	4603      	mov	r3, r0
 800b444:	2b00      	cmp	r3, #0
 800b446:	d001      	beq.n	800b44c <ConfigDataManager_init+0x100>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b448:	2305      	movs	r3, #5
 800b44a:	e19b      	b.n	800b784 <ConfigDataManager_init+0x438>
	}
	if ((ret = _ConfigDataManager_validateGPSFrequency(pSelf)) != ConfigDataManager_Status_OK){
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f7ff ff4d 	bl	800b2ec <_ConfigDataManager_validateGPSFrequency>
 800b452:	4603      	mov	r3, r0
 800b454:	72fb      	strb	r3, [r7, #11]
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <ConfigDataManager_init+0x114>
		return ret;
 800b45c:	7afb      	ldrb	r3, [r7, #11]
 800b45e:	e191      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.numOfFrames) != FileReadingBuffer_Status_OK){
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b466:	4413      	add	r3, r2
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	3208      	adds	r2, #8
 800b46c:	4611      	mov	r1, r2
 800b46e:	4618      	mov	r0, r3
 800b470:	f001 fb7d 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <ConfigDataManager_init+0x132>
		return ConfigDataManager_Status_ConfigFileDataError;
 800b47a:	2305      	movs	r3, #5
 800b47c:	e182      	b.n	800b784 <ConfigDataManager_init+0x438>
	}

	for (uint16_t frameNr=0; frameNr<pSelf->sConfig.numOfFrames; frameNr++){
 800b47e:	2300      	movs	r3, #0
 800b480:	81fb      	strh	r3, [r7, #14]
 800b482:	e175      	b.n	800b770 <ConfigDataManager_init+0x424>

		if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].ID) != FileReadingBuffer_Status_OK){
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b48a:	4413      	add	r3, r2
 800b48c:	89fa      	ldrh	r2, [r7, #14]
 800b48e:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b492:	fb01 f202 	mul.w	r2, r1, r2
 800b496:	3208      	adds	r2, #8
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	440a      	add	r2, r1
 800b49c:	3206      	adds	r2, #6
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f001 fb64 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <ConfigDataManager_init+0x164>
			return ConfigDataManager_Status_ConfigFileDataError;
 800b4ac:	2305      	movs	r3, #5
 800b4ae:	e169      	b.n	800b784 <ConfigDataManager_init+0x438>
		}
		if (FileReadingBuffer_readUInt8(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].DLC) != FileReadingBuffer_Status_OK){
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b4b6:	4413      	add	r3, r2
 800b4b8:	89fa      	ldrh	r2, [r7, #14]
 800b4ba:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b4be:	fb01 f202 	mul.w	r2, r1, r2
 800b4c2:	3208      	adds	r2, #8
 800b4c4:	6879      	ldr	r1, [r7, #4]
 800b4c6:	440a      	add	r2, r1
 800b4c8:	3208      	adds	r2, #8
 800b4ca:	4611      	mov	r1, r2
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	f001 fb21 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d001      	beq.n	800b4dc <ConfigDataManager_init+0x190>
			return ConfigDataManager_Status_ConfigFileDataError;
 800b4d8:	2305      	movs	r3, #5
 800b4da:	e153      	b.n	800b784 <ConfigDataManager_init+0x438>
		}
		if (FileReadingBuffer_readString(&pSelf->sReadingBuffer, pSelf->sConfig.canFrames[frameNr].moduleName, CONFIG_NAMES_LENGTH) != FileReadingBuffer_Status_OK){
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	f24a 3384 	movw	r3, #41860	; 0xa384
 800b4e2:	4413      	add	r3, r2
 800b4e4:	89fa      	ldrh	r2, [r7, #14]
 800b4e6:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b4ea:	fb01 f202 	mul.w	r2, r1, r2
 800b4ee:	3208      	adds	r2, #8
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	440a      	add	r2, r1
 800b4f4:	f102 0109 	add.w	r1, r2, #9
 800b4f8:	2215      	movs	r2, #21
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 fb8d 	bl	800cc1a <FileReadingBuffer_readString>
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d001      	beq.n	800b50a <ConfigDataManager_init+0x1be>
			return ConfigDataManager_Status_ConfigFileDataError;
 800b506:	2305      	movs	r3, #5
 800b508:	e13c      	b.n	800b784 <ConfigDataManager_init+0x438>
		}

		if ((ret = _ConfigDataManager_validateCorrectFrame(pSelf, pSelf->sConfig.canFrames[frameNr].ID, pSelf->sConfig.canFrames[frameNr].DLC)) != ConfigDataManager_Status_OK){
 800b50a:	89fb      	ldrh	r3, [r7, #14]
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b512:	fb01 f303 	mul.w	r3, r1, r3
 800b516:	4413      	add	r3, r2
 800b518:	330e      	adds	r3, #14
 800b51a:	8818      	ldrh	r0, [r3, #0]
 800b51c:	89fb      	ldrh	r3, [r7, #14]
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b524:	fb01 f303 	mul.w	r3, r1, r3
 800b528:	4413      	add	r3, r2
 800b52a:	3310      	adds	r3, #16
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	461a      	mov	r2, r3
 800b532:	4601      	mov	r1, r0
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f7ff feb3 	bl	800b2a0 <_ConfigDataManager_validateCorrectFrame>
 800b53a:	4603      	mov	r3, r0
 800b53c:	72fb      	strb	r3, [r7, #11]
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <ConfigDataManager_init+0x1fc>
			return ret;
 800b544:	7afb      	ldrb	r3, [r7, #11]
 800b546:	e11d      	b.n	800b784 <ConfigDataManager_init+0x438>
		}

		pSelf->sConfig.canFramesByID[pSelf->sConfig.canFrames[frameNr].ID] = &(pSelf->sConfig.canFrames[frameNr]);
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b550:	fb01 f303 	mul.w	r3, r1, r3
 800b554:	4413      	add	r3, r2
 800b556:	330e      	adds	r3, #14
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b562:	fb02 f303 	mul.w	r3, r2, r3
 800b566:	3308      	adds	r3, #8
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	4413      	add	r3, r2
 800b56c:	1d9a      	adds	r2, r3, #6
 800b56e:	6879      	ldr	r1, [r7, #4]
 800b570:	f242 03d2 	movw	r3, #8402	; 0x20d2
 800b574:	4403      	add	r3, r0
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	440b      	add	r3, r1
 800b57a:	609a      	str	r2, [r3, #8]

		for (uint8_t bytesCounter=0, channelNo=0; bytesCounter<pSelf->sConfig.canFrames[frameNr].DLC; channelNo++){
 800b57c:	2300      	movs	r3, #0
 800b57e:	737b      	strb	r3, [r7, #13]
 800b580:	2300      	movs	r3, #0
 800b582:	733b      	strb	r3, [r7, #12]
 800b584:	e0e4      	b.n	800b750 <ConfigDataManager_init+0x404>

			if (FileReadingBuffer_readUInt8(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].channels[channelNo].valueType) != FileReadingBuffer_Status_OK){
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f24a 3284 	movw	r2, #41860	; 0xa384
 800b58c:	441a      	add	r2, r3
 800b58e:	89f8      	ldrh	r0, [r7, #14]
 800b590:	7b39      	ldrb	r1, [r7, #12]
 800b592:	460b      	mov	r3, r1
 800b594:	00db      	lsls	r3, r3, #3
 800b596:	440b      	add	r3, r1
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b59e:	fb01 f100 	mul.w	r1, r1, r0
 800b5a2:	440b      	add	r3, r1
 800b5a4:	3320      	adds	r3, #32
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	440b      	add	r3, r1
 800b5aa:	3306      	adds	r3, #6
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	f001 fab0 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <ConfigDataManager_init+0x272>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b5ba:	2305      	movs	r3, #5
 800b5bc:	e0e2      	b.n	800b784 <ConfigDataManager_init+0x438>
			}

			if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].channels[channelNo].multiplier) != FileReadingBuffer_Status_OK){
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f24a 3284 	movw	r2, #41860	; 0xa384
 800b5c4:	441a      	add	r2, r3
 800b5c6:	89f8      	ldrh	r0, [r7, #14]
 800b5c8:	7b39      	ldrb	r1, [r7, #12]
 800b5ca:	460b      	mov	r3, r1
 800b5cc:	00db      	lsls	r3, r3, #3
 800b5ce:	440b      	add	r3, r1
 800b5d0:	00db      	lsls	r3, r3, #3
 800b5d2:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b5d6:	fb01 f100 	mul.w	r1, r1, r0
 800b5da:	440b      	add	r3, r1
 800b5dc:	3320      	adds	r3, #32
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	440b      	add	r3, r1
 800b5e2:	3308      	adds	r3, #8
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	4610      	mov	r0, r2
 800b5e8:	f001 fac1 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <ConfigDataManager_init+0x2aa>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b5f2:	2305      	movs	r3, #5
 800b5f4:	e0c6      	b.n	800b784 <ConfigDataManager_init+0x438>
			}
			if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].channels[channelNo].divider) != FileReadingBuffer_Status_OK){
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f24a 3284 	movw	r2, #41860	; 0xa384
 800b5fc:	441a      	add	r2, r3
 800b5fe:	89f8      	ldrh	r0, [r7, #14]
 800b600:	7b39      	ldrb	r1, [r7, #12]
 800b602:	460b      	mov	r3, r1
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	440b      	add	r3, r1
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b60e:	fb01 f100 	mul.w	r1, r1, r0
 800b612:	440b      	add	r3, r1
 800b614:	3320      	adds	r3, #32
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	440b      	add	r3, r1
 800b61a:	330a      	adds	r3, #10
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f001 faa5 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <ConfigDataManager_init+0x2e2>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b62a:	2305      	movs	r3, #5
 800b62c:	e0aa      	b.n	800b784 <ConfigDataManager_init+0x438>
			}
			if (FileReadingBuffer_readUInt16(&pSelf->sReadingBuffer, &pSelf->sConfig.canFrames[frameNr].channels[channelNo].offset) != FileReadingBuffer_Status_OK){
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f24a 3284 	movw	r2, #41860	; 0xa384
 800b634:	441a      	add	r2, r3
 800b636:	89f8      	ldrh	r0, [r7, #14]
 800b638:	7b39      	ldrb	r1, [r7, #12]
 800b63a:	460b      	mov	r3, r1
 800b63c:	00db      	lsls	r3, r3, #3
 800b63e:	440b      	add	r3, r1
 800b640:	00db      	lsls	r3, r3, #3
 800b642:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b646:	fb01 f100 	mul.w	r1, r1, r0
 800b64a:	440b      	add	r3, r1
 800b64c:	3320      	adds	r3, #32
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	440b      	add	r3, r1
 800b652:	330c      	adds	r3, #12
 800b654:	4619      	mov	r1, r3
 800b656:	4610      	mov	r0, r2
 800b658:	f001 fa89 	bl	800cb6e <FileReadingBuffer_readUInt16>
 800b65c:	4603      	mov	r3, r0
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d004      	beq.n	800b66c <ConfigDataManager_init+0x320>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b662:	2305      	movs	r3, #5
 800b664:	e08e      	b.n	800b784 <ConfigDataManager_init+0x438>
 800b666:	bf00      	nop
 800b668:	0801124c 	.word	0x0801124c
			}

			if (FileReadingBuffer_readString(&pSelf->sReadingBuffer, pSelf->sConfig.canFrames[frameNr].channels[channelNo].description, CONFIG_NAMES_LENGTH) != FileReadingBuffer_Status_OK){ //skip channel descritpion
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f24a 3084 	movw	r0, #41860	; 0xa384
 800b672:	4418      	add	r0, r3
 800b674:	89f9      	ldrh	r1, [r7, #14]
 800b676:	7b3a      	ldrb	r2, [r7, #12]
 800b678:	4613      	mov	r3, r2
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	4413      	add	r3, r2
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b684:	fb02 f201 	mul.w	r2, r2, r1
 800b688:	4413      	add	r3, r2
 800b68a:	3328      	adds	r3, #40	; 0x28
 800b68c:	687a      	ldr	r2, [r7, #4]
 800b68e:	4413      	add	r3, r2
 800b690:	3306      	adds	r3, #6
 800b692:	2215      	movs	r2, #21
 800b694:	4619      	mov	r1, r3
 800b696:	f001 fac0 	bl	800cc1a <FileReadingBuffer_readString>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <ConfigDataManager_init+0x358>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b6a0:	2305      	movs	r3, #5
 800b6a2:	e06f      	b.n	800b784 <ConfigDataManager_init+0x438>
			}
			if (FileReadingBuffer_readString(&pSelf->sReadingBuffer, pSelf->sConfig.canFrames[frameNr].channels[channelNo].unit, CONFIG_NAMES_LENGTH) != FileReadingBuffer_Status_OK){ //skip channel unit
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f24a 3084 	movw	r0, #41860	; 0xa384
 800b6aa:	4418      	add	r0, r3
 800b6ac:	89f9      	ldrh	r1, [r7, #14]
 800b6ae:	7b3a      	ldrb	r2, [r7, #12]
 800b6b0:	4613      	mov	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b6bc:	fb02 f201 	mul.w	r2, r2, r1
 800b6c0:	4413      	add	r3, r2
 800b6c2:	3338      	adds	r3, #56	; 0x38
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	330b      	adds	r3, #11
 800b6ca:	2215      	movs	r2, #21
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f001 faa4 	bl	800cc1a <FileReadingBuffer_readString>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <ConfigDataManager_init+0x390>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b6d8:	2305      	movs	r3, #5
 800b6da:	e053      	b.n	800b784 <ConfigDataManager_init+0x438>
			}
			if (FileReadingBuffer_readString(&pSelf->sReadingBuffer, pSelf->sConfig.canFrames[frameNr].channels[channelNo].comment, CONFIG_NAMES_LENGTH) != FileReadingBuffer_Status_OK){ //skip channel comment
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f24a 3084 	movw	r0, #41860	; 0xa384
 800b6e2:	4418      	add	r0, r3
 800b6e4:	89f9      	ldrh	r1, [r7, #14]
 800b6e6:	7b3b      	ldrb	r3, [r7, #12]
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	00db      	lsls	r3, r3, #3
 800b6ee:	4413      	add	r3, r2
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b6f6:	fb02 f201 	mul.w	r2, r2, r1
 800b6fa:	4413      	add	r3, r2
 800b6fc:	3308      	adds	r3, #8
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	4413      	add	r3, r2
 800b702:	3308      	adds	r3, #8
 800b704:	2215      	movs	r2, #21
 800b706:	4619      	mov	r1, r3
 800b708:	f001 fa87 	bl	800cc1a <FileReadingBuffer_readString>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d001      	beq.n	800b716 <ConfigDataManager_init+0x3ca>
				return ConfigDataManager_Status_ConfigFileDataError;
 800b712:	2305      	movs	r3, #5
 800b714:	e036      	b.n	800b784 <ConfigDataManager_init+0x438>
			}

			if ((pSelf->sConfig.canFrames[frameNr].channels[channelNo].valueType & CONFIG_16_BIT_TYPE_flag) == 0){
 800b716:	89f8      	ldrh	r0, [r7, #14]
 800b718:	7b3a      	ldrb	r2, [r7, #12]
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	4413      	add	r3, r2
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	f44f 7216 	mov.w	r2, #600	; 0x258
 800b728:	fb02 f200 	mul.w	r2, r2, r0
 800b72c:	4413      	add	r3, r2
 800b72e:	440b      	add	r3, r1
 800b730:	3326      	adds	r3, #38	; 0x26
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	f003 0302 	and.w	r3, r3, #2
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d103      	bne.n	800b744 <ConfigDataManager_init+0x3f8>
				bytesCounter += 1;
 800b73c:	7b7b      	ldrb	r3, [r7, #13]
 800b73e:	3301      	adds	r3, #1
 800b740:	737b      	strb	r3, [r7, #13]
 800b742:	e002      	b.n	800b74a <ConfigDataManager_init+0x3fe>
			} else {
				bytesCounter += 2;
 800b744:	7b7b      	ldrb	r3, [r7, #13]
 800b746:	3302      	adds	r3, #2
 800b748:	737b      	strb	r3, [r7, #13]
		for (uint8_t bytesCounter=0, channelNo=0; bytesCounter<pSelf->sConfig.canFrames[frameNr].DLC; channelNo++){
 800b74a:	7b3b      	ldrb	r3, [r7, #12]
 800b74c:	3301      	adds	r3, #1
 800b74e:	733b      	strb	r3, [r7, #12]
 800b750:	89fb      	ldrh	r3, [r7, #14]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	f44f 7116 	mov.w	r1, #600	; 0x258
 800b758:	fb01 f303 	mul.w	r3, r1, r3
 800b75c:	4413      	add	r3, r2
 800b75e:	3310      	adds	r3, #16
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	7b7a      	ldrb	r2, [r7, #13]
 800b764:	429a      	cmp	r2, r3
 800b766:	f4ff af0e 	bcc.w	800b586 <ConfigDataManager_init+0x23a>
	for (uint16_t frameNr=0; frameNr<pSelf->sConfig.numOfFrames; frameNr++){
 800b76a:	89fb      	ldrh	r3, [r7, #14]
 800b76c:	3301      	adds	r3, #1
 800b76e:	81fb      	strh	r3, [r7, #14]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	891b      	ldrh	r3, [r3, #8]
 800b774:	89fa      	ldrh	r2, [r7, #14]
 800b776:	429a      	cmp	r2, r3
 800b778:	f4ff ae84 	bcc.w	800b484 <ConfigDataManager_init+0x138>
			}
		}
	}

	pSelf->state = ConfigDataManager_State_Initialized;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	701a      	strb	r2, [r3, #0]

	return ConfigDataManager_Status_OK;
 800b782:	2300      	movs	r3, #0

}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <ConfigDataManager_getConfigPointer>:

ConfigDataManager_Status_TypeDef ConfigDataManager_getConfigPointer(ConfigDataManager_TypeDef* pSelf, Config_TypeDef** ppRetConfig){
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]

	if (pSelf->state != ConfigDataManager_State_Initialized){
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	2b02      	cmp	r3, #2
 800b79c:	d001      	beq.n	800b7a2 <ConfigDataManager_getConfigPointer+0x16>
		return ConfigDataManager_Status_NotInitialisedError;
 800b79e:	2309      	movs	r3, #9
 800b7a0:	e004      	b.n	800b7ac <ConfigDataManager_getConfigPointer+0x20>
	}

	*(ppRetConfig) = &(pSelf->sConfig);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	1d1a      	adds	r2, r3, #4
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	601a      	str	r2, [r3, #0]

	return ConfigDataManager_Status_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <DataSaver_init>:
#include "stdio.h"
#include "string.h"

static DataSaver_Status_TypeDef DataSaver_saveHeader(DataSaver_TypeDef* pSelf, DateTime_TypeDef dateTime);

DataSaver_Status_TypeDef DataSaver_init(DataSaver_TypeDef* pSelf, Config_TypeDef* pConfig, FileSystemWrapper_TypeDef* pFileSystemHandler){
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]

	if (pSelf->state != DataSaver_State_UnInitialized){
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <DataSaver_init+0x1a>
		return DataSaver_Status_Error;
 800b7ce:	2307      	movs	r3, #7
 800b7d0:	e00b      	b.n	800b7ea <DataSaver_init+0x32>
	}

	pSelf->pConfig				= pConfig;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	pSelf->pFileSystemHandler	= pFileSystemHandler;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	601a      	str	r2, [r3, #0]

	pSelf->state				= DataSaver_State_Initialized;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	return DataSaver_Status_OK;
 800b7e8:	2300      	movs	r3, #0

}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f4:	4770      	bx	lr
	...

0800b7f8 <DataSaver_startLogging>:

DataSaver_Status_TypeDef DataSaver_startLogging(DataSaver_TypeDef* pSelf, DateTime_TypeDef dateTime){
 800b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7fa:	b097      	sub	sp, #92	; 0x5c
 800b7fc:	af04      	add	r7, sp, #16
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	4638      	mov	r0, r7
 800b802:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if (pSelf->state == DataSaver_State_OpenedFile){
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d101      	bne.n	800b814 <DataSaver_startLogging+0x1c>
		return DataSaver_Status_AlreadyOpenedFileError;
 800b810:	2305      	movs	r3, #5
 800b812:	e080      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	if (pSelf->state != DataSaver_State_Initialized){
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d001      	beq.n	800b822 <DataSaver_startLogging+0x2a>
		return DataSaver_Status_UnInitializedError;
 800b81e:	2304      	movs	r3, #4
 800b820:	e079      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	//prepare name of file
	uint16_t offset = 0;
 800b822:	2300      	movs	r3, #0
 800b824:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	char filename[LOG_FILENAME_MAX_LENGTH];
	memset(filename, 0, LOG_FILENAME_MAX_LENGTH);
 800b828:	f107 0310 	add.w	r3, r7, #16
 800b82c:	2232      	movs	r2, #50	; 0x32
 800b82e:	2100      	movs	r1, #0
 800b830:	4618      	mov	r0, r3
 800b832:	f005 f818 	bl	8010866 <memset>
	strcpy(filename, LOG_FILE_PREFIX);
 800b836:	f107 0310 	add.w	r3, r7, #16
 800b83a:	4a39      	ldr	r2, [pc, #228]	; (800b920 <DataSaver_startLogging+0x128>)
 800b83c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b840:	e883 0003 	stmia.w	r3, {r0, r1}
	offset += strlen(LOG_FILE_PREFIX);
 800b844:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b848:	3307      	adds	r3, #7
 800b84a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	offset += sprintf(filename+offset, "_%04d-%02d-%02d_%02d_%02d_%02d.", dateTime.year, dateTime.month, dateTime.day, dateTime.hour, dateTime.minute, dateTime.second);
 800b84e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b852:	f107 0210 	add.w	r2, r7, #16
 800b856:	18d0      	adds	r0, r2, r3
 800b858:	883b      	ldrh	r3, [r7, #0]
 800b85a:	461d      	mov	r5, r3
 800b85c:	78bb      	ldrb	r3, [r7, #2]
 800b85e:	461e      	mov	r6, r3
 800b860:	78fb      	ldrb	r3, [r7, #3]
 800b862:	793a      	ldrb	r2, [r7, #4]
 800b864:	7979      	ldrb	r1, [r7, #5]
 800b866:	79bc      	ldrb	r4, [r7, #6]
 800b868:	9403      	str	r4, [sp, #12]
 800b86a:	9102      	str	r1, [sp, #8]
 800b86c:	9201      	str	r2, [sp, #4]
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	4633      	mov	r3, r6
 800b872:	462a      	mov	r2, r5
 800b874:	492b      	ldr	r1, [pc, #172]	; (800b924 <DataSaver_startLogging+0x12c>)
 800b876:	f004 ffff 	bl	8010878 <siprintf>
 800b87a:	4603      	mov	r3, r0
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b882:	4413      	add	r3, r2
 800b884:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	strcpy(filename+offset, LOG_FILE_EXTENSION);
 800b888:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b88c:	f107 0210 	add.w	r2, r7, #16
 800b890:	4413      	add	r3, r2
 800b892:	4a25      	ldr	r2, [pc, #148]	; (800b928 <DataSaver_startLogging+0x130>)
 800b894:	6810      	ldr	r0, [r2, #0]
 800b896:	6018      	str	r0, [r3, #0]
 800b898:	8891      	ldrh	r1, [r2, #4]
 800b89a:	7992      	ldrb	r2, [r2, #6]
 800b89c:	8099      	strh	r1, [r3, #4]
 800b89e:	719a      	strb	r2, [r3, #6]
	offset += strlen(LOG_FILE_EXTENSION);
 800b8a0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b8a4:	3306      	adds	r3, #6
 800b8a6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

	if (offset > LOG_FILENAME_MAX_LENGTH){
 800b8aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b8ae:	2b32      	cmp	r3, #50	; 0x32
 800b8b0:	d901      	bls.n	800b8b6 <DataSaver_startLogging+0xbe>
		return DataSaver_Status_WrongNameError;
 800b8b2:	2306      	movs	r3, #6
 800b8b4:	e02f      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	if (FileSystemWrapper_open(pSelf->pFileSystemHandler, &pSelf->sDataFile, filename) != FileSystemWrapper_Status_OK){
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	f107 0210 	add.w	r2, r7, #16
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f001 fa68 	bl	800cd98 <FileSystemWrapper_open>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <DataSaver_startLogging+0xda>
		return DataSaver_Status_FileNotOpenedError;
 800b8ce:	2302      	movs	r3, #2
 800b8d0:	e021      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	if (FileWritingBuffer_init(&pSelf->sWritingBuffer, &pSelf->sDataFile) != FileWritingBuffer_Status_OK){
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	3304      	adds	r3, #4
 800b8dc:	4619      	mov	r1, r3
 800b8de:	4610      	mov	r0, r2
 800b8e0:	f001 fb16 	bl	800cf10 <FileWritingBuffer_init>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <DataSaver_startLogging+0xf6>
		return DataSaver_Status_FileNotOpenedError;
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e013      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	DataSaver_Status_TypeDef status;

	if((status = DataSaver_saveHeader(pSelf, dateTime)) != DataSaver_Status_OK){
 800b8ee:	463b      	mov	r3, r7
 800b8f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f000 f9a6 	bl	800bc44 <DataSaver_saveHeader>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 800b8fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b902:	2b00      	cmp	r3, #0
 800b904:	d002      	beq.n	800b90c <DataSaver_startLogging+0x114>
		return status;
 800b906:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800b90a:	e004      	b.n	800b916 <DataSaver_startLogging+0x11e>
	}

	pSelf->state = DataSaver_State_OpenedFile;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2202      	movs	r2, #2
 800b910:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	return DataSaver_Status_OK;
 800b914:	2300      	movs	r3, #0

}
 800b916:	4618      	mov	r0, r3
 800b918:	374c      	adds	r7, #76	; 0x4c
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91e:	bf00      	nop
 800b920:	0801125c 	.word	0x0801125c
 800b924:	08011264 	.word	0x08011264
 800b928:	08011284 	.word	0x08011284

0800b92c <DataSaver_stopLogging>:

DataSaver_Status_TypeDef DataSaver_stopLogging(DataSaver_TypeDef* pSelf){
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]

	if (pSelf->state != DataSaver_State_OpenedFile){
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d001      	beq.n	800b942 <DataSaver_stopLogging+0x16>
		return DataSaver_Status_FileNotOpenedError;
 800b93e:	2302      	movs	r3, #2
 800b940:	e022      	b.n	800b988 <DataSaver_stopLogging+0x5c>
	}

	if (FileWritingBuffer_writeToFileSystem(&pSelf->sWritingBuffer) != FileWritingBuffer_Status_OK){
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3338      	adds	r3, #56	; 0x38
 800b946:	4618      	mov	r0, r3
 800b948:	f001 fc26 	bl	800d198 <FileWritingBuffer_writeToFileSystem>
 800b94c:	4603      	mov	r3, r0
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d001      	beq.n	800b956 <DataSaver_stopLogging+0x2a>
		return DataSaver_Status_Error;
 800b952:	2307      	movs	r3, #7
 800b954:	e018      	b.n	800b988 <DataSaver_stopLogging+0x5c>
	}
	if (FileWritingBuffer_deInit(&pSelf->sWritingBuffer) != FileWritingBuffer_Status_OK){
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3338      	adds	r3, #56	; 0x38
 800b95a:	4618      	mov	r0, r3
 800b95c:	f001 fafa 	bl	800cf54 <FileWritingBuffer_deInit>
 800b960:	4603      	mov	r3, r0
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <DataSaver_stopLogging+0x3e>
		return DataSaver_Status_Error;
 800b966:	2307      	movs	r3, #7
 800b968:	e00e      	b.n	800b988 <DataSaver_stopLogging+0x5c>
	}

	if (FileSystemWrapper_close(&pSelf->sDataFile) != FileSystemWrapper_Status_OK){
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	3304      	adds	r3, #4
 800b96e:	4618      	mov	r0, r3
 800b970:	f001 fa94 	bl	800ce9c <FileSystemWrapper_close>
 800b974:	4603      	mov	r3, r0
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <DataSaver_stopLogging+0x52>
		return DataSaver_Status_Error;
 800b97a:	2307      	movs	r3, #7
 800b97c:	e004      	b.n	800b988 <DataSaver_stopLogging+0x5c>
	}

	pSelf->state = DataSaver_State_Initialized;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	return DataSaver_Status_OK;
 800b986:	2300      	movs	r3, #0

}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <DataSaver_writeCANData>:

DataSaver_Status_TypeDef DataSaver_writeCANData(DataSaver_TypeDef* pSelf, CANData_TypeDef* pData){
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]

	if (pSelf->state != DataSaver_State_OpenedFile){
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800b9a0:	2b02      	cmp	r3, #2
 800b9a2:	d001      	beq.n	800b9a8 <DataSaver_writeCANData+0x18>
		return DataSaver_Status_FileNotOpenedError;
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	e040      	b.n	800ba2a <DataSaver_writeCANData+0x9a>
	}

	if (FileWritingBuffer_writeUInt32(&pSelf->sWritingBuffer, pData->msTime) != FileWritingBuffer_Status_OK){
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	f001 fb4f 	bl	800d058 <FileWritingBuffer_writeUInt32>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <DataSaver_writeCANData+0x34>
		return DataSaver_Status_Error;
 800b9c0:	2307      	movs	r3, #7
 800b9c2:	e032      	b.n	800ba2a <DataSaver_writeCANData+0x9a>
	}
	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pData->ID) != FileWritingBuffer_Status_OK){
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	881b      	ldrh	r3, [r3, #0]
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	4610      	mov	r0, r2
 800b9d2:	f001 fb14 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <DataSaver_writeCANData+0x50>
		return DataSaver_Status_Error;
 800b9dc:	2307      	movs	r3, #7
 800b9de:	e024      	b.n	800ba2a <DataSaver_writeCANData+0x9a>
	}

	for (uint8_t i=0; i<pData->DLC; i++){
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
 800b9e4:	e011      	b.n	800ba0a <DataSaver_writeCANData+0x7a>
		if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->Data[i]) != FileWritingBuffer_Status_OK){
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	7a1b      	ldrb	r3, [r3, #8]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	f001 fad2 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d001      	beq.n	800ba04 <DataSaver_writeCANData+0x74>
			return DataSaver_Status_Error;
 800ba00:	2307      	movs	r3, #7
 800ba02:	e012      	b.n	800ba2a <DataSaver_writeCANData+0x9a>
	for (uint8_t i=0; i<pData->DLC; i++){
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
 800ba06:	3301      	adds	r3, #1
 800ba08:	73fb      	strb	r3, [r7, #15]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	789b      	ldrb	r3, [r3, #2]
 800ba0e:	7bfa      	ldrb	r2, [r7, #15]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d3e8      	bcc.n	800b9e6 <DataSaver_writeCANData+0x56>
		}
	}

	if (FileWritingBuffer_writeToFileSystem(&pSelf->sWritingBuffer) != FileWritingBuffer_Status_OK){
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	3338      	adds	r3, #56	; 0x38
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f001 fbbd 	bl	800d198 <FileWritingBuffer_writeToFileSystem>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <DataSaver_writeCANData+0x98>
		return DataSaver_Status_Error;
 800ba24:	2307      	movs	r3, #7
 800ba26:	e000      	b.n	800ba2a <DataSaver_writeCANData+0x9a>
	}

	return DataSaver_Status_OK;
 800ba28:	2300      	movs	r3, #0
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <DataSaver_writeGPSData>:

DataSaver_Status_TypeDef DataSaver_writeGPSData(DataSaver_TypeDef* pSelf, GPSData_TypeDef* pData){
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]

	if (pSelf->state != DataSaver_State_OpenedFile){
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800ba42:	2b02      	cmp	r3, #2
 800ba44:	d001      	beq.n	800ba4a <DataSaver_writeGPSData+0x18>
		return DataSaver_Status_FileNotOpenedError;
 800ba46:	2302      	movs	r3, #2
 800ba48:	e0f8      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}

	if (FileWritingBuffer_writeUInt32(&pSelf->sWritingBuffer, pData->msTime) != FileWritingBuffer_Status_OK){
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4619      	mov	r1, r3
 800ba56:	4610      	mov	r0, r2
 800ba58:	f001 fafe 	bl	800d058 <FileWritingBuffer_writeUInt32>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <DataSaver_writeGPSData+0x34>
		return DataSaver_Status_Error;
 800ba62:	2307      	movs	r3, #7
 800ba64:	e0ea      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, CONFIG_GPS_FRAME_ID) != FileWritingBuffer_Status_OK){
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3338      	adds	r3, #56	; 0x38
 800ba6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f001 fac5 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d001      	beq.n	800ba7e <DataSaver_writeGPSData+0x4c>
		return DataSaver_Status_Error;
 800ba7a:	2307      	movs	r3, #7
 800ba7c:	e0de      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}

	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pData->gpsDateTime.year) != FileWritingBuffer_Status_OK){
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	889b      	ldrh	r3, [r3, #4]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4610      	mov	r0, r2
 800ba8c:	f001 fab7 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <DataSaver_writeGPSData+0x68>
		return DataSaver_Status_Error;
 800ba96:	2307      	movs	r3, #7
 800ba98:	e0d0      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->gpsDateTime.month) != FileWritingBuffer_Status_OK){
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	799b      	ldrb	r3, [r3, #6]
 800baa4:	4619      	mov	r1, r3
 800baa6:	4610      	mov	r0, r2
 800baa8:	f001 fa79 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800baac:	4603      	mov	r3, r0
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <DataSaver_writeGPSData+0x84>
		return DataSaver_Status_Error;
 800bab2:	2307      	movs	r3, #7
 800bab4:	e0c2      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->gpsDateTime.day) != FileWritingBuffer_Status_OK){
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	79db      	ldrb	r3, [r3, #7]
 800bac0:	4619      	mov	r1, r3
 800bac2:	4610      	mov	r0, r2
 800bac4:	f001 fa6b 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <DataSaver_writeGPSData+0xa0>
		return DataSaver_Status_Error;
 800bace:	2307      	movs	r3, #7
 800bad0:	e0b4      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->gpsDateTime.hour) != FileWritingBuffer_Status_OK){
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	7a1b      	ldrb	r3, [r3, #8]
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f001 fa5d 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <DataSaver_writeGPSData+0xbc>
		return DataSaver_Status_Error;
 800baea:	2307      	movs	r3, #7
 800baec:	e0a6      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->gpsDateTime.minute) != FileWritingBuffer_Status_OK){
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	7a5b      	ldrb	r3, [r3, #9]
 800baf8:	4619      	mov	r1, r3
 800bafa:	4610      	mov	r0, r2
 800bafc:	f001 fa4f 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <DataSaver_writeGPSData+0xd8>
		return DataSaver_Status_Error;
 800bb06:	2307      	movs	r3, #7
 800bb08:	e098      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->gpsDateTime.second) != FileWritingBuffer_Status_OK){
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	7a9b      	ldrb	r3, [r3, #10]
 800bb14:	4619      	mov	r1, r3
 800bb16:	4610      	mov	r0, r2
 800bb18:	f001 fa41 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d001      	beq.n	800bb26 <DataSaver_writeGPSData+0xf4>
		return DataSaver_Status_Error;
 800bb22:	2307      	movs	r3, #7
 800bb24:	e08a      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}

	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->longitude) != FileWritingBuffer_Status_OK){
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	3310      	adds	r3, #16
 800bb30:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bb34:	f001 fb1f 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <DataSaver_writeGPSData+0x110>
		return DataSaver_Status_Error;
 800bb3e:	2307      	movs	r3, #7
 800bb40:	e07c      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->latitude) != FileWritingBuffer_Status_OK){
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	3318      	adds	r3, #24
 800bb4c:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bb50:	f001 fb11 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <DataSaver_writeGPSData+0x12c>
		return DataSaver_Status_Error;
 800bb5a:	2307      	movs	r3, #7
 800bb5c:	e06e      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->nSatellites) != FileWritingBuffer_Status_OK){
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	f001 fa16 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <DataSaver_writeGPSData+0x14a>
		return DataSaver_Status_Error;
 800bb78:	2307      	movs	r3, #7
 800bb7a:	e05f      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->altitude) != FileWritingBuffer_Status_OK){
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	3324      	adds	r3, #36	; 0x24
 800bb86:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bb8a:	f001 faf4 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d001      	beq.n	800bb98 <DataSaver_writeGPSData+0x166>
		return DataSaver_Status_Error;
 800bb94:	2307      	movs	r3, #7
 800bb96:	e051      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->speed) != FileWritingBuffer_Status_OK){
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	332c      	adds	r3, #44	; 0x2c
 800bba2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bba6:	f001 fae6 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <DataSaver_writeGPSData+0x182>
		return DataSaver_Status_Error;
 800bbb0:	2307      	movs	r3, #7
 800bbb2:	e043      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->trackAngle) != FileWritingBuffer_Status_OK){
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	3334      	adds	r3, #52	; 0x34
 800bbbe:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bbc2:	f001 fad8 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d001      	beq.n	800bbd0 <DataSaver_writeGPSData+0x19e>
		return DataSaver_Status_Error;
 800bbcc:	2307      	movs	r3, #7
 800bbce:	e035      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pData->fixType) != FileWritingBuffer_Status_OK){
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4610      	mov	r0, r2
 800bbe0:	f001 f9dd 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d001      	beq.n	800bbee <DataSaver_writeGPSData+0x1bc>
		return DataSaver_Status_Error;
 800bbea:	2307      	movs	r3, #7
 800bbec:	e026      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->horizontalPrecision) != FileWritingBuffer_Status_OK){
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	3340      	adds	r3, #64	; 0x40
 800bbf8:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bbfc:	f001 fabb 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d001      	beq.n	800bc0a <DataSaver_writeGPSData+0x1d8>
		return DataSaver_Status_Error;
 800bc06:	2307      	movs	r3, #7
 800bc08:	e018      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}
	if (FileWritingBuffer_writeFixedPoint32(&pSelf->sWritingBuffer, pData->verticalPrecision) != FileWritingBuffer_Status_OK){
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	3348      	adds	r3, #72	; 0x48
 800bc14:	e893 0006 	ldmia.w	r3, {r1, r2}
 800bc18:	f001 faad 	bl	800d176 <FileWritingBuffer_writeFixedPoint32>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d001      	beq.n	800bc26 <DataSaver_writeGPSData+0x1f4>
		return DataSaver_Status_Error;
 800bc22:	2307      	movs	r3, #7
 800bc24:	e00a      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}

	if (FileWritingBuffer_writeToFileSystem(&pSelf->sWritingBuffer) != FileWritingBuffer_Status_OK){
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3338      	adds	r3, #56	; 0x38
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f001 fab4 	bl	800d198 <FileWritingBuffer_writeToFileSystem>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <DataSaver_writeGPSData+0x208>
		return DataSaver_Status_Error;
 800bc36:	2307      	movs	r3, #7
 800bc38:	e000      	b.n	800bc3c <DataSaver_writeGPSData+0x20a>
	}

	return DataSaver_Status_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <DataSaver_saveHeader>:

static DataSaver_Status_TypeDef DataSaver_saveHeader(DataSaver_TypeDef* pSelf, DateTime_TypeDef dateTime){
 800bc44:	b590      	push	{r4, r7, lr}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, LOG_FILE_VERSION) != FileWritingBuffer_Status_OK){
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3338      	adds	r3, #56	; 0x38
 800bc56:	2100      	movs	r1, #0
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f001 f9d0 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d001      	beq.n	800bc68 <DataSaver_saveHeader+0x24>
		return DataSaver_Status_Error;
 800bc64:	2307      	movs	r3, #7
 800bc66:	e1e0      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, LOG_FILE_SUBVERSION) != FileWritingBuffer_Status_OK){
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	3338      	adds	r3, #56	; 0x38
 800bc6c:	2103      	movs	r1, #3
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 f9c5 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d001      	beq.n	800bc7e <DataSaver_saveHeader+0x3a>
		return DataSaver_Status_Error;
 800bc7a:	2307      	movs	r3, #7
 800bc7c:	e1d5      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->canSpeed) != FileWritingBuffer_Status_OK){
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bc8a:	88db      	ldrh	r3, [r3, #6]
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f001 f9b5 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <DataSaver_saveHeader+0x5a>
		return DataSaver_Status_Error;
 800bc9a:	2307      	movs	r3, #7
 800bc9c:	e1c5      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pSelf->pConfig->gpsFrequency) != FileWritingBuffer_Status_OK){
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bcaa:	7a1b      	ldrb	r3, [r3, #8]
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f001 f975 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <DataSaver_saveHeader+0x7a>
		return DataSaver_Status_Error;
 800bcba:	2307      	movs	r3, #7
 800bcbc:	e1b5      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->numOfFrames) != FileWritingBuffer_Status_OK){
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bcca:	889b      	ldrh	r3, [r3, #4]
 800bccc:	4619      	mov	r1, r3
 800bcce:	4610      	mov	r0, r2
 800bcd0:	f001 f995 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <DataSaver_saveHeader+0x9a>
		return DataSaver_Status_Error;
 800bcda:	2307      	movs	r3, #7
 800bcdc:	e1a5      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}

	for (uint16_t frameNr=0; frameNr < pSelf->pConfig->numOfFrames; frameNr++){
 800bcde:	2300      	movs	r3, #0
 800bce0:	82fb      	strh	r3, [r7, #22]
 800bce2:	e147      	b.n	800bf74 <DataSaver_saveHeader+0x330>

		if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].ID) != FileWritingBuffer_Status_OK){
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bcf0:	8afb      	ldrh	r3, [r7, #22]
 800bcf2:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bcf6:	fb01 f303 	mul.w	r3, r1, r3
 800bcfa:	4413      	add	r3, r2
 800bcfc:	330a      	adds	r3, #10
 800bcfe:	881b      	ldrh	r3, [r3, #0]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f001 f97c 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <DataSaver_saveHeader+0xcc>
			return DataSaver_Status_Error;
 800bd0c:	2307      	movs	r3, #7
 800bd0e:	e18c      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
		}

		if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].DLC) != FileWritingBuffer_Status_OK){
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bd1c:	8afb      	ldrh	r3, [r7, #22]
 800bd1e:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bd22:	fb01 f303 	mul.w	r3, r1, r3
 800bd26:	4413      	add	r3, r2
 800bd28:	330c      	adds	r3, #12
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	f001 f936 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bd32:	4603      	mov	r3, r0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d001      	beq.n	800bd3c <DataSaver_saveHeader+0xf8>
			return DataSaver_Status_Error;
 800bd38:	2307      	movs	r3, #7
 800bd3a:	e176      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
		}

		if (FileWritingBuffer_writeString(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].moduleName, CONFIG_NAMES_LENGTH) != FileWritingBuffer_Status_OK){
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bd48:	8afb      	ldrh	r3, [r7, #22]
 800bd4a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bd4e:	fb01 f303 	mul.w	r3, r1, r3
 800bd52:	3308      	adds	r3, #8
 800bd54:	4413      	add	r3, r2
 800bd56:	3305      	adds	r3, #5
 800bd58:	2215      	movs	r2, #21
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	f001 f9e0 	bl	800d120 <FileWritingBuffer_writeString>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <DataSaver_saveHeader+0x126>
			return DataSaver_Status_Error;
 800bd66:	2307      	movs	r3, #7
 800bd68:	e15f      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
		}

		for (uint8_t bytesCounter=0, channelNo=0; bytesCounter<pSelf->pConfig->canFrames[frameNr].DLC; channelNo++){
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	757b      	strb	r3, [r7, #21]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	753b      	strb	r3, [r7, #20]
 800bd72:	e0ed      	b.n	800bf50 <DataSaver_saveHeader+0x30c>

			if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].valueType) != FileWritingBuffer_Status_OK){
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bd80:	8af8      	ldrh	r0, [r7, #22]
 800bd82:	7d3a      	ldrb	r2, [r7, #20]
 800bd84:	4613      	mov	r3, r2
 800bd86:	00db      	lsls	r3, r3, #3
 800bd88:	4413      	add	r3, r2
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bd90:	fb02 f200 	mul.w	r2, r2, r0
 800bd94:	4413      	add	r3, r2
 800bd96:	440b      	add	r3, r1
 800bd98:	3322      	adds	r3, #34	; 0x22
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f001 f8fd 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <DataSaver_saveHeader+0x16a>
				return DataSaver_Status_Error;
 800bdaa:	2307      	movs	r3, #7
 800bdac:	e13d      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}
			if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].multiplier) != FileWritingBuffer_Status_OK){
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bdba:	8af8      	ldrh	r0, [r7, #22]
 800bdbc:	7d3a      	ldrb	r2, [r7, #20]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	00db      	lsls	r3, r3, #3
 800bdc2:	4413      	add	r3, r2
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bdca:	fb02 f200 	mul.w	r2, r2, r0
 800bdce:	4413      	add	r3, r2
 800bdd0:	440b      	add	r3, r1
 800bdd2:	3324      	adds	r3, #36	; 0x24
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	4620      	mov	r0, r4
 800bdda:	f001 f910 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <DataSaver_saveHeader+0x1a4>
				return DataSaver_Status_Error;
 800bde4:	2307      	movs	r3, #7
 800bde6:	e120      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}
			if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].divider) != FileWritingBuffer_Status_OK){
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bdf4:	8af8      	ldrh	r0, [r7, #22]
 800bdf6:	7d3a      	ldrb	r2, [r7, #20]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	f44f 7216 	mov.w	r2, #600	; 0x258
 800be04:	fb02 f200 	mul.w	r2, r2, r0
 800be08:	4413      	add	r3, r2
 800be0a:	440b      	add	r3, r1
 800be0c:	3326      	adds	r3, #38	; 0x26
 800be0e:	881b      	ldrh	r3, [r3, #0]
 800be10:	4619      	mov	r1, r3
 800be12:	4620      	mov	r0, r4
 800be14:	f001 f8f3 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800be18:	4603      	mov	r3, r0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <DataSaver_saveHeader+0x1de>
				return DataSaver_Status_Error;
 800be1e:	2307      	movs	r3, #7
 800be20:	e103      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}
			if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].offset) != FileWritingBuffer_Status_OK){
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800be2e:	8af8      	ldrh	r0, [r7, #22]
 800be30:	7d3a      	ldrb	r2, [r7, #20]
 800be32:	4613      	mov	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	4413      	add	r3, r2
 800be38:	00db      	lsls	r3, r3, #3
 800be3a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800be3e:	fb02 f200 	mul.w	r2, r2, r0
 800be42:	4413      	add	r3, r2
 800be44:	440b      	add	r3, r1
 800be46:	3328      	adds	r3, #40	; 0x28
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	4619      	mov	r1, r3
 800be4c:	4620      	mov	r0, r4
 800be4e:	f001 f8d6 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d001      	beq.n	800be5c <DataSaver_saveHeader+0x218>
				return DataSaver_Status_Error;
 800be58:	2307      	movs	r3, #7
 800be5a:	e0e6      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}

			if (FileWritingBuffer_writeString(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].description, CONFIG_NAMES_LENGTH) != FileWritingBuffer_Status_OK){
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800be68:	8af8      	ldrh	r0, [r7, #22]
 800be6a:	7d3a      	ldrb	r2, [r7, #20]
 800be6c:	4613      	mov	r3, r2
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	4413      	add	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	f44f 7216 	mov.w	r2, #600	; 0x258
 800be78:	fb02 f200 	mul.w	r2, r2, r0
 800be7c:	4413      	add	r3, r2
 800be7e:	3328      	adds	r3, #40	; 0x28
 800be80:	440b      	add	r3, r1
 800be82:	3302      	adds	r3, #2
 800be84:	2215      	movs	r2, #21
 800be86:	4619      	mov	r1, r3
 800be88:	4620      	mov	r0, r4
 800be8a:	f001 f949 	bl	800d120 <FileWritingBuffer_writeString>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d001      	beq.n	800be98 <DataSaver_saveHeader+0x254>
				return DataSaver_Status_Error;
 800be94:	2307      	movs	r3, #7
 800be96:	e0c8      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}
			if (FileWritingBuffer_writeString(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].unit, CONFIG_NAMES_LENGTH) != FileWritingBuffer_Status_OK){
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bea4:	8af8      	ldrh	r0, [r7, #22]
 800bea6:	7d3a      	ldrb	r2, [r7, #20]
 800bea8:	4613      	mov	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	4413      	add	r3, r2
 800beae:	00db      	lsls	r3, r3, #3
 800beb0:	f44f 7216 	mov.w	r2, #600	; 0x258
 800beb4:	fb02 f200 	mul.w	r2, r2, r0
 800beb8:	4413      	add	r3, r2
 800beba:	3338      	adds	r3, #56	; 0x38
 800bebc:	440b      	add	r3, r1
 800bebe:	3307      	adds	r3, #7
 800bec0:	2215      	movs	r2, #21
 800bec2:	4619      	mov	r1, r3
 800bec4:	4620      	mov	r0, r4
 800bec6:	f001 f92b 	bl	800d120 <FileWritingBuffer_writeString>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d001      	beq.n	800bed4 <DataSaver_saveHeader+0x290>
				return DataSaver_Status_Error;
 800bed0:	2307      	movs	r3, #7
 800bed2:	e0aa      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}
			if (FileWritingBuffer_writeString(&pSelf->sWritingBuffer, pSelf->pConfig->canFrames[frameNr].channels[channelNo].comment, CONFIG_NAMES_LENGTH) != FileWritingBuffer_Status_OK){
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bee0:	8af8      	ldrh	r0, [r7, #22]
 800bee2:	7d3b      	ldrb	r3, [r7, #20]
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	4613      	mov	r3, r2
 800bee8:	00db      	lsls	r3, r3, #3
 800beea:	4413      	add	r3, r2
 800beec:	00db      	lsls	r3, r3, #3
 800beee:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bef2:	fb02 f200 	mul.w	r2, r2, r0
 800bef6:	4413      	add	r3, r2
 800bef8:	3308      	adds	r3, #8
 800befa:	440b      	add	r3, r1
 800befc:	3304      	adds	r3, #4
 800befe:	2215      	movs	r2, #21
 800bf00:	4619      	mov	r1, r3
 800bf02:	4620      	mov	r0, r4
 800bf04:	f001 f90c 	bl	800d120 <FileWritingBuffer_writeString>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <DataSaver_saveHeader+0x2ce>
				return DataSaver_Status_Error;
 800bf0e:	2307      	movs	r3, #7
 800bf10:	e08b      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
			}


			if ((pSelf->pConfig->canFrames[frameNr].channels[channelNo].valueType & CONFIG_16_BIT_TYPE_flag) == 0){
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800bf18:	8af8      	ldrh	r0, [r7, #22]
 800bf1a:	7d3a      	ldrb	r2, [r7, #20]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	4413      	add	r3, r2
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	f44f 7216 	mov.w	r2, #600	; 0x258
 800bf28:	fb02 f200 	mul.w	r2, r2, r0
 800bf2c:	4413      	add	r3, r2
 800bf2e:	440b      	add	r3, r1
 800bf30:	3322      	adds	r3, #34	; 0x22
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d103      	bne.n	800bf44 <DataSaver_saveHeader+0x300>
				bytesCounter += 1;
 800bf3c:	7d7b      	ldrb	r3, [r7, #21]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	757b      	strb	r3, [r7, #21]
 800bf42:	e002      	b.n	800bf4a <DataSaver_saveHeader+0x306>
			} else {
				bytesCounter += 2;
 800bf44:	7d7b      	ldrb	r3, [r7, #21]
 800bf46:	3302      	adds	r3, #2
 800bf48:	757b      	strb	r3, [r7, #21]
		for (uint8_t bytesCounter=0, channelNo=0; bytesCounter<pSelf->pConfig->canFrames[frameNr].DLC; channelNo++){
 800bf4a:	7d3b      	ldrb	r3, [r7, #20]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	753b      	strb	r3, [r7, #20]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 800bf56:	8afb      	ldrh	r3, [r7, #22]
 800bf58:	f44f 7116 	mov.w	r1, #600	; 0x258
 800bf5c:	fb01 f303 	mul.w	r3, r1, r3
 800bf60:	4413      	add	r3, r2
 800bf62:	330c      	adds	r3, #12
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	7d7a      	ldrb	r2, [r7, #21]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	f4ff af03 	bcc.w	800bd74 <DataSaver_saveHeader+0x130>
	for (uint16_t frameNr=0; frameNr < pSelf->pConfig->numOfFrames; frameNr++){
 800bf6e:	8afb      	ldrh	r3, [r7, #22]
 800bf70:	3301      	adds	r3, #1
 800bf72:	82fb      	strh	r3, [r7, #22]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800bf7a:	889b      	ldrh	r3, [r3, #4]
 800bf7c:	8afa      	ldrh	r2, [r7, #22]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	f4ff aeb0 	bcc.w	800bce4 <DataSaver_saveHeader+0xa0>
			}
		}
	}

	if (FileWritingBuffer_writeUInt16(&pSelf->sWritingBuffer, dateTime.year) != FileWritingBuffer_Status_OK){
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	3338      	adds	r3, #56	; 0x38
 800bf88:	883a      	ldrh	r2, [r7, #0]
 800bf8a:	4611      	mov	r1, r2
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f001 f836 	bl	800cffe <FileWritingBuffer_writeUInt16>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <DataSaver_saveHeader+0x358>
		return DataSaver_Status_Error;
 800bf98:	2307      	movs	r3, #7
 800bf9a:	e046      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, dateTime.month) != FileWritingBuffer_Status_OK){
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3338      	adds	r3, #56	; 0x38
 800bfa0:	78ba      	ldrb	r2, [r7, #2]
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 fffa 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <DataSaver_saveHeader+0x370>
		return DataSaver_Status_Error;
 800bfb0:	2307      	movs	r3, #7
 800bfb2:	e03a      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, dateTime.day) != FileWritingBuffer_Status_OK){
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	3338      	adds	r3, #56	; 0x38
 800bfb8:	78fa      	ldrb	r2, [r7, #3]
 800bfba:	4611      	mov	r1, r2
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 ffee 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d001      	beq.n	800bfcc <DataSaver_saveHeader+0x388>
		return DataSaver_Status_Error;
 800bfc8:	2307      	movs	r3, #7
 800bfca:	e02e      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, dateTime.hour) != FileWritingBuffer_Status_OK){
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3338      	adds	r3, #56	; 0x38
 800bfd0:	793a      	ldrb	r2, [r7, #4]
 800bfd2:	4611      	mov	r1, r2
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f000 ffe2 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <DataSaver_saveHeader+0x3a0>
		return DataSaver_Status_Error;
 800bfe0:	2307      	movs	r3, #7
 800bfe2:	e022      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, dateTime.minute) != FileWritingBuffer_Status_OK){
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	3338      	adds	r3, #56	; 0x38
 800bfe8:	797a      	ldrb	r2, [r7, #5]
 800bfea:	4611      	mov	r1, r2
 800bfec:	4618      	mov	r0, r3
 800bfee:	f000 ffd6 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800bff2:	4603      	mov	r3, r0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <DataSaver_saveHeader+0x3b8>
		return DataSaver_Status_Error;
 800bff8:	2307      	movs	r3, #7
 800bffa:	e016      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeUInt8(&pSelf->sWritingBuffer, dateTime.second) != FileWritingBuffer_Status_OK){
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	3338      	adds	r3, #56	; 0x38
 800c000:	79ba      	ldrb	r2, [r7, #6]
 800c002:	4611      	mov	r1, r2
 800c004:	4618      	mov	r0, r3
 800c006:	f000 ffca 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <DataSaver_saveHeader+0x3d0>
		return DataSaver_Status_Error;
 800c010:	2307      	movs	r3, #7
 800c012:	e00a      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}
	if (FileWritingBuffer_writeToFileSystem(&pSelf->sWritingBuffer) != FileWritingBuffer_Status_OK){
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	3338      	adds	r3, #56	; 0x38
 800c018:	4618      	mov	r0, r3
 800c01a:	f001 f8bd 	bl	800d198 <FileWritingBuffer_writeToFileSystem>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d001      	beq.n	800c028 <DataSaver_saveHeader+0x3e4>
		return DataSaver_Status_Error;
 800c024:	2307      	movs	r3, #7
 800c026:	e000      	b.n	800c02a <DataSaver_saveHeader+0x3e6>
	}

	return DataSaver_Status_OK;
 800c028:	2300      	movs	r3, #0

}
 800c02a:	4618      	mov	r0, r3
 800c02c:	371c      	adds	r7, #28
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd90      	pop	{r4, r7, pc}

0800c032 <DODriver_init>:
#include "stdbool.h"

#include "user/do_driver.h"


DODriver_Status_TypeDef DODriver_init(volatile DODriver_TypeDef* pSelf, DODriver_Port_TypeDef* port, DODriver_Pin_TypeDef* pin, bool invertLogic){
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	60b9      	str	r1, [r7, #8]
 800c03c:	607a      	str	r2, [r7, #4]
 800c03e:	70fb      	strb	r3, [r7, #3]

	if (pSelf==NULL || port == NULL || pin == NULL){
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d005      	beq.n	800c052 <DODriver_init+0x20>
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <DODriver_init+0x20>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <DODriver_init+0x24>
		return DODriver_Status_NullPointerError;
 800c052:	2302      	movs	r3, #2
 800c054:	e015      	b.n	800c082 <DODriver_init+0x50>
	}

	pSelf->port			= port;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	605a      	str	r2, [r3, #4]
	pSelf->pin			= pin;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	609a      	str	r2, [r3, #8]
	pSelf->invertLogic	= invertLogic;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	78fa      	ldrb	r2, [r7, #3]
 800c066:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6858      	ldr	r0, [r3, #4]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	881b      	ldrh	r3, [r3, #0]
 800c072:	2200      	movs	r2, #0
 800c074:	4619      	mov	r1, r3
 800c076:	f7f5 ff4f 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = DODriver_State_Low;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2202      	movs	r2, #2
 800c07e:	701a      	strb	r2, [r3, #0]

	return DODriver_Status_OK;
 800c080:	2300      	movs	r3, #0

}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <DODriver_SetHigh>:

DODriver_Status_TypeDef DODriver_SetHigh(volatile DODriver_TypeDef* pSelf){
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]

	if (pSelf==NULL){
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d101      	bne.n	800c09c <DODriver_SetHigh+0x12>
		return DODriver_Status_NullPointerError;
 800c098:	2302      	movs	r3, #2
 800c09a:	e013      	b.n	800c0c4 <DODriver_SetHigh+0x3a>
	}
	if (pSelf->state == DODriver_State_UnInitialized){
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <DODriver_SetHigh+0x20>
		return DODriver_Status_UnInitializedError;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e00c      	b.n	800c0c4 <DODriver_SetHigh+0x3a>
	}

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6858      	ldr	r0, [r3, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	f7f5 ff2e 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = DODriver_State_High;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]

	return DODriver_Status_OK;
 800c0c2:	2300      	movs	r3, #0

}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3708      	adds	r7, #8
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <DODriver_SetLow>:

DODriver_Status_TypeDef DODriver_SetLow(volatile DODriver_TypeDef* pSelf){
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]

	if (pSelf==NULL){
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <DODriver_SetLow+0x12>
		return DODriver_Status_NullPointerError;
 800c0da:	2302      	movs	r3, #2
 800c0dc:	e013      	b.n	800c106 <DODriver_SetLow+0x3a>
	}
	if (pSelf->state == DODriver_State_UnInitialized){
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d101      	bne.n	800c0ec <DODriver_SetLow+0x20>
		return DODriver_Status_UnInitializedError;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	e00c      	b.n	800c106 <DODriver_SetLow+0x3a>
	}

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6858      	ldr	r0, [r3, #4]
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	881b      	ldrh	r3, [r3, #0]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f7f5 ff0d 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = DODriver_State_Low;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2202      	movs	r2, #2
 800c102:	701a      	strb	r2, [r3, #0]

	return DODriver_Status_OK;
 800c104:	2300      	movs	r3, #0
}
 800c106:	4618      	mov	r0, r3
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <FIFOQueue_init>:
 */

#include "user/fifo_queue.h"
#include "string.h"

FIFO_Status_TypeDef FIFOQueue_init(volatile FIFOQueue_TypeDef* pSelf, volatile void* pTabPtrArg, uint8_t elementSize, uint16_t queueSize){
 800c10e:	b480      	push	{r7}
 800c110:	b085      	sub	sp, #20
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	4611      	mov	r1, r2
 800c11a:	461a      	mov	r2, r3
 800c11c:	460b      	mov	r3, r1
 800c11e:	71fb      	strb	r3, [r7, #7]
 800c120:	4613      	mov	r3, r2
 800c122:	80bb      	strh	r3, [r7, #4]

	if (pSelf == NULL || pTabPtrArg == NULL){
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <FIFOQueue_init+0x22>
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d101      	bne.n	800c134 <FIFOQueue_init+0x26>
		return FIFO_Status_Error;
 800c130:	2304      	movs	r3, #4
 800c132:	e01c      	b.n	800c16e <FIFOQueue_init+0x60>
	}

	if (pSelf->state != FIFO_State_UnInitialized){
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	7a1b      	ldrb	r3, [r3, #8]
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d001      	beq.n	800c142 <FIFOQueue_init+0x34>
		return FIFO_Status_UnInitializedError;
 800c13e:	2303      	movs	r3, #3
 800c140:	e015      	b.n	800c16e <FIFOQueue_init+0x60>
	}

	pSelf->pTabPtr			= pTabPtrArg;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	68ba      	ldr	r2, [r7, #8]
 800c146:	601a      	str	r2, [r3, #0]
	pSelf->elementSize		= elementSize;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	79fa      	ldrb	r2, [r7, #7]
 800c14c:	711a      	strb	r2, [r3, #4]
	pSelf->queueLength		= queueSize;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	88ba      	ldrh	r2, [r7, #4]
 800c152:	80da      	strh	r2, [r3, #6]
	pSelf->elementsNumber	= 0;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	815a      	strh	r2, [r3, #10]
	pSelf->headIndex		= 0;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	819a      	strh	r2, [r3, #12]
	pSelf->tailIndex		= 0;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2200      	movs	r2, #0
 800c164:	81da      	strh	r2, [r3, #14]

	pSelf->state			= FIFO_State_Ready;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2201      	movs	r2, #1
 800c16a:	721a      	strb	r2, [r3, #8]

	return FIFO_Status_OK;
 800c16c:	2300      	movs	r3, #0
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3714      	adds	r7, #20
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <FIFOQueue_enqueue>:

FIFO_Status_TypeDef FIFOQueue_enqueue(volatile FIFOQueue_TypeDef* pSelf, volatile void* pElement){
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b082      	sub	sp, #8
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pElement == NULL){
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <FIFOQueue_enqueue+0x16>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <FIFOQueue_enqueue+0x1a>
		return FIFO_Status_Error;
 800c190:	2304      	movs	r3, #4
 800c192:	e038      	b.n	800c206 <FIFOQueue_enqueue+0x8c>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7a1b      	ldrb	r3, [r3, #8]
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <FIFOQueue_enqueue+0x28>
		return FIFO_Status_UnInitializedError;
 800c19e:	2303      	movs	r3, #3
 800c1a0:	e031      	b.n	800c206 <FIFOQueue_enqueue+0x8c>
	}

	if (FIFOQueue_isFull(pSelf)){
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 f87d 	bl	800c2a2 <FIFOQueue_isFull>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <FIFOQueue_enqueue+0x38>
		return FIFO_Status_Full;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e029      	b.n	800c206 <FIFOQueue_enqueue+0x8c>
	}

	pSelf->tailIndex = (pSelf->tailIndex + 1) % (pSelf->queueLength); // Notice incrementing tail value
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	89db      	ldrh	r3, [r3, #14]
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	88d2      	ldrh	r2, [r2, #6]
 800c1be:	b292      	uxth	r2, r2
 800c1c0:	fb93 f1f2 	sdiv	r1, r3, r2
 800c1c4:	fb02 f201 	mul.w	r2, r2, r1
 800c1c8:	1a9b      	subs	r3, r3, r2
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	81da      	strh	r2, [r3, #14]
	pSelf->elementsNumber++;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	895b      	ldrh	r3, [r3, #10]
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	815a      	strh	r2, [r3, #10]

	memcpy(pSelf->pTabPtr + (pSelf->tailIndex * pSelf->elementSize), pElement, pSelf->elementSize);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	89d2      	ldrh	r2, [r2, #14]
 800c1e6:	b292      	uxth	r2, r2
 800c1e8:	4611      	mov	r1, r2
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	7912      	ldrb	r2, [r2, #4]
 800c1ee:	b2d2      	uxtb	r2, r2
 800c1f0:	fb02 f201 	mul.w	r2, r2, r1
 800c1f4:	1898      	adds	r0, r3, r2
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	791b      	ldrb	r3, [r3, #4]
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	f004 fb26 	bl	8010850 <memcpy>

	return FIFO_Status_OK;
 800c204:	2300      	movs	r3, #0

}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <FIFOQueue_dequeue>:

FIFO_Status_TypeDef FIFOQueue_dequeue(volatile FIFOQueue_TypeDef* pSelf, volatile void* pRetElement){
 800c20e:	b580      	push	{r7, lr}
 800c210:	b082      	sub	sp, #8
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetElement == NULL){
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <FIFOQueue_dequeue+0x16>
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <FIFOQueue_dequeue+0x1a>
		return FIFO_Status_Error;
 800c224:	2304      	movs	r3, #4
 800c226:	e038      	b.n	800c29a <FIFOQueue_dequeue+0x8c>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	7a1b      	ldrb	r3, [r3, #8]
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <FIFOQueue_dequeue+0x28>
		return FIFO_Status_UnInitializedError;
 800c232:	2303      	movs	r3, #3
 800c234:	e031      	b.n	800c29a <FIFOQueue_dequeue+0x8c>
	}

	if (FIFOQueue_isEmpty(pSelf)){
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f854 	bl	800c2e4 <FIFOQueue_isEmpty>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d001      	beq.n	800c246 <FIFOQueue_dequeue+0x38>
		return FIFO_Status_Empty;
 800c242:	2302      	movs	r3, #2
 800c244:	e029      	b.n	800c29a <FIFOQueue_dequeue+0x8c>
	}

	memcpy(pRetElement, pSelf->pTabPtr + (pSelf->headIndex * pSelf->elementSize), pSelf->elementSize);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	8992      	ldrh	r2, [r2, #12]
 800c24e:	b292      	uxth	r2, r2
 800c250:	4611      	mov	r1, r2
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	7912      	ldrb	r2, [r2, #4]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	fb02 f201 	mul.w	r2, r2, r1
 800c25c:	1899      	adds	r1, r3, r2
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	791b      	ldrb	r3, [r3, #4]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	461a      	mov	r2, r3
 800c266:	6838      	ldr	r0, [r7, #0]
 800c268:	f004 faf2 	bl	8010850 <memcpy>

	pSelf->headIndex = (pSelf->headIndex + 1) % (pSelf->queueLength); // Notice incrementing head value
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	899b      	ldrh	r3, [r3, #12]
 800c270:	b29b      	uxth	r3, r3
 800c272:	3301      	adds	r3, #1
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	88d2      	ldrh	r2, [r2, #6]
 800c278:	b292      	uxth	r2, r2
 800c27a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c27e:	fb02 f201 	mul.w	r2, r2, r1
 800c282:	1a9b      	subs	r3, r3, r2
 800c284:	b29a      	uxth	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	819a      	strh	r2, [r3, #12]
	pSelf->elementsNumber--;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	895b      	ldrh	r3, [r3, #10]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	815a      	strh	r2, [r3, #10]

	return FIFO_Status_OK;
 800c298:	2300      	movs	r3, #0
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <FIFOQueue_isFull>:
	*pRetElementsNumber = pSelf->elementsNumber;

	return FIFO_Status_OK;
}

uint8_t FIFOQueue_isFull(volatile FIFOQueue_TypeDef* pSelf){
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <FIFOQueue_isFull+0x12>
		return FIFO_Status_Error;
 800c2b0:	2304      	movs	r3, #4
 800c2b2:	e011      	b.n	800c2d8 <FIFOQueue_isFull+0x36>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7a1b      	ldrb	r3, [r3, #8]
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d101      	bne.n	800c2c2 <FIFOQueue_isFull+0x20>
		return 1;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e00a      	b.n	800c2d8 <FIFOQueue_isFull+0x36>
	}

	return pSelf->elementsNumber >= pSelf->queueLength;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	895b      	ldrh	r3, [r3, #10]
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	88db      	ldrh	r3, [r3, #6]
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	bf2c      	ite	cs
 800c2d2:	2301      	movcs	r3, #1
 800c2d4:	2300      	movcc	r3, #0
 800c2d6:	b2db      	uxtb	r3, r3
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <FIFOQueue_isEmpty>:

uint8_t FIFOQueue_isEmpty(volatile FIFOQueue_TypeDef* pSelf){
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <FIFOQueue_isEmpty+0x12>
		return FIFO_Status_Error;
 800c2f2:	2304      	movs	r3, #4
 800c2f4:	e00e      	b.n	800c314 <FIFOQueue_isEmpty+0x30>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7a1b      	ldrb	r3, [r3, #8]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d101      	bne.n	800c304 <FIFOQueue_isEmpty+0x20>
		return 1;
 800c300:	2301      	movs	r3, #1
 800c302:	e007      	b.n	800c314 <FIFOQueue_isEmpty+0x30>
	}

	return (pSelf->elementsNumber == 0) ? 1 : 0;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	895b      	ldrh	r3, [r3, #10]
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bf0c      	ite	eq
 800c30e:	2301      	moveq	r3, #1
 800c310:	2300      	movne	r3, #0
 800c312:	b2db      	uxtb	r3, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <FIFOMultiread_init>:
#include <user/fifo_queue_multiread.h>
#include "stdint.h"
#include "string.h"
#include "stm32f7xx_hal.h"

FIFOMultiread_Status_TypeDef FIFOMultiread_init(volatile FIFOMultiread_TypeDef* pSelf, volatile void* pTabPtrArg, uint8_t elementSize, uint16_t queueSize){
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	4611      	mov	r1, r2
 800c32c:	461a      	mov	r2, r3
 800c32e:	460b      	mov	r3, r1
 800c330:	71fb      	strb	r3, [r7, #7]
 800c332:	4613      	mov	r3, r2
 800c334:	80bb      	strh	r3, [r7, #4]

	if (pSelf==NULL || pTabPtrArg == NULL){
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <FIFOMultiread_init+0x22>
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d101      	bne.n	800c346 <FIFOMultiread_init+0x26>
		return FIFOMultiread_Status_Error;
 800c342:	2307      	movs	r3, #7
 800c344:	e038      	b.n	800c3b8 <FIFOMultiread_init+0x98>
	}

	if (pSelf->state != FIFOMultiread_State_UnInitialized){
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	7b1b      	ldrb	r3, [r3, #12]
 800c34a:	b2db      	uxtb	r3, r3
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d001      	beq.n	800c354 <FIFOMultiread_init+0x34>
		return FIFOMultiread_Status_Error;
 800c350:	2307      	movs	r3, #7
 800c352:	e031      	b.n	800c3b8 <FIFOMultiread_init+0x98>
	}

	pSelf->pTabPtr						= pTabPtrArg;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	601a      	str	r2, [r3, #0]
	pSelf->elementSize					= elementSize;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	79fa      	ldrb	r2, [r7, #7]
 800c35e:	711a      	strb	r2, [r3, #4]
	pSelf->queueLength					= queueSize;
 800c360:	88ba      	ldrh	r2, [r7, #4]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	609a      	str	r2, [r3, #8]
	pSelf->tailIndex					= 0;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	625a      	str	r2, [r3, #36]	; 0x24
	pSelf->operationInProgressCounter	= 0;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	85da      	strh	r2, [r3, #46]	; 0x2e

	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c372:	2300      	movs	r3, #0
 800c374:	75fb      	strb	r3, [r7, #23]
 800c376:	e00e      	b.n	800c396 <FIFOMultiread_init+0x76>
//		pSelf->elementsNumber[i]	= 0;
		pSelf->headIndex[i]			= 0;
 800c378:	7dfa      	ldrb	r2, [r7, #23]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3204      	adds	r2, #4
 800c37e:	2100      	movs	r1, #0
 800c380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pSelf->readerActive[i]		= false;
 800c384:	7dfb      	ldrb	r3, [r7, #23]
 800c386:	68fa      	ldr	r2, [r7, #12]
 800c388:	4413      	add	r3, r2
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c390:	7dfb      	ldrb	r3, [r7, #23]
 800c392:	3301      	adds	r3, #1
 800c394:	75fb      	strb	r3, [r7, #23]
 800c396:	7dfb      	ldrb	r3, [r7, #23]
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d9ed      	bls.n	800c378 <FIFOMultiread_init+0x58>
	}

	memset((void*)pSelf->pTabPtr, 0, queueSize * elementSize);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	88bb      	ldrh	r3, [r7, #4]
 800c3a2:	79fa      	ldrb	r2, [r7, #7]
 800c3a4:	fb02 f303 	mul.w	r3, r2, r3
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f004 fa5b 	bl	8010866 <memset>

	pSelf->state 				= FIFOMultiread_State_Ready;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	731a      	strb	r2, [r3, #12]

	return FIFOMultiread_Status_OK;
 800c3b6:	2300      	movs	r3, #0
}
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	3718      	adds	r7, #24
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <FIFOMultiread_registerReader>:

FIFOMultiread_Status_TypeDef FIFOMultiread_registerReader(volatile FIFOMultiread_TypeDef* pSelfFifo, volatile FIFOMultireadReader_TypeDef* pReaderHandler){
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]

	if (pSelfFifo == NULL || pReaderHandler == NULL){
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d002      	beq.n	800c3d6 <FIFOMultiread_registerReader+0x16>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <FIFOMultiread_registerReader+0x1a>
		return FIFOMultiread_Status_Error;
 800c3d6:	2307      	movs	r3, #7
 800c3d8:	e04a      	b.n	800c470 <FIFOMultiread_registerReader+0xb0>
	}

	if (pSelfFifo->state == FIFOMultiread_State_UnInitialized){
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	7b1b      	ldrb	r3, [r3, #12]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <FIFOMultiread_registerReader+0x28>
		return FIFOMultiread_Status_UnInitializedError;
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	e043      	b.n	800c470 <FIFOMultiread_registerReader+0xb0>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]

	++(pSelfFifo->operationInProgressCounter); //TODO make atomic
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3f0:	b29b      	uxth	r3, r3
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	85da      	strh	r2, [r3, #46]	; 0x2e

	pReaderHandler->readerId	= FIFO_MULTIREAD_MAX_READERS;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	2205      	movs	r2, #5
 800c3fe:	711a      	strb	r2, [r3, #4]
	for (uint8_t i=0; i<FIFO_MULTIREAD_MAX_READERS; i++){
 800c400:	2300      	movs	r3, #0
 800c402:	73bb      	strb	r3, [r7, #14]
 800c404:	e01e      	b.n	800c444 <FIFOMultiread_registerReader+0x84>
		if (pSelfFifo->readerActive[i] == false){
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	4413      	add	r3, r2
 800c40c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c410:	b2db      	uxtb	r3, r3
 800c412:	f083 0301 	eor.w	r3, r3, #1
 800c416:	b2db      	uxtb	r3, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d010      	beq.n	800c43e <FIFOMultiread_registerReader+0x7e>
			pSelfFifo->headIndex[i]		= pSelfFifo->tailIndex;
 800c41c:	7bba      	ldrb	r2, [r7, #14]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	3204      	adds	r2, #4
 800c426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelfFifo->readerActive[i]	= true;
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	4413      	add	r3, r2
 800c430:	2201      	movs	r2, #1
 800c432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
//			pSelfFifo->elementsNumber	= pSelfFifo->globalEnqueuedElementsNumber;
			pReaderHandler->readerId	= i;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	7bba      	ldrb	r2, [r7, #14]
 800c43a:	711a      	strb	r2, [r3, #4]
			break;
 800c43c:	e005      	b.n	800c44a <FIFOMultiread_registerReader+0x8a>
	for (uint8_t i=0; i<FIFO_MULTIREAD_MAX_READERS; i++){
 800c43e:	7bbb      	ldrb	r3, [r7, #14]
 800c440:	3301      	adds	r3, #1
 800c442:	73bb      	strb	r3, [r7, #14]
 800c444:	7bbb      	ldrb	r3, [r7, #14]
 800c446:	2b04      	cmp	r3, #4
 800c448:	d9dd      	bls.n	800c406 <FIFOMultiread_registerReader+0x46>
		}
	}

	if (pReaderHandler->readerId != FIFO_MULTIREAD_MAX_READERS){
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	791b      	ldrb	r3, [r3, #4]
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b05      	cmp	r3, #5
 800c452:	d003      	beq.n	800c45c <FIFOMultiread_registerReader+0x9c>
		pReaderHandler->pFifoHandler	= pSelfFifo;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e001      	b.n	800c460 <FIFOMultiread_registerReader+0xa0>
	} else {
		ret = FIFOMultiread_Status_TooManyRegisteredReadedsError;
 800c45c:	2303      	movs	r3, #3
 800c45e:	73fb      	strb	r3, [r7, #15]
	}

	--(pSelfFifo->operationInProgressCounter); //TODO make atomic
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c464:	b29b      	uxth	r3, r3
 800c466:	3b01      	subs	r3, #1
 800c468:	b29a      	uxth	r2, r3
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <FIFOMultiread_unregisterReader>:

FIFOMultiread_Status_TypeDef FIFOMultiread_unregisterReader(volatile FIFOMultireadReader_TypeDef* pReaderHandler){
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]

	if (pReaderHandler == NULL){
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <FIFOMultiread_unregisterReader+0x12>
		return FIFOMultiread_Status_Error;
 800c48a:	2307      	movs	r3, #7
 800c48c:	e031      	b.n	800c4f2 <FIFOMultiread_unregisterReader+0x76>
	}

	if (pReaderHandler->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	7b1b      	ldrb	r3, [r3, #12]
 800c494:	b2db      	uxtb	r3, r3
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <FIFOMultiread_unregisterReader+0x22>
		return FIFOMultiread_Status_UnInitializedError;
 800c49a:	2304      	movs	r3, #4
 800c49c:	e029      	b.n	800c4f2 <FIFOMultiread_unregisterReader+0x76>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73fb      	strb	r3, [r7, #15]

	++(pReaderHandler->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c4a8:	b292      	uxth	r2, r2
 800c4aa:	3201      	adds	r2, #1
 800c4ac:	b292      	uxth	r2, r2
 800c4ae:	85da      	strh	r2, [r3, #46]	; 0x2e

	if (pReaderHandler->pFifoHandler->readerActive[pReaderHandler->readerId] == false){
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	7912      	ldrb	r2, [r2, #4]
 800c4b8:	b2d2      	uxtb	r2, r2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	f083 0301 	eor.w	r3, r3, #1
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d001      	beq.n	800c4d0 <FIFOMultiread_unregisterReader+0x54>
		ret = FIFOMultiread_Status_NotRegisteredReaderError;
 800c4cc:	2305      	movs	r3, #5
 800c4ce:	73fb      	strb	r3, [r7, #15]
	}

	pReaderHandler->pFifoHandler->readerActive[pReaderHandler->readerId] = false;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	7912      	ldrb	r2, [r2, #4]
 800c4d8:	b2d2      	uxtb	r2, r2
 800c4da:	4413      	add	r3, r2
 800c4dc:	2200      	movs	r2, #0
 800c4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	--(pReaderHandler->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c4e8:	b292      	uxth	r2, r2
 800c4ea:	3a01      	subs	r2, #1
 800c4ec:	b292      	uxth	r2, r2
 800c4ee:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <FIFOMultiread_enqueue>:

FIFOMultiread_Status_TypeDef FIFOMultiread_enqueue(volatile FIFOMultiread_TypeDef* volatile pSelf, volatile void* volatile pElement){
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pElement == NULL){
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d002      	beq.n	800c514 <FIFOMultiread_enqueue+0x16>
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <FIFOMultiread_enqueue+0x1a>
		return FIFOMultiread_Status_Error;
 800c514:	2307      	movs	r3, #7
 800c516:	e06a      	b.n	800c5ee <FIFOMultiread_enqueue+0xf0>
	}

	if (pSelf->state == FIFOMultiread_State_UnInitialized){
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	7b1b      	ldrb	r3, [r3, #12]
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <FIFOMultiread_enqueue+0x28>
		return FIFOMultiread_Status_UnInitializedError;
 800c522:	2304      	movs	r3, #4
 800c524:	e063      	b.n	800c5ee <FIFOMultiread_enqueue+0xf0>
	}

	if (FIFOMultiread_isFull(pSelf)){
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 f864 	bl	800c5f6 <FIFOMultiread_isFull>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d001      	beq.n	800c538 <FIFOMultiread_enqueue+0x3a>
		return FIFOMultiread_Status_Full;
 800c534:	2301      	movs	r3, #1
 800c536:	e05a      	b.n	800c5ee <FIFOMultiread_enqueue+0xf0>
	}

	volatile void* pTo = pSelf->pTabPtr + ((pSelf->tailIndex % pSelf->queueLength) * pSelf->elementSize);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6819      	ldr	r1, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	6892      	ldr	r2, [r2, #8]
 800c544:	fbb3 f0f2 	udiv	r0, r3, r2
 800c548:	fb02 f200 	mul.w	r2, r2, r0
 800c54c:	1a9b      	subs	r3, r3, r2
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	7912      	ldrb	r2, [r2, #4]
 800c552:	b2d2      	uxtb	r2, r2
 800c554:	fb02 f303 	mul.w	r3, r2, r3
 800c558:	440b      	add	r3, r1
 800c55a:	60bb      	str	r3, [r7, #8]
	for (uint16_t i=0; i<pSelf->elementSize; i++){
 800c55c:	2300      	movs	r3, #0
 800c55e:	81fb      	strh	r3, [r7, #14]
 800c560:	e00a      	b.n	800c578 <FIFOMultiread_enqueue+0x7a>
		*((uint8_t*)(pTo + i)) = *((uint8_t*)(pElement + i));
 800c562:	89fb      	ldrh	r3, [r7, #14]
 800c564:	68ba      	ldr	r2, [r7, #8]
 800c566:	4413      	add	r3, r2
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	89fa      	ldrh	r2, [r7, #14]
 800c56c:	440a      	add	r2, r1
 800c56e:	7812      	ldrb	r2, [r2, #0]
 800c570:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i<pSelf->elementSize; i++){
 800c572:	89fb      	ldrh	r3, [r7, #14]
 800c574:	3301      	adds	r3, #1
 800c576:	81fb      	strh	r3, [r7, #14]
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	791b      	ldrb	r3, [r3, #4]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	b29b      	uxth	r3, r3
 800c580:	89fa      	ldrh	r2, [r7, #14]
 800c582:	429a      	cmp	r2, r3
 800c584:	d3ed      	bcc.n	800c562 <FIFOMultiread_enqueue+0x64>
	}
	pSelf->tailIndex++;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c58a:	3201      	adds	r2, #1
 800c58c:	625a      	str	r2, [r3, #36]	; 0x24

	if (pSelf->operationInProgressCounter == 0 && pSelf->tailIndex > (pSelf->queueLength * FIFO_MULTIREAD_RESIZE_FACTOR)){
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c592:	b29b      	uxth	r3, r3
 800c594:	2b00      	cmp	r3, #0
 800c596:	d129      	bne.n	800c5ec <FIFOMultiread_enqueue+0xee>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	005b      	lsls	r3, r3, #1
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d922      	bls.n	800c5ec <FIFOMultiread_enqueue+0xee>
		for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	737b      	strb	r3, [r7, #13]
 800c5aa:	e016      	b.n	800c5da <FIFOMultiread_enqueue+0xdc>
			if (pSelf->readerActive[i]){
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	7b7b      	ldrb	r3, [r7, #13]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <FIFOMultiread_enqueue+0xd6>
				pSelf->headIndex[i] -= pSelf->queueLength;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6899      	ldr	r1, [r3, #8]
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	7b7a      	ldrb	r2, [r7, #13]
 800c5c4:	7b78      	ldrb	r0, [r7, #13]
 800c5c6:	3004      	adds	r0, #4
 800c5c8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800c5cc:	1a41      	subs	r1, r0, r1
 800c5ce:	3204      	adds	r2, #4
 800c5d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c5d4:	7b7b      	ldrb	r3, [r7, #13]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	737b      	strb	r3, [r7, #13]
 800c5da:	7b7b      	ldrb	r3, [r7, #13]
 800c5dc:	2b04      	cmp	r3, #4
 800c5de:	d9e5      	bls.n	800c5ac <FIFOMultiread_enqueue+0xae>
			}
		}
		pSelf->tailIndex -= pSelf->queueLength;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c5e8:	1a8a      	subs	r2, r1, r2
 800c5ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return FIFOMultiread_Status_OK;
 800c5ec:	2300      	movs	r3, #0

}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3710      	adds	r7, #16
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}

0800c5f6 <FIFOMultiread_isFull>:

bool FIFOMultiread_isFull(volatile FIFOMultiread_TypeDef* volatile pSelf){
 800c5f6:	b480      	push	{r7}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d101      	bne.n	800c608 <FIFOMultiread_isFull+0x12>
		return FIFOMultiread_Status_Error;
 800c604:	2301      	movs	r3, #1
 800c606:	e035      	b.n	800c674 <FIFOMultiread_isFull+0x7e>
	}

	if (pSelf->state == FIFOMultiread_State_UnInitialized){
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	7b1b      	ldrb	r3, [r3, #12]
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <FIFOMultiread_isFull+0x20>
		return FIFOMultiread_Status_UnInitializedError;
 800c612:	2301      	movs	r3, #1
 800c614:	e02e      	b.n	800c674 <FIFOMultiread_isFull+0x7e>
	}

	++(pSelf->operationInProgressCounter); //TODO make atomic
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c61a:	b292      	uxth	r2, r2
 800c61c:	3201      	adds	r2, #1
 800c61e:	b292      	uxth	r2, r2
 800c620:	85da      	strh	r2, [r3, #46]	; 0x2e

	bool ret = false;
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c626:	2300      	movs	r3, #0
 800c628:	73bb      	strb	r3, [r7, #14]
 800c62a:	e019      	b.n	800c660 <FIFOMultiread_isFull+0x6a>
		if (pSelf->readerActive[i] && (pSelf->tailIndex - pSelf->headIndex[i]) >= pSelf->queueLength){
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	4413      	add	r3, r2
 800c632:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00e      	beq.n	800c65a <FIFOMultiread_isFull+0x64>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7bb9      	ldrb	r1, [r7, #14]
 800c644:	3104      	adds	r1, #4
 800c646:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c64a:	1ad2      	subs	r2, r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	429a      	cmp	r2, r3
 800c652:	d302      	bcc.n	800c65a <FIFOMultiread_isFull+0x64>
			ret = true;
 800c654:	2301      	movs	r3, #1
 800c656:	73fb      	strb	r3, [r7, #15]
			break;
 800c658:	e005      	b.n	800c666 <FIFOMultiread_isFull+0x70>
	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	3301      	adds	r3, #1
 800c65e:	73bb      	strb	r3, [r7, #14]
 800c660:	7bbb      	ldrb	r3, [r7, #14]
 800c662:	2b04      	cmp	r3, #4
 800c664:	d9e2      	bls.n	800c62c <FIFOMultiread_isFull+0x36>
		}
	}

	--(pSelf->operationInProgressCounter); //TODO make atomic
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c66a:	b292      	uxth	r2, r2
 800c66c:	3a01      	subs	r2, #1
 800c66e:	b292      	uxth	r2, r2
 800c670:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c672:	7bfb      	ldrb	r3, [r7, #15]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr

0800c680 <FIFOMultiread_isEmpty>:

bool FIFOMultiread_isEmpty(volatile FIFOMultireadReader_TypeDef* volatile pSelf){
 800c680:	b480      	push	{r7}
 800c682:	b085      	sub	sp, #20
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <FIFOMultiread_isEmpty+0x12>
		return true;
 800c68e:	2301      	movs	r3, #1
 800c690:	e03a      	b.n	800c708 <FIFOMultiread_isEmpty+0x88>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	7b1b      	ldrb	r3, [r3, #12]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <FIFOMultiread_isEmpty+0x22>
		return true;
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e032      	b.n	800c708 <FIFOMultiread_isEmpty+0x88>
	}

	++(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c6a8:	b292      	uxth	r2, r2
 800c6aa:	3201      	adds	r2, #1
 800c6ac:	b292      	uxth	r2, r2
 800c6ae:	85da      	strh	r2, [r3, #46]	; 0x2e

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	7912      	ldrb	r2, [r2, #4]
 800c6b8:	b2d2      	uxtb	r2, r2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	f083 0301 	eor.w	r3, r3, #1
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <FIFOMultiread_isEmpty+0x50>
		return true;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e01b      	b.n	800c708 <FIFOMultiread_isEmpty+0x88>
	}

	bool ret = false;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	73fb      	strb	r3, [r7, #15]

	if (pSelf->pFifoHandler->headIndex[pSelf->readerId] == pSelf->pFifoHandler->tailIndex){
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	7912      	ldrb	r2, [r2, #4]
 800c6dc:	b2d2      	uxtb	r2, r2
 800c6de:	3204      	adds	r2, #4
 800c6e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d102      	bne.n	800c6f4 <FIFOMultiread_isEmpty+0x74>
		ret = true;
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	73fb      	strb	r3, [r7, #15]
 800c6f2:	e001      	b.n	800c6f8 <FIFOMultiread_isEmpty+0x78>
	} else {
		ret = false;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]
	}

	--(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c6fe:	b292      	uxth	r2, r2
 800c700:	3a01      	subs	r2, #1
 800c702:	b292      	uxth	r2, r2
 800c704:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	4770      	bx	lr

0800c714 <FIFOMultiread_dequeue>:

FIFOMultiread_Status_TypeDef FIFOMultiread_dequeue(volatile FIFOMultireadReader_TypeDef* volatile pSelf, volatile void* volatile pRetElement){
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]


	if (pSelf == NULL || pRetElement == NULL){
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d002      	beq.n	800c72a <FIFOMultiread_dequeue+0x16>
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <FIFOMultiread_dequeue+0x1a>
		return FIFOMultiread_Status_Error;
 800c72a:	2307      	movs	r3, #7
 800c72c:	e070      	b.n	800c810 <FIFOMultiread_dequeue+0xfc>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	7b1b      	ldrb	r3, [r3, #12]
 800c734:	b2db      	uxtb	r3, r3
 800c736:	2b00      	cmp	r3, #0
 800c738:	d101      	bne.n	800c73e <FIFOMultiread_dequeue+0x2a>
		return FIFOMultiread_Status_UnInitializedError;
 800c73a:	2304      	movs	r3, #4
 800c73c:	e068      	b.n	800c810 <FIFOMultiread_dequeue+0xfc>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800c73e:	2300      	movs	r3, #0
 800c740:	73fb      	strb	r3, [r7, #15]

	++(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c748:	b292      	uxth	r2, r2
 800c74a:	3201      	adds	r2, #1
 800c74c:	b292      	uxth	r2, r2
 800c74e:	85da      	strh	r2, [r3, #46]	; 0x2e

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	7912      	ldrb	r2, [r2, #4]
 800c758:	b2d2      	uxtb	r2, r2
 800c75a:	4413      	add	r3, r2
 800c75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c760:	b2db      	uxtb	r3, r3
 800c762:	f083 0301 	eor.w	r3, r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d002      	beq.n	800c772 <FIFOMultiread_dequeue+0x5e>
		ret = FIFOMultiread_Status_NotRegisteredReaderError;
 800c76c:	2305      	movs	r3, #5
 800c76e:	73fb      	strb	r3, [r7, #15]
 800c770:	e046      	b.n	800c800 <FIFOMultiread_dequeue+0xec>
	} else {

		if (FIFOMultiread_isEmpty(pSelf)){
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4618      	mov	r0, r3
 800c776:	f7ff ff83 	bl	800c680 <FIFOMultiread_isEmpty>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <FIFOMultiread_dequeue+0x72>
			ret = FIFOMultiread_Status_Empty;
 800c780:	2302      	movs	r3, #2
 800c782:	73fb      	strb	r3, [r7, #15]
 800c784:	e03c      	b.n	800c800 <FIFOMultiread_dequeue+0xec>
		} else {

			volatile void* pFrom = pSelf->pFifoHandler->pTabPtr + ((pSelf->pFifoHandler->headIndex[pSelf->readerId] % pSelf->pFifoHandler->queueLength) * pSelf->pFifoHandler->elementSize);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6819      	ldr	r1, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	7912      	ldrb	r2, [r2, #4]
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	3204      	adds	r2, #4
 800c798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	6812      	ldr	r2, [r2, #0]
 800c7a0:	6892      	ldr	r2, [r2, #8]
 800c7a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800c7a6:	fb02 f200 	mul.w	r2, r2, r0
 800c7aa:	1a9b      	subs	r3, r3, r2
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	6812      	ldr	r2, [r2, #0]
 800c7b0:	7912      	ldrb	r2, [r2, #4]
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	fb02 f303 	mul.w	r3, r2, r3
 800c7b8:	440b      	add	r3, r1
 800c7ba:	60bb      	str	r3, [r7, #8]
			for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c7bc:	2300      	movs	r3, #0
 800c7be:	81bb      	strh	r3, [r7, #12]
 800c7c0:	e00a      	b.n	800c7d8 <FIFOMultiread_dequeue+0xc4>
				*((uint8_t*)(pRetElement + i)) = *((uint8_t*)(pFrom + i));
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	89bb      	ldrh	r3, [r7, #12]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	89ba      	ldrh	r2, [r7, #12]
 800c7ca:	68b9      	ldr	r1, [r7, #8]
 800c7cc:	440a      	add	r2, r1
 800c7ce:	7812      	ldrb	r2, [r2, #0]
 800c7d0:	701a      	strb	r2, [r3, #0]
			for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c7d2:	89bb      	ldrh	r3, [r7, #12]
 800c7d4:	3301      	adds	r3, #1
 800c7d6:	81bb      	strh	r3, [r7, #12]
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	791b      	ldrb	r3, [r3, #4]
 800c7de:	b2db      	uxtb	r3, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	89ba      	ldrh	r2, [r7, #12]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d3ec      	bcc.n	800c7c2 <FIFOMultiread_dequeue+0xae>
			}

			pSelf->pFifoHandler->headIndex[pSelf->readerId]++;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	7912      	ldrb	r2, [r2, #4]
 800c7f0:	b2d2      	uxtb	r2, r2
 800c7f2:	1d11      	adds	r1, r2, #4
 800c7f4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800c7f8:	3101      	adds	r1, #1
 800c7fa:	3204      	adds	r2, #4
 800c7fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
	}

	--(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c806:	b292      	uxth	r2, r2
 800c808:	3a01      	subs	r2, #1
 800c80a:	b292      	uxth	r2, r2
 800c80c:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <FIFOMultiread_lastElement>:

FIFOMultiread_Status_TypeDef FIFOMultiread_lastElement(volatile FIFOMultireadReader_TypeDef* volatile pSelf, volatile void* volatile pRetElement){
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetElement == NULL){
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <FIFOMultiread_lastElement+0x16>
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <FIFOMultiread_lastElement+0x1a>
		return FIFOMultiread_Status_Error;
 800c82e:	2307      	movs	r3, #7
 800c830:	e063      	b.n	800c8fa <FIFOMultiread_lastElement+0xe2>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	7b1b      	ldrb	r3, [r3, #12]
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <FIFOMultiread_lastElement+0x2a>
		return FIFOMultiread_Status_UnInitializedError;
 800c83e:	2304      	movs	r3, #4
 800c840:	e05b      	b.n	800c8fa <FIFOMultiread_lastElement+0xe2>
	}

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	7912      	ldrb	r2, [r2, #4]
 800c84a:	b2d2      	uxtb	r2, r2
 800c84c:	4413      	add	r3, r2
 800c84e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f083 0301 	eor.w	r3, r3, #1
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d001      	beq.n	800c862 <FIFOMultiread_lastElement+0x4a>
		return FIFOMultiread_Status_NotRegisteredReaderError;
 800c85e:	2305      	movs	r3, #5
 800c860:	e04b      	b.n	800c8fa <FIFOMultiread_lastElement+0xe2>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800c862:	2300      	movs	r3, #0
 800c864:	73fb      	strb	r3, [r7, #15]

	++(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c86c:	b292      	uxth	r2, r2
 800c86e:	3201      	adds	r2, #1
 800c870:	b292      	uxth	r2, r2
 800c872:	85da      	strh	r2, [r3, #46]	; 0x2e

	if (FIFOMultiread_isEmpty(pSelf)){
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ff02 	bl	800c680 <FIFOMultiread_isEmpty>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <FIFOMultiread_lastElement+0x70>
		ret = FIFOMultiread_Status_Empty;
 800c882:	2302      	movs	r3, #2
 800c884:	73fb      	strb	r3, [r7, #15]
 800c886:	e030      	b.n	800c8ea <FIFOMultiread_lastElement+0xd2>
	} else {
		volatile void* pFrom = pSelf->pFifoHandler->pTabPtr + ((pSelf->pFifoHandler->headIndex[pSelf->readerId] % pSelf->pFifoHandler->queueLength) * pSelf->pFifoHandler->elementSize);
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6819      	ldr	r1, [r3, #0]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	687a      	ldr	r2, [r7, #4]
 800c894:	7912      	ldrb	r2, [r2, #4]
 800c896:	b2d2      	uxtb	r2, r2
 800c898:	3204      	adds	r2, #4
 800c89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	6812      	ldr	r2, [r2, #0]
 800c8a2:	6892      	ldr	r2, [r2, #8]
 800c8a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8a8:	fb02 f200 	mul.w	r2, r2, r0
 800c8ac:	1a9b      	subs	r3, r3, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	6812      	ldr	r2, [r2, #0]
 800c8b2:	7912      	ldrb	r2, [r2, #4]
 800c8b4:	b2d2      	uxtb	r2, r2
 800c8b6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ba:	440b      	add	r3, r1
 800c8bc:	60bb      	str	r3, [r7, #8]
		for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c8be:	2300      	movs	r3, #0
 800c8c0:	81bb      	strh	r3, [r7, #12]
 800c8c2:	e00a      	b.n	800c8da <FIFOMultiread_lastElement+0xc2>
			*((uint8_t*)(pRetElement + i)) = *((uint8_t*)(pFrom + i));
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	89bb      	ldrh	r3, [r7, #12]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	89ba      	ldrh	r2, [r7, #12]
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	440a      	add	r2, r1
 800c8d0:	7812      	ldrb	r2, [r2, #0]
 800c8d2:	701a      	strb	r2, [r3, #0]
		for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c8d4:	89bb      	ldrh	r3, [r7, #12]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	81bb      	strh	r3, [r7, #12]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	791b      	ldrb	r3, [r3, #4]
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	89ba      	ldrh	r2, [r7, #12]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d3ec      	bcc.n	800c8c4 <FIFOMultiread_lastElement+0xac>
		}
	}

	--(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c8f0:	b292      	uxth	r2, r2
 800c8f2:	3a01      	subs	r2, #1
 800c8f4:	b292      	uxth	r2, r2
 800c8f6:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <FIFOMultiread_elementValOnPosition>:

FIFOMultiread_Status_TypeDef FIFOMultiread_elementValOnPosition(volatile FIFOMultireadReader_TypeDef* volatile pSelf, uint16_t positionIndex, volatile void* volatile pRetElement){
 800c902:	b580      	push	{r7, lr}
 800c904:	b088      	sub	sp, #32
 800c906:	af00      	add	r7, sp, #0
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	460b      	mov	r3, r1
 800c90c:	607a      	str	r2, [r7, #4]
 800c90e:	817b      	strh	r3, [r7, #10]

	if (pSelf == NULL || pRetElement == NULL){
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d002      	beq.n	800c91c <FIFOMultiread_elementValOnPosition+0x1a>
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d101      	bne.n	800c920 <FIFOMultiread_elementValOnPosition+0x1e>
		return FIFOMultiread_Status_Error;
 800c91c:	2307      	movs	r3, #7
 800c91e:	e061      	b.n	800c9e4 <FIFOMultiread_elementValOnPosition+0xe2>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	7b1b      	ldrb	r3, [r3, #12]
 800c926:	b2db      	uxtb	r3, r3
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d101      	bne.n	800c930 <FIFOMultiread_elementValOnPosition+0x2e>
		return FIFOMultiread_Status_UnInitializedError;
 800c92c:	2304      	movs	r3, #4
 800c92e:	e059      	b.n	800c9e4 <FIFOMultiread_elementValOnPosition+0xe2>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	777b      	strb	r3, [r7, #29]

	uint16_t size = 0;
 800c934:	2300      	movs	r3, #0
 800c936:	82fb      	strh	r3, [r7, #22]
	if ((ret = FIFOMultiread_elementsNumber(pSelf, &size)) != FIFOMultiread_Status_OK){
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f107 0216 	add.w	r2, r7, #22
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f000 f853 	bl	800c9ec <FIFOMultiread_elementsNumber>
 800c946:	4603      	mov	r3, r0
 800c948:	777b      	strb	r3, [r7, #29]
 800c94a:	7f7b      	ldrb	r3, [r7, #29]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d001      	beq.n	800c954 <FIFOMultiread_elementValOnPosition+0x52>
		return ret;
 800c950:	7f7b      	ldrb	r3, [r7, #29]
 800c952:	e047      	b.n	800c9e4 <FIFOMultiread_elementValOnPosition+0xe2>
	}
	if (positionIndex >= size){
 800c954:	8afb      	ldrh	r3, [r7, #22]
 800c956:	897a      	ldrh	r2, [r7, #10]
 800c958:	429a      	cmp	r2, r3
 800c95a:	d301      	bcc.n	800c960 <FIFOMultiread_elementValOnPosition+0x5e>
		return FIFOMultiread_Status_InvalidPositionArgumentError;
 800c95c:	2306      	movs	r3, #6
 800c95e:	e041      	b.n	800c9e4 <FIFOMultiread_elementValOnPosition+0xe2>
	}

	++(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c966:	b292      	uxth	r2, r2
 800c968:	3201      	adds	r2, #1
 800c96a:	b292      	uxth	r2, r2
 800c96c:	85da      	strh	r2, [r3, #46]	; 0x2e

	volatile void* pFrom = pSelf->pFifoHandler->pTabPtr + (((pSelf->pFifoHandler->headIndex[pSelf->readerId] + positionIndex) % pSelf->pFifoHandler->queueLength) * pSelf->pFifoHandler->elementSize);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	6819      	ldr	r1, [r3, #0]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	7912      	ldrb	r2, [r2, #4]
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	3204      	adds	r2, #4
 800c980:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c984:	897b      	ldrh	r3, [r7, #10]
 800c986:	4413      	add	r3, r2
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	6812      	ldr	r2, [r2, #0]
 800c98c:	6892      	ldr	r2, [r2, #8]
 800c98e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c992:	fb02 f200 	mul.w	r2, r2, r0
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	6812      	ldr	r2, [r2, #0]
 800c99c:	7912      	ldrb	r2, [r2, #4]
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	fb02 f303 	mul.w	r3, r2, r3
 800c9a4:	440b      	add	r3, r1
 800c9a6:	61bb      	str	r3, [r7, #24]
	for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	83fb      	strh	r3, [r7, #30]
 800c9ac:	e00a      	b.n	800c9c4 <FIFOMultiread_elementValOnPosition+0xc2>
		*((uint8_t*)(pRetElement + i)) = *((uint8_t*)(pFrom + i));
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	8bfb      	ldrh	r3, [r7, #30]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	8bfa      	ldrh	r2, [r7, #30]
 800c9b6:	69b9      	ldr	r1, [r7, #24]
 800c9b8:	440a      	add	r2, r1
 800c9ba:	7812      	ldrb	r2, [r2, #0]
 800c9bc:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i<pSelf->pFifoHandler->elementSize; i++){
 800c9be:	8bfb      	ldrh	r3, [r7, #30]
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	83fb      	strh	r3, [r7, #30]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	8bfa      	ldrh	r2, [r7, #30]
 800c9d0:	429a      	cmp	r2, r3
 800c9d2:	d3ec      	bcc.n	800c9ae <FIFOMultiread_elementValOnPosition+0xac>
	}

	--(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800c9da:	b292      	uxth	r2, r2
 800c9dc:	3a01      	subs	r2, #1
 800c9de:	b292      	uxth	r2, r2
 800c9e0:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800c9e2:	7f7b      	ldrb	r3, [r7, #29]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3720      	adds	r7, #32
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <FIFOMultiread_elementsNumber>:

FIFOMultiread_Status_TypeDef FIFOMultiread_elementsNumber(volatile FIFOMultireadReader_TypeDef* volatile pSelf, volatile uint16_t* volatile retElementsNumber){
 800c9ec:	b480      	push	{r7}
 800c9ee:	b085      	sub	sp, #20
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || retElementsNumber == NULL){
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d002      	beq.n	800ca02 <FIFOMultiread_elementsNumber+0x16>
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d101      	bne.n	800ca06 <FIFOMultiread_elementsNumber+0x1a>
		return FIFOMultiread_Status_Error;
 800ca02:	2307      	movs	r3, #7
 800ca04:	e03a      	b.n	800ca7c <FIFOMultiread_elementsNumber+0x90>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	7b1b      	ldrb	r3, [r3, #12]
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <FIFOMultiread_elementsNumber+0x2a>
		return FIFOMultiread_Status_UnInitializedError;
 800ca12:	2304      	movs	r3, #4
 800ca14:	e032      	b.n	800ca7c <FIFOMultiread_elementsNumber+0x90>
	}

	FIFOMultiread_Status_TypeDef ret = FIFOMultiread_Status_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]

	++(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800ca20:	b292      	uxth	r2, r2
 800ca22:	3201      	adds	r2, #1
 800ca24:	b292      	uxth	r2, r2
 800ca26:	85da      	strh	r2, [r3, #46]	; 0x2e

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	7912      	ldrb	r2, [r2, #4]
 800ca30:	b2d2      	uxtb	r2, r2
 800ca32:	4413      	add	r3, r2
 800ca34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	f083 0301 	eor.w	r3, r3, #1
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <FIFOMultiread_elementsNumber+0x5e>
		ret = FIFOMultiread_Status_NotRegisteredReaderError;
 800ca44:	2305      	movs	r3, #5
 800ca46:	73fb      	strb	r3, [r7, #15]
 800ca48:	e010      	b.n	800ca6c <FIFOMultiread_elementsNumber+0x80>
	} else {
		*retElementsNumber = pSelf->pFifoHandler->tailIndex - pSelf->pFifoHandler->headIndex[pSelf->readerId];
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	6812      	ldr	r2, [r2, #0]
 800ca50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca52:	b291      	uxth	r1, r2
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	7900      	ldrb	r0, [r0, #4]
 800ca5c:	b2c0      	uxtb	r0, r0
 800ca5e:	3004      	adds	r0, #4
 800ca60:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ca64:	b292      	uxth	r2, r2
 800ca66:	1a8a      	subs	r2, r1, r2
 800ca68:	b292      	uxth	r2, r2
 800ca6a:	801a      	strh	r2, [r3, #0]
	}
	--(pSelf->pFifoHandler->operationInProgressCounter); //TODO make atomic
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800ca72:	b292      	uxth	r2, r2
 800ca74:	3a01      	subs	r2, #1
 800ca76:	b292      	uxth	r2, r2
 800ca78:	85da      	strh	r2, [r3, #46]	; 0x2e
	return ret;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <FileReadingBuffer_init>:


/**
 * pFile - should be opened
 */
FileReadingBuffer_Status_TypeDef FileReadingBuffer_init(FileReadingBuffer_TypeDef* pSelf, FileSystemWrapper_File_TypeDef* pFile){
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]

	if (pSelf->state != FileReadingBuffer_State_UnInitialized){
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	791b      	ldrb	r3, [r3, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <FileReadingBuffer_init+0x16>
		return FileReadingBuffer_Status_Error;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	e011      	b.n	800cac2 <FileReadingBuffer_init+0x3a>
	}

	if (pFile == NULL){
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d101      	bne.n	800caa8 <FileReadingBuffer_init+0x20>
		return FileReadingBuffer_Status_Error;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e00c      	b.n	800cac2 <FileReadingBuffer_init+0x3a>
	}

	pSelf->pFile		= pFile;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	601a      	str	r2, [r3, #0]
	pSelf->iterator		= 0;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2200      	movs	r2, #0
 800cab2:	619a      	str	r2, [r3, #24]
	pSelf->bytesLeft	= 0;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	61da      	str	r2, [r3, #28]

	pSelf->state = FileReadingBuffer_State_Initialized;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	711a      	strb	r2, [r3, #4]

	return FileReadingBuffer_Status_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <FileReadingBuffer_checkIfEmpty>:

static FileReadingBuffer_Status_TypeDef FileReadingBuffer_checkIfEmpty(FileReadingBuffer_TypeDef* pSelf){
 800cace:	b580      	push	{r7, lr}
 800cad0:	b084      	sub	sp, #16
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]

	if (pSelf->bytesLeft == 0){
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d115      	bne.n	800cb0a <FileReadingBuffer_checkIfEmpty+0x3c>

		FileSystemWrapper_Status_TypeDef status = FileSystemWrapper_readData(pSelf->pFile, pSelf->buffer, FILE_READING_BUFFER_SIZE, &(pSelf->bytesLeft));
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	1d59      	adds	r1, r3, #5
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	331c      	adds	r3, #28
 800caea:	2210      	movs	r2, #16
 800caec:	f000 f9ac 	bl	800ce48 <FileSystemWrapper_readData>
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]

		if (pSelf->bytesLeft == 0){
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d101      	bne.n	800cb00 <FileReadingBuffer_checkIfEmpty+0x32>
			return FileReadingBuffer_Status_EndOfFile;
 800cafc:	2302      	movs	r3, #2
 800cafe:	e005      	b.n	800cb0c <FileReadingBuffer_checkIfEmpty+0x3e>
		}
		if (status != FileSystemWrapper_Status_OK){
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <FileReadingBuffer_checkIfEmpty+0x3c>
			return FileReadingBuffer_Status_Error;
 800cb06:	2303      	movs	r3, #3
 800cb08:	e000      	b.n	800cb0c <FileReadingBuffer_checkIfEmpty+0x3e>
		}

	}

	return FileReadingBuffer_Status_OK;
 800cb0a:	2300      	movs	r3, #0
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3710      	adds	r7, #16
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <FileReadingBuffer_readUInt8>:

FileReadingBuffer_Status_TypeDef FileReadingBuffer_readUInt8(FileReadingBuffer_TypeDef* pSelf, uint8_t* pReturnValue){
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]

	if (pSelf->state != FileReadingBuffer_State_Initialized){
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	791b      	ldrb	r3, [r3, #4]
 800cb22:	2b01      	cmp	r3, #1
 800cb24:	d001      	beq.n	800cb2a <FileReadingBuffer_readUInt8+0x16>
		return FileReadingBuffer_Status_UnInitializedError;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e01d      	b.n	800cb66 <FileReadingBuffer_readUInt8+0x52>
	}

	FileReadingBuffer_Status_TypeDef status;
	if ((status = FileReadingBuffer_checkIfEmpty(pSelf)) != FileReadingBuffer_Status_OK){
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7ff ffcf 	bl	800cace <FileReadingBuffer_checkIfEmpty>
 800cb30:	4603      	mov	r3, r0
 800cb32:	73fb      	strb	r3, [r7, #15]
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <FileReadingBuffer_readUInt8+0x2a>
		return status;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	e013      	b.n	800cb66 <FileReadingBuffer_readUInt8+0x52>
	}

	*pReturnValue = pSelf->buffer[(pSelf->iterator)%FILE_READING_BUFFER_SIZE];
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	f003 030f 	and.w	r3, r3, #15
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	4413      	add	r3, r2
 800cb4a:	795a      	ldrb	r2, [r3, #5]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	701a      	strb	r2, [r3, #0]
	pSelf->iterator++;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	699b      	ldr	r3, [r3, #24]
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	619a      	str	r2, [r3, #24]
	pSelf->bytesLeft--;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	69db      	ldr	r3, [r3, #28]
 800cb5e:	1e5a      	subs	r2, r3, #1
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	61da      	str	r2, [r3, #28]

	return FileReadingBuffer_Status_OK;
 800cb64:	2300      	movs	r3, #0

}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <FileReadingBuffer_readUInt16>:

FileReadingBuffer_Status_TypeDef FileReadingBuffer_readUInt16(FileReadingBuffer_TypeDef* pSelf, uint16_t* pReturnValue){
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]

	if (pSelf->state != FileReadingBuffer_State_Initialized){
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	791b      	ldrb	r3, [r3, #4]
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d001      	beq.n	800cb84 <FileReadingBuffer_readUInt16+0x16>
		return FileReadingBuffer_Status_UnInitializedError;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e032      	b.n	800cbea <FileReadingBuffer_readUInt16+0x7c>
	}

	uint8_t	tempValue = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	73bb      	strb	r3, [r7, #14]
	FileReadingBuffer_Status_TypeDef status;

	*pReturnValue = 0;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	801a      	strh	r2, [r3, #0]

	if ((status = FileReadingBuffer_readUInt8(pSelf, &tempValue)) != FileReadingBuffer_Status_OK){
 800cb8e:	f107 030e 	add.w	r3, r7, #14
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff ffbd 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	73fb      	strb	r3, [r7, #15]
 800cb9e:	7bfb      	ldrb	r3, [r7, #15]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <FileReadingBuffer_readUInt16+0x3a>
		return status;
 800cba4:	7bfb      	ldrb	r3, [r7, #15]
 800cba6:	e020      	b.n	800cbea <FileReadingBuffer_readUInt16+0x7c>
	}

	*pReturnValue |= tempValue;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	881a      	ldrh	r2, [r3, #0]
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	801a      	strh	r2, [r3, #0]

	if ((status = FileReadingBuffer_readUInt8(pSelf, &tempValue)) != FileReadingBuffer_Status_OK){
 800cbb8:	f107 030e 	add.w	r3, r7, #14
 800cbbc:	4619      	mov	r1, r3
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f7ff ffa8 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	73fb      	strb	r3, [r7, #15]
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <FileReadingBuffer_readUInt16+0x64>
		return status;
 800cbce:	7bfb      	ldrb	r3, [r7, #15]
 800cbd0:	e00b      	b.n	800cbea <FileReadingBuffer_readUInt16+0x7c>
	}

	*pReturnValue |= (tempValue << 8);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	b21a      	sxth	r2, r3
 800cbd8:	7bbb      	ldrb	r3, [r7, #14]
 800cbda:	021b      	lsls	r3, r3, #8
 800cbdc:	b21b      	sxth	r3, r3
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	b21b      	sxth	r3, r3
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	801a      	strh	r2, [r3, #0]

	return FileReadingBuffer_Status_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <FileReadingBuffer_readChar>:

FileReadingBuffer_Status_TypeDef FileReadingBuffer_readChar(FileReadingBuffer_TypeDef* pSelf, char* pReturnValue){
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b082      	sub	sp, #8
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	6039      	str	r1, [r7, #0]

	if (pSelf->state != FileReadingBuffer_State_Initialized){
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	791b      	ldrb	r3, [r3, #4]
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	d001      	beq.n	800cc08 <FileReadingBuffer_readChar+0x16>
		return FileReadingBuffer_Status_UnInitializedError;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e004      	b.n	800cc12 <FileReadingBuffer_readChar+0x20>
	}

	return FileReadingBuffer_readUInt8(pSelf, (uint8_t*) pReturnValue);
 800cc08:	6839      	ldr	r1, [r7, #0]
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff ff82 	bl	800cb14 <FileReadingBuffer_readUInt8>
 800cc10:	4603      	mov	r3, r0

}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3708      	adds	r7, #8
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <FileReadingBuffer_readString>:

FileReadingBuffer_Status_TypeDef FileReadingBuffer_readString(FileReadingBuffer_TypeDef* pSelf, char* pReturnString, uint16_t length){
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b086      	sub	sp, #24
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	60f8      	str	r0, [r7, #12]
 800cc22:	60b9      	str	r1, [r7, #8]
 800cc24:	4613      	mov	r3, r2
 800cc26:	80fb      	strh	r3, [r7, #6]

	if (pSelf->state != FileReadingBuffer_State_Initialized){
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	791b      	ldrb	r3, [r3, #4]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d001      	beq.n	800cc34 <FileReadingBuffer_readString+0x1a>
		return FileReadingBuffer_Status_UnInitializedError;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e018      	b.n	800cc66 <FileReadingBuffer_readString+0x4c>
	}

	FileReadingBuffer_Status_TypeDef status;

	for(uint32_t i = 0; i < length; i++){
 800cc34:	2300      	movs	r3, #0
 800cc36:	617b      	str	r3, [r7, #20]
 800cc38:	e010      	b.n	800cc5c <FileReadingBuffer_readString+0x42>

		if ((status = FileReadingBuffer_readChar(pSelf, pReturnString+i)) != FileReadingBuffer_Status_OK){
 800cc3a:	68ba      	ldr	r2, [r7, #8]
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	4413      	add	r3, r2
 800cc40:	4619      	mov	r1, r3
 800cc42:	68f8      	ldr	r0, [r7, #12]
 800cc44:	f7ff ffd5 	bl	800cbf2 <FileReadingBuffer_readChar>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	74fb      	strb	r3, [r7, #19]
 800cc4c:	7cfb      	ldrb	r3, [r7, #19]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d001      	beq.n	800cc56 <FileReadingBuffer_readString+0x3c>
			return status;
 800cc52:	7cfb      	ldrb	r3, [r7, #19]
 800cc54:	e007      	b.n	800cc66 <FileReadingBuffer_readString+0x4c>
	for(uint32_t i = 0; i < length; i++){
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	3301      	adds	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
 800cc5c:	88fa      	ldrh	r2, [r7, #6]
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d8ea      	bhi.n	800cc3a <FileReadingBuffer_readString+0x20>
		}
	}

	return FileReadingBuffer_Status_OK;
 800cc64:	2300      	movs	r3, #0

}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
	...

0800cc70 <remapResult>:
 */

#include "user/file_system_wrapper.h"
#include "string.h"

static FileSystemWrapper_Status_TypeDef remapResult(FRESULT res){
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	71fb      	strb	r3, [r7, #7]

	switch (res){
 800cc7a:	79fb      	ldrb	r3, [r7, #7]
 800cc7c:	2b13      	cmp	r3, #19
 800cc7e:	d853      	bhi.n	800cd28 <remapResult+0xb8>
 800cc80:	a201      	add	r2, pc, #4	; (adr r2, 800cc88 <remapResult+0x18>)
 800cc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc86:	bf00      	nop
 800cc88:	0800ccd9 	.word	0x0800ccd9
 800cc8c:	0800ccdd 	.word	0x0800ccdd
 800cc90:	0800cce1 	.word	0x0800cce1
 800cc94:	0800cce5 	.word	0x0800cce5
 800cc98:	0800cce9 	.word	0x0800cce9
 800cc9c:	0800cced 	.word	0x0800cced
 800cca0:	0800ccf1 	.word	0x0800ccf1
 800cca4:	0800ccf5 	.word	0x0800ccf5
 800cca8:	0800ccf9 	.word	0x0800ccf9
 800ccac:	0800ccfd 	.word	0x0800ccfd
 800ccb0:	0800cd01 	.word	0x0800cd01
 800ccb4:	0800cd05 	.word	0x0800cd05
 800ccb8:	0800cd09 	.word	0x0800cd09
 800ccbc:	0800cd0d 	.word	0x0800cd0d
 800ccc0:	0800cd11 	.word	0x0800cd11
 800ccc4:	0800cd15 	.word	0x0800cd15
 800ccc8:	0800cd19 	.word	0x0800cd19
 800cccc:	0800cd1d 	.word	0x0800cd1d
 800ccd0:	0800cd21 	.word	0x0800cd21
 800ccd4:	0800cd25 	.word	0x0800cd25
	case FR_OK: 					return FileSystemWrapper_Status_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e026      	b.n	800cd2a <remapResult+0xba>
	case FR_DISK_ERR:				return FileSystemWrapper_Status_DISK_ERR;
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e024      	b.n	800cd2a <remapResult+0xba>
	case FR_INT_ERR:				return FileSystemWrapper_Status_INT_ERR;
 800cce0:	2302      	movs	r3, #2
 800cce2:	e022      	b.n	800cd2a <remapResult+0xba>
	case FR_NOT_READY:				return FileSystemWrapper_Status_NOT_READY;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e020      	b.n	800cd2a <remapResult+0xba>
	case FR_NO_FILE:				return FileSystemWrapper_Status_NO_FILE;
 800cce8:	2304      	movs	r3, #4
 800ccea:	e01e      	b.n	800cd2a <remapResult+0xba>
	case FR_NO_PATH:				return FileSystemWrapper_Status_NO_PATH;
 800ccec:	2305      	movs	r3, #5
 800ccee:	e01c      	b.n	800cd2a <remapResult+0xba>
	case FR_INVALID_NAME:			return FileSystemWrapper_Status_INVALID_NAME;
 800ccf0:	2306      	movs	r3, #6
 800ccf2:	e01a      	b.n	800cd2a <remapResult+0xba>
	case FR_DENIED:					return FileSystemWrapper_Status_DENIED;
 800ccf4:	2307      	movs	r3, #7
 800ccf6:	e018      	b.n	800cd2a <remapResult+0xba>
	case FR_EXIST:					return FileSystemWrapper_Status_EXIST;
 800ccf8:	2308      	movs	r3, #8
 800ccfa:	e016      	b.n	800cd2a <remapResult+0xba>
	case FR_INVALID_OBJECT:			return FileSystemWrapper_Status_INVALID_OBJECT;
 800ccfc:	2309      	movs	r3, #9
 800ccfe:	e014      	b.n	800cd2a <remapResult+0xba>
	case FR_WRITE_PROTECTED:		return FileSystemWrapper_Status_WRITE_PROTECTED;
 800cd00:	230a      	movs	r3, #10
 800cd02:	e012      	b.n	800cd2a <remapResult+0xba>
	case FR_INVALID_DRIVE:			return FileSystemWrapper_Status_INVALID_DRIVE;
 800cd04:	230b      	movs	r3, #11
 800cd06:	e010      	b.n	800cd2a <remapResult+0xba>
	case FR_NOT_ENABLED:			return FileSystemWrapper_Status_NOT_ENABLED;
 800cd08:	230c      	movs	r3, #12
 800cd0a:	e00e      	b.n	800cd2a <remapResult+0xba>
	case FR_NO_FILESYSTEM:			return FileSystemWrapper_Status_NO_FILESYSTEM;
 800cd0c:	230d      	movs	r3, #13
 800cd0e:	e00c      	b.n	800cd2a <remapResult+0xba>
	case FR_MKFS_ABORTED:			return FileSystemWrapper_Status_MKFS_ABORTED;
 800cd10:	230e      	movs	r3, #14
 800cd12:	e00a      	b.n	800cd2a <remapResult+0xba>
	case FR_TIMEOUT:				return FileSystemWrapper_Status_TIMEOUT;
 800cd14:	230f      	movs	r3, #15
 800cd16:	e008      	b.n	800cd2a <remapResult+0xba>
	case FR_LOCKED:					return FileSystemWrapper_Status_LOCKED;
 800cd18:	2310      	movs	r3, #16
 800cd1a:	e006      	b.n	800cd2a <remapResult+0xba>
	case FR_NOT_ENOUGH_CORE:		return FileSystemWrapper_Status_NOT_ENOUGH_CORE;
 800cd1c:	2311      	movs	r3, #17
 800cd1e:	e004      	b.n	800cd2a <remapResult+0xba>
	case FR_TOO_MANY_OPEN_FILES:	return FileSystemWrapper_Status_TOO_MANY_OPEN_FILES;
 800cd20:	2312      	movs	r3, #18
 800cd22:	e002      	b.n	800cd2a <remapResult+0xba>
	case FR_INVALID_PARAMETER:		return FileSystemWrapper_Status_INVALID_PARAMETER;
 800cd24:	2313      	movs	r3, #19
 800cd26:	e000      	b.n	800cd2a <remapResult+0xba>
	default:						return FileSystemWrapper_Status_DISK_ERR;
 800cd28:	2301      	movs	r3, #1
	}

}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop

0800cd38 <FileSystemWrapper_init>:

FileSystemWrapper_Status_TypeDef FileSystemWrapper_init(FileSystemWrapper_TypeDef* pSelf){
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
	if (pSelf == NULL){
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <FileSystemWrapper_init+0x12>
		return FileSystemWrapper_Status_Error;
 800cd46:	2315      	movs	r3, #21
 800cd48:	e020      	b.n	800cd8c <FileSystemWrapper_init+0x54>
	}
	if (pSelf->bInitialized == 1){
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800cd50:	b2db      	uxtb	r3, r3
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <FileSystemWrapper_init+0x22>
		return FileSystemWrapper_Status_OK;	//TODO ustandaryzowac //TODO zrobic state a nie zmienna bool
 800cd56:	2300      	movs	r3, #0
 800cd58:	e018      	b.n	800cd8c <FileSystemWrapper_init+0x54>
	}

	FRESULT res = f_mount( (FATFS*) &(pSelf->sFatFS), "", FILESYSTEM_MOUNT_IMMEDIATELY);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	490d      	ldr	r1, [pc, #52]	; (800cd94 <FileSystemWrapper_init+0x5c>)
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fb fc53 	bl	800860c <f_mount>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK){
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <FileSystemWrapper_init+0x42>
		pSelf->bInitialized = 1;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
 800cd78:	e003      	b.n	800cd82 <FileSystemWrapper_init+0x4a>
	} else {
		pSelf->bInitialized = 0;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2234 	strb.w	r2, [r3, #564]	; 0x234
	}
	return remapResult(res);
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	4618      	mov	r0, r3
 800cd86:	f7ff ff73 	bl	800cc70 <remapResult>
 800cd8a:	4603      	mov	r3, r0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	0801128c 	.word	0x0801128c

0800cd98 <FileSystemWrapper_open>:

FileSystemWrapper_Status_TypeDef FileSystemWrapper_open(FileSystemWrapper_TypeDef* pSelf, FileSystemWrapper_File_TypeDef* pFile, char* pFilename){
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b086      	sub	sp, #24
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	60b9      	str	r1, [r7, #8]
 800cda2:	607a      	str	r2, [r7, #4]

	if (pSelf == NULL || pFile == NULL || pFilename == NULL){
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d005      	beq.n	800cdb6 <FileSystemWrapper_open+0x1e>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d002      	beq.n	800cdb6 <FileSystemWrapper_open+0x1e>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <FileSystemWrapper_open+0x22>
		return FileSystemWrapper_Status_Error;
 800cdb6:	2315      	movs	r3, #21
 800cdb8:	e018      	b.n	800cdec <FileSystemWrapper_open+0x54>
	}
	if (pSelf->bInitialized == 0){
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <FileSystemWrapper_open+0x32>
		return FileSystemWrapper_Status_NotInitializedError;
 800cdc6:	2314      	movs	r3, #20
 800cdc8:	e010      	b.n	800cdec <FileSystemWrapper_open+0x54>
	}

	pFile->pFileSystem = pSelf;
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	601a      	str	r2, [r3, #0]

	FRESULT res = f_open( (FIL*) &(pFile->sFile), pFilename, FA_READ | FA_WRITE | FA_OPEN_ALWAYS);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	3304      	adds	r3, #4
 800cdd4:	2213      	movs	r2, #19
 800cdd6:	6879      	ldr	r1, [r7, #4]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7fb fc5d 	bl	8008698 <f_open>
 800cdde:	4603      	mov	r3, r0
 800cde0:	75fb      	strb	r3, [r7, #23]
	return remapResult(res);
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7ff ff43 	bl	800cc70 <remapResult>
 800cdea:	4603      	mov	r3, r0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <FileSystemWrapper_writeBinaryData>:

FileSystemWrapper_Status_TypeDef FileSystemWrapper_writeBinaryData(FileSystemWrapper_File_TypeDef* pFile, const void* pBuffer, uint32_t uiBytesToWrite, uint32_t* pBytesWritten){
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
 800ce00:	603b      	str	r3, [r7, #0]

	if (pFile == NULL || pBuffer == NULL){
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <FileSystemWrapper_writeBinaryData+0x1a>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <FileSystemWrapper_writeBinaryData+0x1e>
		return FileSystemWrapper_Status_Error;
 800ce0e:	2315      	movs	r3, #21
 800ce10:	e016      	b.n	800ce40 <FileSystemWrapper_writeBinaryData+0x4c>
	}
	if (pFile->pFileSystem->bInitialized == 0){
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d101      	bne.n	800ce24 <FileSystemWrapper_writeBinaryData+0x30>
		return FileSystemWrapper_Status_NotInitializedError;
 800ce20:	2314      	movs	r3, #20
 800ce22:	e00d      	b.n	800ce40 <FileSystemWrapper_writeBinaryData+0x4c>
	}

	FRESULT res = f_write ( (FIL*) &(pFile->sFile), pBuffer, uiBytesToWrite, (UINT*) pBytesWritten);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	1d18      	adds	r0, r3, #4
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	68b9      	ldr	r1, [r7, #8]
 800ce2e:	f7fb fef1 	bl	8008c14 <f_write>
 800ce32:	4603      	mov	r3, r0
 800ce34:	75fb      	strb	r3, [r7, #23]
	return remapResult(res);
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f7ff ff19 	bl	800cc70 <remapResult>
 800ce3e:	4603      	mov	r3, r0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3718      	adds	r7, #24
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <FileSystemWrapper_readData>:

FileSystemWrapper_Status_TypeDef FileSystemWrapper_readData(FileSystemWrapper_File_TypeDef* pFile, void* pBuffer, uint32_t uiBytesToRead, uint32_t* pBytesRead){
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b086      	sub	sp, #24
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]

	if (pFile == NULL || pBuffer == NULL){
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <FileSystemWrapper_readData+0x1a>
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d101      	bne.n	800ce66 <FileSystemWrapper_readData+0x1e>
		return FileSystemWrapper_Status_Error;
 800ce62:	2315      	movs	r3, #21
 800ce64:	e016      	b.n	800ce94 <FileSystemWrapper_readData+0x4c>
	}
	if (pFile->pFileSystem->bInitialized == 0){
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800ce6e:	b2db      	uxtb	r3, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d101      	bne.n	800ce78 <FileSystemWrapper_readData+0x30>
		return FileSystemWrapper_Status_NotInitializedError;
 800ce74:	2314      	movs	r3, #20
 800ce76:	e00d      	b.n	800ce94 <FileSystemWrapper_readData+0x4c>
	}

	FRESULT res = f_read( (FIL*) &(pFile->sFile), pBuffer, uiBytesToRead, (UINT*) pBytesRead);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	1d18      	adds	r0, r3, #4
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	68b9      	ldr	r1, [r7, #8]
 800ce82:	f7fb fdae 	bl	80089e2 <f_read>
 800ce86:	4603      	mov	r3, r0
 800ce88:	75fb      	strb	r3, [r7, #23]
	return remapResult(res);
 800ce8a:	7dfb      	ldrb	r3, [r7, #23]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff feef 	bl	800cc70 <remapResult>
 800ce92:	4603      	mov	r3, r0
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3718      	adds	r7, #24
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <FileSystemWrapper_close>:
		return FileSystemWrapper_Status_DISK_ERR;
	}
	return FileSystemWrapper_Status_OK;
}

FileSystemWrapper_Status_TypeDef FileSystemWrapper_close(FileSystemWrapper_File_TypeDef* pFile){
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]

	if (pFile == NULL){
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <FileSystemWrapper_close+0x12>
		return FileSystemWrapper_Status_Error;
 800ceaa:	2315      	movs	r3, #21
 800ceac:	e014      	b.n	800ced8 <FileSystemWrapper_close+0x3c>
	}
	if (pFile->pFileSystem->bInitialized == 0){
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <FileSystemWrapper_close+0x24>
		return FileSystemWrapper_Status_NotInitializedError;
 800cebc:	2314      	movs	r3, #20
 800cebe:	e00b      	b.n	800ced8 <FileSystemWrapper_close+0x3c>
	}

	FRESULT res = f_close( (FIL*) &(pFile->sFile));
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	3304      	adds	r3, #4
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7fc f871 	bl	8008fac <f_close>
 800ceca:	4603      	mov	r3, r0
 800cecc:	73fb      	strb	r3, [r7, #15]
	return remapResult(res);
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff fecd 	bl	800cc70 <remapResult>
 800ced6:	4603      	mov	r3, r0
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <FileWritingBuffer_checkIfFull>:


#include "user/file_writing_buffer.h"
#include "string.h"

static FileWritingBuffer_Status_TypeDef FileWritingBuffer_checkIfFull(FileWritingBuffer_TypeDef* pSelf){
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

	if (pSelf->bytesLeft == 0){
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d109      	bne.n	800cf06 <FileWritingBuffer_checkIfFull+0x26>

		FileWritingBuffer_Status_TypeDef status;
		if ((status = FileWritingBuffer_writeToFileSystem(pSelf)) != FileWritingBuffer_Status_OK){
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f000 f950 	bl	800d198 <FileWritingBuffer_writeToFileSystem>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d001      	beq.n	800cf06 <FileWritingBuffer_checkIfFull+0x26>
			return status;
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
 800cf04:	e000      	b.n	800cf08 <FileWritingBuffer_checkIfFull+0x28>
		}
	}

	return FileWritingBuffer_Status_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3710      	adds	r7, #16
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <FileWritingBuffer_init>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_init(FileWritingBuffer_TypeDef* pSelf, FileSystemWrapper_File_TypeDef* pFile){
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]

	if ((pSelf == NULL) || (pFile == NULL)) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d002      	beq.n	800cf26 <FileWritingBuffer_init+0x16>
 800cf20:	683b      	ldr	r3, [r7, #0]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d101      	bne.n	800cf2a <FileWritingBuffer_init+0x1a>
		return FileWritingBuffer_Status_Error;
 800cf26:	2304      	movs	r3, #4
 800cf28:	e00e      	b.n	800cf48 <FileWritingBuffer_init+0x38>
	}

	pSelf->pFile			= pFile;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	601a      	str	r2, [r3, #0]
	pSelf->bytesBuffered	= 0;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	pSelf->bytesLeft		= 0;
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	pSelf->state = FileWritingBuffer_State_Initialized;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	711a      	strb	r2, [r3, #4]

	return FileWritingBuffer_Status_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <FileWritingBuffer_deInit>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_deInit(FileWritingBuffer_TypeDef* pSelf){
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	791b      	ldrb	r3, [r3, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d101      	bne.n	800cf68 <FileWritingBuffer_deInit+0x14>
		return FileWritingBuffer_Status_UnInitializedError;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e016      	b.n	800cf96 <FileWritingBuffer_deInit+0x42>
	}

	pSelf->state 			= FileWritingBuffer_State_UnInitialized;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	711a      	strb	r2, [r3, #4]
	pSelf->pFile			= NULL;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]
	pSelf->bytesBuffered	= 0;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	pSelf->bytesLeft		= 0;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	memset(pSelf->buffer, 0, FILE_WRITING_BUFFER_SIZE);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	3305      	adds	r3, #5
 800cf88:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf8c:	2100      	movs	r1, #0
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f003 fc69 	bl	8010866 <memset>

	return FileWritingBuffer_Status_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3708      	adds	r7, #8
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <FileWritingBuffer_writeUInt8>:
	pSelf->bytesLeft		= 0;

	return FileWritingBuffer_Status_OK;
}

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeUInt8(FileWritingBuffer_TypeDef* pSelf, uint8_t value){
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	70fb      	strb	r3, [r7, #3]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	791b      	ldrb	r3, [r3, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <FileWritingBuffer_writeUInt8+0x18>
		return FileWritingBuffer_Status_UnInitializedError;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e01f      	b.n	800cff6 <FileWritingBuffer_writeUInt8+0x58>
	}

	FileWritingBuffer_Status_TypeDef status;
	if ((status = FileWritingBuffer_checkIfFull(pSelf)) != FileWritingBuffer_Status_OK){
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff ff92 	bl	800cee0 <FileWritingBuffer_checkIfFull>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	73fb      	strb	r3, [r7, #15]
 800cfc0:	7bfb      	ldrb	r3, [r7, #15]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <FileWritingBuffer_writeUInt8+0x2c>
		return status;
 800cfc6:	7bfb      	ldrb	r3, [r7, #15]
 800cfc8:	e015      	b.n	800cff6 <FileWritingBuffer_writeUInt8+0x58>
	}

	pSelf->buffer[pSelf->bytesBuffered] = value;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	4413      	add	r3, r2
 800cfd4:	78fa      	ldrb	r2, [r7, #3]
 800cfd6:	715a      	strb	r2, [r3, #5]
	pSelf->bytesLeft--;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800cfde:	1e5a      	subs	r2, r3, #1
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pSelf->bytesBuffered++;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800cfec:	1c5a      	adds	r2, r3, #1
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	return FileWritingBuffer_Status_OK;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bd80      	pop	{r7, pc}

0800cffe <FileWritingBuffer_writeUInt16>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeUInt16(FileWritingBuffer_TypeDef* pSelf, uint16_t value){
 800cffe:	b580      	push	{r7, lr}
 800d000:	b084      	sub	sp, #16
 800d002:	af00      	add	r7, sp, #0
 800d004:	6078      	str	r0, [r7, #4]
 800d006:	460b      	mov	r3, r1
 800d008:	807b      	strh	r3, [r7, #2]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	791b      	ldrb	r3, [r3, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <FileWritingBuffer_writeUInt16+0x18>
		return FileWritingBuffer_Status_UnInitializedError;
 800d012:	2301      	movs	r3, #1
 800d014:	e01c      	b.n	800d050 <FileWritingBuffer_writeUInt16+0x52>
	}

	FileWritingBuffer_Status_TypeDef status;
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value     ) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d016:	887b      	ldrh	r3, [r7, #2]
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff ffbe 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d022:	4603      	mov	r3, r0
 800d024:	73fb      	strb	r3, [r7, #15]
 800d026:	7bfb      	ldrb	r3, [r7, #15]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <FileWritingBuffer_writeUInt16+0x32>
		return status;
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	e00f      	b.n	800d050 <FileWritingBuffer_writeUInt16+0x52>
	}
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value >> 8) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d030:	887b      	ldrh	r3, [r7, #2]
 800d032:	0a1b      	lsrs	r3, r3, #8
 800d034:	b29b      	uxth	r3, r3
 800d036:	b2db      	uxtb	r3, r3
 800d038:	4619      	mov	r1, r3
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff ffaf 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d040:	4603      	mov	r3, r0
 800d042:	73fb      	strb	r3, [r7, #15]
 800d044:	7bfb      	ldrb	r3, [r7, #15]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <FileWritingBuffer_writeUInt16+0x50>
		return status;
 800d04a:	7bfb      	ldrb	r3, [r7, #15]
 800d04c:	e000      	b.n	800d050 <FileWritingBuffer_writeUInt16+0x52>
	}

	return FileWritingBuffer_Status_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <FileWritingBuffer_writeUInt32>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeUInt32(FileWritingBuffer_TypeDef* pSelf, uint32_t value){
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	6039      	str	r1, [r7, #0]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	791b      	ldrb	r3, [r3, #4]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d101      	bne.n	800d06e <FileWritingBuffer_writeUInt32+0x16>
		return FileWritingBuffer_Status_UnInitializedError;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e037      	b.n	800d0de <FileWritingBuffer_writeUInt32+0x86>
	}

	FileWritingBuffer_Status_TypeDef status;
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value      ) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	b2db      	uxtb	r3, r3
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f7ff ff92 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d07a:	4603      	mov	r3, r0
 800d07c:	73fb      	strb	r3, [r7, #15]
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d001      	beq.n	800d088 <FileWritingBuffer_writeUInt32+0x30>
		return status;
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	e02a      	b.n	800d0de <FileWritingBuffer_writeUInt32+0x86>
	}
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value >> 8 ) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	0a1b      	lsrs	r3, r3, #8
 800d08c:	b2db      	uxtb	r3, r3
 800d08e:	4619      	mov	r1, r3
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ff84 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d096:	4603      	mov	r3, r0
 800d098:	73fb      	strb	r3, [r7, #15]
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <FileWritingBuffer_writeUInt32+0x4c>
		return status;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
 800d0a2:	e01c      	b.n	800d0de <FileWritingBuffer_writeUInt32+0x86>
	}
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value >> 16) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	0c1b      	lsrs	r3, r3, #16
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f7ff ff76 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73fb      	strb	r3, [r7, #15]
 800d0b6:	7bfb      	ldrb	r3, [r7, #15]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <FileWritingBuffer_writeUInt32+0x68>
		return status;
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
 800d0be:	e00e      	b.n	800d0de <FileWritingBuffer_writeUInt32+0x86>
	}
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (value >> 24) & 0xFF)) != FileWritingBuffer_Status_OK){
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	0e1b      	lsrs	r3, r3, #24
 800d0c4:	b2db      	uxtb	r3, r3
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f7ff ff68 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
 800d0d2:	7bfb      	ldrb	r3, [r7, #15]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <FileWritingBuffer_writeUInt32+0x84>
		return status;
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
 800d0da:	e000      	b.n	800d0de <FileWritingBuffer_writeUInt32+0x86>
	}

	return FileWritingBuffer_Status_OK;
 800d0dc:	2300      	movs	r3, #0
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <FileWritingBuffer_writeChar>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeChar(FileWritingBuffer_TypeDef* pSelf, char value){
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b084      	sub	sp, #16
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	70fb      	strb	r3, [r7, #3]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	791b      	ldrb	r3, [r3, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <FileWritingBuffer_writeChar+0x18>
		return FileWritingBuffer_Status_UnInitializedError;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e00c      	b.n	800d118 <FileWritingBuffer_writeChar+0x32>
	}

	FileWritingBuffer_Status_TypeDef status;
	if ((status = FileWritingBuffer_writeUInt8(pSelf, (char)value)) != FileWritingBuffer_Status_OK){
 800d0fe:	78fb      	ldrb	r3, [r7, #3]
 800d100:	4619      	mov	r1, r3
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f7ff ff4b 	bl	800cf9e <FileWritingBuffer_writeUInt8>
 800d108:	4603      	mov	r3, r0
 800d10a:	73fb      	strb	r3, [r7, #15]
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d001      	beq.n	800d116 <FileWritingBuffer_writeChar+0x30>
		return status;
 800d112:	7bfb      	ldrb	r3, [r7, #15]
 800d114:	e000      	b.n	800d118 <FileWritingBuffer_writeChar+0x32>
	}

	return FileWritingBuffer_Status_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <FileWritingBuffer_writeString>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeString(FileWritingBuffer_TypeDef* pSelf, char* string, uint16_t length){
 800d120:	b580      	push	{r7, lr}
 800d122:	b086      	sub	sp, #24
 800d124:	af00      	add	r7, sp, #0
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	60b9      	str	r1, [r7, #8]
 800d12a:	4613      	mov	r3, r2
 800d12c:	80fb      	strh	r3, [r7, #6]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	791b      	ldrb	r3, [r3, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d101      	bne.n	800d13a <FileWritingBuffer_writeString+0x1a>
		return FileWritingBuffer_Status_UnInitializedError;
 800d136:	2301      	movs	r3, #1
 800d138:	e019      	b.n	800d16e <FileWritingBuffer_writeString+0x4e>
	}

	FileWritingBuffer_Status_TypeDef status;

	for(uint32_t i = 0; i < length; i++){
 800d13a:	2300      	movs	r3, #0
 800d13c:	617b      	str	r3, [r7, #20]
 800d13e:	e011      	b.n	800d164 <FileWritingBuffer_writeString+0x44>

		if ((status = FileWritingBuffer_writeChar(pSelf, string[i])) != FileWritingBuffer_Status_OK){
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	4413      	add	r3, r2
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	4619      	mov	r1, r3
 800d14a:	68f8      	ldr	r0, [r7, #12]
 800d14c:	f7ff ffcb 	bl	800d0e6 <FileWritingBuffer_writeChar>
 800d150:	4603      	mov	r3, r0
 800d152:	74fb      	strb	r3, [r7, #19]
 800d154:	7cfb      	ldrb	r3, [r7, #19]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <FileWritingBuffer_writeString+0x3e>
			return status;
 800d15a:	7cfb      	ldrb	r3, [r7, #19]
 800d15c:	e007      	b.n	800d16e <FileWritingBuffer_writeString+0x4e>
	for(uint32_t i = 0; i < length; i++){
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	3301      	adds	r3, #1
 800d162:	617b      	str	r3, [r7, #20]
 800d164:	88fa      	ldrh	r2, [r7, #6]
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	429a      	cmp	r2, r3
 800d16a:	d8e9      	bhi.n	800d140 <FileWritingBuffer_writeString+0x20>
		}
	}

	return FileWritingBuffer_Status_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3718      	adds	r7, #24
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <FileWritingBuffer_writeFixedPoint32>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeFixedPoint32(FileWritingBuffer_TypeDef* pSelf, FixedPoint value){
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	60f8      	str	r0, [r7, #12]
 800d17e:	1d3b      	adds	r3, r7, #4
 800d180:	e883 0006 	stmia.w	r3, {r1, r2}

	return FileWritingBuffer_writeUInt32(pSelf, value.integer);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4619      	mov	r1, r3
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff ff65 	bl	800d058 <FileWritingBuffer_writeUInt32>
 800d18e:	4603      	mov	r3, r0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3710      	adds	r7, #16
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <FileWritingBuffer_writeToFileSystem>:

FileWritingBuffer_Status_TypeDef FileWritingBuffer_writeToFileSystem(FileWritingBuffer_TypeDef* pSelf){
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]

	if (pSelf->state == FileWritingBuffer_State_UnInitialized){
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	791b      	ldrb	r3, [r3, #4]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d101      	bne.n	800d1ac <FileWritingBuffer_writeToFileSystem+0x14>
		return FileWritingBuffer_Status_UnInitializedError;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	e027      	b.n	800d1fc <FileWritingBuffer_writeToFileSystem+0x64>
	}

	if (pSelf->state == FileWritingBuffer_State_Flushing){
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	791b      	ldrb	r3, [r3, #4]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d101      	bne.n	800d1b8 <FileWritingBuffer_writeToFileSystem+0x20>
		return FileWritingBuffer_Status_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	e021      	b.n	800d1fc <FileWritingBuffer_writeToFileSystem+0x64>
	}

	uint32_t							bytesWrittern;
	if (FileSystemWrapper_writeBinaryData(pSelf->pFile, pSelf->buffer, pSelf->bytesBuffered, &bytesWrittern) != FileSystemWrapper_Status_OK){
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6818      	ldr	r0, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	1d59      	adds	r1, r3, #5
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d1c6:	f107 030c 	add.w	r3, r7, #12
 800d1ca:	f7ff fe13 	bl	800cdf4 <FileSystemWrapper_writeBinaryData>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <FileWritingBuffer_writeToFileSystem+0x40>
		return FileWritingBuffer_Status_Error;
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	e011      	b.n	800d1fc <FileWritingBuffer_writeToFileSystem+0x64>
	}
	if (bytesWrittern != pSelf->bytesBuffered){
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	429a      	cmp	r2, r3
 800d1e2:	d001      	beq.n	800d1e8 <FileWritingBuffer_writeToFileSystem+0x50>
		return FileWritingBuffer_Status_Error;
 800d1e4:	2304      	movs	r3, #4
 800d1e6:	e009      	b.n	800d1fc <FileWritingBuffer_writeToFileSystem+0x64>
	}

	pSelf->bytesBuffered	= 0;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	pSelf->bytesLeft		= FILE_WRITING_BUFFER_SIZE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	return FileWritingBuffer_Status_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3710      	adds	r7, #16
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <FixedPoint_constrDecimalFrac>:
 *      Author: Michal Kowalik
 */

#include "user/fixed_point.h"

FixedPoint FixedPoint_constrDecimalFrac(int32_t decimalPart, uint32_t fractionalNumerator, uint32_t fractionalDenominator, uint8_t fractionalBits){
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	60b9      	str	r1, [r7, #8]
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	603b      	str	r3, [r7, #0]

	FixedPoint ret;

	ret.fractionalBits = fractionalBits;
 800d212:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d216:	753b      	strb	r3, [r7, #20]

	decimalPart += fractionalNumerator / fractionalDenominator; //< handle case when fractionalNumerator > fractionalDenomianator
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	4413      	add	r3, r2
 800d224:	60bb      	str	r3, [r7, #8]
	fractionalNumerator %= fractionalDenominator;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	683a      	ldr	r2, [r7, #0]
 800d22a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	fb01 f202 	mul.w	r2, r1, r2
 800d234:	1a9b      	subs	r3, r3, r2
 800d236:	607b      	str	r3, [r7, #4]

	ret.integer  = decimalPart << fractionalBits;
 800d238:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	fa02 f303 	lsl.w	r3, r2, r3
 800d242:	613b      	str	r3, [r7, #16]
	ret.integer |= (fractionalNumerator << fractionalBits) / fractionalDenominator;
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	4619      	mov	r1, r3
 800d248:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	409a      	lsls	r2, r3
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	fbb2 f3f3 	udiv	r3, r2, r3
 800d256:	430b      	orrs	r3, r1
 800d258:	613b      	str	r3, [r7, #16]

	return ret;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	461a      	mov	r2, r3
 800d25e:	f107 0310 	add.w	r3, r7, #16
 800d262:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d266:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d26a:	68f8      	ldr	r0, [r7, #12]
 800d26c:	371c      	adds	r7, #28
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <FixedPoint_a_mult_b>:
		return ((a.integer >> diffBits) < b.integer);

	return (a.integer < (b.integer << diffBits));
}

FixedPoint FixedPoint_a_mult_b(FixedPoint a, FixedPoint b, uint8_t resultFractionalBits){
 800d276:	b082      	sub	sp, #8
 800d278:	b4f0      	push	{r4, r5, r6, r7}
 800d27a:	b08a      	sub	sp, #40	; 0x28
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	1d38      	adds	r0, r7, #4
 800d282:	e880 0006 	stmia.w	r0, {r1, r2}
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t tmpFractionalBits	= a.fractionalBits + b.fractionalBits;
 800d288:	7a3b      	ldrb	r3, [r7, #8]
 800d28a:	461a      	mov	r2, r3
 800d28c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d290:	4413      	add	r3, r2
 800d292:	627b      	str	r3, [r7, #36]	; 0x24
	int64_t tmpResult			= a.integer * b.integer;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d298:	fb02 f303 	mul.w	r3, r2, r3
 800d29c:	461a      	mov	r2, r3
 800d29e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800d2a2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	FixedPoint ret;
	ret.integer			= (int32_t)(tmpResult >> (tmpFractionalBits - resultFractionalBits));
 800d2a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d2aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2ac:	1ad1      	subs	r1, r2, r3
 800d2ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d2b2:	f1c1 0620 	rsb	r6, r1, #32
 800d2b6:	f1b1 0020 	subs.w	r0, r1, #32
 800d2ba:	fa22 f401 	lsr.w	r4, r2, r1
 800d2be:	fa03 f606 	lsl.w	r6, r3, r6
 800d2c2:	ea44 0406 	orr.w	r4, r4, r6
 800d2c6:	d402      	bmi.n	800d2ce <FixedPoint_a_mult_b+0x58>
 800d2c8:	fa43 f000 	asr.w	r0, r3, r0
 800d2cc:	4304      	orrs	r4, r0
 800d2ce:	fa43 f501 	asr.w	r5, r3, r1
 800d2d2:	4623      	mov	r3, r4
 800d2d4:	613b      	str	r3, [r7, #16]
	ret.fractionalBits	= resultFractionalBits;
 800d2d6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d2da:	753b      	strb	r3, [r7, #20]

	return ret;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f107 0310 	add.w	r3, r7, #16
 800d2e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d2e8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	3728      	adds	r7, #40	; 0x28
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bcf0      	pop	{r4, r5, r6, r7}
 800d2f4:	b002      	add	sp, #8
 800d2f6:	4770      	bx	lr

0800d2f8 <LedDriver_init>:
 *      Author: Michal Kowalik
 */

#include "user/led_driver.h"

LedDriver_Status_TypeDef LedDriver_init(LedDriver_TypeDef* pSelf, LedDriver_Port_TypeDef* port, LedDriver_Pin_TypeDef* pin){
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b084      	sub	sp, #16
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
	if (pSelf->state != LedDriver_State_UnInitialized){
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d001      	beq.n	800d310 <LedDriver_init+0x18>
		return LedDriver_Status_Errror;
 800d30c:	2302      	movs	r3, #2
 800d30e:	e01b      	b.n	800d348 <LedDriver_init+0x50>
	}

	pSelf->port				= port;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	68ba      	ldr	r2, [r7, #8]
 800d314:	605a      	str	r2, [r3, #4]
	pSelf->pin				= pin;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	609a      	str	r2, [r3, #8]
	pSelf->onTimeMs			= 0;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	2200      	movs	r2, #0
 800d320:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= 0;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2200      	movs	r2, #0
 800d326:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6858      	ldr	r0, [r3, #4]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	2201      	movs	r2, #1
 800d33a:	4619      	mov	r1, r3
 800d33c:	f7f4 fdec 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_Off;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2201      	movs	r2, #1
 800d344:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 800d346:	2300      	movs	r3, #0

}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <LedDriver_OnLed>:

LedDriver_Status_TypeDef LedDriver_OnLed(LedDriver_TypeDef* pSelf){
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	if (pSelf->state == LedDriver_State_UnInitialized){
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d101      	bne.n	800d364 <LedDriver_OnLed+0x14>
		return LedDriver_Status_UnInitializedErrror;
 800d360:	2301      	movs	r3, #1
 800d362:	e00c      	b.n	800d37e <LedDriver_OnLed+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6858      	ldr	r0, [r3, #4]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	689b      	ldr	r3, [r3, #8]
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	2200      	movs	r2, #0
 800d370:	4619      	mov	r1, r3
 800d372:	f7f4 fdd1 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_OnStady;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2203      	movs	r2, #3
 800d37a:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 800d37c:	2300      	movs	r3, #0

}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}

0800d386 <LedDriver_OffLed>:

LedDriver_Status_TypeDef LedDriver_OffLed(LedDriver_TypeDef* pSelf){
 800d386:	b580      	push	{r7, lr}
 800d388:	b082      	sub	sp, #8
 800d38a:	af00      	add	r7, sp, #0
 800d38c:	6078      	str	r0, [r7, #4]
	if (pSelf->state == LedDriver_State_UnInitialized){
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <LedDriver_OffLed+0x14>
		return LedDriver_Status_UnInitializedErrror;
 800d396:	2301      	movs	r3, #1
 800d398:	e00c      	b.n	800d3b4 <LedDriver_OffLed+0x2e>
	}

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6858      	ldr	r0, [r3, #4]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	2201      	movs	r2, #1
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	f7f4 fdb6 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_Off;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3708      	adds	r7, #8
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <LedDriver_BlinkingLed>:

LedDriver_Status_TypeDef LedDriver_BlinkingLed(LedDriver_TypeDef* pSelf, uint32_t onTimeMs, uint32_t offTimeMs){
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
	if (pSelf->state == LedDriver_State_UnInitialized){
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d101      	bne.n	800d3d4 <LedDriver_BlinkingLed+0x18>
		return LedDriver_Status_UnInitializedErrror;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e015      	b.n	800d400 <LedDriver_BlinkingLed+0x44>
	}

	pSelf->onTimeMs			= onTimeMs;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= offTimeMs;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	687a      	ldr	r2, [r7, #4]
 800d3de:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	615a      	str	r2, [r3, #20]


	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6858      	ldr	r0, [r3, #4]
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	881b      	ldrh	r3, [r3, #0]
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	f7f4 fd90 	bl	8001f18 <HAL_GPIO_WritePin>

	pSelf->state			= LedDriver_State_OnBlinking;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 800d3fe:	2300      	movs	r3, #0

}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <LedDriver_1msElapsedCallbackHandler>:

LedDriver_Status_TypeDef LedDriver_1msElapsedCallbackHandler(LedDriver_TypeDef* pSelf){
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]

	if (pSelf->state != LedDriver_State_OnBlinking){
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b02      	cmp	r3, #2
 800d416:	d001      	beq.n	800d41c <LedDriver_1msElapsedCallbackHandler+0x14>
		return LedDriver_Status_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	e02a      	b.n	800d472 <LedDriver_1msElapsedCallbackHandler+0x6a>
	}

	pSelf->onOffTimeCounter++;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	695b      	ldr	r3, [r3, #20]
 800d420:	1c5a      	adds	r2, r3, #1
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	615a      	str	r2, [r3, #20]

	if (pSelf->onOffTimeCounter == pSelf->onTimeMs){
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	695a      	ldr	r2, [r3, #20]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d109      	bne.n	800d446 <LedDriver_1msElapsedCallbackHandler+0x3e>

		HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6858      	ldr	r0, [r3, #4]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	881b      	ldrh	r3, [r3, #0]
 800d43c:	2201      	movs	r2, #1
 800d43e:	4619      	mov	r1, r3
 800d440:	f7f4 fd6a 	bl	8001f18 <HAL_GPIO_WritePin>
 800d444:	e014      	b.n	800d470 <LedDriver_1msElapsedCallbackHandler+0x68>

	} else if (pSelf->onOffTimeCounter == pSelf->onTimeMs + pSelf->offTimeMs){
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	695a      	ldr	r2, [r3, #20]
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	68d9      	ldr	r1, [r3, #12]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	691b      	ldr	r3, [r3, #16]
 800d452:	440b      	add	r3, r1
 800d454:	429a      	cmp	r2, r3
 800d456:	d10b      	bne.n	800d470 <LedDriver_1msElapsedCallbackHandler+0x68>

		HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6858      	ldr	r0, [r3, #4]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	881b      	ldrh	r3, [r3, #0]
 800d462:	2200      	movs	r2, #0
 800d464:	4619      	mov	r1, r3
 800d466:	f7f4 fd57 	bl	8001f18 <HAL_GPIO_WritePin>
		pSelf->onOffTimeCounter = 0;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	615a      	str	r2, [r3, #20]

	}

	return LedDriver_Status_OK;
 800d470:	2300      	movs	r3, #0

}
 800d472:	4618      	mov	r0, r3
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <MSTimerDriver_init>:
 */

#include "user/ms_timer_driver.h"
#include "stm32f7xx_hal.h"

MSTimerDriver_Status_TypeDef MSTimerDriver_init(volatile MSTimerDriver_TypeDef* pSelf){
 800d47a:	b480      	push	{r7}
 800d47c:	b083      	sub	sp, #12
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <MSTimerDriver_init+0x12>
		return MSTimerDriver_Status_NullPointerError;
 800d488:	2302      	movs	r3, #2
 800d48a:	e003      	b.n	800d494 <MSTimerDriver_init+0x1a>
	}

	pSelf->state = MSTimerDriver_State_Idle;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2201      	movs	r2, #1
 800d490:	701a      	strb	r2, [r3, #0]

	return MSTimerDriver_Status_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	370c      	adds	r7, #12
 800d498:	46bd      	mov	sp, r7
 800d49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49e:	4770      	bx	lr

0800d4a0 <MSTimerDriver_startCounting>:

MSTimerDriver_Status_TypeDef MSTimerDriver_startCounting(volatile MSTimerDriver_TypeDef* pSelf){
 800d4a0:	b5b0      	push	{r4, r5, r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <MSTimerDriver_startCounting+0x12>
		return MSTimerDriver_Status_NullPointerError;
 800d4ae:	2302      	movs	r3, #2
 800d4b0:	e028      	b.n	800d504 <MSTimerDriver_startCounting+0x64>
	}

	if (pSelf->state == MSTimerDriver_State_NotInitialised){
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	b2db      	uxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d101      	bne.n	800d4c0 <MSTimerDriver_startCounting+0x20>
		return MSTimerDriver_State_NotInitialised;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e021      	b.n	800d504 <MSTimerDriver_startCounting+0x64>
	}

	if (pSelf->state == MSTimerDriver_State_Running){
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d101      	bne.n	800d4ce <MSTimerDriver_startCounting+0x2e>
		return MSTimerDriver_Status_Error;
 800d4ca:	2303      	movs	r3, #3
 800d4cc:	e01a      	b.n	800d504 <MSTimerDriver_startCounting+0x64>
	}

	switch (pSelf->state){
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	2b02      	cmp	r3, #2
 800d4d6:	d10b      	bne.n	800d4f0 <MSTimerDriver_startCounting+0x50>
	case MSTimerDriver_State_Suspended:
		pSelf->uiStartTickValue = pSelf->uiStartTickValue - (HAL_GetTick() - pSelf->uiStopTickValue);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	685c      	ldr	r4, [r3, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	689d      	ldr	r5, [r3, #8]
 800d4e0:	f7f3 f8e0 	bl	80006a4 <HAL_GetTick>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	1aeb      	subs	r3, r5, r3
 800d4e8:	18e2      	adds	r2, r4, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	605a      	str	r2, [r3, #4]
		break;
 800d4ee:	e005      	b.n	800d4fc <MSTimerDriver_startCounting+0x5c>
	case MSTimerDriver_State_Idle:
	default:
		pSelf->uiStartTickValue = HAL_GetTick();
 800d4f0:	f7f3 f8d8 	bl	80006a4 <HAL_GetTick>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	605a      	str	r2, [r3, #4]
		break;
 800d4fa:	bf00      	nop
	}

	pSelf->state = MSTimerDriver_State_Running;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2203      	movs	r2, #3
 800d500:	701a      	strb	r2, [r3, #0]

	return MSTimerDriver_Status_OK;
 800d502:	2300      	movs	r3, #0

}
 800d504:	4618      	mov	r0, r3
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bdb0      	pop	{r4, r5, r7, pc}

0800d50c <MSTimerDriver_getMSTime>:

	return MSTimerDriver_Status_OK;

}

MSTimerDriver_Status_TypeDef MSTimerDriver_getMSTime(volatile MSTimerDriver_TypeDef* pSelf, uint32_t* pRetTime){
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetTime == NULL){
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d002      	beq.n	800d522 <MSTimerDriver_getMSTime+0x16>
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d101      	bne.n	800d526 <MSTimerDriver_getMSTime+0x1a>
		return MSTimerDriver_Status_NullPointerError;
 800d522:	2302      	movs	r3, #2
 800d524:	e024      	b.n	800d570 <MSTimerDriver_getMSTime+0x64>
	}

	if (pSelf->state == MSTimerDriver_State_NotInitialised){
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <MSTimerDriver_getMSTime+0x28>
		return MSTimerDriver_State_NotInitialised;
 800d530:	2300      	movs	r3, #0
 800d532:	e01d      	b.n	800d570 <MSTimerDriver_getMSTime+0x64>
	}

	switch (pSelf->state){
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d002      	beq.n	800d544 <MSTimerDriver_getMSTime+0x38>
 800d53e:	2b02      	cmp	r3, #2
 800d540:	d004      	beq.n	800d54c <MSTimerDriver_getMSTime+0x40>
 800d542:	e00b      	b.n	800d55c <MSTimerDriver_getMSTime+0x50>
	case MSTimerDriver_State_Idle:
		*pRetTime = 0;
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2200      	movs	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
		break;
 800d54a:	e010      	b.n	800d56e <MSTimerDriver_getMSTime+0x62>
	case MSTimerDriver_State_Suspended:
		*pRetTime = pSelf->uiStopTickValue - pSelf->uiStartTickValue;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	689a      	ldr	r2, [r3, #8]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	685b      	ldr	r3, [r3, #4]
 800d554:	1ad2      	subs	r2, r2, r3
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	601a      	str	r2, [r3, #0]
		break;
 800d55a:	e008      	b.n	800d56e <MSTimerDriver_getMSTime+0x62>
	case MSTimerDriver_State_Running:
	default:
		*pRetTime = HAL_GetTick() - pSelf->uiStartTickValue;
 800d55c:	f7f3 f8a2 	bl	80006a4 <HAL_GetTick>
 800d560:	4602      	mov	r2, r0
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	685b      	ldr	r3, [r3, #4]
 800d566:	1ad2      	subs	r2, r2, r3
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	601a      	str	r2, [r3, #0]
		break;
 800d56c:	bf00      	nop
	}

	return MSTimerDriver_Status_OK;
 800d56e:	2300      	movs	r3, #0

}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <RTCDriver_HALInit>:
#include "user/rtc_driver.h"
#include "rtc.h"



static RTCDriver_Status_TypeDef RTCDriver_HALInit(RTCDriver_TypeDef* pSelf){
 800d578:	b580      	push	{r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]

	if (pSelf->pRTCHandler->State != HAL_RTC_STATE_RESET){
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	7f5b      	ldrb	r3, [r3, #29]
 800d586:	b2db      	uxtb	r3, r3
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <RTCDriver_HALInit+0x18>
		return RTCDriver_Status_Error;
 800d58c:	2305      	movs	r3, #5
 800d58e:	e026      	b.n	800d5de <RTCDriver_HALInit+0x66>
	}

	pSelf->pRTCHandler->Instance = RTC;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a14      	ldr	r2, [pc, #80]	; (800d5e8 <RTCDriver_HALInit+0x70>)
 800d596:	601a      	str	r2, [r3, #0]
	pSelf->pRTCHandler->Init.HourFormat = RTC_HOURFORMAT_24;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2200      	movs	r2, #0
 800d59e:	605a      	str	r2, [r3, #4]
	pSelf->pRTCHandler->Init.AsynchPrediv = 127;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	227f      	movs	r2, #127	; 0x7f
 800d5a6:	609a      	str	r2, [r3, #8]
	pSelf->pRTCHandler->Init.SynchPrediv = 255;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	22ff      	movs	r2, #255	; 0xff
 800d5ae:	60da      	str	r2, [r3, #12]
	pSelf->pRTCHandler->Init.OutPut = RTC_OUTPUT_DISABLE;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	611a      	str	r2, [r3, #16]
	pSelf->pRTCHandler->Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	615a      	str	r2, [r3, #20]
	pSelf->pRTCHandler->Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(pSelf->pRTCHandler) != HAL_OK)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7f5 fdb7 	bl	8003140 <HAL_RTC_Init>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d001      	beq.n	800d5dc <RTCDriver_HALInit+0x64>
	{
		return RTCDriver_Status_Error;
 800d5d8:	2305      	movs	r3, #5
 800d5da:	e000      	b.n	800d5de <RTCDriver_HALInit+0x66>
	}
	return RTCDriver_Status_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	40002800 	.word	0x40002800

0800d5ec <RTCDriver_HALRestoreTimeAndDate>:

static RTCDriver_Status_TypeDef RTCDriver_HALRestoreTimeAndDate(RTCDriver_TypeDef* pSelf ){
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b08a      	sub	sp, #40	; 0x28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]

	if (pSelf->pRTCHandler->State != HAL_RTC_STATE_READY){
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	7f5b      	ldrb	r3, [r3, #29]
 800d5fa:	b2db      	uxtb	r3, r3
 800d5fc:	2b01      	cmp	r3, #1
 800d5fe:	d001      	beq.n	800d604 <RTCDriver_HALRestoreTimeAndDate+0x18>
		return RTCDriver_Status_NotInitialisedError;
 800d600:	2301      	movs	r3, #1
 800d602:	e047      	b.n	800d694 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	for (uint8_t i=0; i<backupRegistersCount; i++){
 800d604:	2300      	movs	r3, #0
 800d606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d60a:	e018      	b.n	800d63e <RTCDriver_HALRestoreTimeAndDate+0x52>
		if (HAL_RTCEx_BKUPRead(pSelf->pRTCHandler, backupRegistersIndexes[i]) != backupRegistersValues[i]){
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6818      	ldr	r0, [r3, #0]
 800d610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d614:	4a21      	ldr	r2, [pc, #132]	; (800d69c <RTCDriver_HALRestoreTimeAndDate+0xb0>)
 800d616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d61a:	4619      	mov	r1, r3
 800d61c:	f7f6 f8ca 	bl	80037b4 <HAL_RTCEx_BKUPRead>
 800d620:	4601      	mov	r1, r0
 800d622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d626:	4a1e      	ldr	r2, [pc, #120]	; (800d6a0 <RTCDriver_HALRestoreTimeAndDate+0xb4>)
 800d628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62c:	4299      	cmp	r1, r3
 800d62e:	d001      	beq.n	800d634 <RTCDriver_HALRestoreTimeAndDate+0x48>
			return RTCDriver_Status_TimeAndDateNotRestoredError;
 800d630:	2302      	movs	r3, #2
 800d632:	e02f      	b.n	800d694 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d638:	3301      	adds	r3, #1
 800d63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d63e:	2203      	movs	r2, #3
 800d640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d644:	4293      	cmp	r3, r2
 800d646:	d3e1      	bcc.n	800d60c <RTCDriver_HALRestoreTimeAndDate+0x20>
		}
	}

	RTC_TimeTypeDef sTime = {0};
 800d648:	f107 030c 	add.w	r3, r7, #12
 800d64c:	2200      	movs	r2, #0
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	605a      	str	r2, [r3, #4]
 800d652:	609a      	str	r2, [r3, #8]
 800d654:	60da      	str	r2, [r3, #12]
 800d656:	611a      	str	r2, [r3, #16]
 800d658:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 800d65a:	2300      	movs	r3, #0
 800d65c:	60bb      	str	r3, [r7, #8]
	if (HAL_RTC_GetTime(pSelf->pRTCHandler, &sTime, RTC_FORMAT_BIN) != HAL_OK){
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f107 010c 	add.w	r1, r7, #12
 800d666:	2200      	movs	r2, #0
 800d668:	4618      	mov	r0, r3
 800d66a:	f7f5 fea3 	bl	80033b4 <HAL_RTC_GetTime>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <RTCDriver_HALRestoreTimeAndDate+0x8c>
		return RTCDriver_Status_TimeAndDateNotRestoredError;
 800d674:	2302      	movs	r3, #2
 800d676:	e00d      	b.n	800d694 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	if (HAL_RTC_GetDate(pSelf->pRTCHandler, &sDate, RTC_FORMAT_BIN) != HAL_OK){
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f107 0108 	add.w	r1, r7, #8
 800d680:	2200      	movs	r2, #0
 800d682:	4618      	mov	r0, r3
 800d684:	f7f5 ff9c 	bl	80035c0 <HAL_RTC_GetDate>
 800d688:	4603      	mov	r3, r0
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d001      	beq.n	800d692 <RTCDriver_HALRestoreTimeAndDate+0xa6>
		return RTCDriver_Status_TimeAndDateNotRestoredError;
 800d68e:	2302      	movs	r3, #2
 800d690:	e000      	b.n	800d694 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	return RTCDriver_Status_OK;
 800d692:	2300      	movs	r3, #0
}
 800d694:	4618      	mov	r0, r3
 800d696:	3728      	adds	r7, #40	; 0x28
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	08011a18 	.word	0x08011a18
 800d6a0:	08011a24 	.word	0x08011a24

0800d6a4 <RTCDriver_HALSetTimeAndDate>:

static RTCDriver_Status_TypeDef RTCDriver_HALSetTimeAndDate(RTCDriver_TypeDef* pSelf, RTC_TimeTypeDef* pTime, RTC_DateTypeDef* pDate){
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	607a      	str	r2, [r7, #4]


	if (HAL_RTC_SetTime(pSelf->pRTCHandler, pTime, RTC_FORMAT_BIN) != HAL_OK) {
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	68b9      	ldr	r1, [r7, #8]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f5 fdbd 	bl	8003238 <HAL_RTC_SetTime>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d001      	beq.n	800d6c8 <RTCDriver_HALSetTimeAndDate+0x24>
		return RTCDriver_Status_Error;
 800d6c4:	2305      	movs	r3, #5
 800d6c6:	e027      	b.n	800d718 <RTCDriver_HALSetTimeAndDate+0x74>
	}

	if (HAL_RTC_SetDate(pSelf->pRTCHandler, pDate, RTC_FORMAT_BIN) != HAL_OK) {
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	6879      	ldr	r1, [r7, #4]
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f7f5 fecd 	bl	8003470 <HAL_RTC_SetDate>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d001      	beq.n	800d6e0 <RTCDriver_HALSetTimeAndDate+0x3c>
		return RTCDriver_Status_Error;
 800d6dc:	2305      	movs	r3, #5
 800d6de:	e01b      	b.n	800d718 <RTCDriver_HALSetTimeAndDate+0x74>
	}

	HAL_PWR_EnableBkUpAccess();
 800d6e0:	f7f4 fc34 	bl	8001f4c <HAL_PWR_EnableBkUpAccess>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	75fb      	strb	r3, [r7, #23]
 800d6e8:	e00f      	b.n	800d70a <RTCDriver_HALSetTimeAndDate+0x66>
		HAL_RTCEx_BKUPWrite(pSelf->pRTCHandler, backupRegistersIndexes[i], backupRegistersValues[i]);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	6818      	ldr	r0, [r3, #0]
 800d6ee:	7dfb      	ldrb	r3, [r7, #23]
 800d6f0:	4a0b      	ldr	r2, [pc, #44]	; (800d720 <RTCDriver_HALSetTimeAndDate+0x7c>)
 800d6f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6f6:	7dfb      	ldrb	r3, [r7, #23]
 800d6f8:	4a0a      	ldr	r2, [pc, #40]	; (800d724 <RTCDriver_HALSetTimeAndDate+0x80>)
 800d6fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6fe:	461a      	mov	r2, r3
 800d700:	f7f6 f83e 	bl	8003780 <HAL_RTCEx_BKUPWrite>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 800d704:	7dfb      	ldrb	r3, [r7, #23]
 800d706:	3301      	adds	r3, #1
 800d708:	75fb      	strb	r3, [r7, #23]
 800d70a:	2203      	movs	r2, #3
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
 800d70e:	4293      	cmp	r3, r2
 800d710:	d3eb      	bcc.n	800d6ea <RTCDriver_HALSetTimeAndDate+0x46>
	}
	HAL_PWR_DisableBkUpAccess();
 800d712:	f7f4 fc2b 	bl	8001f6c <HAL_PWR_DisableBkUpAccess>

	return RTCDriver_Status_OK;
 800d716:	2300      	movs	r3, #0
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3718      	adds	r7, #24
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	08011a18 	.word	0x08011a18
 800d724:	08011a24 	.word	0x08011a24

0800d728 <RTCDriver_init>:


RTCDriver_Status_TypeDef RTCDriver_init(RTCDriver_TypeDef* pSelf, RTC_HandleTypeDef* pRTCHandler){
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08a      	sub	sp, #40	; 0x28
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]

	if (pSelf->state != RTCDriver_State_UnInitialized){
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	791b      	ldrb	r3, [r3, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <RTCDriver_init+0x16>
		return RTCDriver_Status_Error;
 800d73a:	2305      	movs	r3, #5
 800d73c:	e054      	b.n	800d7e8 <RTCDriver_init+0xc0>
	}

	if (pRTCHandler == NULL){
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d101      	bne.n	800d748 <RTCDriver_init+0x20>
		return RTCDriver_Status_Error;
 800d744:	2305      	movs	r3, #5
 800d746:	e04f      	b.n	800d7e8 <RTCDriver_init+0xc0>
	}

	RTCDriver_Status_TypeDef ret = RTCDriver_Status_OK;
 800d748:	2300      	movs	r3, #0
 800d74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	pSelf->pRTCHandler = pRTCHandler;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	601a      	str	r2, [r3, #0]

	if ((ret = RTCDriver_HALInit(pSelf)) != RTCDriver_Status_OK){
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7ff ff0f 	bl	800d578 <RTCDriver_HALInit>
 800d75a:	4603      	mov	r3, r0
 800d75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d764:	2b00      	cmp	r3, #0
 800d766:	d002      	beq.n	800d76e <RTCDriver_init+0x46>
		return ret;
 800d768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d76c:	e03c      	b.n	800d7e8 <RTCDriver_init+0xc0>
	}

	ret = RTCDriver_HALRestoreTimeAndDate(pSelf);
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7ff ff3c 	bl	800d5ec <RTCDriver_HALRestoreTimeAndDate>
 800d774:	4603      	mov	r3, r0
 800d776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != RTCDriver_Status_OK && ret != RTCDriver_Status_TimeAndDateNotRestoredError){
 800d77a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d006      	beq.n	800d790 <RTCDriver_init+0x68>
 800d782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d786:	2b02      	cmp	r3, #2
 800d788:	d002      	beq.n	800d790 <RTCDriver_init+0x68>
		return ret;
 800d78a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d78e:	e02b      	b.n	800d7e8 <RTCDriver_init+0xc0>
	}
	if (ret == RTCDriver_Status_TimeAndDateNotRestoredError){
 800d790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d794:	2b02      	cmp	r3, #2
 800d796:	d123      	bne.n	800d7e0 <RTCDriver_init+0xb8>

		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;

		sTime.Hours = 23;
 800d798:	2317      	movs	r3, #23
 800d79a:	733b      	strb	r3, [r7, #12]
		sTime.Minutes = 56;
 800d79c:	2338      	movs	r3, #56	; 0x38
 800d79e:	737b      	strb	r3, [r7, #13]
		sTime.Seconds = 0;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	73bb      	strb	r3, [r7, #14]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	61fb      	str	r3, [r7, #28]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	623b      	str	r3, [r7, #32]
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	723b      	strb	r3, [r7, #8]
		sDate.Month = RTC_MONTH_APRIL;
 800d7b0:	2304      	movs	r3, #4
 800d7b2:	727b      	strb	r3, [r7, #9]
		sDate.Date = 17;
 800d7b4:	2311      	movs	r3, #17
 800d7b6:	72bb      	strb	r3, [r7, #10]
		sDate.Year = (2019-RTC_DRIVER_YEAR_MIN_VALUE);
 800d7b8:	2327      	movs	r3, #39	; 0x27
 800d7ba:	72fb      	strb	r3, [r7, #11]

		if ((ret = RTCDriver_HALSetTimeAndDate(pSelf, &sTime, &sDate)) != RTCDriver_Status_OK){
 800d7bc:	f107 0208 	add.w	r2, r7, #8
 800d7c0:	f107 030c 	add.w	r3, r7, #12
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f7ff ff6c 	bl	800d6a4 <RTCDriver_HALSetTimeAndDate>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d7d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d002      	beq.n	800d7e0 <RTCDriver_init+0xb8>
			return ret;
 800d7da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d7de:	e003      	b.n	800d7e8 <RTCDriver_init+0xc0>
		}
	}

	pSelf->state = RTCDriver_State_Ready;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2201      	movs	r2, #1
 800d7e4:	711a      	strb	r2, [r3, #4]

	return RTCDriver_Status_OK;
 800d7e6:	2300      	movs	r3, #0
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3728      	adds	r7, #40	; 0x28
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <RTCDriver_getDateAndTime>:

RTCDriver_Status_TypeDef RTCDriver_getDateAndTime(RTCDriver_TypeDef* pSelf, DateTime_TypeDef* pRetDateTime){
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08a      	sub	sp, #40	; 0x28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]

	if (pSelf->state == RTCDriver_State_UnInitialized){
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	791b      	ldrb	r3, [r3, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <RTCDriver_getDateAndTime+0x16>
		return RTCDriver_Status_NotInitialisedError;
 800d802:	2301      	movs	r3, #1
 800d804:	e03d      	b.n	800d882 <RTCDriver_getDateAndTime+0x92>
	}

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	if (HAL_RTC_WaitForSynchro(pSelf->pRTCHandler) != HAL_OK){
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7f5 ff28 	bl	8003660 <HAL_RTC_WaitForSynchro>
 800d810:	4603      	mov	r3, r0
 800d812:	2b00      	cmp	r3, #0
 800d814:	d001      	beq.n	800d81a <RTCDriver_getDateAndTime+0x2a>
		return RTCDriver_Status_Error;
 800d816:	2305      	movs	r3, #5
 800d818:	e033      	b.n	800d882 <RTCDriver_getDateAndTime+0x92>
	}
	if (HAL_RTC_GetTime(pSelf->pRTCHandler, &time, RTC_FORMAT_BIN) != HAL_OK){
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f107 010c 	add.w	r1, r7, #12
 800d822:	2200      	movs	r2, #0
 800d824:	4618      	mov	r0, r3
 800d826:	f7f5 fdc5 	bl	80033b4 <HAL_RTC_GetTime>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d001      	beq.n	800d834 <RTCDriver_getDateAndTime+0x44>
		return RTCDriver_Status_Error;
 800d830:	2305      	movs	r3, #5
 800d832:	e026      	b.n	800d882 <RTCDriver_getDateAndTime+0x92>
	}
	if (HAL_RTC_GetDate(pSelf->pRTCHandler, &date, RTC_FORMAT_BIN) != HAL_OK){
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d83c:	2200      	movs	r2, #0
 800d83e:	4618      	mov	r0, r3
 800d840:	f7f5 febe 	bl	80035c0 <HAL_RTC_GetDate>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d001      	beq.n	800d84e <RTCDriver_getDateAndTime+0x5e>
		return RTCDriver_Status_Error;
 800d84a:	2305      	movs	r3, #5
 800d84c:	e019      	b.n	800d882 <RTCDriver_getDateAndTime+0x92>
	}

	pRetDateTime->year = 	(uint16_t)(date.Year + RTC_DRIVER_YEAR_MIN_VALUE);
 800d84e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d852:	b29b      	uxth	r3, r3
 800d854:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800d858:	b29a      	uxth	r2, r3
 800d85a:	683b      	ldr	r3, [r7, #0]
 800d85c:	801a      	strh	r2, [r3, #0]
	pRetDateTime->month = 	date.Month;
 800d85e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	709a      	strb	r2, [r3, #2]
	pRetDateTime->day = 	date.Date;
 800d866:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	70da      	strb	r2, [r3, #3]
	pRetDateTime->hour = 	time.Hours;
 800d86e:	7b3a      	ldrb	r2, [r7, #12]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	711a      	strb	r2, [r3, #4]
	pRetDateTime->minute = 	time.Minutes;
 800d874:	7b7a      	ldrb	r2, [r7, #13]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	715a      	strb	r2, [r3, #5]
	pRetDateTime->second = 	time.Seconds;
 800d87a:	7bba      	ldrb	r2, [r7, #14]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	719a      	strb	r2, [r3, #6]

	return RTCDriver_Status_OK;
 800d880:	2300      	movs	r3, #0

}
 800d882:	4618      	mov	r0, r3
 800d884:	3728      	adds	r7, #40	; 0x28
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}

0800d88a <RTCDriver_setDateAndTime>:

RTCDriver_Status_TypeDef RTCDriver_setDateAndTime(RTCDriver_TypeDef* pSelf, DateTime_TypeDef dateTime){
 800d88a:	b580      	push	{r7, lr}
 800d88c:	b08c      	sub	sp, #48	; 0x30
 800d88e:	af00      	add	r7, sp, #0
 800d890:	60f8      	str	r0, [r7, #12]
 800d892:	4638      	mov	r0, r7
 800d894:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	if (pSelf->state == RTCDriver_State_UnInitialized){
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	791b      	ldrb	r3, [r3, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d101      	bne.n	800d8a4 <RTCDriver_setDateAndTime+0x1a>
		return RTCDriver_Status_NotInitialisedError;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	e03c      	b.n	800d91e <RTCDriver_setDateAndTime+0x94>
	}

	if ((dateTime.year > RTC_DRIVER_YEAR_MAX_VALUE) || (dateTime.year < RTC_DRIVER_YEAR_MIN_VALUE) ||
 800d8a4:	883b      	ldrh	r3, [r7, #0]
 800d8a6:	f5b3 6f02 	cmp.w	r3, #2080	; 0x820
 800d8aa:	d210      	bcs.n	800d8ce <RTCDriver_setDateAndTime+0x44>
 800d8ac:	883b      	ldrh	r3, [r7, #0]
 800d8ae:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d90b      	bls.n	800d8ce <RTCDriver_setDateAndTime+0x44>
			(dateTime.month > RTC_DRIVER_MONTH_MAX_VALUE) || (dateTime.month < RTC_DRIVER_MONTH_MIN_VALUE) ||
 800d8b6:	78bb      	ldrb	r3, [r7, #2]
	if ((dateTime.year > RTC_DRIVER_YEAR_MAX_VALUE) || (dateTime.year < RTC_DRIVER_YEAR_MIN_VALUE) ||
 800d8b8:	2b0c      	cmp	r3, #12
 800d8ba:	d808      	bhi.n	800d8ce <RTCDriver_setDateAndTime+0x44>
			(dateTime.month > RTC_DRIVER_MONTH_MAX_VALUE) || (dateTime.month < RTC_DRIVER_MONTH_MIN_VALUE) ||
 800d8bc:	78bb      	ldrb	r3, [r7, #2]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d005      	beq.n	800d8ce <RTCDriver_setDateAndTime+0x44>
			(dateTime.day > RTC_DRIVER_DAY_MAX_VALUE) || (dateTime.day < RTC_DRIVER_DAY_MIN_VALUE)) {
 800d8c2:	78fb      	ldrb	r3, [r7, #3]
			(dateTime.month > RTC_DRIVER_MONTH_MAX_VALUE) || (dateTime.month < RTC_DRIVER_MONTH_MIN_VALUE) ||
 800d8c4:	2b1f      	cmp	r3, #31
 800d8c6:	d802      	bhi.n	800d8ce <RTCDriver_setDateAndTime+0x44>
			(dateTime.day > RTC_DRIVER_DAY_MAX_VALUE) || (dateTime.day < RTC_DRIVER_DAY_MIN_VALUE)) {
 800d8c8:	78fb      	ldrb	r3, [r7, #3]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <RTCDriver_setDateAndTime+0x48>
		return RTCDriver_Status_WrongDateFormatError;
 800d8ce:	2303      	movs	r3, #3
 800d8d0:	e025      	b.n	800d91e <RTCDriver_setDateAndTime+0x94>
	} else if ((dateTime.hour > RTC_DRIVER_HOUR_MAX_VALUE) || (dateTime.minute > RTC_DRIVER_MINUTE_MAX_VALUE) || (dateTime.second > RTC_DRIVER_SECOND_MAX_VALUE) ) {
 800d8d2:	793b      	ldrb	r3, [r7, #4]
 800d8d4:	2b17      	cmp	r3, #23
 800d8d6:	d805      	bhi.n	800d8e4 <RTCDriver_setDateAndTime+0x5a>
 800d8d8:	797b      	ldrb	r3, [r7, #5]
 800d8da:	2b3b      	cmp	r3, #59	; 0x3b
 800d8dc:	d802      	bhi.n	800d8e4 <RTCDriver_setDateAndTime+0x5a>
 800d8de:	79bb      	ldrb	r3, [r7, #6]
 800d8e0:	2b3b      	cmp	r3, #59	; 0x3b
 800d8e2:	d901      	bls.n	800d8e8 <RTCDriver_setDateAndTime+0x5e>
		return RTCDriver_Status_WrongTimeFormatError;
 800d8e4:	2304      	movs	r3, #4
 800d8e6:	e01a      	b.n	800d91e <RTCDriver_setDateAndTime+0x94>
	}

	RTC_DateTypeDef date;
	RTC_TimeTypeDef time;

	date.Year =		(dateTime.year - RTC_DRIVER_YEAR_MIN_VALUE);
 800d8e8:	883b      	ldrh	r3, [r7, #0]
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	3344      	adds	r3, #68	; 0x44
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	date.Month =	dateTime.month;
 800d8f4:	78bb      	ldrb	r3, [r7, #2]
 800d8f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	date.Date =		dateTime.day;
 800d8fa:	78fb      	ldrb	r3, [r7, #3]
 800d8fc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	time.Hours = 	dateTime.hour;
 800d900:	793b      	ldrb	r3, [r7, #4]
 800d902:	753b      	strb	r3, [r7, #20]
	time.Minutes =	dateTime.minute;
 800d904:	797b      	ldrb	r3, [r7, #5]
 800d906:	757b      	strb	r3, [r7, #21]
	time.Seconds =	dateTime.second;
 800d908:	79bb      	ldrb	r3, [r7, #6]
 800d90a:	75bb      	strb	r3, [r7, #22]

	return RTCDriver_HALSetTimeAndDate(pSelf, &time, &date);
 800d90c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d910:	f107 0314 	add.w	r3, r7, #20
 800d914:	4619      	mov	r1, r3
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fec4 	bl	800d6a4 <RTCDriver_HALSetTimeAndDate>
 800d91c:	4603      	mov	r3, r0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3730      	adds	r7, #48	; 0x30
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <findChar>:
#include <stddef.h>
#include <stdio.h>
#include "user/string_operations.h"
#include <string.h>

StringOperations_Status_TypeDef findChar(uint8_t* buffer, uint8_t charToFind, uint16_t bufferSize, uint16_t* pRetIndex){
 800d926:	b480      	push	{r7}
 800d928:	b087      	sub	sp, #28
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	60f8      	str	r0, [r7, #12]
 800d92e:	607b      	str	r3, [r7, #4]
 800d930:	460b      	mov	r3, r1
 800d932:	72fb      	strb	r3, [r7, #11]
 800d934:	4613      	mov	r3, r2
 800d936:	813b      	strh	r3, [r7, #8]

	if (buffer == NULL || pRetIndex == NULL){
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d002      	beq.n	800d944 <findChar+0x1e>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <findChar+0x22>
		return StringOperations_Status_OK;
 800d944:	2300      	movs	r3, #0
 800d946:	e019      	b.n	800d97c <findChar+0x56>
	}

	for (uint16_t i=0; i<bufferSize; i++){
 800d948:	2300      	movs	r3, #0
 800d94a:	82fb      	strh	r3, [r7, #22]
 800d94c:	e00e      	b.n	800d96c <findChar+0x46>

		if (buffer[i] == charToFind){
 800d94e:	8afb      	ldrh	r3, [r7, #22]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	4413      	add	r3, r2
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	7afa      	ldrb	r2, [r7, #11]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d104      	bne.n	800d966 <findChar+0x40>
			*pRetIndex = i;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	8afa      	ldrh	r2, [r7, #22]
 800d960:	801a      	strh	r2, [r3, #0]
			return StringOperations_Status_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	e00a      	b.n	800d97c <findChar+0x56>
	for (uint16_t i=0; i<bufferSize; i++){
 800d966:	8afb      	ldrh	r3, [r7, #22]
 800d968:	3301      	adds	r3, #1
 800d96a:	82fb      	strh	r3, [r7, #22]
 800d96c:	8afa      	ldrh	r2, [r7, #22]
 800d96e:	893b      	ldrh	r3, [r7, #8]
 800d970:	429a      	cmp	r2, r3
 800d972:	d3ec      	bcc.n	800d94e <findChar+0x28>
		}
	}

	*pRetIndex = bufferSize;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	893a      	ldrh	r2, [r7, #8]
 800d978:	801a      	strh	r2, [r3, #0]
	return StringOperations_Status_CharNotFoundError;
 800d97a:	2303      	movs	r3, #3
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	371c      	adds	r7, #28
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <stringEqual>:

StringOperations_Status_TypeDef stringEqual(uint8_t* stringA, uint8_t* stringB, uint16_t length){
 800d988:	b480      	push	{r7}
 800d98a:	b087      	sub	sp, #28
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	60f8      	str	r0, [r7, #12]
 800d990:	60b9      	str	r1, [r7, #8]
 800d992:	4613      	mov	r3, r2
 800d994:	80fb      	strh	r3, [r7, #6]

	if (stringA == NULL || stringB == NULL){
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d002      	beq.n	800d9a2 <stringEqual+0x1a>
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d101      	bne.n	800d9a6 <stringEqual+0x1e>
		return StringOperations_Status_OK;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	e016      	b.n	800d9d4 <stringEqual+0x4c>
	}

	for (uint16_t i=0; i<length; i++){
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	82fb      	strh	r3, [r7, #22]
 800d9aa:	e00e      	b.n	800d9ca <stringEqual+0x42>
		if (stringA[i] != stringB[i]){
 800d9ac:	8afb      	ldrh	r3, [r7, #22]
 800d9ae:	68fa      	ldr	r2, [r7, #12]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	781a      	ldrb	r2, [r3, #0]
 800d9b4:	8afb      	ldrh	r3, [r7, #22]
 800d9b6:	68b9      	ldr	r1, [r7, #8]
 800d9b8:	440b      	add	r3, r1
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d001      	beq.n	800d9c4 <stringEqual+0x3c>
			return StringOperations_Status_NotEqual;
 800d9c0:	2301      	movs	r3, #1
 800d9c2:	e007      	b.n	800d9d4 <stringEqual+0x4c>
	for (uint16_t i=0; i<length; i++){
 800d9c4:	8afb      	ldrh	r3, [r7, #22]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	82fb      	strh	r3, [r7, #22]
 800d9ca:	8afa      	ldrh	r2, [r7, #22]
 800d9cc:	88fb      	ldrh	r3, [r7, #6]
 800d9ce:	429a      	cmp	r2, r3
 800d9d0:	d3ec      	bcc.n	800d9ac <stringEqual+0x24>
		}
	}

	return StringOperations_Status_OK;
 800d9d2:	2300      	movs	r3, #0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	371c      	adds	r7, #28
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9de:	4770      	bx	lr

0800d9e0 <stringToFixedPoint>:

StringOperations_Status_TypeDef stringToFixedPoint(uint8_t* sentence, uint16_t length, uint8_t decimalSeparator, uint8_t fractionalBits, FixedPoint* pRetFixedPoint){
 800d9e0:	b590      	push	{r4, r7, lr}
 800d9e2:	b08d      	sub	sp, #52	; 0x34
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	4608      	mov	r0, r1
 800d9ea:	4611      	mov	r1, r2
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	817b      	strh	r3, [r7, #10]
 800d9f2:	460b      	mov	r3, r1
 800d9f4:	727b      	strb	r3, [r7, #9]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	723b      	strb	r3, [r7, #8]

	if (sentence == NULL || pRetFixedPoint == NULL){
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <stringToFixedPoint+0x26>
 800da00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da02:	2b00      	cmp	r3, #0
 800da04:	d101      	bne.n	800da0a <stringToFixedPoint+0x2a>
		return StringOperations_Status_NullPointerError;
 800da06:	2305      	movs	r3, #5
 800da08:	e060      	b.n	800dacc <stringToFixedPoint+0xec>
	}

	StringOperations_Status_TypeDef ret;
	uint16_t dotPosition;

	if ((ret = findChar(sentence, decimalSeparator, length, &dotPosition)) != StringOperations_Status_OK){
 800da0a:	f107 031c 	add.w	r3, r7, #28
 800da0e:	897a      	ldrh	r2, [r7, #10]
 800da10:	7a79      	ldrb	r1, [r7, #9]
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f7ff ff87 	bl	800d926 <findChar>
 800da18:	4603      	mov	r3, r0
 800da1a:	77fb      	strb	r3, [r7, #31]
 800da1c:	7ffb      	ldrb	r3, [r7, #31]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <stringToFixedPoint+0x46>
		return ret;
 800da22:	7ffb      	ldrb	r3, [r7, #31]
 800da24:	e052      	b.n	800dacc <stringToFixedPoint+0xec>
	}

	if (dotPosition == length){
 800da26:	8bbb      	ldrh	r3, [r7, #28]
 800da28:	897a      	ldrh	r2, [r7, #10]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d101      	bne.n	800da32 <stringToFixedPoint+0x52>
		return StringOperations_Status_Error;
 800da2e:	2306      	movs	r3, #6
 800da30:	e04c      	b.n	800dacc <stringToFixedPoint+0xec>
	}

	uint32_t	decimalPart;
	uint32_t	fractionalNumerator;
	uint32_t	fractionalDenominator = 1;
 800da32:	2301      	movs	r3, #1
 800da34:	627b      	str	r3, [r7, #36]	; 0x24

	if ((ret = string2UInt32(sentence, dotPosition, &decimalPart)) != StringOperations_Status_OK){
 800da36:	8bbb      	ldrh	r3, [r7, #28]
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	f107 0218 	add.w	r2, r7, #24
 800da3e:	4619      	mov	r1, r3
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f866 	bl	800db12 <string2UInt32>
 800da46:	4603      	mov	r3, r0
 800da48:	77fb      	strb	r3, [r7, #31]
 800da4a:	7ffb      	ldrb	r3, [r7, #31]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <stringToFixedPoint+0x74>
		return ret;
 800da50:	7ffb      	ldrb	r3, [r7, #31]
 800da52:	e03b      	b.n	800dacc <stringToFixedPoint+0xec>
	}
	if ((ret = string2UInt32(sentence + dotPosition + sizeof(decimalSeparator), length - dotPosition - sizeof(decimalSeparator), &fractionalNumerator)) != StringOperations_Status_OK){
 800da54:	8bbb      	ldrh	r3, [r7, #28]
 800da56:	3301      	adds	r3, #1
 800da58:	68fa      	ldr	r2, [r7, #12]
 800da5a:	18d0      	adds	r0, r2, r3
 800da5c:	897b      	ldrh	r3, [r7, #10]
 800da5e:	b2da      	uxtb	r2, r3
 800da60:	8bbb      	ldrh	r3, [r7, #28]
 800da62:	b2db      	uxtb	r3, r3
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	b2db      	uxtb	r3, r3
 800da68:	3b01      	subs	r3, #1
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f107 0214 	add.w	r2, r7, #20
 800da70:	4619      	mov	r1, r3
 800da72:	f000 f84e 	bl	800db12 <string2UInt32>
 800da76:	4603      	mov	r3, r0
 800da78:	77fb      	strb	r3, [r7, #31]
 800da7a:	7ffb      	ldrb	r3, [r7, #31]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d001      	beq.n	800da84 <stringToFixedPoint+0xa4>
		return ret;
 800da80:	7ffb      	ldrb	r3, [r7, #31]
 800da82:	e023      	b.n	800dacc <stringToFixedPoint+0xec>
	}

	for (uint32_t i=0; i<length - dotPosition - sizeof(decimalSeparator); i++){
 800da84:	2300      	movs	r3, #0
 800da86:	623b      	str	r3, [r7, #32]
 800da88:	e008      	b.n	800da9c <stringToFixedPoint+0xbc>
		fractionalDenominator *= 10;
 800da8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8c:	4613      	mov	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	4413      	add	r3, r2
 800da92:	005b      	lsls	r3, r3, #1
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i=0; i<length - dotPosition - sizeof(decimalSeparator); i++){
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	3301      	adds	r3, #1
 800da9a:	623b      	str	r3, [r7, #32]
 800da9c:	897b      	ldrh	r3, [r7, #10]
 800da9e:	8bba      	ldrh	r2, [r7, #28]
 800daa0:	1a9b      	subs	r3, r3, r2
 800daa2:	1e5a      	subs	r2, r3, #1
 800daa4:	6a3b      	ldr	r3, [r7, #32]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d8ef      	bhi.n	800da8a <stringToFixedPoint+0xaa>
	}

	*pRetFixedPoint = FixedPoint_constrDecimalFrac(decimalPart, fractionalNumerator, fractionalDenominator, fractionalBits);
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	4619      	mov	r1, r3
 800daae:	697a      	ldr	r2, [r7, #20]
 800dab0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800dab2:	4638      	mov	r0, r7
 800dab4:	7a3b      	ldrb	r3, [r7, #8]
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	f7ff fba3 	bl	800d204 <FixedPoint_constrDecimalFrac>
 800dabe:	4622      	mov	r2, r4
 800dac0:	463b      	mov	r3, r7
 800dac2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dac6:	e882 0003 	stmia.w	r2, {r0, r1}

	return StringOperations_Status_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	372c      	adds	r7, #44	; 0x2c
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}

0800dad4 <decChar2Uint8>:

StringOperations_Status_TypeDef decChar2Uint8(uint8_t c, uint8_t* pRetInt){
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	4603      	mov	r3, r0
 800dadc:	6039      	str	r1, [r7, #0]
 800dade:	71fb      	strb	r3, [r7, #7]

	if (pRetInt == NULL){
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d101      	bne.n	800daea <decChar2Uint8+0x16>
		return StringOperations_Status_NullPointerError;
 800dae6:	2305      	movs	r3, #5
 800dae8:	e00d      	b.n	800db06 <decChar2Uint8+0x32>
	}
	if (c >= '0' && c <= '9'){
 800daea:	79fb      	ldrb	r3, [r7, #7]
 800daec:	2b2f      	cmp	r3, #47	; 0x2f
 800daee:	d909      	bls.n	800db04 <decChar2Uint8+0x30>
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	2b39      	cmp	r3, #57	; 0x39
 800daf4:	d806      	bhi.n	800db04 <decChar2Uint8+0x30>
		*pRetInt = c - '0';
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	3b30      	subs	r3, #48	; 0x30
 800dafa:	b2da      	uxtb	r2, r3
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	701a      	strb	r2, [r3, #0]
		return StringOperations_Status_OK;
 800db00:	2300      	movs	r3, #0
 800db02:	e000      	b.n	800db06 <decChar2Uint8+0x32>
	}
	return StringOperations_Status_NotDecimalCharError;
 800db04:	2302      	movs	r3, #2
}
 800db06:	4618      	mov	r0, r3
 800db08:	370c      	adds	r7, #12
 800db0a:	46bd      	mov	sp, r7
 800db0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db10:	4770      	bx	lr

0800db12 <string2UInt32>:


StringOperations_Status_TypeDef string2UInt32(uint8_t* sentence, uint8_t length, uint32_t* pRetInt){
 800db12:	b580      	push	{r7, lr}
 800db14:	b086      	sub	sp, #24
 800db16:	af00      	add	r7, sp, #0
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	460b      	mov	r3, r1
 800db1c:	607a      	str	r2, [r7, #4]
 800db1e:	72fb      	strb	r3, [r7, #11]

	if (sentence == NULL || pRetInt == NULL){
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d002      	beq.n	800db2c <string2UInt32+0x1a>
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <string2UInt32+0x1e>
		return StringOperations_Status_NullPointerError;
 800db2c:	2305      	movs	r3, #5
 800db2e:	e037      	b.n	800dba0 <string2UInt32+0x8e>
	}

	StringOperations_Status_TypeDef ret;
	*pRetInt = 0;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	601a      	str	r2, [r3, #0]
	uint32_t multiplier = 1;
 800db36:	2301      	movs	r3, #1
 800db38:	617b      	str	r3, [r7, #20]

	for (int16_t i = length-1; i >= 0; i--){
 800db3a:	7afb      	ldrb	r3, [r7, #11]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	3b01      	subs	r3, #1
 800db40:	b29b      	uxth	r3, r3
 800db42:	827b      	strh	r3, [r7, #18]
 800db44:	e027      	b.n	800db96 <string2UInt32+0x84>
		uint8_t tmp;
		if ((ret = decChar2Uint8(*(sentence + i), &tmp)) != StringOperations_Status_OK){
 800db46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	4413      	add	r3, r2
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	f107 0210 	add.w	r2, r7, #16
 800db54:	4611      	mov	r1, r2
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff ffbc 	bl	800dad4 <decChar2Uint8>
 800db5c:	4603      	mov	r3, r0
 800db5e:	747b      	strb	r3, [r7, #17]
 800db60:	7c7b      	ldrb	r3, [r7, #17]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d001      	beq.n	800db6a <string2UInt32+0x58>
			return ret;
 800db66:	7c7b      	ldrb	r3, [r7, #17]
 800db68:	e01a      	b.n	800dba0 <string2UInt32+0x8e>
		}
		*pRetInt	+= (tmp * multiplier);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	7c3b      	ldrb	r3, [r7, #16]
 800db70:	4619      	mov	r1, r3
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	fb03 f301 	mul.w	r3, r3, r1
 800db78:	441a      	add	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	601a      	str	r2, [r3, #0]
		multiplier	*= 10;
 800db7e:	697a      	ldr	r2, [r7, #20]
 800db80:	4613      	mov	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	4413      	add	r3, r2
 800db86:	005b      	lsls	r3, r3, #1
 800db88:	617b      	str	r3, [r7, #20]
	for (int16_t i = length-1; i >= 0; i--){
 800db8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	3b01      	subs	r3, #1
 800db92:	b29b      	uxth	r3, r3
 800db94:	827b      	strh	r3, [r7, #18]
 800db96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	dad3      	bge.n	800db46 <string2UInt32+0x34>
	}

	return StringOperations_Status_OK;
 800db9e:	2300      	movs	r3, #0
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3718      	adds	r7, #24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <uInt8ToHexStringMinDigits>:
	}
	sprintf((char*)pRetBuffer, (upperCase == true) ? ("%X") : ("%x"), val);
	return StringOperations_Status_OK;
}

StringOperations_Status_TypeDef uInt8ToHexStringMinDigits(uint8_t* pRetBuffer, uint8_t val, bool upperCase, uint8_t minDigitsNumber){
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	4608      	mov	r0, r1
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	70fb      	strb	r3, [r7, #3]
 800dbba:	460b      	mov	r3, r1
 800dbbc:	70bb      	strb	r3, [r7, #2]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	707b      	strb	r3, [r7, #1]
	if (pRetBuffer == NULL){
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <uInt8ToHexStringMinDigits+0x24>
		return StringOperations_Status_NullPointerError;
 800dbc8:	2305      	movs	r3, #5
 800dbca:	e01a      	b.n	800dc02 <uInt8ToHexStringMinDigits+0x5a>
	}
	char formatStr[20];
	memset(formatStr, 0, 20);
 800dbcc:	f107 030c 	add.w	r3, r7, #12
 800dbd0:	2214      	movs	r2, #20
 800dbd2:	2100      	movs	r1, #0
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f002 fe46 	bl	8010866 <memset>
	sprintf (formatStr, (upperCase == true) ? ("%%0%uX") : ("%%0%ux"), ((unsigned int)minDigitsNumber)); //< prepare format string
 800dbda:	78bb      	ldrb	r3, [r7, #2]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <uInt8ToHexStringMinDigits+0x3c>
 800dbe0:	490a      	ldr	r1, [pc, #40]	; (800dc0c <uInt8ToHexStringMinDigits+0x64>)
 800dbe2:	e000      	b.n	800dbe6 <uInt8ToHexStringMinDigits+0x3e>
 800dbe4:	490a      	ldr	r1, [pc, #40]	; (800dc10 <uInt8ToHexStringMinDigits+0x68>)
 800dbe6:	787a      	ldrb	r2, [r7, #1]
 800dbe8:	f107 030c 	add.w	r3, r7, #12
 800dbec:	4618      	mov	r0, r3
 800dbee:	f002 fe43 	bl	8010878 <siprintf>

	sprintf ((char*)pRetBuffer, formatStr, val);
 800dbf2:	78fa      	ldrb	r2, [r7, #3]
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f002 fe3c 	bl	8010878 <siprintf>

	return StringOperations_Status_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3720      	adds	r7, #32
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	0801129c 	.word	0x0801129c
 800dc10:	080112a4 	.word	0x080112a4

0800dc14 <UartDriver_init>:
void								_UartDriver_synchronousReceiverInnerByteReceivedCallback(uint8_t dataByte, uint32_t timestamp, void* pArgs);
static UartDriver_Status_TypeDef	_UartDriver_initHAL(volatile UartDriver_TypeDef* pSelf, uint32_t baudRate);

//<----- Public functions implementation ----->//

UartDriver_Status_TypeDef UartDriver_init(volatile UartDriver_TypeDef* pSelf, UART_HandleTypeDef* pUartHandler, USART_TypeDef* pUartInstance, MSTimerDriver_TypeDef* pMsTimerHandler, uint32_t baudRate){
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b086      	sub	sp, #24
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	607a      	str	r2, [r7, #4]
 800dc20:	603b      	str	r3, [r7, #0]

	UartDriver_Status_TypeDef ret = UartDriver_Status_OK;
 800dc22:	2300      	movs	r3, #0
 800dc24:	757b      	strb	r3, [r7, #21]
	if (pSelf == NULL || pUartHandler == NULL || pMsTimerHandler == NULL){
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d005      	beq.n	800dc38 <UartDriver_init+0x24>
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d002      	beq.n	800dc38 <UartDriver_init+0x24>
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d101      	bne.n	800dc3c <UartDriver_init+0x28>
		return UartDriver_Status_NullPointerError;
 800dc38:	2309      	movs	r3, #9
 800dc3a:	e046      	b.n	800dcca <UartDriver_init+0xb6>
	}

	if (pSelf->state != UartDriver_State_UnInitialized){
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	781b      	ldrb	r3, [r3, #0]
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <UartDriver_init+0x36>
		return UartDriver_Status_Error;
 800dc46:	230e      	movs	r3, #14
 800dc48:	e03f      	b.n	800dcca <UartDriver_init+0xb6>
	}

	pSelf->state								= UartDriver_State_DuringInit;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	701a      	strb	r2, [r3, #0]
	pSelf->pUartHandler							= pUartHandler;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	605a      	str	r2, [r3, #4]
	pSelf->pUartInstance						= pUartInstance;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	687a      	ldr	r2, [r7, #4]
 800dc5a:	609a      	str	r2, [r3, #8]
	pSelf->pMsTimerHandler						= pMsTimerHandler;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	60da      	str	r2, [r3, #12]
	pSelf->transmitTimeoutTimestamp				= 0;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2200      	movs	r2, #0
 800dc66:	615a      	str	r2, [r3, #20]
	pSelf->transmitInProgress					= false;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	761a      	strb	r2, [r3, #24]
	pSelf->actuallyReceivingByte				= 0;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	765a      	strb	r2, [r3, #25]

	pSelf->synchronousReceivedBytesCounter		= 0;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	835a      	strh	r2, [r3, #26]
	pSelf->pSynchronousReceiverReceiveBuffer	= NULL;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	621a      	str	r2, [r3, #32]

	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACKS_NUMBER; i++){
 800dc80:	2300      	movs	r3, #0
 800dc82:	82fb      	strh	r3, [r7, #22]
 800dc84:	e00f      	b.n	800dca6 <UartDriver_init+0x92>
		pSelf->callbacksByte[i]		= NULL;
 800dc86:	8afb      	ldrh	r3, [r7, #22]
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	3308      	adds	r3, #8
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	4413      	add	r3, r2
 800dc90:	2200      	movs	r2, #0
 800dc92:	605a      	str	r2, [r3, #4]
		pSelf->callbacksByteArgs[i]	= NULL;
 800dc94:	8afa      	ldrh	r2, [r7, #22]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	320c      	adds	r2, #12
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACKS_NUMBER; i++){
 800dca0:	8afb      	ldrh	r3, [r7, #22]
 800dca2:	3301      	adds	r3, #1
 800dca4:	82fb      	strh	r3, [r7, #22]
 800dca6:	8afb      	ldrh	r3, [r7, #22]
 800dca8:	2b02      	cmp	r3, #2
 800dcaa:	d9ec      	bls.n	800dc86 <UartDriver_init+0x72>
	}

	if ((ret = _UartDriver_initHAL(pSelf, baudRate)) != UartDriver_Status_OK){
 800dcac:	6a39      	ldr	r1, [r7, #32]
 800dcae:	68f8      	ldr	r0, [r7, #12]
 800dcb0:	f000 f9bc 	bl	800e02c <_UartDriver_initHAL>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	757b      	strb	r3, [r7, #21]
 800dcb8:	7d7b      	ldrb	r3, [r7, #21]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <UartDriver_init+0xae>
		return ret;
 800dcbe:	7d7b      	ldrb	r3, [r7, #21]
 800dcc0:	e003      	b.n	800dcca <UartDriver_init+0xb6>
	}

	pSelf->state = UartDriver_State_Ready;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3718      	adds	r7, #24
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <UartDriver_sendBytesDMA>:
	}

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_sendBytesDMA(volatile UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t length, uint32_t timeout){
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b086      	sub	sp, #24
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	60f8      	str	r0, [r7, #12]
 800dcda:	60b9      	str	r1, [r7, #8]
 800dcdc:	603b      	str	r3, [r7, #0]
 800dcde:	4613      	mov	r3, r2
 800dce0:	80fb      	strh	r3, [r7, #6]

	if (pSelf == NULL || pBuffer == NULL){
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d002      	beq.n	800dcee <UartDriver_sendBytesDMA+0x1c>
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <UartDriver_sendBytesDMA+0x20>
		return UartDriver_Status_NullPointerError;
 800dcee:	2309      	movs	r3, #9
 800dcf0:	e052      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <UartDriver_sendBytesDMA+0x34>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	2b01      	cmp	r3, #1
 800dd04:	d101      	bne.n	800dd0a <UartDriver_sendBytesDMA+0x38>
		return UartDriver_Status_UnInitializedErrror;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e046      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b02      	cmp	r3, #2
 800dd12:	d01a      	beq.n	800dd4a <UartDriver_sendBytesDMA+0x78>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d015      	beq.n	800dd4a <UartDriver_sendBytesDMA+0x78>
		return UartDriver_Status_Error;
 800dd1e:	230e      	movs	r3, #14
 800dd20:	e03a      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	}

	while (pSelf->transmitInProgress != false){
		uint32_t actualTimesamp;
		if (MSTimerDriver_getMSTime(pSelf->pMsTimerHandler, &actualTimesamp) != MSTimerDriver_Status_OK){
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	f107 0210 	add.w	r2, r7, #16
 800dd2a:	4611      	mov	r1, r2
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff fbed 	bl	800d50c <MSTimerDriver_getMSTime>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d001      	beq.n	800dd3c <UartDriver_sendBytesDMA+0x6a>
			return UartDriver_Status_MSTimerError;
 800dd38:	230b      	movs	r3, #11
 800dd3a:	e02d      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
		}
		if (actualTimesamp > pSelf->transmitTimeoutTimestamp){
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	695a      	ldr	r2, [r3, #20]
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d201      	bcs.n	800dd4a <UartDriver_sendBytesDMA+0x78>
			return UartDriver_Status_TxTimeoutError;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e026      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	while (pSelf->transmitInProgress != false){
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	7e1b      	ldrb	r3, [r3, #24]
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1e6      	bne.n	800dd22 <UartDriver_sendBytesDMA+0x50>
		}
	}

	pSelf->transmitInProgress = true;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	761a      	strb	r2, [r3, #24]
	if (HAL_UART_Transmit_DMA(pSelf->pUartHandler, pBuffer, length) != HAL_OK){
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	88fa      	ldrh	r2, [r7, #6]
 800dd60:	68b9      	ldr	r1, [r7, #8]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7f6 ff30 	bl	8004bc8 <HAL_UART_Transmit_DMA>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <UartDriver_sendBytesDMA+0xa0>
		return UartDriver_Status_Error;
 800dd6e:	230e      	movs	r3, #14
 800dd70:	e012      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	}

	uint32_t actualTimesamp;
	if (MSTimerDriver_getMSTime(pSelf->pMsTimerHandler, &actualTimesamp) != MSTimerDriver_Status_OK){
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	f107 0214 	add.w	r2, r7, #20
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7ff fbc5 	bl	800d50c <MSTimerDriver_getMSTime>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d001      	beq.n	800dd8c <UartDriver_sendBytesDMA+0xba>
		return UartDriver_Status_Error;
 800dd88:	230e      	movs	r3, #14
 800dd8a:	e005      	b.n	800dd98 <UartDriver_sendBytesDMA+0xc6>
	}
	pSelf->transmitTimeoutTimestamp	= actualTimesamp + timeout;
 800dd8c:	697a      	ldr	r2, [r7, #20]
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	441a      	add	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	615a      	str	r2, [r3, #20]

	return UartDriver_Status_OK;
 800dd96:	2300      	movs	r3, #0
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <UartDriver_setReceivedByteCallback>:
	return UartDriver_receiveNBytes(pSelf, pReceiveBuffer, bytesToRead, timeout);
}

UartDriver_Status_TypeDef UartDriver_setReceivedByteCallback(volatile UartDriver_TypeDef* pSelf,
		void (*foo)(uint8_t dataByte, uint32_t timestamp, void* pArgs),
		void* pArgs, UartDriver_ByteReceivedCallbackIterator_TypeDef* pRetCallbackIterator){
 800dda0:	b480      	push	{r7}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]

	if (pSelf == NULL || foo == NULL){
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d002      	beq.n	800ddba <UartDriver_setReceivedByteCallback+0x1a>
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d101      	bne.n	800ddbe <UartDriver_setReceivedByteCallback+0x1e>
		return UartDriver_Status_NullPointerError;
 800ddba:	2309      	movs	r3, #9
 800ddbc:	e042      	b.n	800de44 <UartDriver_setReceivedByteCallback+0xa4>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d004      	beq.n	800ddd2 <UartDriver_setReceivedByteCallback+0x32>
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	2b01      	cmp	r3, #1
 800ddd0:	d101      	bne.n	800ddd6 <UartDriver_setReceivedByteCallback+0x36>
		return UartDriver_Status_UnInitializedErrror;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e036      	b.n	800de44 <UartDriver_setReceivedByteCallback+0xa4>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d006      	beq.n	800ddee <UartDriver_setReceivedByteCallback+0x4e>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	781b      	ldrb	r3, [r3, #0]
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b03      	cmp	r3, #3
 800dde8:	d001      	beq.n	800ddee <UartDriver_setReceivedByteCallback+0x4e>
		return UartDriver_Status_Error;
 800ddea:	230e      	movs	r3, #14
 800ddec:	e02a      	b.n	800de44 <UartDriver_setReceivedByteCallback+0xa4>
	}

	uint16_t i;
	for (i=0; i<UART_DRIVER_MAX_CALLBACKS_NUMBER; i++){
 800ddee:	2300      	movs	r3, #0
 800ddf0:	82fb      	strh	r3, [r7, #22]
 800ddf2:	e018      	b.n	800de26 <UartDriver_setReceivedByteCallback+0x86>
		if (pSelf->callbacksByte[i] == NULL){
 800ddf4:	8afb      	ldrh	r3, [r7, #22]
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	3308      	adds	r3, #8
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10d      	bne.n	800de20 <UartDriver_setReceivedByteCallback+0x80>
			pSelf->callbacksByteArgs[i]	= pArgs;
 800de04:	8afa      	ldrh	r2, [r7, #22]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	320c      	adds	r2, #12
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			pSelf->callbacksByte[i]		= foo;
 800de10:	8afb      	ldrh	r3, [r7, #22]
 800de12:	68fa      	ldr	r2, [r7, #12]
 800de14:	3308      	adds	r3, #8
 800de16:	009b      	lsls	r3, r3, #2
 800de18:	4413      	add	r3, r2
 800de1a:	68ba      	ldr	r2, [r7, #8]
 800de1c:	605a      	str	r2, [r3, #4]
			break;
 800de1e:	e005      	b.n	800de2c <UartDriver_setReceivedByteCallback+0x8c>
	for (i=0; i<UART_DRIVER_MAX_CALLBACKS_NUMBER; i++){
 800de20:	8afb      	ldrh	r3, [r7, #22]
 800de22:	3301      	adds	r3, #1
 800de24:	82fb      	strh	r3, [r7, #22]
 800de26:	8afb      	ldrh	r3, [r7, #22]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d9e3      	bls.n	800ddf4 <UartDriver_setReceivedByteCallback+0x54>
		}
	}

	if (i == UART_DRIVER_MAX_CALLBACKS_NUMBER){
 800de2c:	8afb      	ldrh	r3, [r7, #22]
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d101      	bne.n	800de36 <UartDriver_setReceivedByteCallback+0x96>
		return UartDriver_Status_TooManyCallbacksError;
 800de32:	2308      	movs	r3, #8
 800de34:	e006      	b.n	800de44 <UartDriver_setReceivedByteCallback+0xa4>
	}

	if (pRetCallbackIterator != NULL){
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <UartDriver_setReceivedByteCallback+0xa2>
		*pRetCallbackIterator = (UartDriver_ByteReceivedCallbackIterator_TypeDef)i;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	8afa      	ldrh	r2, [r7, #22]
 800de40:	801a      	strh	r2, [r3, #0]
	}

	return UartDriver_Status_OK;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	371c      	adds	r7, #28
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr

0800de50 <UartDriver_startReceiver>:
	pSelf->callbacksByteArgs[callbackIterator]	= NULL;

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_startReceiver(volatile UartDriver_TypeDef* pSelf){
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d101      	bne.n	800de62 <UartDriver_startReceiver+0x12>
		return UartDriver_Status_NullPointerError;
 800de5e:	2309      	movs	r3, #9
 800de60:	e036      	b.n	800ded0 <UartDriver_startReceiver+0x80>
	}

	if (pSelf->state != UartDriver_State_Ready){
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d001      	beq.n	800de70 <UartDriver_startReceiver+0x20>
		return UartDriver_Status_Error;
 800de6c:	230e      	movs	r3, #14
 800de6e:	e02f      	b.n	800ded0 <UartDriver_startReceiver+0x80>
	}

	uint8_t retryCount = 0;
 800de70:	2300      	movs	r3, #0
 800de72:	73fb      	strb	r3, [r7, #15]
	HAL_UART_StateTypeDef halState = HAL_UART_GetState(pSelf->pUartHandler);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7f7 f847 	bl	8004f0c <HAL_UART_GetState>
 800de7e:	60b8      	str	r0, [r7, #8]
	while ((halState & HAL_UART_STATE_BUSY_RX) != HAL_UART_STATE_BUSY_RX && retryCount < UART_DRIVER_MAX_RX_START_RETRY_NUMBER){
 800de80:	e015      	b.n	800deae <UartDriver_startReceiver+0x5e>
		if (HAL_UART_Receive_IT(pSelf->pUartHandler, (uint8_t*)&pSelf->actuallyReceivingByte, 1) != HAL_OK){
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6858      	ldr	r0, [r3, #4]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	3319      	adds	r3, #25
 800de8a:	2201      	movs	r2, #1
 800de8c:	4619      	mov	r1, r3
 800de8e:	f7f6 fdf9 	bl	8004a84 <HAL_UART_Receive_IT>
 800de92:	4603      	mov	r3, r0
 800de94:	2b00      	cmp	r3, #0
 800de96:	d001      	beq.n	800de9c <UartDriver_startReceiver+0x4c>
			return UartDriver_Status_HALError;
 800de98:	230a      	movs	r3, #10
 800de9a:	e019      	b.n	800ded0 <UartDriver_startReceiver+0x80>
		}
		retryCount++;
 800de9c:	7bfb      	ldrb	r3, [r7, #15]
 800de9e:	3301      	adds	r3, #1
 800dea0:	73fb      	strb	r3, [r7, #15]
		halState = HAL_UART_GetState(pSelf->pUartHandler);
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7f7 f830 	bl	8004f0c <HAL_UART_GetState>
 800deac:	60b8      	str	r0, [r7, #8]
	while ((halState & HAL_UART_STATE_BUSY_RX) != HAL_UART_STATE_BUSY_RX && retryCount < UART_DRIVER_MAX_RX_START_RETRY_NUMBER){
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	f003 0322 	and.w	r3, r3, #34	; 0x22
 800deb4:	2b22      	cmp	r3, #34	; 0x22
 800deb6:	d002      	beq.n	800debe <UartDriver_startReceiver+0x6e>
 800deb8:	7bfb      	ldrb	r3, [r7, #15]
 800deba:	2b02      	cmp	r3, #2
 800debc:	d9e1      	bls.n	800de82 <UartDriver_startReceiver+0x32>
	}

	if (retryCount == UART_DRIVER_MAX_RX_START_RETRY_NUMBER){
 800debe:	7bfb      	ldrb	r3, [r7, #15]
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d101      	bne.n	800dec8 <UartDriver_startReceiver+0x78>
		return UartDriver_Status_RxStartMaxRetryCountError;
 800dec4:	230d      	movs	r3, #13
 800dec6:	e003      	b.n	800ded0 <UartDriver_startReceiver+0x80>
	}

	pSelf->state = UartDriver_State_Receiving;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2203      	movs	r2, #3
 800decc:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 800dece:	2300      	movs	r3, #0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <UartDriver_waitForTxTimeout>:
	pSelf->transmitTimeoutTimestamp	= 0;

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_waitForTxTimeout(volatile UartDriver_TypeDef* pSelf){
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <UartDriver_waitForTxTimeout+0x12>
		return UartDriver_Status_NullPointerError;
 800dee6:	2309      	movs	r3, #9
 800dee8:	e025      	b.n	800df36 <UartDriver_waitForTxTimeout+0x5e>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	b2db      	uxtb	r3, r3
 800def0:	2b00      	cmp	r3, #0
 800def2:	d004      	beq.n	800defe <UartDriver_waitForTxTimeout+0x26>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b01      	cmp	r3, #1
 800defc:	d115      	bne.n	800df2a <UartDriver_waitForTxTimeout+0x52>
		return UartDriver_Status_UnInitializedErrror;
 800defe:	2301      	movs	r3, #1
 800df00:	e019      	b.n	800df36 <UartDriver_waitForTxTimeout+0x5e>
	}

	while (pSelf->transmitInProgress != false){
		uint32_t actualTimesamp;
		if (MSTimerDriver_getMSTime(pSelf->pMsTimerHandler, &actualTimesamp) != MSTimerDriver_Status_OK){
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	68db      	ldr	r3, [r3, #12]
 800df06:	f107 020c 	add.w	r2, r7, #12
 800df0a:	4611      	mov	r1, r2
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7ff fafd 	bl	800d50c <MSTimerDriver_getMSTime>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <UartDriver_waitForTxTimeout+0x44>
			return UartDriver_Status_MSTimerError;
 800df18:	230b      	movs	r3, #11
 800df1a:	e00c      	b.n	800df36 <UartDriver_waitForTxTimeout+0x5e>
		}
		if (actualTimesamp > pSelf->transmitTimeoutTimestamp){
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	695a      	ldr	r2, [r3, #20]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	429a      	cmp	r2, r3
 800df24:	d201      	bcs.n	800df2a <UartDriver_waitForTxTimeout+0x52>
			return UartDriver_Status_TxTimeoutError;
 800df26:	2303      	movs	r3, #3
 800df28:	e005      	b.n	800df36 <UartDriver_waitForTxTimeout+0x5e>
	while (pSelf->transmitInProgress != false){
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7e1b      	ldrb	r3, [r3, #24]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1e6      	bne.n	800df02 <UartDriver_waitForTxTimeout+0x2a>
		}
	}

	return UartDriver_Status_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}

0800df3e <UartDriver_getState>:

UartDriver_Status_TypeDef UartDriver_getState(volatile UartDriver_TypeDef* pSelf, UartDriver_State_TypeDef* pRetState){
 800df3e:	b480      	push	{r7}
 800df40:	b083      	sub	sp, #12
 800df42:	af00      	add	r7, sp, #0
 800df44:	6078      	str	r0, [r7, #4]
 800df46:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL){
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d101      	bne.n	800df52 <UartDriver_getState+0x14>
		return UartDriver_Status_NullPointerError;
 800df4e:	2309      	movs	r3, #9
 800df50:	e005      	b.n	800df5e <UartDriver_getState+0x20>
	}

	*pRetState = pSelf->state;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	b2da      	uxtb	r2, r3
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	701a      	strb	r2, [r3, #0]

	return UartDriver_Status_OK;
 800df5c:	2300      	movs	r3, #0
}
 800df5e:	4618      	mov	r0, r3
 800df60:	370c      	adds	r7, #12
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <_UartDriver_receivedBytesCallback>:
}
//<----- Interrupt handling ----- >//

#define	UART_DRIVER_FULL_ASSER_IN_CALLBACK 0

static UartDriver_Status_TypeDef _UartDriver_receivedBytesCallback(volatile UartDriver_TypeDef* pSelf){
 800df6a:	b590      	push	{r4, r7, lr}
 800df6c:	b085      	sub	sp, #20
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]

#endif

	uint32_t timestamp;

	if (MSTimerDriver_getMSTime(pSelf->pMsTimerHandler, &timestamp) != MSTimerDriver_Status_OK){
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f107 0208 	add.w	r2, r7, #8
 800df7a:	4611      	mov	r1, r2
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff fac5 	bl	800d50c <MSTimerDriver_getMSTime>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	d001      	beq.n	800df8c <_UartDriver_receivedBytesCallback+0x22>
		return UartDriver_Status_MSTimerError;
 800df88:	230b      	movs	r3, #11
 800df8a:	e02f      	b.n	800dfec <_UartDriver_receivedBytesCallback+0x82>
	}

	//< ----- Handling one byte callback ----- >//
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACKS_NUMBER; fooIt++){
 800df8c:	2300      	movs	r3, #0
 800df8e:	81fb      	strh	r3, [r7, #14]
 800df90:	e01b      	b.n	800dfca <_UartDriver_receivedBytesCallback+0x60>
		if (pSelf->callbacksByte[fooIt] != NULL){
 800df92:	89fb      	ldrh	r3, [r7, #14]
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	3308      	adds	r3, #8
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d010      	beq.n	800dfc4 <_UartDriver_receivedBytesCallback+0x5a>
			pSelf->callbacksByte[fooIt](pSelf->actuallyReceivingByte, timestamp, pSelf->callbacksByteArgs[fooIt]);
 800dfa2:	89fb      	ldrh	r3, [r7, #14]
 800dfa4:	687a      	ldr	r2, [r7, #4]
 800dfa6:	3308      	adds	r3, #8
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	4413      	add	r3, r2
 800dfac:	685b      	ldr	r3, [r3, #4]
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	7e52      	ldrb	r2, [r2, #25]
 800dfb2:	b2d0      	uxtb	r0, r2
 800dfb4:	68bc      	ldr	r4, [r7, #8]
 800dfb6:	89f9      	ldrh	r1, [r7, #14]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	310c      	adds	r1, #12
 800dfbc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	4798      	blx	r3
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACKS_NUMBER; fooIt++){
 800dfc4:	89fb      	ldrh	r3, [r7, #14]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	81fb      	strh	r3, [r7, #14]
 800dfca:	89fb      	ldrh	r3, [r7, #14]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d9e0      	bls.n	800df92 <_UartDriver_receivedBytesCallback+0x28>
		}
	}

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, (uint8_t*)&pSelf->actuallyReceivingByte, 1) != HAL_OK){
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6858      	ldr	r0, [r3, #4]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3319      	adds	r3, #25
 800dfd8:	2201      	movs	r2, #1
 800dfda:	4619      	mov	r1, r3
 800dfdc:	f7f6 fd52 	bl	8004a84 <HAL_UART_Receive_IT>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d001      	beq.n	800dfea <_UartDriver_receivedBytesCallback+0x80>
		return UartDriver_Status_HALError;
 800dfe6:	230a      	movs	r3, #10
 800dfe8:	e000      	b.n	800dfec <_UartDriver_receivedBytesCallback+0x82>
	}

	return UartDriver_Status_OK;
 800dfea:	2300      	movs	r3, #0
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3714      	adds	r7, #20
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd90      	pop	{r4, r7, pc}

0800dff4 <_UartDriver_errorCallback>:

static UartDriver_Status_TypeDef _UartDriver_errorCallback(volatile UartDriver_TypeDef* pSelf){
 800dff4:	b480      	push	{r7}
 800dff6:	b083      	sub	sp, #12
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
		return UartDriver_Status_NotReceivingErrror;
	}

#endif

	pSelf->errorOccuredFlag = true;
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	2201      	movs	r2, #1
 800e000:	741a      	strb	r2, [r3, #16]

	return UartDriver_Status_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <_UartDriver_transmitCompleteCallback>:

static UartDriver_Status_TypeDef _UartDriver_transmitCompleteCallback(volatile UartDriver_TypeDef* pSelf){
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
		return UartDriver_Status_NotTransmitingErrror;
	}

#endif

	pSelf->transmitInProgress = false;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2200      	movs	r2, #0
 800e01c:	761a      	strb	r2, [r3, #24]

	return UartDriver_Status_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	370c      	adds	r7, #12
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <_UartDriver_initHAL>:

static UartDriver_Status_TypeDef _UartDriver_initHAL(volatile UartDriver_TypeDef* pSelf, uint32_t baudRate){
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]

	pSelf->pUartHandler->Instance							= pSelf->pUartInstance;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	685b      	ldr	r3, [r3, #4]
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	6892      	ldr	r2, [r2, #8]
 800e03e:	601a      	str	r2, [r3, #0]
	pSelf->pUartHandler->Init.BaudRate						= baudRate;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	605a      	str	r2, [r3, #4]
	pSelf->pUartHandler->Init.WordLength					= UART_WORDLENGTH_8B;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	609a      	str	r2, [r3, #8]
	pSelf->pUartHandler->Init.StopBits						= UART_STOPBITS_1;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	60da      	str	r2, [r3, #12]
	pSelf->pUartHandler->Init.Parity						= UART_PARITY_NONE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	685b      	ldr	r3, [r3, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	611a      	str	r2, [r3, #16]
	pSelf->pUartHandler->Init.Mode							= UART_MODE_TX_RX;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	220c      	movs	r2, #12
 800e066:	615a      	str	r2, [r3, #20]
	pSelf->pUartHandler->Init.HwFlowCtl						= UART_HWCONTROL_NONE;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	685b      	ldr	r3, [r3, #4]
 800e06c:	2200      	movs	r2, #0
 800e06e:	619a      	str	r2, [r3, #24]
	pSelf->pUartHandler->Init.OverSampling					= UART_OVERSAMPLING_16;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	61da      	str	r2, [r3, #28]
	pSelf->pUartHandler->Init.OneBitSampling				= UART_ONE_BIT_SAMPLE_DISABLE;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	685b      	ldr	r3, [r3, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	621a      	str	r2, [r3, #32]
	pSelf->pUartHandler->AdvancedInit.AdvFeatureInit		= UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	685b      	ldr	r3, [r3, #4]
 800e084:	2220      	movs	r2, #32
 800e086:	625a      	str	r2, [r3, #36]	; 0x24
	pSelf->pUartHandler->AdvancedInit.DMADisableonRxError	= UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e090:	63da      	str	r2, [r3, #60]	; 0x3c

	if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	4618      	mov	r0, r3
 800e098:	f7f6 fca6 	bl	80049e8 <HAL_UART_Init>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <_UartDriver_initHAL+0x7a>
	{
		return UartDriver_Status_HALError;
 800e0a2:	230a      	movs	r3, #10
 800e0a4:	e007      	b.n	800e0b6 <_UartDriver_initHAL+0x8a>
	}

	if (pSelf->pUartHandler->gState != HAL_UART_STATE_READY){
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e0ac:	2b20      	cmp	r3, #32
 800e0ae:	d001      	beq.n	800e0b4 <_UartDriver_initHAL+0x88>
		return UartDriver_Status_Error;
 800e0b0:	230e      	movs	r3, #14
 800e0b2:	e000      	b.n	800e0b6 <_UartDriver_initHAL+0x8a>
	}

	return UartDriver_Status_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
	...

0800e0c0 <HAL_UART_TxCpltCallback>:

/****************************** Implementations of stm32f7xx_hal_uart.h __weak functions placeholders ******************************/

extern volatile UartDriver_TypeDef uartGpsDriver;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]

	if (_UartDriver_transmitCompleteCallback(&uartGpsDriver) != UartDriver_Status_OK){
 800e0c8:	4805      	ldr	r0, [pc, #20]	; (800e0e0 <HAL_UART_TxCpltCallback+0x20>)
 800e0ca:	f7ff ffa1 	bl	800e010 <_UartDriver_transmitCompleteCallback>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <HAL_UART_TxCpltCallback+0x18>
		Error_Handler();
 800e0d4:	f7fb fcfa 	bl	8009acc <Error_Handler>
	}
}
 800e0d8:	bf00      	nop
 800e0da:	3708      	adds	r7, #8
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	2000bbc4 	.word	0x2000bbc4

0800e0e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b084      	sub	sp, #16
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]

	UartDriver_Status_TypeDef ret;
	if ((ret = _UartDriver_receivedBytesCallback(&uartGpsDriver)) != UartDriver_Status_OK){
 800e0ec:	4806      	ldr	r0, [pc, #24]	; (800e108 <HAL_UART_RxCpltCallback+0x24>)
 800e0ee:	f7ff ff3c 	bl	800df6a <_UartDriver_receivedBytesCallback>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	73fb      	strb	r3, [r7, #15]
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <HAL_UART_RxCpltCallback+0x1c>
		Error_Handler();
 800e0fc:	f7fb fce6 	bl	8009acc <Error_Handler>
	}
}
 800e100:	bf00      	nop
 800e102:	3710      	adds	r7, #16
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}
 800e108:	2000bbc4 	.word	0x2000bbc4

0800e10c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]

	UartDriver_Status_TypeDef ret;
	if ((ret = _UartDriver_errorCallback(&uartGpsDriver)) != UartDriver_Status_OK){
 800e114:	4806      	ldr	r0, [pc, #24]	; (800e130 <HAL_UART_ErrorCallback+0x24>)
 800e116:	f7ff ff6d 	bl	800dff4 <_UartDriver_errorCallback>
 800e11a:	4603      	mov	r3, r0
 800e11c:	73fb      	strb	r3, [r7, #15]
 800e11e:	7bfb      	ldrb	r3, [r7, #15]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <HAL_UART_ErrorCallback+0x1c>
		Error_Handler();
 800e124:	f7fb fcd2 	bl	8009acc <Error_Handler>
	}
}
 800e128:	bf00      	nop
 800e12a:	3710      	adds	r7, #16
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	2000bbc4 	.word	0x2000bbc4

0800e134 <UartReceiverStartLength_init>:
static void 									_UartReceiverStartLength_receivedByteCallback(uint8_t dataByte, uint32_t timestamp, void* pArgs);
static UartReceiverStartLength_Status_TypeDef	_UartReceiverStartLength_removeNotStartCharsFromQueueFront(volatile UartReceiverStartLength_TypeDef* pSelf, UartReceiverStartLength_ReaderIterator_TypeDef readerIt);

//< ----- Public functions implementations ----- >//

UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_init(UartReceiverStartLength_TypeDef* pSelf, UartDriver_TypeDef* pUartDriver){
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pUartDriver == NULL){
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d002      	beq.n	800e14a <UartReceiverStartLength_init+0x16>
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <UartReceiverStartLength_init+0x1a>
		return UartReceiverStartLength_Status_NullPointerError;
 800e14a:	2303      	movs	r3, #3
 800e14c:	e067      	b.n	800e21e <UartReceiverStartLength_init+0xea>
	}

	memset((void*)pSelf, 0, sizeof(UartReceiverStartLength_TypeDef));
 800e14e:	f241 02a8 	movw	r2, #4264	; 0x10a8
 800e152:	2100      	movs	r1, #0
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f002 fb86 	bl	8010866 <memset>

	pSelf->state		= UartReceiverStartLength_State_DuringInit;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2201      	movs	r2, #1
 800e15e:	711a      	strb	r2, [r3, #4]
	pSelf->pUartDriver	= pUartDriver;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	683a      	ldr	r2, [r7, #0]
 800e164:	601a      	str	r2, [r3, #0]

	if (FIFOMultiread_init((FIFOMultiread_TypeDef*)&pSelf->rxFifo, (void*)pSelf->receiveBuffer, sizeof(UartReceiverStartLength_FIFOElem_TypeDef), UART_RECEIVER_START_LENGTH_BUFFER_SIZE) != FIFOMultiread_Status_OK){
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f103 0008 	add.w	r0, r3, #8
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e172:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e176:	2208      	movs	r2, #8
 800e178:	f7fe f8d2 	bl	800c320 <FIFOMultiread_init>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <UartReceiverStartLength_init+0x52>
		return UartReceiverStartLength_Status_FIFOError;
 800e182:	2306      	movs	r3, #6
 800e184:	e04b      	b.n	800e21e <UartReceiverStartLength_init+0xea>
	}

	for (uint16_t i=0; i<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; i++){
 800e186:	2300      	movs	r3, #0
 800e188:	81fb      	strh	r3, [r7, #14]
 800e18a:	e034      	b.n	800e1f6 <UartReceiverStartLength_init+0xc2>
		pSelf->readerRegistered[i]		= false;
 800e18c:	89fb      	ldrh	r3, [r7, #14]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	441a      	add	r2, r3
 800e192:	f241 0378 	movw	r3, #4216	; 0x1078
 800e196:	4413      	add	r3, r2
 800e198:	2200      	movs	r2, #0
 800e19a:	701a      	strb	r2, [r3, #0]
		pSelf->startPatternLength[i]	= 0;
 800e19c:	89fb      	ldrh	r3, [r7, #14]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	441a      	add	r2, r3
 800e1a2:	f241 037a 	movw	r3, #4218	; 0x107a
 800e1a6:	4413      	add	r3, r2
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	701a      	strb	r2, [r3, #0]
		pSelf->sentenceLength[i]		= 0;
 800e1ac:	89fb      	ldrh	r3, [r7, #14]
 800e1ae:	687a      	ldr	r2, [r7, #4]
 800e1b0:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 800e1b4:	005b      	lsls	r3, r3, #1
 800e1b6:	4413      	add	r3, r2
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	809a      	strh	r2, [r3, #4]
		memset((void*)&(pSelf->startPattern[i]), 0, sizeof(pSelf->startPattern[0][0]) * UART_RECEIVER_START_LENGTH_MAX_START_PATERN_LENGTH);
 800e1bc:	89fa      	ldrh	r2, [r7, #14]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	4413      	add	r3, r2
 800e1ce:	220a      	movs	r2, #10
 800e1d0:	2100      	movs	r1, #0
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f002 fb47 	bl	8010866 <memset>
		memset((void*)&(pSelf->startLengthFIFOReaders[i]), 0, sizeof(FIFOMultireadReader_TypeDef));
 800e1d8:	89fb      	ldrh	r3, [r7, #14]
 800e1da:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	687a      	ldr	r2, [r7, #4]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	2208      	movs	r2, #8
 800e1e8:	2100      	movs	r1, #0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f002 fb3b 	bl	8010866 <memset>
	for (uint16_t i=0; i<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; i++){
 800e1f0:	89fb      	ldrh	r3, [r7, #14]
 800e1f2:	3301      	adds	r3, #1
 800e1f4:	81fb      	strh	r3, [r7, #14]
 800e1f6:	89fb      	ldrh	r3, [r7, #14]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d9c7      	bls.n	800e18c <UartReceiverStartLength_init+0x58>
	}

	if (UartDriver_setReceivedByteCallback(pSelf->pUartDriver, _UartReceiverStartLength_receivedByteCallback, (void*)pSelf, &pSelf->uartDriverCallbackIterator) != UartDriver_Status_OK){
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6818      	ldr	r0, [r3, #0]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3306      	adds	r3, #6
 800e204:	687a      	ldr	r2, [r7, #4]
 800e206:	4908      	ldr	r1, [pc, #32]	; (800e228 <UartReceiverStartLength_init+0xf4>)
 800e208:	f7ff fdca 	bl	800dda0 <UartDriver_setReceivedByteCallback>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <UartReceiverStartLength_init+0xe2>
		return UartReceiverStartLength_Status_UartDriverError;
 800e212:	2307      	movs	r3, #7
 800e214:	e003      	b.n	800e21e <UartReceiverStartLength_init+0xea>
	}

	pSelf->state	= UartReceiverStartLength_State_Initialized;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2202      	movs	r2, #2
 800e21a:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartLength_Status_OK;
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}
 800e226:	bf00      	nop
 800e228:	0800e7ad 	.word	0x0800e7ad

0800e22c <UartReceiverStartLength_registerReader>:
UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_registerReader(
		volatile UartReceiverStartLength_TypeDef* pSelf,
		volatile UartReceiverStartLength_ReaderIterator_TypeDef* pRetReaderIterator,
		uint8_t startPatternLength,
		const uint8_t* startPattern,
		uint16_t sentenceLength){
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b086      	sub	sp, #24
 800e230:	af00      	add	r7, sp, #0
 800e232:	60f8      	str	r0, [r7, #12]
 800e234:	60b9      	str	r1, [r7, #8]
 800e236:	603b      	str	r3, [r7, #0]
 800e238:	4613      	mov	r3, r2
 800e23a:	71fb      	strb	r3, [r7, #7]

	if (pSelf == NULL || pRetReaderIterator == NULL || startPattern == NULL){
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d005      	beq.n	800e24e <UartReceiverStartLength_registerReader+0x22>
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d002      	beq.n	800e24e <UartReceiverStartLength_registerReader+0x22>
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d101      	bne.n	800e252 <UartReceiverStartLength_registerReader+0x26>
		return UartReceiverStartLength_Status_NullPointerError;
 800e24e:	2303      	movs	r3, #3
 800e250:	e072      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
	}

	if (pSelf->state == UartReceiverStartLength_State_UnInitialized || pSelf->state == UartReceiverStartLength_State_DuringInit){
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	791b      	ldrb	r3, [r3, #4]
 800e256:	b2db      	uxtb	r3, r3
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d004      	beq.n	800e266 <UartReceiverStartLength_registerReader+0x3a>
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	791b      	ldrb	r3, [r3, #4]
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b01      	cmp	r3, #1
 800e264:	d101      	bne.n	800e26a <UartReceiverStartLength_registerReader+0x3e>
		return UartReceiverStartLength_Status_UnInitializedError;
 800e266:	2302      	movs	r3, #2
 800e268:	e066      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
	}

	if (startPatternLength == 0 || sentenceLength == 0){
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <UartReceiverStartLength_registerReader+0x4a>
 800e270:	8c3b      	ldrh	r3, [r7, #32]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d101      	bne.n	800e27a <UartReceiverStartLength_registerReader+0x4e>
		return UartReceiverStartLength_Status_InvalidArgumentsError;
 800e276:	2308      	movs	r3, #8
 800e278:	e05e      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
	}

	if (sentenceLength < startPatternLength){
 800e27a:	79fb      	ldrb	r3, [r7, #7]
 800e27c:	b29b      	uxth	r3, r3
 800e27e:	8c3a      	ldrh	r2, [r7, #32]
 800e280:	429a      	cmp	r2, r3
 800e282:	d201      	bcs.n	800e288 <UartReceiverStartLength_registerReader+0x5c>
		return UartReceiverStartLength_Status_InvalidArgumentsError;
 800e284:	2308      	movs	r3, #8
 800e286:	e057      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
	}

	uint16_t i;
	for (i=0; i<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; i++){
 800e288:	2300      	movs	r3, #0
 800e28a:	82fb      	strh	r3, [r7, #22]
 800e28c:	e04b      	b.n	800e326 <UartReceiverStartLength_registerReader+0xfa>
		if (pSelf->readerRegistered[i] == false){
 800e28e:	8afb      	ldrh	r3, [r7, #22]
 800e290:	68fa      	ldr	r2, [r7, #12]
 800e292:	441a      	add	r2, r3
 800e294:	f241 0378 	movw	r3, #4216	; 0x1078
 800e298:	4413      	add	r3, r2
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	f083 0301 	eor.w	r3, r3, #1
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d03b      	beq.n	800e320 <UartReceiverStartLength_registerReader+0xf4>
			pSelf->startPatternLength[i]	= startPatternLength;
 800e2a8:	8afb      	ldrh	r3, [r7, #22]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	441a      	add	r2, r3
 800e2ae:	f241 037a 	movw	r3, #4218	; 0x107a
 800e2b2:	4413      	add	r3, r2
 800e2b4:	79fa      	ldrb	r2, [r7, #7]
 800e2b6:	701a      	strb	r2, [r3, #0]
			memcpy((void*)(pSelf->startPattern[i]), (void*)startPattern, startPatternLength);
 800e2b8:	8afa      	ldrh	r2, [r7, #22]
 800e2ba:	4613      	mov	r3, r2
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	79fa      	ldrb	r2, [r7, #7]
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f002 fabe 	bl	8010850 <memcpy>
			if (FIFOMultiread_registerReader(&(pSelf->rxFifo), &(pSelf->startLengthFIFOReaders[i])) != FIFOMultiread_Status_OK){
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f103 0008 	add.w	r0, r3, #8
 800e2da:	8afb      	ldrh	r3, [r7, #22]
 800e2dc:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e2e0:	00db      	lsls	r3, r3, #3
 800e2e2:	68fa      	ldr	r2, [r7, #12]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	3304      	adds	r3, #4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	f7fe f869 	bl	800c3c0 <FIFOMultiread_registerReader>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <UartReceiverStartLength_registerReader+0xcc>
				return UartReceiverStartLength_Status_FIFOError;
 800e2f4:	2306      	movs	r3, #6
 800e2f6:	e01f      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
			}
			pSelf->sentenceLength[i]	= sentenceLength;
 800e2f8:	8afb      	ldrh	r3, [r7, #22]
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 800e300:	005b      	lsls	r3, r3, #1
 800e302:	4413      	add	r3, r2
 800e304:	8c3a      	ldrh	r2, [r7, #32]
 800e306:	809a      	strh	r2, [r3, #4]
			pSelf->readerRegistered[i]	= true;
 800e308:	8afb      	ldrh	r3, [r7, #22]
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	441a      	add	r2, r3
 800e30e:	f241 0378 	movw	r3, #4216	; 0x1078
 800e312:	4413      	add	r3, r2
 800e314:	2201      	movs	r2, #1
 800e316:	701a      	strb	r2, [r3, #0]
			*pRetReaderIterator			= i;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	8afa      	ldrh	r2, [r7, #22]
 800e31c:	801a      	strh	r2, [r3, #0]
			break;
 800e31e:	e005      	b.n	800e32c <UartReceiverStartLength_registerReader+0x100>
	for (i=0; i<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; i++){
 800e320:	8afb      	ldrh	r3, [r7, #22]
 800e322:	3301      	adds	r3, #1
 800e324:	82fb      	strh	r3, [r7, #22]
 800e326:	8afb      	ldrh	r3, [r7, #22]
 800e328:	2b01      	cmp	r3, #1
 800e32a:	d9b0      	bls.n	800e28e <UartReceiverStartLength_registerReader+0x62>
		}
	}

	if (i == UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER){
 800e32c:	8afb      	ldrh	r3, [r7, #22]
 800e32e:	2b02      	cmp	r3, #2
 800e330:	d101      	bne.n	800e336 <UartReceiverStartLength_registerReader+0x10a>
		return UartReceiverStartLength_Status_TooManyReadersError;
 800e332:	2304      	movs	r3, #4
 800e334:	e000      	b.n	800e338 <UartReceiverStartLength_registerReader+0x10c>
	}

	return UartReceiverStartLength_Status_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <UartReceiverStartLength_unregisterReader>:

UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_unregisterReader(volatile UartReceiverStartLength_TypeDef* pSelf, UartReceiverStartLength_ReaderIterator_TypeDef readerIt){
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	460b      	mov	r3, r1
 800e34a:	807b      	strh	r3, [r7, #2]

	if (pSelf == NULL){
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <UartReceiverStartLength_unregisterReader+0x16>
		return UartReceiverStartLength_Status_NullPointerError;
 800e352:	2303      	movs	r3, #3
 800e354:	e055      	b.n	800e402 <UartReceiverStartLength_unregisterReader+0xc2>
	}

	if (pSelf->state == UartReceiverStartLength_State_UnInitialized || pSelf->state == UartReceiverStartLength_State_DuringInit){
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	791b      	ldrb	r3, [r3, #4]
 800e35a:	b2db      	uxtb	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d004      	beq.n	800e36a <UartReceiverStartLength_unregisterReader+0x2a>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	791b      	ldrb	r3, [r3, #4]
 800e364:	b2db      	uxtb	r3, r3
 800e366:	2b01      	cmp	r3, #1
 800e368:	d101      	bne.n	800e36e <UartReceiverStartLength_unregisterReader+0x2e>
		return UartReceiverStartLength_Status_UnInitializedError;
 800e36a:	2302      	movs	r3, #2
 800e36c:	e049      	b.n	800e402 <UartReceiverStartLength_unregisterReader+0xc2>
	}

	if (readerIt >= UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER){
 800e36e:	887b      	ldrh	r3, [r7, #2]
 800e370:	2b01      	cmp	r3, #1
 800e372:	d901      	bls.n	800e378 <UartReceiverStartLength_unregisterReader+0x38>
		return UartReceiverStartLength_Status_InvalidArgumentsError;
 800e374:	2308      	movs	r3, #8
 800e376:	e044      	b.n	800e402 <UartReceiverStartLength_unregisterReader+0xc2>
	}

	if (pSelf->readerRegistered[readerIt] == false){
 800e378:	887b      	ldrh	r3, [r7, #2]
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	441a      	add	r2, r3
 800e37e:	f241 0378 	movw	r3, #4216	; 0x1078
 800e382:	4413      	add	r3, r2
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	b2db      	uxtb	r3, r3
 800e388:	f083 0301 	eor.w	r3, r3, #1
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d001      	beq.n	800e396 <UartReceiverStartLength_unregisterReader+0x56>
		return UartReceiverStartLength_Status_NotRegisteredReaderError;
 800e392:	2305      	movs	r3, #5
 800e394:	e035      	b.n	800e402 <UartReceiverStartLength_unregisterReader+0xc2>
	}

	pSelf->startPatternLength[readerIt]	= 0;
 800e396:	887b      	ldrh	r3, [r7, #2]
 800e398:	687a      	ldr	r2, [r7, #4]
 800e39a:	441a      	add	r2, r3
 800e39c:	f241 037a 	movw	r3, #4218	; 0x107a
 800e3a0:	4413      	add	r3, r2
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	701a      	strb	r2, [r3, #0]
	pSelf->sentenceLength[readerIt]		= 0;
 800e3a6:	887b      	ldrh	r3, [r7, #2]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 800e3ae:	005b      	lsls	r3, r3, #1
 800e3b0:	4413      	add	r3, r2
 800e3b2:	2200      	movs	r2, #0
 800e3b4:	809a      	strh	r2, [r3, #4]
	memset((void*)&(pSelf->startPattern[readerIt]), 0, sizeof(pSelf->startPattern[readerIt][0]) * UART_RECEIVER_START_LENGTH_MAX_START_PATERN_LENGTH);
 800e3b6:	887a      	ldrh	r2, [r7, #2]
 800e3b8:	4613      	mov	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	4413      	add	r3, r2
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	220a      	movs	r2, #10
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f002 fa4a 	bl	8010866 <memset>
	if (FIFOMultiread_unregisterReader(&(pSelf->startLengthFIFOReaders[readerIt])) != FIFOMultiread_Status_OK){
 800e3d2:	887b      	ldrh	r3, [r7, #2]
 800e3d4:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e3d8:	00db      	lsls	r3, r3, #3
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	4413      	add	r3, r2
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fe f84b 	bl	800c47c <FIFOMultiread_unregisterReader>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d001      	beq.n	800e3f0 <UartReceiverStartLength_unregisterReader+0xb0>
		return UartReceiverStartLength_Status_FIFOError;
 800e3ec:	2306      	movs	r3, #6
 800e3ee:	e008      	b.n	800e402 <UartReceiverStartLength_unregisterReader+0xc2>
	}
	pSelf->readerRegistered[readerIt]	= 0;
 800e3f0:	887b      	ldrh	r3, [r7, #2]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	441a      	add	r2, r3
 800e3f6:	f241 0378 	movw	r3, #4216	; 0x1078
 800e3fa:	4413      	add	r3, r2
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	701a      	strb	r2, [r3, #0]

	return UartReceiverStartLength_Status_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}

0800e40a <UartReceiverStartLength_start>:

UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_start(volatile UartReceiverStartLength_TypeDef* pSelf){
 800e40a:	b480      	push	{r7}
 800e40c:	b083      	sub	sp, #12
 800e40e:	af00      	add	r7, sp, #0
 800e410:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d101      	bne.n	800e41c <UartReceiverStartLength_start+0x12>
		return UartReceiverStartLength_Status_NullPointerError;
 800e418:	2303      	movs	r3, #3
 800e41a:	e016      	b.n	800e44a <UartReceiverStartLength_start+0x40>
	}

	if (pSelf->state == UartReceiverStartLength_State_UnInitialized || pSelf->state == UartReceiverStartLength_State_DuringInit){
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	791b      	ldrb	r3, [r3, #4]
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b00      	cmp	r3, #0
 800e424:	d004      	beq.n	800e430 <UartReceiverStartLength_start+0x26>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	791b      	ldrb	r3, [r3, #4]
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b01      	cmp	r3, #1
 800e42e:	d101      	bne.n	800e434 <UartReceiverStartLength_start+0x2a>
		return UartReceiverStartLength_Status_UnInitializedError;
 800e430:	2302      	movs	r3, #2
 800e432:	e00a      	b.n	800e44a <UartReceiverStartLength_start+0x40>
	}

	if (pSelf->state != UartReceiverStartLength_State_Initialized){
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	791b      	ldrb	r3, [r3, #4]
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d001      	beq.n	800e442 <UartReceiverStartLength_start+0x38>
		return UartReceiverStartLength_Status_ReceiverAlreadyStartedError;
 800e43e:	2309      	movs	r3, #9
 800e440:	e003      	b.n	800e44a <UartReceiverStartLength_start+0x40>
	}

	pSelf->state	= UartReceiverStartLength_State_Receiving;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2203      	movs	r2, #3
 800e446:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartLength_Status_OK;
 800e448:	2300      	movs	r3, #0

}
 800e44a:	4618      	mov	r0, r3
 800e44c:	370c      	adds	r7, #12
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <UartReceiverStartLength_stop>:

UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_stop(volatile UartReceiverStartLength_TypeDef* pSelf){
 800e456:	b480      	push	{r7}
 800e458:	b083      	sub	sp, #12
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <UartReceiverStartLength_stop+0x12>
		return UartReceiverStartLength_Status_NullPointerError;
 800e464:	2303      	movs	r3, #3
 800e466:	e016      	b.n	800e496 <UartReceiverStartLength_stop+0x40>
	}

	if (pSelf->state == UartReceiverStartLength_State_UnInitialized || pSelf->state == UartReceiverStartLength_State_DuringInit){
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	791b      	ldrb	r3, [r3, #4]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d004      	beq.n	800e47c <UartReceiverStartLength_stop+0x26>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	791b      	ldrb	r3, [r3, #4]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	2b01      	cmp	r3, #1
 800e47a:	d101      	bne.n	800e480 <UartReceiverStartLength_stop+0x2a>
		return UartReceiverStartLength_Status_UnInitializedError;
 800e47c:	2302      	movs	r3, #2
 800e47e:	e00a      	b.n	800e496 <UartReceiverStartLength_stop+0x40>
	}

	if (pSelf->state != UartReceiverStartLength_State_Receiving){
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	791b      	ldrb	r3, [r3, #4]
 800e484:	b2db      	uxtb	r3, r3
 800e486:	2b03      	cmp	r3, #3
 800e488:	d001      	beq.n	800e48e <UartReceiverStartLength_stop+0x38>
		return UartReceiverStartLength_Status_ReceiverNotReceivingError;
 800e48a:	230a      	movs	r3, #10
 800e48c:	e003      	b.n	800e496 <UartReceiverStartLength_stop+0x40>
	}

	pSelf->state	= UartReceiverStartLength_State_Initialized;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	2202      	movs	r2, #2
 800e492:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartLength_Status_OK;
 800e494:	2300      	movs	r3, #0

}
 800e496:	4618      	mov	r0, r3
 800e498:	370c      	adds	r7, #12
 800e49a:	46bd      	mov	sp, r7
 800e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a0:	4770      	bx	lr

0800e4a2 <UartReceiverStartLength_pullLastSentence>:

UartReceiverStartLength_Status_TypeDef UartReceiverStartLength_pullLastSentence(volatile UartReceiverStartLength_TypeDef* pSelf, UartReceiverStartLength_ReaderIterator_TypeDef readerIt, uint8_t* pRetSentence, uint32_t* pRetTimestamp){
 800e4a2:	b580      	push	{r7, lr}
 800e4a4:	b08a      	sub	sp, #40	; 0x28
 800e4a6:	af00      	add	r7, sp, #0
 800e4a8:	60f8      	str	r0, [r7, #12]
 800e4aa:	607a      	str	r2, [r7, #4]
 800e4ac:	603b      	str	r3, [r7, #0]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	817b      	strh	r3, [r7, #10]

	volatile UartReceiverStartLength_FIFOElem_TypeDef	elemBuffer;
	volatile FIFOMultiread_Status_TypeDef				fifoStatus;
	UartReceiverStartLength_Status_TypeDef				ret;

	if (pSelf == NULL || pRetSentence == NULL || pRetTimestamp == NULL){
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d005      	beq.n	800e4c4 <UartReceiverStartLength_pullLastSentence+0x22>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d002      	beq.n	800e4c4 <UartReceiverStartLength_pullLastSentence+0x22>
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d101      	bne.n	800e4c8 <UartReceiverStartLength_pullLastSentence+0x26>
		return UartReceiverStartLength_Status_NullPointerError;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e121      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	}

	if (pSelf->state == UartReceiverStartLength_State_UnInitialized || pSelf->state == UartReceiverStartLength_State_DuringInit){
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	791b      	ldrb	r3, [r3, #4]
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d004      	beq.n	800e4dc <UartReceiverStartLength_pullLastSentence+0x3a>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	791b      	ldrb	r3, [r3, #4]
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d101      	bne.n	800e4e0 <UartReceiverStartLength_pullLastSentence+0x3e>
		return UartReceiverStartLength_Status_UnInitializedError;
 800e4dc:	2302      	movs	r3, #2
 800e4de:	e115      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	}

	if (readerIt >= UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER){
 800e4e0:	897b      	ldrh	r3, [r7, #10]
 800e4e2:	2b01      	cmp	r3, #1
 800e4e4:	d901      	bls.n	800e4ea <UartReceiverStartLength_pullLastSentence+0x48>
		return UartReceiverStartLength_Status_InvalidArgumentsError;
 800e4e6:	2308      	movs	r3, #8
 800e4e8:	e110      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	}

	if (pSelf->readerRegistered[readerIt] == false){
 800e4ea:	897b      	ldrh	r3, [r7, #10]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	441a      	add	r2, r3
 800e4f0:	f241 0378 	movw	r3, #4216	; 0x1078
 800e4f4:	4413      	add	r3, r2
 800e4f6:	781b      	ldrb	r3, [r3, #0]
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	f083 0301 	eor.w	r3, r3, #1
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <UartReceiverStartLength_pullLastSentence+0x66>
		return UartReceiverStartLength_Status_NotRegisteredReaderError;
 800e504:	2305      	movs	r3, #5
 800e506:	e101      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	}

	//< ----- removing chars from the beginning until it is not a start signs ----- >//

	if ((ret = _UartReceiverStartLength_removeNotStartCharsFromQueueFront(pSelf, readerIt)) != UartReceiverStartLength_Status_OK){
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	4619      	mov	r1, r3
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f000 f901 	bl	800e714 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront>
 800e512:	4603      	mov	r3, r0
 800e514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <UartReceiverStartLength_pullLastSentence+0x84>
		return ret;
 800e520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e524:	e0f2      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	}

	//< ----- handling sentences with start and proper length ----- >//

	bool foundSentence = false;
 800e526:	2300      	movs	r3, #0
 800e528:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint16_t elementsNumber;

	if (FIFOMultiread_elementsNumber(&pSelf->startLengthFIFOReaders[readerIt], &elementsNumber) != FIFOMultiread_Status_OK) {
 800e52c:	897b      	ldrh	r3, [r7, #10]
 800e52e:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	4413      	add	r3, r2
 800e538:	3304      	adds	r3, #4
 800e53a:	f107 0214 	add.w	r2, r7, #20
 800e53e:	4611      	mov	r1, r2
 800e540:	4618      	mov	r0, r3
 800e542:	f7fe fa53 	bl	800c9ec <FIFOMultiread_elementsNumber>
 800e546:	4603      	mov	r3, r0
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d07e      	beq.n	800e64a <UartReceiverStartLength_pullLastSentence+0x1a8>
		return UartReceiverStartLength_Status_FIFOError;
 800e54c:	2306      	movs	r3, #6
 800e54e:	e0dd      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>

	while (pSelf->receivedStartSignsNumber[readerIt] > 0 && (elementsNumber >= pSelf->sentenceLength[readerIt]) ){

		//< ----- start sign must be on the front of the queue thanks to the part above. Checking if whole prefix matches pattern ----- >//
		uint16_t i;
		for (i = 0; i<pSelf->startPatternLength[readerIt]; i++){
 800e550:	2300      	movs	r3, #0
 800e552:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e554:	e025      	b.n	800e5a2 <UartReceiverStartLength_pullLastSentence+0x100>
			if (FIFOMultiread_elementValOnPosition(&pSelf->startLengthFIFOReaders[readerIt], i, &elemBuffer) != FIFOMultiread_Status_OK){
 800e556:	897b      	ldrh	r3, [r7, #10]
 800e558:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e55c:	00db      	lsls	r3, r3, #3
 800e55e:	68fa      	ldr	r2, [r7, #12]
 800e560:	4413      	add	r3, r2
 800e562:	3304      	adds	r3, #4
 800e564:	f107 0218 	add.w	r2, r7, #24
 800e568:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe f9c9 	bl	800c902 <FIFOMultiread_elementValOnPosition>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <UartReceiverStartLength_pullLastSentence+0xd8>
				return UartReceiverStartLength_Status_FIFOError;
 800e576:	2306      	movs	r3, #6
 800e578:	e0c8      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
			}

			if (pSelf->startPattern[readerIt][i] != elemBuffer.dataByte){
 800e57a:	897a      	ldrh	r2, [r7, #10]
 800e57c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	4613      	mov	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	4403      	add	r3, r0
 800e58a:	440b      	add	r3, r1
 800e58c:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	b2da      	uxtb	r2, r3
 800e594:	7e3b      	ldrb	r3, [r7, #24]
 800e596:	b2db      	uxtb	r3, r3
 800e598:	429a      	cmp	r2, r3
 800e59a:	d10f      	bne.n	800e5bc <UartReceiverStartLength_pullLastSentence+0x11a>
		for (i = 0; i<pSelf->startPatternLength[readerIt]; i++){
 800e59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e59e:	3301      	adds	r3, #1
 800e5a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e5a2:	897b      	ldrh	r3, [r7, #10]
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	441a      	add	r2, r3
 800e5a8:	f241 037a 	movw	r3, #4218	; 0x107a
 800e5ac:	4413      	add	r3, r2
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	b29b      	uxth	r3, r3
 800e5b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d3cd      	bcc.n	800e556 <UartReceiverStartLength_pullLastSentence+0xb4>
 800e5ba:	e000      	b.n	800e5be <UartReceiverStartLength_pullLastSentence+0x11c>
				break;
 800e5bc:	bf00      	nop
			}
		}

		if (i == pSelf->startPatternLength[readerIt]){
 800e5be:	897b      	ldrh	r3, [r7, #10]
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	441a      	add	r2, r3
 800e5c4:	f241 037a 	movw	r3, #4218	; 0x107a
 800e5c8:	4413      	add	r3, r2
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5d2:	429a      	cmp	r2, r3
 800e5d4:	d103      	bne.n	800e5de <UartReceiverStartLength_pullLastSentence+0x13c>
			foundSentence = true;
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			break;
 800e5dc:	e04b      	b.n	800e676 <UartReceiverStartLength_pullLastSentence+0x1d4>
		} else {
			//< ----- case where start pattern doesn't match. Remove front until next start char and start over ----- >//
			fifoStatus = FIFOMultiread_dequeue(&pSelf->startLengthFIFOReaders[readerIt], &elemBuffer);
 800e5de:	897b      	ldrh	r3, [r7, #10]
 800e5e0:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	4413      	add	r3, r2
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	f107 0218 	add.w	r2, r7, #24
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe f88e 	bl	800c714 <FIFOMultiread_dequeue>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	75fb      	strb	r3, [r7, #23]
			if (fifoStatus != FIFOMultiread_Status_OK){
 800e5fc:	7dfb      	ldrb	r3, [r7, #23]
 800e5fe:	b2db      	uxtb	r3, r3
 800e600:	2b00      	cmp	r3, #0
 800e602:	d001      	beq.n	800e608 <UartReceiverStartLength_pullLastSentence+0x166>
				return UartReceiverStartLength_Status_FIFOError;
 800e604:	2306      	movs	r3, #6
 800e606:	e081      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
			}
			if ((ret = _UartReceiverStartLength_removeNotStartCharsFromQueueFront(pSelf, readerIt)) != UartReceiverStartLength_Status_OK){
 800e608:	897b      	ldrh	r3, [r7, #10]
 800e60a:	4619      	mov	r1, r3
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f000 f881 	bl	800e714 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront>
 800e612:	4603      	mov	r3, r0
 800e614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d002      	beq.n	800e626 <UartReceiverStartLength_pullLastSentence+0x184>
				return ret;
 800e620:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e624:	e072      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
			}
		}
		if (FIFOMultiread_elementsNumber(&pSelf->startLengthFIFOReaders[readerIt], &elementsNumber) != FIFOMultiread_Status_OK) {
 800e626:	897b      	ldrh	r3, [r7, #10]
 800e628:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e62c:	00db      	lsls	r3, r3, #3
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	4413      	add	r3, r2
 800e632:	3304      	adds	r3, #4
 800e634:	f107 0214 	add.w	r2, r7, #20
 800e638:	4611      	mov	r1, r2
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe f9d6 	bl	800c9ec <FIFOMultiread_elementsNumber>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <UartReceiverStartLength_pullLastSentence+0x1a8>
			return UartReceiverStartLength_Status_FIFOError;
 800e646:	2306      	movs	r3, #6
 800e648:	e060      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
	while (pSelf->receivedStartSignsNumber[readerIt] > 0 && (elementsNumber >= pSelf->sentenceLength[readerIt]) ){
 800e64a:	897b      	ldrh	r3, [r7, #10]
 800e64c:	68fa      	ldr	r2, [r7, #12]
 800e64e:	441a      	add	r2, r3
 800e650:	f241 03a4 	movw	r3, #4260	; 0x10a4
 800e654:	4413      	add	r3, r2
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d00b      	beq.n	800e676 <UartReceiverStartLength_pullLastSentence+0x1d4>
 800e65e:	897b      	ldrh	r3, [r7, #10]
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	4413      	add	r3, r2
 800e66a:	889b      	ldrh	r3, [r3, #4]
 800e66c:	b29a      	uxth	r2, r3
 800e66e:	8abb      	ldrh	r3, [r7, #20]
 800e670:	429a      	cmp	r2, r3
 800e672:	f67f af6d 	bls.w	800e550 <UartReceiverStartLength_pullLastSentence+0xae>
		}
	}

	if (foundSentence){
 800e676:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d041      	beq.n	800e702 <UartReceiverStartLength_pullLastSentence+0x260>

		if (FIFOMultiread_lastElement(&pSelf->startLengthFIFOReaders[readerIt], &elemBuffer) != FIFOMultiread_Status_OK){
 800e67e:	897b      	ldrh	r3, [r7, #10]
 800e680:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e684:	00db      	lsls	r3, r3, #3
 800e686:	68fa      	ldr	r2, [r7, #12]
 800e688:	4413      	add	r3, r2
 800e68a:	3304      	adds	r3, #4
 800e68c:	f107 0218 	add.w	r2, r7, #24
 800e690:	4611      	mov	r1, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f7fe f8c0 	bl	800c818 <FIFOMultiread_lastElement>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d001      	beq.n	800e6a2 <UartReceiverStartLength_pullLastSentence+0x200>
			return UartReceiverStartLength_Status_FIFOError;
 800e69e:	2306      	movs	r3, #6
 800e6a0:	e034      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
		}

		*pRetTimestamp = elemBuffer.msTime;
 800e6a2:	69fa      	ldr	r2, [r7, #28]
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	601a      	str	r2, [r3, #0]

		for (uint16_t i=0; i<pSelf->sentenceLength[readerIt]; i++){
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	847b      	strh	r3, [r7, #34]	; 0x22
 800e6ac:	e01a      	b.n	800e6e4 <UartReceiverStartLength_pullLastSentence+0x242>
			if (FIFOMultiread_dequeue(&pSelf->startLengthFIFOReaders[readerIt], &elemBuffer) != FIFOMultiread_Status_OK){
 800e6ae:	897b      	ldrh	r3, [r7, #10]
 800e6b0:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e6b4:	00db      	lsls	r3, r3, #3
 800e6b6:	68fa      	ldr	r2, [r7, #12]
 800e6b8:	4413      	add	r3, r2
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	f107 0218 	add.w	r2, r7, #24
 800e6c0:	4611      	mov	r1, r2
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fe f826 	bl	800c714 <FIFOMultiread_dequeue>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <UartReceiverStartLength_pullLastSentence+0x230>
				return UartReceiverStartLength_Status_FIFOError;
 800e6ce:	2306      	movs	r3, #6
 800e6d0:	e01c      	b.n	800e70c <UartReceiverStartLength_pullLastSentence+0x26a>
			}
			pRetSentence[i] = elemBuffer.dataByte;
 800e6d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	7e3a      	ldrb	r2, [r7, #24]
 800e6da:	b2d2      	uxtb	r2, r2
 800e6dc:	701a      	strb	r2, [r3, #0]
		for (uint16_t i=0; i<pSelf->sentenceLength[readerIt]; i++){
 800e6de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	847b      	strh	r3, [r7, #34]	; 0x22
 800e6e4:	897b      	ldrh	r3, [r7, #10]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	f603 033c 	addw	r3, r3, #2108	; 0x83c
 800e6ec:	005b      	lsls	r3, r3, #1
 800e6ee:	4413      	add	r3, r2
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d3d9      	bcc.n	800e6ae <UartReceiverStartLength_pullLastSentence+0x20c>
		}
		ret = UartReceiverStartLength_Status_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e700:	e002      	b.n	800e708 <UartReceiverStartLength_pullLastSentence+0x266>
	} else {
		ret = UartReceiverStartLength_Status_Empty;
 800e702:	2301      	movs	r3, #1
 800e704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return ret;
 800e708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3728      	adds	r7, #40	; 0x28
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront>:

//< ----- Private functions implementations ----- >//

static UartReceiverStartLength_Status_TypeDef _UartReceiverStartLength_removeNotStartCharsFromQueueFront(volatile UartReceiverStartLength_TypeDef* pSelf, UartReceiverStartLength_ReaderIterator_TypeDef readerIt){
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	807b      	strh	r3, [r7, #2]

	volatile UartReceiverStartLength_FIFOElem_TypeDef	elemBuffer;
	volatile FIFOMultiread_Status_TypeDef				fifoStatus;
	while (true){

		fifoStatus = FIFOMultiread_lastElement(&pSelf->startLengthFIFOReaders[readerIt], &elemBuffer);
 800e720:	887b      	ldrh	r3, [r7, #2]
 800e722:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e726:	00db      	lsls	r3, r3, #3
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	4413      	add	r3, r2
 800e72c:	3304      	adds	r3, #4
 800e72e:	f107 0210 	add.w	r2, r7, #16
 800e732:	4611      	mov	r1, r2
 800e734:	4618      	mov	r0, r3
 800e736:	f7fe f86f 	bl	800c818 <FIFOMultiread_lastElement>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]

		if (fifoStatus == FIFOMultiread_Status_Empty){
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
 800e740:	b2db      	uxtb	r3, r3
 800e742:	2b02      	cmp	r3, #2
 800e744:	d029      	beq.n	800e79a <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x86>
			break;
		} else if (fifoStatus != FIFOMultiread_Status_OK){
 800e746:	7bfb      	ldrb	r3, [r7, #15]
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x3e>
			return UartReceiverStartLength_Status_FIFOError;
 800e74e:	2306      	movs	r3, #6
 800e750:	e027      	b.n	800e7a2 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x8e>
		}

		if (elemBuffer.dataByte == pSelf->startPattern[readerIt][0]){
 800e752:	7c3b      	ldrb	r3, [r7, #16]
 800e754:	b2d9      	uxtb	r1, r3
 800e756:	887a      	ldrh	r2, [r7, #2]
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	4613      	mov	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4403      	add	r3, r0
 800e764:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e768:	781b      	ldrb	r3, [r3, #0]
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	4299      	cmp	r1, r3
 800e76e:	d016      	beq.n	800e79e <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x8a>
			break;
		} else {
			fifoStatus = FIFOMultiread_dequeue(&pSelf->startLengthFIFOReaders[readerIt], &elemBuffer);
 800e770:	887b      	ldrh	r3, [r7, #2]
 800e772:	f203 2312 	addw	r3, r3, #530	; 0x212
 800e776:	00db      	lsls	r3, r3, #3
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	4413      	add	r3, r2
 800e77c:	3304      	adds	r3, #4
 800e77e:	f107 0210 	add.w	r2, r7, #16
 800e782:	4611      	mov	r1, r2
 800e784:	4618      	mov	r0, r3
 800e786:	f7fd ffc5 	bl	800c714 <FIFOMultiread_dequeue>
 800e78a:	4603      	mov	r3, r0
 800e78c:	73fb      	strb	r3, [r7, #15]
			if (fifoStatus != FIFOMultiread_Status_OK){
 800e78e:	7bfb      	ldrb	r3, [r7, #15]
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d0c4      	beq.n	800e720 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0xc>
				return UartReceiverStartLength_Status_FIFOError;
 800e796:	2306      	movs	r3, #6
 800e798:	e003      	b.n	800e7a2 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x8e>
			break;
 800e79a:	bf00      	nop
 800e79c:	e000      	b.n	800e7a0 <_UartReceiverStartLength_removeNotStartCharsFromQueueFront+0x8c>
			break;
 800e79e:	bf00      	nop
			}
		}
	}

	return UartReceiverStartLength_Status_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <_UartReceiverStartLength_receivedByteCallback>:

//< ----- IRQ Callback ----- >//

#define	UART_RECEIVER_START_LENGTH_FULL_ASSER_IN_CALLBACK 0

static void _UartReceiverStartLength_receivedByteCallback(uint8_t dataByte, uint32_t timestamp, void* pArgs){
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b088      	sub	sp, #32
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	73fb      	strb	r3, [r7, #15]

	UartReceiverStartLength_FIFOElem_TypeDef byteWithTimestamp;
	UartReceiverStartLength_TypeDef* pSelf = (UartReceiverStartLength_TypeDef*) pArgs;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	61bb      	str	r3, [r7, #24]
		return;
	}

#endif

	if (pSelf->state != UartReceiverStartLength_State_Receiving){
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	791b      	ldrb	r3, [r3, #4]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	2b03      	cmp	r3, #3
 800e7c6:	d144      	bne.n	800e852 <_UartReceiverStartLength_receivedByteCallback+0xa6>
		return;
	}

	byteWithTimestamp.dataByte	= dataByte;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	743b      	strb	r3, [r7, #16]
	byteWithTimestamp.msTime	= timestamp;
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	617b      	str	r3, [r7, #20]

	if (FIFOMultiread_enqueue(&pSelf->rxFifo, (void*) &byteWithTimestamp) != FIFOMultiread_Status_OK){
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	f107 0210 	add.w	r2, r7, #16
 800e7d8:	4611      	mov	r1, r2
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f7fd fe8f 	bl	800c4fe <FIFOMultiread_enqueue>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <_UartReceiverStartLength_receivedByteCallback+0x40>
		Warning_Handler("UartDriver_receivedByteCallback function. FIFOMultiread_enqueue returned error.");
 800e7e6:	481d      	ldr	r0, [pc, #116]	; (800e85c <_UartReceiverStartLength_receivedByteCallback+0xb0>)
 800e7e8:	f7fb f966 	bl	8009ab8 <Warning_Handler>
	}

	//< ----- Handling start sign counters ----- >//
	for (uint8_t fooIt = 0; fooIt<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; fooIt++){
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	77fb      	strb	r3, [r7, #31]
 800e7f0:	e02b      	b.n	800e84a <_UartReceiverStartLength_receivedByteCallback+0x9e>
		if (pSelf->readerRegistered[fooIt] == true){
 800e7f2:	7ffb      	ldrb	r3, [r7, #31]
 800e7f4:	69ba      	ldr	r2, [r7, #24]
 800e7f6:	441a      	add	r2, r3
 800e7f8:	f241 0378 	movw	r3, #4216	; 0x1078
 800e7fc:	4413      	add	r3, r2
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d01e      	beq.n	800e844 <_UartReceiverStartLength_receivedByteCallback+0x98>
			if (dataByte == pSelf->startPattern[fooIt][0]){
 800e806:	7ffa      	ldrb	r2, [r7, #31]
 800e808:	69b9      	ldr	r1, [r7, #24]
 800e80a:	4613      	mov	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	440b      	add	r3, r1
 800e814:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	7bfa      	ldrb	r2, [r7, #15]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d110      	bne.n	800e844 <_UartReceiverStartLength_receivedByteCallback+0x98>
				pSelf->receivedStartSignsNumber[fooIt]++;
 800e822:	7ffa      	ldrb	r2, [r7, #31]
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	1899      	adds	r1, r3, r2
 800e828:	f241 03a4 	movw	r3, #4260	; 0x10a4
 800e82c:	440b      	add	r3, r1
 800e82e:	781b      	ldrb	r3, [r3, #0]
 800e830:	b2db      	uxtb	r3, r3
 800e832:	3301      	adds	r3, #1
 800e834:	b2d9      	uxtb	r1, r3
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	441a      	add	r2, r3
 800e83a:	f241 03a4 	movw	r3, #4260	; 0x10a4
 800e83e:	4413      	add	r3, r2
 800e840:	460a      	mov	r2, r1
 800e842:	701a      	strb	r2, [r3, #0]
	for (uint8_t fooIt = 0; fooIt<UART_RECEIVER_START_LENGTH_MAX_READERS_NUMBER; fooIt++){
 800e844:	7ffb      	ldrb	r3, [r7, #31]
 800e846:	3301      	adds	r3, #1
 800e848:	77fb      	strb	r3, [r7, #31]
 800e84a:	7ffb      	ldrb	r3, [r7, #31]
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d9d0      	bls.n	800e7f2 <_UartReceiverStartLength_receivedByteCallback+0x46>
 800e850:	e000      	b.n	800e854 <_UartReceiverStartLength_receivedByteCallback+0xa8>
		return;
 800e852:	bf00      	nop
			}
		}
	}
}
 800e854:	3720      	adds	r7, #32
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	080112b0 	.word	0x080112b0

0800e860 <UartReceiverStartTerm_init>:

static void UartReceiverStartTerm_receivedByteCallback(uint8_t dataByte, uint32_t timestamp, void* pArgs);

//< ----- Public functions implementations ----- >//

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_init(UartReceiverStartTerm_TypeDef* pSelf, UartDriver_TypeDef* pUartDriver){
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pUartDriver == NULL){
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <UartReceiverStartTerm_init+0x16>
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d101      	bne.n	800e87a <UartReceiverStartTerm_init+0x1a>
		return UartReceiverStartTerm_Status_NullPointerError;
 800e876:	2303      	movs	r3, #3
 800e878:	e063      	b.n	800e942 <UartReceiverStartTerm_init+0xe2>
	}

	pSelf->state		= UartReceiverStartTerm_State_DuringInit;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	711a      	strb	r2, [r3, #4]
	pSelf->pUartDriver	= pUartDriver;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	601a      	str	r2, [r3, #0]

	if (FIFOMultiread_init((FIFOMultiread_TypeDef*)&pSelf->rxFifo, (void*)pSelf->receiveBuffer, sizeof(UartReceiverStartTerm_FIFOElem_TypeDef), UART_RECEIVER_START_TERM_BUFFER_SIZE) != FIFOMultiread_Status_OK){
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	f103 0008 	add.w	r0, r3, #8
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e892:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e896:	2208      	movs	r2, #8
 800e898:	f7fd fd42 	bl	800c320 <FIFOMultiread_init>
 800e89c:	4603      	mov	r3, r0
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <UartReceiverStartTerm_init+0x46>
		return UartReceiverStartTerm_Status_FIFOError;
 800e8a2:	2306      	movs	r3, #6
 800e8a4:	e04d      	b.n	800e942 <UartReceiverStartTerm_init+0xe2>
	}

	for (uint16_t i=0; i<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; i++){
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	81fb      	strh	r3, [r7, #14]
 800e8aa:	e036      	b.n	800e91a <UartReceiverStartTerm_init+0xba>
		pSelf->readerRegistered[i]						= false;
 800e8ac:	89fb      	ldrh	r3, [r7, #14]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	441a      	add	r2, r3
 800e8b2:	f241 0378 	movw	r3, #4216	; 0x1078
 800e8b6:	4413      	add	r3, r2
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	701a      	strb	r2, [r3, #0]
		memset((void*)&(pSelf->startTerminationSignFIFOReaders[i]), 0, sizeof(FIFOMultireadReader_TypeDef));
 800e8bc:	89fb      	ldrh	r3, [r7, #14]
 800e8be:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	3304      	adds	r3, #4
 800e8ca:	2208      	movs	r2, #8
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 ffc9 	bl	8010866 <memset>
		pSelf->startSignVal[i]							= 0;
 800e8d4:	89fb      	ldrh	r3, [r7, #14]
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	441a      	add	r2, r3
 800e8da:	f241 0394 	movw	r3, #4244	; 0x1094
 800e8de:	4413      	add	r3, r2
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	701a      	strb	r2, [r3, #0]
		pSelf->terminationSignVal[i]					= 0;
 800e8e4:	89fb      	ldrh	r3, [r7, #14]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	441a      	add	r2, r3
 800e8ea:	f241 0397 	movw	r3, #4247	; 0x1097
 800e8ee:	4413      	add	r3, r2
 800e8f0:	2200      	movs	r2, #0
 800e8f2:	701a      	strb	r2, [r3, #0]
		pSelf->receivedStartSignsNumber[i]				= 0;
 800e8f4:	89fb      	ldrh	r3, [r7, #14]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	441a      	add	r2, r3
 800e8fa:	f241 039a 	movw	r3, #4250	; 0x109a
 800e8fe:	4413      	add	r3, r2
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
		pSelf->receivedTerminationSignsNumber[i]		= 0;
 800e904:	89fb      	ldrh	r3, [r7, #14]
 800e906:	687a      	ldr	r2, [r7, #4]
 800e908:	441a      	add	r2, r3
 800e90a:	f241 039d 	movw	r3, #4253	; 0x109d
 800e90e:	4413      	add	r3, r2
 800e910:	2200      	movs	r2, #0
 800e912:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; i++){
 800e914:	89fb      	ldrh	r3, [r7, #14]
 800e916:	3301      	adds	r3, #1
 800e918:	81fb      	strh	r3, [r7, #14]
 800e91a:	89fb      	ldrh	r3, [r7, #14]
 800e91c:	2b02      	cmp	r3, #2
 800e91e:	d9c5      	bls.n	800e8ac <UartReceiverStartTerm_init+0x4c>
	}

	if (UartDriver_setReceivedByteCallback(pSelf->pUartDriver, UartReceiverStartTerm_receivedByteCallback, (void*)pSelf, &pSelf->uartDriverCallbackIterator) != UartDriver_Status_OK){
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6818      	ldr	r0, [r3, #0]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	3306      	adds	r3, #6
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4908      	ldr	r1, [pc, #32]	; (800e94c <UartReceiverStartTerm_init+0xec>)
 800e92c:	f7ff fa38 	bl	800dda0 <UartDriver_setReceivedByteCallback>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	d001      	beq.n	800e93a <UartReceiverStartTerm_init+0xda>
		return UartReceiverStartTerm_Status_UartDriverError;
 800e936:	2307      	movs	r3, #7
 800e938:	e003      	b.n	800e942 <UartReceiverStartTerm_init+0xe2>
	}

	pSelf->state = UartReceiverStartTerm_State_Initialized;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2202      	movs	r2, #2
 800e93e:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartTerm_Status_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}
 800e94a:	bf00      	nop
 800e94c:	0800ee9d 	.word	0x0800ee9d

0800e950 <UartReceiverStartTerm_registerReader>:

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_registerReader(
		volatile UartReceiverStartTerm_TypeDef* pSelf,
		volatile UartReceiverStartTerm_ReaderIterator_TypeDef* pRetReaderIterator,
		uint8_t startSign,
		uint8_t terminationSign){
 800e950:	b580      	push	{r7, lr}
 800e952:	b086      	sub	sp, #24
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	4611      	mov	r1, r2
 800e95c:	461a      	mov	r2, r3
 800e95e:	460b      	mov	r3, r1
 800e960:	71fb      	strb	r3, [r7, #7]
 800e962:	4613      	mov	r3, r2
 800e964:	71bb      	strb	r3, [r7, #6]

	if (pSelf == NULL || pRetReaderIterator == NULL){
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <UartReceiverStartTerm_registerReader+0x22>
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d101      	bne.n	800e976 <UartReceiverStartTerm_registerReader+0x26>
		return UartReceiverStartTerm_Status_NullPointerError;
 800e972:	2303      	movs	r3, #3
 800e974:	e06c      	b.n	800ea50 <UartReceiverStartTerm_registerReader+0x100>
	}

	if (pSelf->state == UartReceiverStartTerm_State_UnInitialized || pSelf->state == UartReceiverStartTerm_State_DuringInit){
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	791b      	ldrb	r3, [r3, #4]
 800e97a:	b2db      	uxtb	r3, r3
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d004      	beq.n	800e98a <UartReceiverStartTerm_registerReader+0x3a>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	791b      	ldrb	r3, [r3, #4]
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b01      	cmp	r3, #1
 800e988:	d101      	bne.n	800e98e <UartReceiverStartTerm_registerReader+0x3e>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800e98a:	2302      	movs	r3, #2
 800e98c:	e060      	b.n	800ea50 <UartReceiverStartTerm_registerReader+0x100>
	}

	if (pSelf->state != UartReceiverStartTerm_State_Initialized){
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	791b      	ldrb	r3, [r3, #4]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b02      	cmp	r3, #2
 800e996:	d001      	beq.n	800e99c <UartReceiverStartTerm_registerReader+0x4c>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800e998:	2302      	movs	r3, #2
 800e99a:	e059      	b.n	800ea50 <UartReceiverStartTerm_registerReader+0x100>
	}

	uint16_t i;
	for (i=0; i<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; i++){
 800e99c:	2300      	movs	r3, #0
 800e99e:	82fb      	strh	r3, [r7, #22]
 800e9a0:	e04d      	b.n	800ea3e <UartReceiverStartTerm_registerReader+0xee>
		if (pSelf->readerRegistered[i] == false){
 800e9a2:	8afb      	ldrh	r3, [r7, #22]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	441a      	add	r2, r3
 800e9a8:	f241 0378 	movw	r3, #4216	; 0x1078
 800e9ac:	4413      	add	r3, r2
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f083 0301 	eor.w	r3, r3, #1
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d03d      	beq.n	800ea38 <UartReceiverStartTerm_registerReader+0xe8>
			pSelf->startSignVal[i]						= startSign;
 800e9bc:	8afb      	ldrh	r3, [r7, #22]
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	441a      	add	r2, r3
 800e9c2:	f241 0394 	movw	r3, #4244	; 0x1094
 800e9c6:	4413      	add	r3, r2
 800e9c8:	79fa      	ldrb	r2, [r7, #7]
 800e9ca:	701a      	strb	r2, [r3, #0]
			pSelf->terminationSignVal[i]				= terminationSign;
 800e9cc:	8afb      	ldrh	r3, [r7, #22]
 800e9ce:	68fa      	ldr	r2, [r7, #12]
 800e9d0:	441a      	add	r2, r3
 800e9d2:	f241 0397 	movw	r3, #4247	; 0x1097
 800e9d6:	4413      	add	r3, r2
 800e9d8:	79ba      	ldrb	r2, [r7, #6]
 800e9da:	701a      	strb	r2, [r3, #0]
			pSelf->receivedStartSignsNumber[i]			= 0;
 800e9dc:	8afb      	ldrh	r3, [r7, #22]
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	f241 039a 	movw	r3, #4250	; 0x109a
 800e9e6:	4413      	add	r3, r2
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	701a      	strb	r2, [r3, #0]
			pSelf->receivedTerminationSignsNumber[i]	= 0;
 800e9ec:	8afb      	ldrh	r3, [r7, #22]
 800e9ee:	68fa      	ldr	r2, [r7, #12]
 800e9f0:	441a      	add	r2, r3
 800e9f2:	f241 039d 	movw	r3, #4253	; 0x109d
 800e9f6:	4413      	add	r3, r2
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	701a      	strb	r2, [r3, #0]
			if (FIFOMultiread_registerReader(&pSelf->rxFifo, &pSelf->startTerminationSignFIFOReaders[i]) != FIFOMultiread_Status_OK){
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f103 0008 	add.w	r0, r3, #8
 800ea02:	8afb      	ldrh	r3, [r7, #22]
 800ea04:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	68fa      	ldr	r2, [r7, #12]
 800ea0c:	4413      	add	r3, r2
 800ea0e:	3304      	adds	r3, #4
 800ea10:	4619      	mov	r1, r3
 800ea12:	f7fd fcd5 	bl	800c3c0 <FIFOMultiread_registerReader>
 800ea16:	4603      	mov	r3, r0
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d001      	beq.n	800ea20 <UartReceiverStartTerm_registerReader+0xd0>
				return UartReceiverStartTerm_Status_FIFOError;
 800ea1c:	2306      	movs	r3, #6
 800ea1e:	e017      	b.n	800ea50 <UartReceiverStartTerm_registerReader+0x100>
			}
			pSelf->readerRegistered[i]					= true;
 800ea20:	8afb      	ldrh	r3, [r7, #22]
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	441a      	add	r2, r3
 800ea26:	f241 0378 	movw	r3, #4216	; 0x1078
 800ea2a:	4413      	add	r3, r2
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	701a      	strb	r2, [r3, #0]
			*pRetReaderIterator = i;
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	8afa      	ldrh	r2, [r7, #22]
 800ea34:	801a      	strh	r2, [r3, #0]
			break;
 800ea36:	e005      	b.n	800ea44 <UartReceiverStartTerm_registerReader+0xf4>
	for (i=0; i<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; i++){
 800ea38:	8afb      	ldrh	r3, [r7, #22]
 800ea3a:	3301      	adds	r3, #1
 800ea3c:	82fb      	strh	r3, [r7, #22]
 800ea3e:	8afb      	ldrh	r3, [r7, #22]
 800ea40:	2b02      	cmp	r3, #2
 800ea42:	d9ae      	bls.n	800e9a2 <UartReceiverStartTerm_registerReader+0x52>
		}
	}

	if (i == UART_RECEIVER_START_TERM_MAX_READERS_NUMBER){
 800ea44:	8afb      	ldrh	r3, [r7, #22]
 800ea46:	2b03      	cmp	r3, #3
 800ea48:	d101      	bne.n	800ea4e <UartReceiverStartTerm_registerReader+0xfe>
		return UartReceiverStartTerm_Status_TooManyReadersError;
 800ea4a:	2304      	movs	r3, #4
 800ea4c:	e000      	b.n	800ea50 <UartReceiverStartTerm_registerReader+0x100>
	}

	return UartReceiverStartTerm_Status_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <UartReceiverStartTerm_unregisterReader>:

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_unregisterReader(volatile UartReceiverStartTerm_TypeDef* pSelf, UartReceiverStartTerm_ReaderIterator_TypeDef readerIt){
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	807b      	strh	r3, [r7, #2]

	if (pSelf == NULL){
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d101      	bne.n	800ea6e <UartReceiverStartTerm_unregisterReader+0x16>
		return UartReceiverStartTerm_Status_NullPointerError;
 800ea6a:	2303      	movs	r3, #3
 800ea6c:	e05e      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}

	if (pSelf->state == UartReceiverStartTerm_State_UnInitialized || pSelf->state == UartReceiverStartTerm_State_DuringInit){
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	791b      	ldrb	r3, [r3, #4]
 800ea72:	b2db      	uxtb	r3, r3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <UartReceiverStartTerm_unregisterReader+0x2a>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	791b      	ldrb	r3, [r3, #4]
 800ea7c:	b2db      	uxtb	r3, r3
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d101      	bne.n	800ea86 <UartReceiverStartTerm_unregisterReader+0x2e>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800ea82:	2302      	movs	r3, #2
 800ea84:	e052      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}

	if (pSelf->state != UartReceiverStartTerm_State_Initialized){
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	791b      	ldrb	r3, [r3, #4]
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d001      	beq.n	800ea94 <UartReceiverStartTerm_unregisterReader+0x3c>
		return UartReceiverStartTerm_Status_Error;
 800ea90:	230c      	movs	r3, #12
 800ea92:	e04b      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}

	if (readerIt >= UART_RECEIVER_START_TERM_MAX_READERS_NUMBER){
 800ea94:	887b      	ldrh	r3, [r7, #2]
 800ea96:	2b02      	cmp	r3, #2
 800ea98:	d901      	bls.n	800ea9e <UartReceiverStartTerm_unregisterReader+0x46>
		return UartReceiverStartTerm_Status_InvalidArgumentsError;
 800ea9a:	2309      	movs	r3, #9
 800ea9c:	e046      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}

	if (pSelf->readerRegistered[readerIt] == false){
 800ea9e:	887b      	ldrh	r3, [r7, #2]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	441a      	add	r2, r3
 800eaa4:	f241 0378 	movw	r3, #4216	; 0x1078
 800eaa8:	4413      	add	r3, r2
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	f083 0301 	eor.w	r3, r3, #1
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d001      	beq.n	800eabc <UartReceiverStartTerm_unregisterReader+0x64>
		return UartReceiverStartTerm_Status_NotRegisteredReaderError;
 800eab8:	2305      	movs	r3, #5
 800eaba:	e037      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}

	pSelf->startSignVal[readerIt]					= 0;
 800eabc:	887b      	ldrh	r3, [r7, #2]
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	441a      	add	r2, r3
 800eac2:	f241 0394 	movw	r3, #4244	; 0x1094
 800eac6:	4413      	add	r3, r2
 800eac8:	2200      	movs	r2, #0
 800eaca:	701a      	strb	r2, [r3, #0]
	pSelf->terminationSignVal[readerIt]				= 0;
 800eacc:	887b      	ldrh	r3, [r7, #2]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	441a      	add	r2, r3
 800ead2:	f241 0397 	movw	r3, #4247	; 0x1097
 800ead6:	4413      	add	r3, r2
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
	pSelf->receivedStartSignsNumber[readerIt]		= 0;
 800eadc:	887b      	ldrh	r3, [r7, #2]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	441a      	add	r2, r3
 800eae2:	f241 039a 	movw	r3, #4250	; 0x109a
 800eae6:	4413      	add	r3, r2
 800eae8:	2200      	movs	r2, #0
 800eaea:	701a      	strb	r2, [r3, #0]
	pSelf->receivedTerminationSignsNumber[readerIt]	= 0;
 800eaec:	887b      	ldrh	r3, [r7, #2]
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	441a      	add	r2, r3
 800eaf2:	f241 039d 	movw	r3, #4253	; 0x109d
 800eaf6:	4413      	add	r3, r2
 800eaf8:	2200      	movs	r2, #0
 800eafa:	701a      	strb	r2, [r3, #0]
	if (FIFOMultiread_unregisterReader(&pSelf->startTerminationSignFIFOReaders[readerIt]) != FIFOMultiread_Status_OK){
 800eafc:	887b      	ldrh	r3, [r7, #2]
 800eafe:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800eb02:	00db      	lsls	r3, r3, #3
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	4413      	add	r3, r2
 800eb08:	3304      	adds	r3, #4
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7fd fcb6 	bl	800c47c <FIFOMultiread_unregisterReader>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <UartReceiverStartTerm_unregisterReader+0xc2>
		return UartReceiverStartTerm_Status_FIFOError;
 800eb16:	2306      	movs	r3, #6
 800eb18:	e008      	b.n	800eb2c <UartReceiverStartTerm_unregisterReader+0xd4>
	}
	pSelf->readerRegistered[readerIt]				= false;
 800eb1a:	887b      	ldrh	r3, [r7, #2]
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	441a      	add	r2, r3
 800eb20:	f241 0378 	movw	r3, #4216	; 0x1078
 800eb24:	4413      	add	r3, r2
 800eb26:	2200      	movs	r2, #0
 800eb28:	701a      	strb	r2, [r3, #0]

	return UartReceiverStartTerm_Status_OK;
 800eb2a:	2300      	movs	r3, #0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <UartReceiverStartTerm_start>:

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_start(volatile UartReceiverStartTerm_TypeDef* pSelf){
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d101      	bne.n	800eb46 <UartReceiverStartTerm_start+0x12>
		return UartReceiverStartTerm_Status_NullPointerError;
 800eb42:	2303      	movs	r3, #3
 800eb44:	e028      	b.n	800eb98 <UartReceiverStartTerm_start+0x64>
	}

	if (pSelf->state == UartReceiverStartTerm_State_UnInitialized || pSelf->state == UartReceiverStartTerm_State_DuringInit){
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	791b      	ldrb	r3, [r3, #4]
 800eb4a:	b2db      	uxtb	r3, r3
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d004      	beq.n	800eb5a <UartReceiverStartTerm_start+0x26>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	791b      	ldrb	r3, [r3, #4]
 800eb54:	b2db      	uxtb	r3, r3
 800eb56:	2b01      	cmp	r3, #1
 800eb58:	d101      	bne.n	800eb5e <UartReceiverStartTerm_start+0x2a>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800eb5a:	2302      	movs	r3, #2
 800eb5c:	e01c      	b.n	800eb98 <UartReceiverStartTerm_start+0x64>
	}

	if (pSelf->state != UartReceiverStartTerm_State_Initialized){
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	791b      	ldrb	r3, [r3, #4]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d001      	beq.n	800eb6c <UartReceiverStartTerm_start+0x38>
		return UartReceiverStartTerm_Status_ReceivedAlreadyStartedError;
 800eb68:	230a      	movs	r3, #10
 800eb6a:	e015      	b.n	800eb98 <UartReceiverStartTerm_start+0x64>
	}

	UartDriver_State_TypeDef uartDriverState;
	if (UartDriver_getState(pSelf->pUartDriver, &uartDriverState) != UartDriver_Status_OK){
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	f107 020f 	add.w	r2, r7, #15
 800eb74:	4611      	mov	r1, r2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7ff f9e1 	bl	800df3e <UartDriver_getState>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <UartReceiverStartTerm_start+0x52>
		return UartReceiverStartTerm_Status_UartDriverError;
 800eb82:	2307      	movs	r3, #7
 800eb84:	e008      	b.n	800eb98 <UartReceiverStartTerm_start+0x64>
	}

	if (uartDriverState != UartDriver_State_Receiving){
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
 800eb88:	2b03      	cmp	r3, #3
 800eb8a:	d001      	beq.n	800eb90 <UartReceiverStartTerm_start+0x5c>
		return UartReceiverStartTerm_Status_UartDriverNotStartedError;
 800eb8c:	2308      	movs	r3, #8
 800eb8e:	e003      	b.n	800eb98 <UartReceiverStartTerm_start+0x64>
	}

	pSelf->state	= UartReceiverStartTerm_State_Receiving;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2203      	movs	r2, #3
 800eb94:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartTerm_Status_OK;
 800eb96:	2300      	movs	r3, #0
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	3710      	adds	r7, #16
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	bd80      	pop	{r7, pc}

0800eba0 <UartReceiverStartTerm_stop>:

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_stop(volatile UartReceiverStartTerm_TypeDef* pSelf){
 800eba0:	b480      	push	{r7}
 800eba2:	b083      	sub	sp, #12
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d101      	bne.n	800ebb2 <UartReceiverStartTerm_stop+0x12>
		return UartReceiverStartTerm_Status_NullPointerError;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	e016      	b.n	800ebe0 <UartReceiverStartTerm_stop+0x40>
	}

	if (pSelf->state == UartReceiverStartTerm_State_UnInitialized || pSelf->state == UartReceiverStartTerm_State_DuringInit){
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	791b      	ldrb	r3, [r3, #4]
 800ebb6:	b2db      	uxtb	r3, r3
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d004      	beq.n	800ebc6 <UartReceiverStartTerm_stop+0x26>
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	791b      	ldrb	r3, [r3, #4]
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <UartReceiverStartTerm_stop+0x2a>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	e00a      	b.n	800ebe0 <UartReceiverStartTerm_stop+0x40>
	}

	if (pSelf->state != UartReceiverStartTerm_State_Receiving){
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	791b      	ldrb	r3, [r3, #4]
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b03      	cmp	r3, #3
 800ebd2:	d001      	beq.n	800ebd8 <UartReceiverStartTerm_stop+0x38>
		return UartReceiverStartTerm_Status_ReceiverNotReceivingError;
 800ebd4:	230b      	movs	r3, #11
 800ebd6:	e003      	b.n	800ebe0 <UartReceiverStartTerm_stop+0x40>
	}

	pSelf->state	= UartReceiverStartTerm_State_Initialized;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2202      	movs	r2, #2
 800ebdc:	711a      	strb	r2, [r3, #4]

	return UartReceiverStartTerm_Status_OK;
 800ebde:	2300      	movs	r3, #0
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <UartReceiverStartTerm_pullLastSentence>:

UartReceiverStartTerm_Status_TypeDef UartReceiverStartTerm_pullLastSentence(volatile UartReceiverStartTerm_TypeDef* pSelf, UartReceiverStartTerm_ReaderIterator_TypeDef readerIt, uint8_t* pRetSentence, uint16_t* pRetLength, uint32_t* pRetTimestamp){
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b088      	sub	sp, #32
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	607a      	str	r2, [r7, #4]
 800ebf6:	603b      	str	r3, [r7, #0]
 800ebf8:	460b      	mov	r3, r1
 800ebfa:	817b      	strh	r3, [r7, #10]

	volatile UartReceiverStartTerm_FIFOElem_TypeDef	elemBuffer;
	volatile FIFOMultiread_Status_TypeDef			fifoStatus;

	if (pSelf == NULL || pRetSentence == NULL || pRetLength == NULL){
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d005      	beq.n	800ec0e <UartReceiverStartTerm_pullLastSentence+0x22>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d002      	beq.n	800ec0e <UartReceiverStartTerm_pullLastSentence+0x22>
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d101      	bne.n	800ec12 <UartReceiverStartTerm_pullLastSentence+0x26>
		return UartReceiverStartTerm_Status_NullPointerError;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	e13f      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
	}

	if (pSelf->state == UartReceiverStartTerm_State_UnInitialized || pSelf->state == UartReceiverStartTerm_State_DuringInit){
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	791b      	ldrb	r3, [r3, #4]
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d004      	beq.n	800ec26 <UartReceiverStartTerm_pullLastSentence+0x3a>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	791b      	ldrb	r3, [r3, #4]
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b01      	cmp	r3, #1
 800ec24:	d101      	bne.n	800ec2a <UartReceiverStartTerm_pullLastSentence+0x3e>
		return UartReceiverStartTerm_Status_UnInitializedErrror;
 800ec26:	2302      	movs	r3, #2
 800ec28:	e133      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
	}

	if (readerIt >= UART_RECEIVER_START_TERM_MAX_READERS_NUMBER){
 800ec2a:	897b      	ldrh	r3, [r7, #10]
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d901      	bls.n	800ec34 <UartReceiverStartTerm_pullLastSentence+0x48>
		return UartReceiverStartTerm_Status_InvalidArgumentsError;
 800ec30:	2309      	movs	r3, #9
 800ec32:	e12e      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
	}

	if (pSelf->readerRegistered[readerIt] == false){
 800ec34:	897b      	ldrh	r3, [r7, #10]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	441a      	add	r2, r3
 800ec3a:	f241 0378 	movw	r3, #4216	; 0x1078
 800ec3e:	4413      	add	r3, r2
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	f083 0301 	eor.w	r3, r3, #1
 800ec48:	b2db      	uxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d001      	beq.n	800ec52 <UartReceiverStartTerm_pullLastSentence+0x66>
		return UartReceiverStartTerm_Status_NotRegisteredReaderError;
 800ec4e:	2305      	movs	r3, #5
 800ec50:	e11f      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>

	//< ----- removing chars from the beginning until it is not a start signs ----- >//

	while (true){

		fifoStatus = FIFOMultiread_lastElement(&pSelf->startTerminationSignFIFOReaders[readerIt], &elemBuffer);
 800ec52:	897b      	ldrh	r3, [r7, #10]
 800ec54:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	3304      	adds	r3, #4
 800ec60:	f107 0218 	add.w	r2, r7, #24
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fd fdd6 	bl	800c818 <FIFOMultiread_lastElement>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	75fb      	strb	r3, [r7, #23]

		if (fifoStatus == FIFOMultiread_Status_Empty){
 800ec70:	7dfb      	ldrb	r3, [r7, #23]
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d043      	beq.n	800ed00 <UartReceiverStartTerm_pullLastSentence+0x114>
			break;
		} else if (fifoStatus != FIFOMultiread_Status_OK ){
 800ec78:	7dfb      	ldrb	r3, [r7, #23]
 800ec7a:	b2db      	uxtb	r3, r3
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d001      	beq.n	800ec84 <UartReceiverStartTerm_pullLastSentence+0x98>
			return UartReceiverStartTerm_Status_FIFOError;
 800ec80:	2306      	movs	r3, #6
 800ec82:	e106      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
		}

		if (elemBuffer.dataByte == pSelf->startSignVal[readerIt]){ //< it's start start sign. Leave it.
 800ec84:	7e3b      	ldrb	r3, [r7, #24]
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	897b      	ldrh	r3, [r7, #10]
 800ec8a:	68f9      	ldr	r1, [r7, #12]
 800ec8c:	4419      	add	r1, r3
 800ec8e:	f241 0394 	movw	r3, #4244	; 0x1094
 800ec92:	440b      	add	r3, r1
 800ec94:	781b      	ldrb	r3, [r3, #0]
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d033      	beq.n	800ed04 <UartReceiverStartTerm_pullLastSentence+0x118>
			break;
		} else {
			if (elemBuffer.dataByte == pSelf->terminationSignVal[readerIt]){ //< Found termination without start sign at first. Remove it.
 800ec9c:	7e3b      	ldrb	r3, [r7, #24]
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	897b      	ldrh	r3, [r7, #10]
 800eca2:	68f9      	ldr	r1, [r7, #12]
 800eca4:	4419      	add	r1, r3
 800eca6:	f241 0397 	movw	r3, #4247	; 0x1097
 800ecaa:	440b      	add	r3, r1
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	b2db      	uxtb	r3, r3
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d110      	bne.n	800ecd6 <UartReceiverStartTerm_pullLastSentence+0xea>
				pSelf->receivedTerminationSignsNumber[readerIt]--;
 800ecb4:	897a      	ldrh	r2, [r7, #10]
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	1899      	adds	r1, r3, r2
 800ecba:	f241 039d 	movw	r3, #4253	; 0x109d
 800ecbe:	440b      	add	r3, r1
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	b2db      	uxtb	r3, r3
 800ecc4:	3b01      	subs	r3, #1
 800ecc6:	b2d9      	uxtb	r1, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	441a      	add	r2, r3
 800eccc:	f241 039d 	movw	r3, #4253	; 0x109d
 800ecd0:	4413      	add	r3, r2
 800ecd2:	460a      	mov	r2, r1
 800ecd4:	701a      	strb	r2, [r3, #0]
			}
			fifoStatus = FIFOMultiread_dequeue(&pSelf->startTerminationSignFIFOReaders[readerIt], &elemBuffer);
 800ecd6:	897b      	ldrh	r3, [r7, #10]
 800ecd8:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	4413      	add	r3, r2
 800ece2:	3304      	adds	r3, #4
 800ece4:	f107 0218 	add.w	r2, r7, #24
 800ece8:	4611      	mov	r1, r2
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fd fd12 	bl	800c714 <FIFOMultiread_dequeue>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	75fb      	strb	r3, [r7, #23]

			if (fifoStatus != FIFOMultiread_Status_OK){
 800ecf4:	7dfb      	ldrb	r3, [r7, #23]
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0aa      	beq.n	800ec52 <UartReceiverStartTerm_pullLastSentence+0x66>
				return UartReceiverStartTerm_Status_FIFOError;
 800ecfc:	2306      	movs	r3, #6
 800ecfe:	e0c8      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
			break;
 800ed00:	bf00      	nop
 800ed02:	e000      	b.n	800ed06 <UartReceiverStartTerm_pullLastSentence+0x11a>
			break;
 800ed04:	bf00      	nop
		}
	}

	//< ----- handling sentences with start and termination sign ----- >//

	if (pSelf->receivedStartSignsNumber[readerIt] > 0 && pSelf->receivedTerminationSignsNumber[readerIt] > 0){
 800ed06:	897b      	ldrh	r3, [r7, #10]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	441a      	add	r2, r3
 800ed0c:	f241 039a 	movw	r3, #4250	; 0x109a
 800ed10:	4413      	add	r3, r2
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f000 80ba 	beq.w	800ee90 <UartReceiverStartTerm_pullLastSentence+0x2a4>
 800ed1c:	897b      	ldrh	r3, [r7, #10]
 800ed1e:	68fa      	ldr	r2, [r7, #12]
 800ed20:	441a      	add	r2, r3
 800ed22:	f241 039d 	movw	r3, #4253	; 0x109d
 800ed26:	4413      	add	r3, r2
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f000 80af 	beq.w	800ee90 <UartReceiverStartTerm_pullLastSentence+0x2a4>

		*pRetLength = 0;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	2200      	movs	r2, #0
 800ed36:	801a      	strh	r2, [r3, #0]

		// searching for start sign
		while (true){

			fifoStatus = FIFOMultiread_dequeue(&pSelf->startTerminationSignFIFOReaders[readerIt], &elemBuffer);
 800ed38:	897b      	ldrh	r3, [r7, #10]
 800ed3a:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800ed3e:	00db      	lsls	r3, r3, #3
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	4413      	add	r3, r2
 800ed44:	3304      	adds	r3, #4
 800ed46:	f107 0218 	add.w	r2, r7, #24
 800ed4a:	4611      	mov	r1, r2
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f7fd fce1 	bl	800c714 <FIFOMultiread_dequeue>
 800ed52:	4603      	mov	r3, r0
 800ed54:	75fb      	strb	r3, [r7, #23]

			if (fifoStatus != FIFOMultiread_Status_OK){ //< queue should not be empty. Minimum one start sign and minimum one termination sign are threre
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	b2db      	uxtb	r3, r3
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d001      	beq.n	800ed62 <UartReceiverStartTerm_pullLastSentence+0x176>
				return UartReceiverStartTerm_Status_FIFOError;
 800ed5e:	2306      	movs	r3, #6
 800ed60:	e097      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
			}

			if (elemBuffer.dataByte == pSelf->startSignVal[readerIt]){ //< found start sign
 800ed62:	7e3b      	ldrb	r3, [r7, #24]
 800ed64:	b2da      	uxtb	r2, r3
 800ed66:	897b      	ldrh	r3, [r7, #10]
 800ed68:	68f9      	ldr	r1, [r7, #12]
 800ed6a:	4419      	add	r1, r3
 800ed6c:	f241 0394 	movw	r3, #4244	; 0x1094
 800ed70:	440b      	add	r3, r1
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d1de      	bne.n	800ed38 <UartReceiverStartTerm_pullLastSentence+0x14c>
				pRetSentence[(*pRetLength)++]	= elemBuffer.dataByte;
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	881b      	ldrh	r3, [r3, #0]
 800ed7e:	1c5a      	adds	r2, r3, #1
 800ed80:	b291      	uxth	r1, r2
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	8011      	strh	r1, [r2, #0]
 800ed86:	461a      	mov	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	7e3a      	ldrb	r2, [r7, #24]
 800ed8e:	b2d2      	uxtb	r2, r2
 800ed90:	701a      	strb	r2, [r3, #0]
				if (pRetTimestamp != NULL){
 800ed92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <UartReceiverStartTerm_pullLastSentence+0x1b2>
					*pRetTimestamp				= elemBuffer.msTime;
 800ed98:	69fa      	ldr	r2, [r7, #28]
 800ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9c:	601a      	str	r2, [r3, #0]
				}
				pSelf->receivedStartSignsNumber[readerIt]--;
 800ed9e:	897a      	ldrh	r2, [r7, #10]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	1899      	adds	r1, r3, r2
 800eda4:	f241 039a 	movw	r3, #4250	; 0x109a
 800eda8:	440b      	add	r3, r1
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	3b01      	subs	r3, #1
 800edb0:	b2d9      	uxtb	r1, r3
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	441a      	add	r2, r3
 800edb6:	f241 039a 	movw	r3, #4250	; 0x109a
 800edba:	4413      	add	r3, r2
 800edbc:	460a      	mov	r2, r1
 800edbe:	701a      	strb	r2, [r3, #0]
			}
		}

		// searching for termination sign
		while (true){
			fifoStatus = FIFOMultiread_dequeue(&pSelf->startTerminationSignFIFOReaders[readerIt], &elemBuffer);
 800edc0:	897b      	ldrh	r3, [r7, #10]
 800edc2:	f203 230f 	addw	r3, r3, #527	; 0x20f
 800edc6:	00db      	lsls	r3, r3, #3
 800edc8:	68fa      	ldr	r2, [r7, #12]
 800edca:	4413      	add	r3, r2
 800edcc:	3304      	adds	r3, #4
 800edce:	f107 0218 	add.w	r2, r7, #24
 800edd2:	4611      	mov	r1, r2
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fd fc9d 	bl	800c714 <FIFOMultiread_dequeue>
 800edda:	4603      	mov	r3, r0
 800eddc:	75fb      	strb	r3, [r7, #23]

			if (fifoStatus != FIFOMultiread_Status_OK){ //< queue should not be empty. Minimum one start sign and minimum one termination sign are threre
 800edde:	7dfb      	ldrb	r3, [r7, #23]
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d001      	beq.n	800edea <UartReceiverStartTerm_pullLastSentence+0x1fe>
				return UartReceiverStartTerm_Status_FIFOError;
 800ede6:	2306      	movs	r3, #6
 800ede8:	e053      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
			}

			if (elemBuffer.dataByte == pSelf->startSignVal[readerIt]){ //< found another start sign. Remove everything what was before
 800edea:	7e3b      	ldrb	r3, [r7, #24]
 800edec:	b2da      	uxtb	r2, r3
 800edee:	897b      	ldrh	r3, [r7, #10]
 800edf0:	68f9      	ldr	r1, [r7, #12]
 800edf2:	4419      	add	r1, r3
 800edf4:	f241 0394 	movw	r3, #4244	; 0x1094
 800edf8:	440b      	add	r3, r1
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d119      	bne.n	800ee36 <UartReceiverStartTerm_pullLastSentence+0x24a>
				*pRetLength		= 0;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2200      	movs	r2, #0
 800ee06:	801a      	strh	r2, [r3, #0]
				if (pRetTimestamp != NULL){
 800ee08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <UartReceiverStartTerm_pullLastSentence+0x228>
					*pRetTimestamp	= elemBuffer.msTime;
 800ee0e:	69fa      	ldr	r2, [r7, #28]
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	601a      	str	r2, [r3, #0]
				}
				pSelf->receivedStartSignsNumber[readerIt]--;
 800ee14:	897a      	ldrh	r2, [r7, #10]
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	1899      	adds	r1, r3, r2
 800ee1a:	f241 039a 	movw	r3, #4250	; 0x109a
 800ee1e:	440b      	add	r3, r1
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	3b01      	subs	r3, #1
 800ee26:	b2d9      	uxtb	r1, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	441a      	add	r2, r3
 800ee2c:	f241 039a 	movw	r3, #4250	; 0x109a
 800ee30:	4413      	add	r3, r2
 800ee32:	460a      	mov	r2, r1
 800ee34:	701a      	strb	r2, [r3, #0]
			}

			pRetSentence[(*pRetLength)++] = elemBuffer.dataByte;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	1c5a      	adds	r2, r3, #1
 800ee3c:	b291      	uxth	r1, r2
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	8011      	strh	r1, [r2, #0]
 800ee42:	461a      	mov	r2, r3
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	4413      	add	r3, r2
 800ee48:	7e3a      	ldrb	r2, [r7, #24]
 800ee4a:	b2d2      	uxtb	r2, r2
 800ee4c:	701a      	strb	r2, [r3, #0]

			if (elemBuffer.dataByte == pSelf->terminationSignVal[readerIt]){ //< found termination sign
 800ee4e:	7e3b      	ldrb	r3, [r7, #24]
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	897b      	ldrh	r3, [r7, #10]
 800ee54:	68f9      	ldr	r1, [r7, #12]
 800ee56:	4419      	add	r1, r3
 800ee58:	f241 0397 	movw	r3, #4247	; 0x1097
 800ee5c:	440b      	add	r3, r1
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d1ac      	bne.n	800edc0 <UartReceiverStartTerm_pullLastSentence+0x1d4>
				pSelf->receivedTerminationSignsNumber[readerIt]--;
 800ee66:	897a      	ldrh	r2, [r7, #10]
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	1899      	adds	r1, r3, r2
 800ee6c:	f241 039d 	movw	r3, #4253	; 0x109d
 800ee70:	440b      	add	r3, r1
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	3b01      	subs	r3, #1
 800ee78:	b2d9      	uxtb	r1, r3
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	441a      	add	r2, r3
 800ee7e:	f241 039d 	movw	r3, #4253	; 0x109d
 800ee82:	4413      	add	r3, r2
 800ee84:	460a      	mov	r2, r1
 800ee86:	701a      	strb	r2, [r3, #0]
				break;
 800ee88:	bf00      	nop
	if (pSelf->receivedStartSignsNumber[readerIt] > 0 && pSelf->receivedTerminationSignsNumber[readerIt] > 0){
 800ee8a:	bf00      	nop
		}
	} else {
		return UartReceiverStartTerm_Status_Empty;
	}

	return UartReceiverStartTerm_Status_OK;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	e000      	b.n	800ee92 <UartReceiverStartTerm_pullLastSentence+0x2a6>
		return UartReceiverStartTerm_Status_Empty;
 800ee90:	2301      	movs	r3, #1
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3720      	adds	r7, #32
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}
	...

0800ee9c <UartReceiverStartTerm_receivedByteCallback>:

//< ----- IRQ Callback ----- >//

#define	UART_RECEIVER_START_TERM_FULL_ASSER_IN_CALLBACK 0

static void UartReceiverStartTerm_receivedByteCallback(uint8_t dataByte, uint32_t timestamp, void* pArgs){
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b088      	sub	sp, #32
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	4603      	mov	r3, r0
 800eea4:	60b9      	str	r1, [r7, #8]
 800eea6:	607a      	str	r2, [r7, #4]
 800eea8:	73fb      	strb	r3, [r7, #15]

	UartReceiverStartTerm_FIFOElem_TypeDef byteWithTimestamp;
	UartReceiverStartTerm_TypeDef* pSelf = (UartReceiverStartTerm_TypeDef*) pArgs;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	61bb      	str	r3, [r7, #24]
		return;
	}

#endif

	if (pSelf->state != UartReceiverStartTerm_State_Receiving){
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	791b      	ldrb	r3, [r3, #4]
 800eeb2:	b2db      	uxtb	r3, r3
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d15d      	bne.n	800ef74 <UartReceiverStartTerm_receivedByteCallback+0xd8>
		return;
	}

	byteWithTimestamp.dataByte	= dataByte;
 800eeb8:	7bfb      	ldrb	r3, [r7, #15]
 800eeba:	743b      	strb	r3, [r7, #16]
	byteWithTimestamp.msTime	= timestamp;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	617b      	str	r3, [r7, #20]

	if (FIFOMultiread_enqueue(&pSelf->rxFifo, (void*) &byteWithTimestamp) != FIFOMultiread_Status_OK){
 800eec0:	69bb      	ldr	r3, [r7, #24]
 800eec2:	3308      	adds	r3, #8
 800eec4:	f107 0210 	add.w	r2, r7, #16
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fd fb17 	bl	800c4fe <FIFOMultiread_enqueue>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d002      	beq.n	800eedc <UartReceiverStartTerm_receivedByteCallback+0x40>
		Warning_Handler("UartReceiverStartTerm_receivedByteCallback function. FIFOMultiread_enqueue returned error.");
 800eed6:	4829      	ldr	r0, [pc, #164]	; (800ef7c <UartReceiverStartTerm_receivedByteCallback+0xe0>)
 800eed8:	f7fa fdee 	bl	8009ab8 <Warning_Handler>
	}

	//< ----- Handling start and termination sign counters ----- >//
	for (uint8_t fooIt = 0; fooIt<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; fooIt++){
 800eedc:	2300      	movs	r3, #0
 800eede:	77fb      	strb	r3, [r7, #31]
 800eee0:	e044      	b.n	800ef6c <UartReceiverStartTerm_receivedByteCallback+0xd0>
		if (pSelf->readerRegistered[fooIt] == true){
 800eee2:	7ffb      	ldrb	r3, [r7, #31]
 800eee4:	69ba      	ldr	r2, [r7, #24]
 800eee6:	441a      	add	r2, r3
 800eee8:	f241 0378 	movw	r3, #4216	; 0x1078
 800eeec:	4413      	add	r3, r2
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d037      	beq.n	800ef66 <UartReceiverStartTerm_receivedByteCallback+0xca>
			if (dataByte == pSelf->startSignVal[fooIt]){
 800eef6:	7ffb      	ldrb	r3, [r7, #31]
 800eef8:	69ba      	ldr	r2, [r7, #24]
 800eefa:	441a      	add	r2, r3
 800eefc:	f241 0394 	movw	r3, #4244	; 0x1094
 800ef00:	4413      	add	r3, r2
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	7bfa      	ldrb	r2, [r7, #15]
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	d110      	bne.n	800ef2e <UartReceiverStartTerm_receivedByteCallback+0x92>
				pSelf->receivedStartSignsNumber[fooIt]++;
 800ef0c:	7ffa      	ldrb	r2, [r7, #31]
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	1899      	adds	r1, r3, r2
 800ef12:	f241 039a 	movw	r3, #4250	; 0x109a
 800ef16:	440b      	add	r3, r1
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	b2d9      	uxtb	r1, r3
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	441a      	add	r2, r3
 800ef24:	f241 039a 	movw	r3, #4250	; 0x109a
 800ef28:	4413      	add	r3, r2
 800ef2a:	460a      	mov	r2, r1
 800ef2c:	701a      	strb	r2, [r3, #0]
			}
			if (dataByte == pSelf->terminationSignVal[fooIt]){
 800ef2e:	7ffb      	ldrb	r3, [r7, #31]
 800ef30:	69ba      	ldr	r2, [r7, #24]
 800ef32:	441a      	add	r2, r3
 800ef34:	f241 0397 	movw	r3, #4247	; 0x1097
 800ef38:	4413      	add	r3, r2
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	7bfa      	ldrb	r2, [r7, #15]
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d110      	bne.n	800ef66 <UartReceiverStartTerm_receivedByteCallback+0xca>
				pSelf->receivedTerminationSignsNumber[fooIt]++;
 800ef44:	7ffa      	ldrb	r2, [r7, #31]
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	1899      	adds	r1, r3, r2
 800ef4a:	f241 039d 	movw	r3, #4253	; 0x109d
 800ef4e:	440b      	add	r3, r1
 800ef50:	781b      	ldrb	r3, [r3, #0]
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	3301      	adds	r3, #1
 800ef56:	b2d9      	uxtb	r1, r3
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	441a      	add	r2, r3
 800ef5c:	f241 039d 	movw	r3, #4253	; 0x109d
 800ef60:	4413      	add	r3, r2
 800ef62:	460a      	mov	r2, r1
 800ef64:	701a      	strb	r2, [r3, #0]
	for (uint8_t fooIt = 0; fooIt<UART_RECEIVER_START_TERM_MAX_READERS_NUMBER; fooIt++){
 800ef66:	7ffb      	ldrb	r3, [r7, #31]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	77fb      	strb	r3, [r7, #31]
 800ef6c:	7ffb      	ldrb	r3, [r7, #31]
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d9b7      	bls.n	800eee2 <UartReceiverStartTerm_receivedByteCallback+0x46>
 800ef72:	e000      	b.n	800ef76 <UartReceiverStartTerm_receivedByteCallback+0xda>
		return;
 800ef74:	bf00      	nop
			}
		}
	}
}
 800ef76:	3720      	adds	r7, #32
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	08011300 	.word	0x08011300

0800ef80 <GPSDriver_init>:
		UartDriver_TypeDef* pUartDriverHandler,
		UartReceiverStartTerm_TypeDef* pUartNMEAReceiverHandler,
		UartReceiverStartLength_TypeDef* pUartUBXReceiverHandler,
		MSTimerDriver_TypeDef* pMSTimer,
		DODriver_TypeDef* pDOResetDriver,
		Config_GPSFrequency_TypeDef frequency) {
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	75fb      	strb	r3, [r7, #23]
	if (pSelf == NULL || pUartDriverHandler == NULL || pUartNMEAReceiverHandler == NULL || pUartUBXReceiverHandler == NULL || pMSTimer == NULL || pDOResetDriver == NULL){
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d00e      	beq.n	800efb6 <GPSDriver_init+0x36>
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00b      	beq.n	800efb6 <GPSDriver_init+0x36>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d008      	beq.n	800efb6 <GPSDriver_init+0x36>
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <GPSDriver_init+0x36>
 800efaa:	6a3b      	ldr	r3, [r7, #32]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d002      	beq.n	800efb6 <GPSDriver_init+0x36>
 800efb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d101      	bne.n	800efba <GPSDriver_init+0x3a>
		return GPSDriver_Status_NullPointerError;
 800efb6:	2313      	movs	r3, #19
 800efb8:	e074      	b.n	800f0a4 <GPSDriver_init+0x124>
	}

	pSelf->state						= GPSDriver_State_DuringInit;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2201      	movs	r2, #1
 800efbe:	701a      	strb	r2, [r3, #0]
	pSelf->pUartDriverHandler			= pUartDriverHandler;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	68ba      	ldr	r2, [r7, #8]
 800efc4:	605a      	str	r2, [r3, #4]
	pSelf->pUartNMEAReceiverHandler		= pUartNMEAReceiverHandler;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	687a      	ldr	r2, [r7, #4]
 800efca:	609a      	str	r2, [r3, #8]
	pSelf->pUartUBXReceiverHandler		= pUartUBXReceiverHandler;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	60da      	str	r2, [r3, #12]
	pSelf->pMSTimer						= pMSTimer;
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	6a3a      	ldr	r2, [r7, #32]
 800efd6:	611a      	str	r2, [r3, #16]
	pSelf->pDOResetDriver				= pDOResetDriver;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800efdc:	615a      	str	r2, [r3, #20]
	pSelf->uartNMEAReaderIterator		= 0;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2200      	movs	r2, #0
 800efe2:	831a      	strh	r2, [r3, #24]

	pSelf->gpggaPartialSegmentReceived	= false;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2200      	movs	r2, #0
 800efe8:	76da      	strb	r2, [r3, #27]
	pSelf->gpgsaPartialSegmentReceived	= false;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2200      	movs	r2, #0
 800efee:	771a      	strb	r2, [r3, #28]
	pSelf->gprmcPartialSegmentReceived	= false;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	2200      	movs	r2, #0
 800eff4:	775a      	strb	r2, [r3, #29]
	pSelf->gpggaPartialSegmentTimestamp	= 0;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	621a      	str	r2, [r3, #32]
	pSelf->gpgsaPartialSegmentTimestamp = 0;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2200      	movs	r2, #0
 800f000:	625a      	str	r2, [r3, #36]	; 0x24
	pSelf->gprmcPartialSegmentTimestamp	= 0;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	2200      	movs	r2, #0
 800f006:	629a      	str	r2, [r3, #40]	; 0x28
	memset((void*)&pSelf->partialGPSData, 0, sizeof(GPSData_TypeDef));
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	332c      	adds	r3, #44	; 0x2c
 800f00c:	2250      	movs	r2, #80	; 0x50
 800f00e:	2100      	movs	r1, #0
 800f010:	4618      	mov	r0, r3
 800f012:	f001 fc28 	bl	8010866 <memset>
	if (frequency == Config_GPSFrequency_OFF){
 800f016:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d104      	bne.n	800f028 <GPSDriver_init+0xa8>
		pSelf->state = GPSDriver_State_OFF;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2204      	movs	r2, #4
 800f022:	701a      	strb	r2, [r3, #0]
		return GPSDriver_Status_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	e03d      	b.n	800f0a4 <GPSDriver_init+0x124>
	}

	if (UartReceiverStartTerm_registerReader(
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6898      	ldr	r0, [r3, #8]
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	f103 0118 	add.w	r1, r3, #24
 800f032:	230a      	movs	r3, #10
 800f034:	2224      	movs	r2, #36	; 0x24
 800f036:	f7ff fc8b 	bl	800e950 <UartReceiverStartTerm_registerReader>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d001      	beq.n	800f044 <GPSDriver_init+0xc4>
			pSelf->pUartNMEAReceiverHandler,
			&pSelf->uartNMEAReaderIterator,
			GPS_NMEA_START_SIGN,
			GPS_NMEA_TERMINATION_SIGN) != UartReceiverStartTerm_Status_OK)
	{
		return GPSDriver_Status_UartReceiverStartTermError;
 800f040:	230e      	movs	r3, #14
 800f042:	e02f      	b.n	800f0a4 <GPSDriver_init+0x124>
	}
	pSelf->uartNMEAReaderIteratorSet	= true;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2201      	movs	r2, #1
 800f048:	769a      	strb	r2, [r3, #26]

	if (DODriver_SetLow(pSelf->pDOResetDriver) != DODriver_Status_OK){
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fd f83c 	bl	800c0cc <DODriver_SetLow>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <GPSDriver_init+0xde>
		ret = GPSDriver_Status_DOResetError;
 800f05a:	2311      	movs	r3, #17
 800f05c:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(GPS_DEVICE_RESET_TIME_MS);
 800f05e:	2064      	movs	r0, #100	; 0x64
 800f060:	f7f1 fb2c 	bl	80006bc <HAL_Delay>

	if (DODriver_SetHigh(pSelf->pDOResetDriver) != DODriver_Status_OK){
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	695b      	ldr	r3, [r3, #20]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7fd f80e 	bl	800c08a <DODriver_SetHigh>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <GPSDriver_init+0xf8>
		ret = GPSDriver_Status_DOResetError;
 800f074:	2311      	movs	r3, #17
 800f076:	75fb      	strb	r3, [r7, #23]
	}
	HAL_Delay(GPS_DEVICE_START_TIME_MS);
 800f078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f07c:	f7f1 fb1e 	bl	80006bc <HAL_Delay>

	if (ret == GPSDriver_Status_OK){
 800f080:	7dfb      	ldrb	r3, [r7, #23]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d107      	bne.n	800f096 <GPSDriver_init+0x116>
		ret = _GPSDriver_sendUbxCfgRateUTCCommand(pSelf, frequency);
 800f086:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f08a:	4619      	mov	r1, r3
 800f08c:	68f8      	ldr	r0, [r7, #12]
 800f08e:	f000 fbff 	bl	800f890 <_GPSDriver_sendUbxCfgRateUTCCommand>
 800f092:	4603      	mov	r3, r0
 800f094:	75fb      	strb	r3, [r7, #23]
	}

	if (ret == GPSDriver_Status_OK){
 800f096:	7dfb      	ldrb	r3, [r7, #23]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d102      	bne.n	800f0a2 <GPSDriver_init+0x122>
		pSelf->state = GPSDriver_State_Initialized;
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2202      	movs	r2, #2
 800f0a0:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 800f0a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <GPSDriver_startReceiver>:

GPSDriver_Status_TypeDef GPSDriver_startReceiver(volatile Ublox8MGPSDriver_TypeDef* pSelf) {
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d101      	bne.n	800f0be <GPSDriver_startReceiver+0x12>
		return GPSDriver_Status_NullPointerError;
 800f0ba:	2313      	movs	r3, #19
 800f0bc:	e039      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	if (pSelf->state == GPSDriver_State_OFF){
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	d101      	bne.n	800f0cc <GPSDriver_startReceiver+0x20>
		return GPSDriver_Status_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	e032      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	if (pSelf->state == GPSDriver_State_UnInitialized || pSelf->state == GPSDriver_State_DuringInit){
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d004      	beq.n	800f0e0 <GPSDriver_startReceiver+0x34>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d101      	bne.n	800f0e4 <GPSDriver_startReceiver+0x38>
		return GPSDriver_Status_UnInitializedError;
 800f0e0:	2304      	movs	r3, #4
 800f0e2:	e026      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	if (pSelf->state == GPSDriver_State_Running){
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	2b03      	cmp	r3, #3
 800f0ec:	d101      	bne.n	800f0f2 <GPSDriver_startReceiver+0x46>
		return GPSDriver_Status_RunningError;
 800f0ee:	2305      	movs	r3, #5
 800f0f0:	e01f      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	UartDriver_State_TypeDef uartDriverState;
	if (UartDriver_getState(pSelf->pUartDriverHandler, &uartDriverState) != UartDriver_Status_OK){
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	f107 020f 	add.w	r2, r7, #15
 800f0fa:	4611      	mov	r1, r2
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe ff1e 	bl	800df3e <UartDriver_getState>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <GPSDriver_startReceiver+0x60>
		return GPSDriver_Status_UartDriverError;
 800f108:	230c      	movs	r3, #12
 800f10a:	e012      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	if (uartDriverState != UartDriver_State_Receiving){
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
 800f10e:	2b03      	cmp	r3, #3
 800f110:	d001      	beq.n	800f116 <GPSDriver_startReceiver+0x6a>
		return GPSDriver_Status_UartDriverNotStatrtedError;
 800f112:	230d      	movs	r3, #13
 800f114:	e00d      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}

	if (UartReceiverStartTerm_start(pSelf->pUartNMEAReceiverHandler) != UartReceiverStartTerm_Status_OK){
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff fd0a 	bl	800eb34 <UartReceiverStartTerm_start>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <GPSDriver_startReceiver+0x7e>
		return GPSDriver_Status_UartReceiverStartTermError;
 800f126:	230e      	movs	r3, #14
 800f128:	e003      	b.n	800f132 <GPSDriver_startReceiver+0x86>
	}
	pSelf->state = GPSDriver_State_Running;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2203      	movs	r2, #3
 800f12e:	701a      	strb	r2, [r3, #0]

	return GPSDriver_Status_OK;
 800f130:	2300      	movs	r3, #0

}
 800f132:	4618      	mov	r0, r3
 800f134:	3710      	adds	r7, #16
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}

0800f13a <GPSDriver_stopReceiver>:

GPSDriver_Status_TypeDef GPSDriver_stopReceiver(volatile Ublox8MGPSDriver_TypeDef* pSelf) {
 800f13a:	b580      	push	{r7, lr}
 800f13c:	b082      	sub	sp, #8
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d101      	bne.n	800f14c <GPSDriver_stopReceiver+0x12>
		return GPSDriver_Status_NullPointerError;
 800f148:	2313      	movs	r3, #19
 800f14a:	e027      	b.n	800f19c <GPSDriver_stopReceiver+0x62>
	}

	if (pSelf->state == GPSDriver_State_OFF){
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	2b04      	cmp	r3, #4
 800f154:	d101      	bne.n	800f15a <GPSDriver_stopReceiver+0x20>
		return GPSDriver_Status_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	e020      	b.n	800f19c <GPSDriver_stopReceiver+0x62>
	}

	if (pSelf->state == GPSDriver_State_UnInitialized || pSelf->state == GPSDriver_State_DuringInit){
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b00      	cmp	r3, #0
 800f162:	d004      	beq.n	800f16e <GPSDriver_stopReceiver+0x34>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	2b01      	cmp	r3, #1
 800f16c:	d101      	bne.n	800f172 <GPSDriver_stopReceiver+0x38>
		return GPSDriver_Status_UnInitializedError;
 800f16e:	2304      	movs	r3, #4
 800f170:	e014      	b.n	800f19c <GPSDriver_stopReceiver+0x62>
	}

	if (pSelf->state == GPSDriver_State_Initialized){
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	781b      	ldrb	r3, [r3, #0]
 800f176:	b2db      	uxtb	r3, r3
 800f178:	2b02      	cmp	r3, #2
 800f17a:	d101      	bne.n	800f180 <GPSDriver_stopReceiver+0x46>
		return GPSDriver_Status_NotRunningError;
 800f17c:	2306      	movs	r3, #6
 800f17e:	e00d      	b.n	800f19c <GPSDriver_stopReceiver+0x62>
	}

	if (UartReceiverStartTerm_stop(pSelf->pUartNMEAReceiverHandler) != UartReceiverStartTerm_Status_OK){
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	4618      	mov	r0, r3
 800f186:	f7ff fd0b 	bl	800eba0 <UartReceiverStartTerm_stop>
 800f18a:	4603      	mov	r3, r0
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d001      	beq.n	800f194 <GPSDriver_stopReceiver+0x5a>
		return GPSDriver_Status_UartReceiverStartTermError;
 800f190:	230e      	movs	r3, #14
 800f192:	e003      	b.n	800f19c <GPSDriver_stopReceiver+0x62>
	}
	pSelf->state = GPSDriver_State_Initialized;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2202      	movs	r2, #2
 800f198:	701a      	strb	r2, [r3, #0]

	return GPSDriver_Status_OK;
 800f19a:	2300      	movs	r3, #0

}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3708      	adds	r7, #8
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <GPSDriver_pullLastFrame>:

GPSDriver_Status_TypeDef GPSDriver_pullLastFrame(volatile Ublox8MGPSDriver_TypeDef* pSelf, GPSData_TypeDef* pRetGPSData) {
 800f1a4:	b590      	push	{r4, r7, lr}
 800f1a6:	b09d      	sub	sp, #116	; 0x74
 800f1a8:	af02      	add	r7, sp, #8
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetGPSData == NULL){
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d002      	beq.n	800f1ba <GPSDriver_pullLastFrame+0x16>
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d101      	bne.n	800f1be <GPSDriver_pullLastFrame+0x1a>
		return GPSDriver_Status_NullPointerError;
 800f1ba:	2313      	movs	r3, #19
 800f1bc:	e15e      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
	}

	if (pSelf->state == GPSDriver_State_OFF){
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d101      	bne.n	800f1cc <GPSDriver_pullLastFrame+0x28>
		return GPSDriver_Status_Empty;
 800f1c8:	2303      	movs	r3, #3
 800f1ca:	e157      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
	}

	if (pSelf->state != GPSDriver_State_Running){
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	b2db      	uxtb	r3, r3
 800f1d2:	2b03      	cmp	r3, #3
 800f1d4:	d001      	beq.n	800f1da <GPSDriver_pullLastFrame+0x36>
		return GPSDriver_Status_NotRunningError;
 800f1d6:	2306      	movs	r3, #6
 800f1d8:	e150      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
	}

	GPSDriver_Status_TypeDef ret						= GPSDriver_Status_OK;;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	_GPSDriver_NMEASentenceString nmeaRxSentenceString;
	memset((void*)&nmeaRxSentenceString, 0, sizeof(_GPSDriver_NMEASentenceString));
 800f1e0:	f107 0308 	add.w	r3, r7, #8
 800f1e4:	225c      	movs	r2, #92	; 0x5c
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f001 fb3c 	bl	8010866 <memset>
	UartReceiverStartTerm_Status_TypeDef retUR			= UartReceiverStartTerm_Status_OK;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

	while (1) {

		retUR = UartReceiverStartTerm_pullLastSentence(pSelf->pUartNMEAReceiverHandler, pSelf->uartNMEAReaderIterator, nmeaRxSentenceString.sentenceString, &nmeaRxSentenceString.sentenceLength, &nmeaRxSentenceString.timestamp); //TODO dodac buffer size
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6898      	ldr	r0, [r3, #8]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	8b1b      	ldrh	r3, [r3, #24]
 800f1fc:	b299      	uxth	r1, r3
 800f1fe:	f107 0308 	add.w	r3, r7, #8
 800f202:	1d1c      	adds	r4, r3, #4
 800f204:	f107 0308 	add.w	r3, r7, #8
 800f208:	1d9a      	adds	r2, r3, #6
 800f20a:	f107 0308 	add.w	r3, r7, #8
 800f20e:	9300      	str	r3, [sp, #0]
 800f210:	4623      	mov	r3, r4
 800f212:	f7ff fceb 	bl	800ebec <UartReceiverStartTerm_pullLastSentence>
 800f216:	4603      	mov	r3, r0
 800f218:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		if (retUR == UartReceiverStartTerm_Status_Empty){
 800f21c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800f220:	2b01      	cmp	r3, #1
 800f222:	d101      	bne.n	800f228 <GPSDriver_pullLastFrame+0x84>
			return GPSDriver_Status_Empty;
 800f224:	2303      	movs	r3, #3
 800f226:	e129      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
		} else if (retUR != UartReceiverStartTerm_Status_OK){
 800f228:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <GPSDriver_pullLastFrame+0x90>
			return GPSDriver_Status_UartReceiverStartTermError;
 800f230:	230e      	movs	r3, #14
 800f232:	e123      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
		}

		if (nmeaRxSentenceString.sentenceLength > strlen(GPS_NMEA_GPGGA_PREFIX) &&
 800f234:	89bb      	ldrh	r3, [r7, #12]
 800f236:	2b06      	cmp	r3, #6
 800f238:	d92d      	bls.n	800f296 <GPSDriver_pullLastFrame+0xf2>
				stringEqual((uint8_t*)GPS_NMEA_GPGGA_PREFIX, nmeaRxSentenceString.sentenceString, strlen(GPS_NMEA_GPGGA_PREFIX)) == StringOperations_Status_OK) {
 800f23a:	f107 0308 	add.w	r3, r7, #8
 800f23e:	3306      	adds	r3, #6
 800f240:	2206      	movs	r2, #6
 800f242:	4619      	mov	r1, r3
 800f244:	488f      	ldr	r0, [pc, #572]	; (800f484 <GPSDriver_pullLastFrame+0x2e0>)
 800f246:	f7fe fb9f 	bl	800d988 <stringEqual>
 800f24a:	4603      	mov	r3, r0
		if (nmeaRxSentenceString.sentenceLength > strlen(GPS_NMEA_GPGGA_PREFIX) &&
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d122      	bne.n	800f296 <GPSDriver_pullLastFrame+0xf2>

			ret = _GPSDriver_handleGNGGASentence(pSelf, &nmeaRxSentenceString);
 800f250:	f107 0308 	add.w	r3, r7, #8
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 fec0 	bl	800ffdc <_GPSDriver_handleGNGGASentence>
 800f25c:	4603      	mov	r3, r0
 800f25e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (ret == GPSDriver_Status_OK){
 800f262:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <GPSDriver_pullLastFrame+0xd4>
				pSelf->gpggaPartialSegmentTimestamp	= nmeaRxSentenceString.timestamp;
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	621a      	str	r2, [r3, #32]
				pSelf->gpggaPartialSegmentReceived	= true;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2201      	movs	r2, #1
 800f274:	76da      	strb	r2, [r3, #27]
			if (ret == GPSDriver_Status_OK){
 800f276:	e070      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else if (ret == GPSDriver_Status_NMEASentenceError || ret == GPSDriver_Status_WrongNMEAChecksumError){
 800f278:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f27c:	2b07      	cmp	r3, #7
 800f27e:	d003      	beq.n	800f288 <GPSDriver_pullLastFrame+0xe4>
 800f280:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f284:	2b08      	cmp	r3, #8
 800f286:	d103      	bne.n	800f290 <GPSDriver_pullLastFrame+0xec>
				Warning_Handler("GPSDriver_Status_NMEASentenceError or GPSDriver_Status_WrongNMEAChecksumError error while parsing GPGGA Sentence.");
 800f288:	487f      	ldr	r0, [pc, #508]	; (800f488 <GPSDriver_pullLastFrame+0x2e4>)
 800f28a:	f7fa fc15 	bl	8009ab8 <Warning_Handler>
			if (ret == GPSDriver_Status_OK){
 800f28e:	e064      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else {
				return ret;
 800f290:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f294:	e0f2      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
			}

		} else if (nmeaRxSentenceString.sentenceLength  > strlen(GPS_NMEA_GPGSA_PREFIX) &&
 800f296:	89bb      	ldrh	r3, [r7, #12]
 800f298:	2b06      	cmp	r3, #6
 800f29a:	d92d      	bls.n	800f2f8 <GPSDriver_pullLastFrame+0x154>
				stringEqual((uint8_t*)GPS_NMEA_GPGSA_PREFIX, nmeaRxSentenceString.sentenceString, strlen(GPS_NMEA_GPGSA_PREFIX)) == StringOperations_Status_OK){
 800f29c:	f107 0308 	add.w	r3, r7, #8
 800f2a0:	3306      	adds	r3, #6
 800f2a2:	2206      	movs	r2, #6
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4879      	ldr	r0, [pc, #484]	; (800f48c <GPSDriver_pullLastFrame+0x2e8>)
 800f2a8:	f7fe fb6e 	bl	800d988 <stringEqual>
 800f2ac:	4603      	mov	r3, r0
		} else if (nmeaRxSentenceString.sentenceLength  > strlen(GPS_NMEA_GPGSA_PREFIX) &&
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d122      	bne.n	800f2f8 <GPSDriver_pullLastFrame+0x154>

			ret = _GPSDriver_handleGNGSASentence(pSelf, &nmeaRxSentenceString);
 800f2b2:	f107 0308 	add.w	r3, r7, #8
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fff4 	bl	80102a6 <_GPSDriver_handleGNGSASentence>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if (ret == GPSDriver_Status_OK){
 800f2c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d106      	bne.n	800f2da <GPSDriver_pullLastFrame+0x136>
				pSelf->gpgsaPartialSegmentTimestamp	= nmeaRxSentenceString.timestamp;
 800f2cc:	68ba      	ldr	r2, [r7, #8]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	625a      	str	r2, [r3, #36]	; 0x24
				pSelf->gpgsaPartialSegmentReceived	= true;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	771a      	strb	r2, [r3, #28]
			if (ret == GPSDriver_Status_OK){
 800f2d8:	e03f      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else if (ret == GPSDriver_Status_NMEASentenceError || ret == GPSDriver_Status_WrongNMEAChecksumError){
 800f2da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2de:	2b07      	cmp	r3, #7
 800f2e0:	d003      	beq.n	800f2ea <GPSDriver_pullLastFrame+0x146>
 800f2e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2e6:	2b08      	cmp	r3, #8
 800f2e8:	d103      	bne.n	800f2f2 <GPSDriver_pullLastFrame+0x14e>
				Warning_Handler("GPSDriver_Status_NMEASentenceError or GPSDriver_Status_WrongNMEAChecksumError error while parsing GPGSA Sentence.");
 800f2ea:	4869      	ldr	r0, [pc, #420]	; (800f490 <GPSDriver_pullLastFrame+0x2ec>)
 800f2ec:	f7fa fbe4 	bl	8009ab8 <Warning_Handler>
			if (ret == GPSDriver_Status_OK){
 800f2f0:	e033      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else {
				return ret;
 800f2f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f2f6:	e0c1      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
			}

		} else if (nmeaRxSentenceString.sentenceLength  > strlen(GPS_NMEA_GPRMC_PREFIX) &&
 800f2f8:	89bb      	ldrh	r3, [r7, #12]
 800f2fa:	2b06      	cmp	r3, #6
 800f2fc:	d92d      	bls.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
				stringEqual((uint8_t*)GPS_NMEA_GPRMC_PREFIX, nmeaRxSentenceString.sentenceString, strlen(GPS_NMEA_GPRMC_PREFIX)) == StringOperations_Status_OK){
 800f2fe:	f107 0308 	add.w	r3, r7, #8
 800f302:	3306      	adds	r3, #6
 800f304:	2206      	movs	r2, #6
 800f306:	4619      	mov	r1, r3
 800f308:	4862      	ldr	r0, [pc, #392]	; (800f494 <GPSDriver_pullLastFrame+0x2f0>)
 800f30a:	f7fe fb3d 	bl	800d988 <stringEqual>
 800f30e:	4603      	mov	r3, r0
		} else if (nmeaRxSentenceString.sentenceLength  > strlen(GPS_NMEA_GPRMC_PREFIX) &&
 800f310:	2b00      	cmp	r3, #0
 800f312:	d122      	bne.n	800f35a <GPSDriver_pullLastFrame+0x1b6>

			ret = _GPSDriver_handleGNRMCSentence(pSelf, &nmeaRxSentenceString);
 800f314:	f107 0308 	add.w	r3, r7, #8
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f001 f8a6 	bl	801046c <_GPSDriver_handleGNRMCSentence>
 800f320:	4603      	mov	r3, r0
 800f322:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

			if (ret == GPSDriver_Status_OK){
 800f326:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d106      	bne.n	800f33c <GPSDriver_pullLastFrame+0x198>
				pSelf->gprmcPartialSegmentTimestamp	= nmeaRxSentenceString.timestamp;
 800f32e:	68ba      	ldr	r2, [r7, #8]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	629a      	str	r2, [r3, #40]	; 0x28
				pSelf->gprmcPartialSegmentReceived	= true;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	775a      	strb	r2, [r3, #29]
 800f33a:	e00e      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else if (ret == GPSDriver_Status_NMEASentenceError || ret == GPSDriver_Status_WrongNMEAChecksumError){
 800f33c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f340:	2b07      	cmp	r3, #7
 800f342:	d003      	beq.n	800f34c <GPSDriver_pullLastFrame+0x1a8>
 800f344:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f348:	2b08      	cmp	r3, #8
 800f34a:	d103      	bne.n	800f354 <GPSDriver_pullLastFrame+0x1b0>
				Warning_Handler("GPSDriver_Status_NMEASentenceError or GPSDriver_Status_WrongNMEAChecksumError error while parsing GPRMC Sentence.");
 800f34c:	4852      	ldr	r0, [pc, #328]	; (800f498 <GPSDriver_pullLastFrame+0x2f4>)
 800f34e:	f7fa fbb3 	bl	8009ab8 <Warning_Handler>
 800f352:	e002      	b.n	800f35a <GPSDriver_pullLastFrame+0x1b6>
			} else {
				return ret;
 800f354:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f358:	e090      	b.n	800f47c <GPSDriver_pullLastFrame+0x2d8>
			}
		}

		if (pSelf->gpggaPartialSegmentReceived && pSelf->gpgsaPartialSegmentReceived && pSelf->gprmcPartialSegmentReceived){
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	7edb      	ldrb	r3, [r3, #27]
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	2b00      	cmp	r3, #0
 800f362:	f43f af47 	beq.w	800f1f4 <GPSDriver_pullLastFrame+0x50>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	7f1b      	ldrb	r3, [r3, #28]
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	f43f af41 	beq.w	800f1f4 <GPSDriver_pullLastFrame+0x50>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	7f5b      	ldrb	r3, [r3, #29]
 800f376:	b2db      	uxtb	r3, r3
 800f378:	2b00      	cmp	r3, #0
 800f37a:	f43f af3b 	beq.w	800f1f4 <GPSDriver_pullLastFrame+0x50>
			if (ABS_DIFF(pSelf->gpggaPartialSegmentTimestamp, pSelf->gpgsaPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6a1a      	ldr	r2, [r3, #32]
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f386:	429a      	cmp	r2, r3
 800f388:	d902      	bls.n	800f390 <GPSDriver_pullLastFrame+0x1ec>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6a1a      	ldr	r2, [r3, #32]
 800f38e:	e001      	b.n	800f394 <GPSDriver_pullLastFrame+0x1f0>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	6a19      	ldr	r1, [r3, #32]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f39c:	4299      	cmp	r1, r3
 800f39e:	d202      	bcs.n	800f3a6 <GPSDriver_pullLastFrame+0x202>
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6a1b      	ldr	r3, [r3, #32]
 800f3a4:	e001      	b.n	800f3aa <GPSDriver_pullLastFrame+0x206>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	2b31      	cmp	r3, #49	; 0x31
 800f3ae:	f63f af21 	bhi.w	800f1f4 <GPSDriver_pullLastFrame+0x50>
					ABS_DIFF(pSelf->gpgsaPartialSegmentTimestamp, pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d902      	bls.n	800f3c4 <GPSDriver_pullLastFrame+0x220>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3c2:	e001      	b.n	800f3c8 <GPSDriver_pullLastFrame+0x224>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3d0:	4299      	cmp	r1, r3
 800f3d2:	d202      	bcs.n	800f3da <GPSDriver_pullLastFrame+0x236>
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d8:	e001      	b.n	800f3de <GPSDriver_pullLastFrame+0x23a>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3de:	1ad3      	subs	r3, r2, r3
			if (ABS_DIFF(pSelf->gpggaPartialSegmentTimestamp, pSelf->gpgsaPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 800f3e0:	2b31      	cmp	r3, #49	; 0x31
 800f3e2:	f63f af07 	bhi.w	800f1f4 <GPSDriver_pullLastFrame+0x50>
					ABS_DIFF(pSelf->gpggaPartialSegmentTimestamp, pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY){
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a1a      	ldr	r2, [r3, #32]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d902      	bls.n	800f3f8 <GPSDriver_pullLastFrame+0x254>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a1a      	ldr	r2, [r3, #32]
 800f3f6:	e001      	b.n	800f3fc <GPSDriver_pullLastFrame+0x258>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a19      	ldr	r1, [r3, #32]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f404:	4299      	cmp	r1, r3
 800f406:	d202      	bcs.n	800f40e <GPSDriver_pullLastFrame+0x26a>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6a1b      	ldr	r3, [r3, #32]
 800f40c:	e001      	b.n	800f412 <GPSDriver_pullLastFrame+0x26e>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f412:	1ad3      	subs	r3, r2, r3
					ABS_DIFF(pSelf->gpgsaPartialSegmentTimestamp, pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 800f414:	2b31      	cmp	r3, #49	; 0x31
 800f416:	f63f aeed 	bhi.w	800f1f4 <GPSDriver_pullLastFrame+0x50>

				pSelf->partialGPSData.msTime		= MIN(pSelf->gpggaPartialSegmentTimestamp, MIN(pSelf->gpgsaPartialSegmentTimestamp, pSelf->gprmcPartialSegmentTimestamp));
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a1a      	ldr	r2, [r3, #32]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f426:	4299      	cmp	r1, r3
 800f428:	d202      	bcs.n	800f430 <GPSDriver_pullLastFrame+0x28c>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42e:	e001      	b.n	800f434 <GPSDriver_pullLastFrame+0x290>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f434:	429a      	cmp	r2, r3
 800f436:	d202      	bcs.n	800f43e <GPSDriver_pullLastFrame+0x29a>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6a1b      	ldr	r3, [r3, #32]
 800f43c:	e00a      	b.n	800f454 <GPSDriver_pullLastFrame+0x2b0>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f446:	429a      	cmp	r2, r3
 800f448:	d202      	bcs.n	800f450 <GPSDriver_pullLastFrame+0x2ac>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f44e:	e001      	b.n	800f454 <GPSDriver_pullLastFrame+0x2b0>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	62d3      	str	r3, [r2, #44]	; 0x2c

				*pRetGPSData 						= pSelf->partialGPSData;
 800f458:	683a      	ldr	r2, [r7, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4610      	mov	r0, r2
 800f45e:	332c      	adds	r3, #44	; 0x2c
 800f460:	2250      	movs	r2, #80	; 0x50
 800f462:	4619      	mov	r1, r3
 800f464:	f001 f9f4 	bl	8010850 <memcpy>

				pSelf->gpggaPartialSegmentReceived	= false;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2200      	movs	r2, #0
 800f46c:	76da      	strb	r2, [r3, #27]
				pSelf->gpgsaPartialSegmentReceived	= false;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	771a      	strb	r2, [r3, #28]
				pSelf->gprmcPartialSegmentReceived	= false;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2200      	movs	r2, #0
 800f478:	775a      	strb	r2, [r3, #29]

				return GPSDriver_Status_OK;
 800f47a:	2300      	movs	r3, #0
			}
		}
	}
	return GPSDriver_Status_Error;
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	376c      	adds	r7, #108	; 0x6c
 800f480:	46bd      	mov	sp, r7
 800f482:	bd90      	pop	{r4, r7, pc}
 800f484:	0801135c 	.word	0x0801135c
 800f488:	08011364 	.word	0x08011364
 800f48c:	080113d8 	.word	0x080113d8
 800f490:	080113e0 	.word	0x080113e0
 800f494:	08011454 	.word	0x08011454
 800f498:	0801145c 	.word	0x0801145c

0800f49c <GPSDriver_getState>:

GPSDriver_Status_TypeDef GPSDriver_getState(volatile Ublox8MGPSDriver_TypeDef* pSelf, GPSDriver_State_TypeDef* retState){
 800f49c:	b480      	push	{r7}
 800f49e:	b083      	sub	sp, #12
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
	if (pSelf == NULL || retState == NULL){
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <GPSDriver_getState+0x16>
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <GPSDriver_getState+0x1a>
		return GPSDriver_Status_NullPointerError;
 800f4b2:	2313      	movs	r3, #19
 800f4b4:	e005      	b.n	800f4c2 <GPSDriver_getState+0x26>
	}

	(*retState) = pSelf->state;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	b2da      	uxtb	r2, r3
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	701a      	strb	r2, [r3, #0]
	return GPSDriver_Status_OK;
 800f4c0:	2300      	movs	r3, #0
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <GPSDriver_setOFF>:

GPSDriver_Status_TypeDef GPSDriver_setOFF(volatile Ublox8MGPSDriver_TypeDef* pSelf){
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b084      	sub	sp, #16
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	73fb      	strb	r3, [r7, #15]
	if (pSelf == NULL){
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d101      	bne.n	800f4e4 <GPSDriver_setOFF+0x16>
		return GPSDriver_Status_NullPointerError;
 800f4e0:	2313      	movs	r3, #19
 800f4e2:	e043      	b.n	800f56c <GPSDriver_setOFF+0x9e>
	}

	if (pSelf->state == GPSDriver_State_Running){
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d11d      	bne.n	800f52a <GPSDriver_setOFF+0x5c>
		if (UartReceiverStartTerm_stop(pSelf->pUartNMEAReceiverHandler) != UartReceiverStartTerm_Status_OK){
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff fb54 	bl	800eba0 <UartReceiverStartTerm_stop>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d006      	beq.n	800f50c <GPSDriver_setOFF+0x3e>
			ret = (ret == GPSDriver_Status_OK) ? GPSDriver_Status_UartReceiverStartTermError : ret;
 800f4fe:	7bfb      	ldrb	r3, [r7, #15]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <GPSDriver_setOFF+0x3a>
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	e000      	b.n	800f50a <GPSDriver_setOFF+0x3c>
 800f508:	230e      	movs	r3, #14
 800f50a:	73fb      	strb	r3, [r7, #15]
		}
		if (UartReceiverStartLength_stop(pSelf->pUartUBXReceiverHandler) != UartReceiverStartLength_Status_OK){
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	4618      	mov	r0, r3
 800f512:	f7fe ffa0 	bl	800e456 <UartReceiverStartLength_stop>
 800f516:	4603      	mov	r3, r0
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d006      	beq.n	800f52a <GPSDriver_setOFF+0x5c>
			ret = (ret == GPSDriver_Status_OK) ? GPSDriver_Status_UartReceiverStartTermError : ret;
 800f51c:	7bfb      	ldrb	r3, [r7, #15]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d001      	beq.n	800f526 <GPSDriver_setOFF+0x58>
 800f522:	7bfb      	ldrb	r3, [r7, #15]
 800f524:	e000      	b.n	800f528 <GPSDriver_setOFF+0x5a>
 800f526:	230e      	movs	r3, #14
 800f528:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (pSelf->uartNMEAReaderIteratorSet){
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7e9b      	ldrb	r3, [r3, #26]
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00d      	beq.n	800f550 <GPSDriver_setOFF+0x82>
		if (UartReceiverStartTerm_unregisterReader(pSelf->pUartNMEAReceiverHandler, pSelf->uartNMEAReaderIterator) != UartReceiverStartTerm_Status_OK){
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689a      	ldr	r2, [r3, #8]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	8b1b      	ldrh	r3, [r3, #24]
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	4619      	mov	r1, r3
 800f540:	4610      	mov	r0, r2
 800f542:	f7ff fa89 	bl	800ea58 <UartReceiverStartTerm_unregisterReader>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d001      	beq.n	800f550 <GPSDriver_setOFF+0x82>
			ret = GPSDriver_Status_UartReceiverStartTermError;
 800f54c:	230e      	movs	r3, #14
 800f54e:	73fb      	strb	r3, [r7, #15]
		}
	}

	if (DODriver_SetLow(pSelf->pDOResetDriver) != DODriver_Status_OK){
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	4618      	mov	r0, r3
 800f556:	f7fc fdb9 	bl	800c0cc <DODriver_SetLow>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <GPSDriver_setOFF+0x96>
		ret = GPSDriver_Status_DOResetError;
 800f560:	2311      	movs	r3, #17
 800f562:	73fb      	strb	r3, [r7, #15]
	}

	pSelf->state = GPSDriver_State_OFF;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2204      	movs	r2, #4
 800f568:	701a      	strb	r2, [r3, #0]

	return ret;
 800f56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <_GPSDriver_sendCommand>:

//< ----- Private functions ----- >//

static GPSDriver_Status_TypeDef _GPSDriver_sendCommand(volatile Ublox8MGPSDriver_TypeDef* pSelf, uint8_t* pCommandBuffer, uint16_t length){
 800f574:	b580      	push	{r7, lr}
 800f576:	b086      	sub	sp, #24
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	4613      	mov	r3, r2
 800f580:	80fb      	strh	r3, [r7, #6]

	if (UartDriver_sendBytesDMA(pSelf->pUartDriverHandler, pCommandBuffer, length, GPS_TX_TIMEOUT_MS) != UartDriver_Status_OK){
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6858      	ldr	r0, [r3, #4]
 800f586:	88fa      	ldrh	r2, [r7, #6]
 800f588:	2364      	movs	r3, #100	; 0x64
 800f58a:	68b9      	ldr	r1, [r7, #8]
 800f58c:	f7fe fba1 	bl	800dcd2 <UartDriver_sendBytesDMA>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	d001      	beq.n	800f59a <_GPSDriver_sendCommand+0x26>
		return GPSDriver_Status_UartDriverError;
 800f596:	230c      	movs	r3, #12
 800f598:	e011      	b.n	800f5be <_GPSDriver_sendCommand+0x4a>
	}

	UartDriver_Status_TypeDef ret = UartDriver_waitForTxTimeout(pSelf->pUartDriverHandler);
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7fe fc9a 	bl	800ded8 <UartDriver_waitForTxTimeout>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	75fb      	strb	r3, [r7, #23]

	if (ret == UartDriver_Status_TxTimeoutError){
 800f5a8:	7dfb      	ldrb	r3, [r7, #23]
 800f5aa:	2b03      	cmp	r3, #3
 800f5ac:	d101      	bne.n	800f5b2 <_GPSDriver_sendCommand+0x3e>
		return GPSDriver_Status_TXTimeoutError;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e005      	b.n	800f5be <_GPSDriver_sendCommand+0x4a>
	} else if (ret != UartDriver_Status_OK){
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <_GPSDriver_sendCommand+0x48>
		return GPSDriver_Status_UartDriverError;
 800f5b8:	230c      	movs	r3, #12
 800f5ba:	e000      	b.n	800f5be <_GPSDriver_sendCommand+0x4a>
	}

	return GPSDriver_Status_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <_GPSDriver_getNMEAChecksumValue>:

static GPSDriver_Status_TypeDef _GPSDriver_getNMEAChecksumValue(const uint8_t* pSentence, uint8_t* retChecksumValue){
 800f5c6:	b480      	push	{r7}
 800f5c8:	b085      	sub	sp, #20
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6039      	str	r1, [r7, #0]

	uint16_t i = 0;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	81fb      	strh	r3, [r7, #14]
    *retChecksumValue = 0;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	701a      	strb	r2, [r3, #0]
    if (pSentence[i] == GPS_NMEA_START_SIGN){
 800f5da:	89fb      	ldrh	r3, [r7, #14]
 800f5dc:	687a      	ldr	r2, [r7, #4]
 800f5de:	4413      	add	r3, r2
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	2b24      	cmp	r3, #36	; 0x24
 800f5e4:	d110      	bne.n	800f608 <_GPSDriver_getNMEAChecksumValue+0x42>
    	i++;
 800f5e6:	89fb      	ldrh	r3, [r7, #14]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	81fb      	strh	r3, [r7, #14]
    }
    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (pSentence[i] != 0 && pSentence[i] != GPS_NMEA_CHECKSUM_SEPARATOR_SIGN){
 800f5ec:	e00c      	b.n	800f608 <_GPSDriver_getNMEAChecksumValue+0x42>
        *retChecksumValue ^= pSentence[i++];
 800f5ee:	89fb      	ldrh	r3, [r7, #14]
 800f5f0:	1c5a      	adds	r2, r3, #1
 800f5f2:	81fa      	strh	r2, [r7, #14]
 800f5f4:	461a      	mov	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4413      	add	r3, r2
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	7812      	ldrb	r2, [r2, #0]
 800f600:	4053      	eors	r3, r2
 800f602:	b2da      	uxtb	r2, r3
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	701a      	strb	r2, [r3, #0]
    while (pSentence[i] != 0 && pSentence[i] != GPS_NMEA_CHECKSUM_SEPARATOR_SIGN){
 800f608:	89fb      	ldrh	r3, [r7, #14]
 800f60a:	687a      	ldr	r2, [r7, #4]
 800f60c:	4413      	add	r3, r2
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <_GPSDriver_getNMEAChecksumValue+0x5a>
 800f614:	89fb      	ldrh	r3, [r7, #14]
 800f616:	687a      	ldr	r2, [r7, #4]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b2a      	cmp	r3, #42	; 0x2a
 800f61e:	d1e6      	bne.n	800f5ee <_GPSDriver_getNMEAChecksumValue+0x28>
    }
    return GPSDriver_Status_OK;
 800f620:	2300      	movs	r3, #0
}
 800f622:	4618      	mov	r0, r3
 800f624:	3714      	adds	r7, #20
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr

0800f62e <_GPSDriver_checkNMEAChecksum>:

static GPSDriver_Status_TypeDef _GPSDriver_checkNMEAChecksum(const uint8_t* pSentence){
 800f62e:	b580      	push	{r7, lr}
 800f630:	b086      	sub	sp, #24
 800f632:	af00      	add	r7, sp, #0
 800f634:	6078      	str	r0, [r7, #4]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 800f636:	2300      	movs	r3, #0
 800f638:	757b      	strb	r3, [r7, #21]

    if (pSentence[0] != GPS_NMEA_START_SIGN){
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	2b24      	cmp	r3, #36	; 0x24
 800f640:	d001      	beq.n	800f646 <_GPSDriver_checkNMEAChecksum+0x18>
    	return GPSDriver_Status_NMEASentenceError;
 800f642:	2307      	movs	r3, #7
 800f644:	e048      	b.n	800f6d8 <_GPSDriver_checkNMEAChecksum+0xaa>
    }

    uint8_t checksumVal = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	747b      	strb	r3, [r7, #17]
    if ((ret = _GPSDriver_getNMEAChecksumValue(pSentence+1, &checksumVal)) != GPSDriver_Status_OK){
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3301      	adds	r3, #1
 800f64e:	f107 0211 	add.w	r2, r7, #17
 800f652:	4611      	mov	r1, r2
 800f654:	4618      	mov	r0, r3
 800f656:	f7ff ffb6 	bl	800f5c6 <_GPSDriver_getNMEAChecksumValue>
 800f65a:	4603      	mov	r3, r0
 800f65c:	757b      	strb	r3, [r7, #21]
 800f65e:	7d7b      	ldrb	r3, [r7, #21]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <_GPSDriver_checkNMEAChecksum+0x3a>
    	return ret;
 800f664:	7d7b      	ldrb	r3, [r7, #21]
 800f666:	e037      	b.n	800f6d8 <_GPSDriver_checkNMEAChecksum+0xaa>
    }

    uint8_t checksumStr[3];
    if (uInt8ToHexStringMinDigits(checksumStr, checksumVal, true, 2) != StringOperations_Status_OK){
 800f668:	7c79      	ldrb	r1, [r7, #17]
 800f66a:	f107 000c 	add.w	r0, r7, #12
 800f66e:	2302      	movs	r3, #2
 800f670:	2201      	movs	r2, #1
 800f672:	f7fe fa99 	bl	800dba8 <uInt8ToHexStringMinDigits>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <_GPSDriver_checkNMEAChecksum+0x52>
    	return GPSDriver_Status_Error;
 800f67c:	2314      	movs	r3, #20
 800f67e:	e02b      	b.n	800f6d8 <_GPSDriver_checkNMEAChecksum+0xaa>
    }

    uint16_t i = 0;
 800f680:	2300      	movs	r3, #0
 800f682:	82fb      	strh	r3, [r7, #22]
    uint16_t length = strlen((char*)pSentence);
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7f0 fddb 	bl	8000240 <strlen>
 800f68a:	4603      	mov	r3, r0
 800f68c:	827b      	strh	r3, [r7, #18]
    while (i < length && pSentence[i++] != GPS_NMEA_CHECKSUM_SEPARATOR_SIGN){ }
 800f68e:	8afa      	ldrh	r2, [r7, #22]
 800f690:	8a7b      	ldrh	r3, [r7, #18]
 800f692:	429a      	cmp	r2, r3
 800f694:	d208      	bcs.n	800f6a8 <_GPSDriver_checkNMEAChecksum+0x7a>
 800f696:	8afb      	ldrh	r3, [r7, #22]
 800f698:	1c5a      	adds	r2, r3, #1
 800f69a:	82fa      	strh	r2, [r7, #22]
 800f69c:	461a      	mov	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4413      	add	r3, r2
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f6a6:	d1f2      	bne.n	800f68e <_GPSDriver_checkNMEAChecksum+0x60>

    if (i == length){
 800f6a8:	8afa      	ldrh	r2, [r7, #22]
 800f6aa:	8a7b      	ldrh	r3, [r7, #18]
 800f6ac:	429a      	cmp	r2, r3
 800f6ae:	d101      	bne.n	800f6b4 <_GPSDriver_checkNMEAChecksum+0x86>
    	return GPSDriver_Status_NMEASentenceError;
 800f6b0:	2307      	movs	r3, #7
 800f6b2:	e011      	b.n	800f6d8 <_GPSDriver_checkNMEAChecksum+0xaa>
    }

    if (*(pSentence + i) != checksumStr[0] || *(pSentence + i + 1) != checksumStr[1]){
 800f6b4:	8afb      	ldrh	r3, [r7, #22]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	4413      	add	r3, r2
 800f6ba:	781a      	ldrb	r2, [r3, #0]
 800f6bc:	7b3b      	ldrb	r3, [r7, #12]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d107      	bne.n	800f6d2 <_GPSDriver_checkNMEAChecksum+0xa4>
 800f6c2:	8afb      	ldrh	r3, [r7, #22]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	687a      	ldr	r2, [r7, #4]
 800f6c8:	4413      	add	r3, r2
 800f6ca:	781a      	ldrb	r2, [r3, #0]
 800f6cc:	7b7b      	ldrb	r3, [r7, #13]
 800f6ce:	429a      	cmp	r2, r3
 800f6d0:	d001      	beq.n	800f6d6 <_GPSDriver_checkNMEAChecksum+0xa8>
    	return GPSDriver_Status_WrongNMEAChecksumError;
 800f6d2:	2308      	movs	r3, #8
 800f6d4:	e000      	b.n	800f6d8 <_GPSDriver_checkNMEAChecksum+0xaa>
    }

    return GPSDriver_Status_OK;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3718      	adds	r7, #24
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <_GPSDriver_sendUBXCommandAndWaitForResponse>:
		uint8_t* pCommandBuffer,
		uint16_t bufferSize,
		UartReceiverStartLength_ReaderIterator_TypeDef ackAnswerReaderIterator,
		UartReceiverStartLength_ReaderIterator_TypeDef nakAnswerReaderIterator,
		uint8_t* pAnswerBuffer)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	4611      	mov	r1, r2
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	460b      	mov	r3, r1
 800f6f0:	80fb      	strh	r3, [r7, #6]
 800f6f2:	4613      	mov	r3, r2
 800f6f4:	80bb      	strh	r3, [r7, #4]

	GPSDriver_Status_TypeDef				ret		= GPSDriver_Status_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	77fb      	strb	r3, [r7, #31]
	UartReceiverStartLength_Status_TypeDef	retUR	= UartReceiverStartLength_Status_OK;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	77bb      	strb	r3, [r7, #30]

	UartDriver_State_TypeDef uartDriverState;
	if (UartDriver_getState(pSelf->pUartDriverHandler, &uartDriverState) != UartDriver_Status_OK){
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	f107 021d 	add.w	r2, r7, #29
 800f706:	4611      	mov	r1, r2
 800f708:	4618      	mov	r0, r3
 800f70a:	f7fe fc18 	bl	800df3e <UartDriver_getState>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x38>
		return GPSDriver_Status_UartDriverError;
 800f714:	230c      	movs	r3, #12
 800f716:	e083      	b.n	800f820 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x140>
	}

	if (UartReceiverStartLength_start(pSelf->pUartUBXReceiverHandler) != UartReceiverStartLength_Status_OK){
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	68db      	ldr	r3, [r3, #12]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7fe fe74 	bl	800e40a <UartReceiverStartLength_start>
 800f722:	4603      	mov	r3, r0
 800f724:	2b00      	cmp	r3, #0
 800f726:	d001      	beq.n	800f72c <_GPSDriver_sendUBXCommandAndWaitForResponse+0x4c>
		return GPSDriver_Status_UartReceiverStartLengthError;
 800f728:	230f      	movs	r3, #15
 800f72a:	e079      	b.n	800f820 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x140>
	}

	uint32_t	answerTimestamp = 0;
 800f72c:	2300      	movs	r3, #0
 800f72e:	61bb      	str	r3, [r7, #24]

	ret = _GPSDriver_sendCommand(pSelf, pCommandBuffer, bufferSize);
 800f730:	88fb      	ldrh	r3, [r7, #6]
 800f732:	461a      	mov	r2, r3
 800f734:	68b9      	ldr	r1, [r7, #8]
 800f736:	68f8      	ldr	r0, [r7, #12]
 800f738:	f7ff ff1c 	bl	800f574 <_GPSDriver_sendCommand>
 800f73c:	4603      	mov	r3, r0
 800f73e:	77fb      	strb	r3, [r7, #31]

	uint32_t sentCommandTimestamp;
	if (ret == GPSDriver_Status_OK && MSTimerDriver_getMSTime(pSelf->pMSTimer, &sentCommandTimestamp) != MSTimerDriver_Status_OK){
 800f740:	7ffb      	ldrb	r3, [r7, #31]
 800f742:	2b00      	cmp	r3, #0
 800f744:	d156      	bne.n	800f7f4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x114>
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	691b      	ldr	r3, [r3, #16]
 800f74a:	f107 0214 	add.w	r2, r7, #20
 800f74e:	4611      	mov	r1, r2
 800f750:	4618      	mov	r0, r3
 800f752:	f7fd fedb 	bl	800d50c <MSTimerDriver_getMSTime>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d04b      	beq.n	800f7f4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x114>
		ret = GPSDriver_Status_MSTimerError;
 800f75c:	2310      	movs	r3, #16
 800f75e:	77fb      	strb	r3, [r7, #31]
	}

	while (ret == GPSDriver_Status_OK || ret == GPSDriver_Status_NAKAnswer){
 800f760:	e048      	b.n	800f7f4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x114>

		retUR = UartReceiverStartLength_pullLastSentence(pSelf->pUartUBXReceiverHandler, ackAnswerReaderIterator, pAnswerBuffer, &answerTimestamp);
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	68d8      	ldr	r0, [r3, #12]
 800f766:	f107 0318 	add.w	r3, r7, #24
 800f76a:	88b9      	ldrh	r1, [r7, #4]
 800f76c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f76e:	f7fe fe98 	bl	800e4a2 <UartReceiverStartLength_pullLastSentence>
 800f772:	4603      	mov	r3, r0
 800f774:	77bb      	strb	r3, [r7, #30]
		if (retUR != UartReceiverStartLength_Status_OK && retUR != UartReceiverStartLength_Status_Empty){
 800f776:	7fbb      	ldrb	r3, [r7, #30]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d004      	beq.n	800f786 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xa6>
 800f77c:	7fbb      	ldrb	r3, [r7, #30]
 800f77e:	2b01      	cmp	r3, #1
 800f780:	d001      	beq.n	800f786 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xa6>
			ret = GPSDriver_Status_UartReceiverStartLengthError;
 800f782:	230f      	movs	r3, #15
 800f784:	77fb      	strb	r3, [r7, #31]
		}
		if (retUR == UartReceiverStartLength_Status_OK){
 800f786:	7fbb      	ldrb	r3, [r7, #30]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d102      	bne.n	800f792 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xb2>
			ret = GPSDriver_Status_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	77fb      	strb	r3, [r7, #31]
			break;
 800f790:	e036      	b.n	800f800 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x120>
		}

		retUR = UartReceiverStartLength_pullLastSentence(pSelf->pUartUBXReceiverHandler, nakAnswerReaderIterator, pAnswerBuffer, &answerTimestamp);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	68d8      	ldr	r0, [r3, #12]
 800f796:	f107 0318 	add.w	r3, r7, #24
 800f79a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800f79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f79e:	f7fe fe80 	bl	800e4a2 <UartReceiverStartLength_pullLastSentence>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	77bb      	strb	r3, [r7, #30]
		if (retUR != UartReceiverStartLength_Status_OK && retUR != UartReceiverStartLength_Status_Empty){
 800f7a6:	7fbb      	ldrb	r3, [r7, #30]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d004      	beq.n	800f7b6 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xd6>
 800f7ac:	7fbb      	ldrb	r3, [r7, #30]
 800f7ae:	2b01      	cmp	r3, #1
 800f7b0:	d001      	beq.n	800f7b6 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xd6>
			ret = GPSDriver_Status_UartReceiverStartLengthError;
 800f7b2:	230f      	movs	r3, #15
 800f7b4:	77fb      	strb	r3, [r7, #31]
		}
		if (retUR == UartReceiverStartLength_Status_OK){
 800f7b6:	7fbb      	ldrb	r3, [r7, #30]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d103      	bne.n	800f7c4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0xe4>
			ret = GPSDriver_Status_NAKAnswer;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	77fb      	strb	r3, [r7, #31]
			break;
 800f7c0:	bf00      	nop
 800f7c2:	e01d      	b.n	800f800 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x120>
		}

		uint32_t actualTimestamp;
		if (MSTimerDriver_getMSTime(pSelf->pMSTimer, &actualTimestamp) != MSTimerDriver_Status_OK){
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	f107 0210 	add.w	r2, r7, #16
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fd fe9c 	bl	800d50c <MSTimerDriver_getMSTime>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <_GPSDriver_sendUBXCommandAndWaitForResponse+0xfe>
			ret = GPSDriver_Status_MSTimerError;
 800f7da:	2310      	movs	r3, #16
 800f7dc:	77fb      	strb	r3, [r7, #31]
		}
		if (ret == GPSDriver_Status_OK && actualTimestamp - sentCommandTimestamp > GPS_COMMAND_RESPONSE_TIMEOUT_MS){
 800f7de:	7ffb      	ldrb	r3, [r7, #31]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d107      	bne.n	800f7f4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x114>
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f7ee:	d901      	bls.n	800f7f4 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x114>
			ret = GPSDriver_Status_ACKTimeoutError;
 800f7f0:	2302      	movs	r3, #2
 800f7f2:	77fb      	strb	r3, [r7, #31]
	while (ret == GPSDriver_Status_OK || ret == GPSDriver_Status_NAKAnswer){
 800f7f4:	7ffb      	ldrb	r3, [r7, #31]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d0b3      	beq.n	800f762 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x82>
 800f7fa:	7ffb      	ldrb	r3, [r7, #31]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d0b0      	beq.n	800f762 <_GPSDriver_sendUBXCommandAndWaitForResponse+0x82>
		}
	}

	if (UartReceiverStartLength_stop(pSelf->pUartUBXReceiverHandler) != UartReceiverStartLength_Status_OK){
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	4618      	mov	r0, r3
 800f806:	f7fe fe26 	bl	800e456 <UartReceiverStartLength_stop>
 800f80a:	4603      	mov	r3, r0
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d006      	beq.n	800f81e <_GPSDriver_sendUBXCommandAndWaitForResponse+0x13e>
		ret = (ret == GPSDriver_Status_OK) ? GPSDriver_Status_UartReceiverStartLengthError : ret;
 800f810:	7ffb      	ldrb	r3, [r7, #31]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <_GPSDriver_sendUBXCommandAndWaitForResponse+0x13a>
 800f816:	7ffb      	ldrb	r3, [r7, #31]
 800f818:	e000      	b.n	800f81c <_GPSDriver_sendUBXCommandAndWaitForResponse+0x13c>
 800f81a:	230f      	movs	r3, #15
 800f81c:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 800f81e:	7ffb      	ldrb	r3, [r7, #31]
}
 800f820:	4618      	mov	r0, r3
 800f822:	3720      	adds	r7, #32
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <_GPSDriver_getUBXChecksumValue>:

static GPSDriver_Status_TypeDef _GPSDriver_getUBXChecksumValue(volatile Ublox8MGPSDriver_TypeDef* pSelf, uint8_t* pCommandBuffer, uint16_t commandLength, uint8_t* pRetCRC) {
 800f828:	b480      	push	{r7}
 800f82a:	b087      	sub	sp, #28
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	60f8      	str	r0, [r7, #12]
 800f830:	60b9      	str	r1, [r7, #8]
 800f832:	603b      	str	r3, [r7, #0]
 800f834:	4613      	mov	r3, r2
 800f836:	80fb      	strh	r3, [r7, #6]

	pRetCRC[0] = 0;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2200      	movs	r2, #0
 800f83c:	701a      	strb	r2, [r3, #0]
	pRetCRC[1] = 0;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	3301      	adds	r3, #1
 800f842:	2200      	movs	r2, #0
 800f844:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < commandLength; i++)
 800f846:	2300      	movs	r3, #0
 800f848:	82fb      	strh	r3, [r7, #22]
 800f84a:	e016      	b.n	800f87a <_GPSDriver_getUBXChecksumValue+0x52>
	{
		pRetCRC[0] = pRetCRC[0] + pCommandBuffer[i];;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	781a      	ldrb	r2, [r3, #0]
 800f850:	8afb      	ldrh	r3, [r7, #22]
 800f852:	68b9      	ldr	r1, [r7, #8]
 800f854:	440b      	add	r3, r1
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	4413      	add	r3, r2
 800f85a:	b2da      	uxtb	r2, r3
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	701a      	strb	r2, [r3, #0]
		pRetCRC[1] = pRetCRC[1] + pRetCRC[0];
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	3301      	adds	r3, #1
 800f864:	683a      	ldr	r2, [r7, #0]
 800f866:	3201      	adds	r2, #1
 800f868:	7811      	ldrb	r1, [r2, #0]
 800f86a:	683a      	ldr	r2, [r7, #0]
 800f86c:	7812      	ldrb	r2, [r2, #0]
 800f86e:	440a      	add	r2, r1
 800f870:	b2d2      	uxtb	r2, r2
 800f872:	701a      	strb	r2, [r3, #0]
	for(uint16_t i = 0; i < commandLength; i++)
 800f874:	8afb      	ldrh	r3, [r7, #22]
 800f876:	3301      	adds	r3, #1
 800f878:	82fb      	strh	r3, [r7, #22]
 800f87a:	8afa      	ldrh	r2, [r7, #22]
 800f87c:	88fb      	ldrh	r3, [r7, #6]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d3e4      	bcc.n	800f84c <_GPSDriver_getUBXChecksumValue+0x24>
	}

	return GPSDriver_Status_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	371c      	adds	r7, #28
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <_GPSDriver_sendUbxCfgRateUTCCommand>:

static GPSDriver_Status_TypeDef _GPSDriver_sendUbxCfgRateUTCCommand(volatile Ublox8MGPSDriver_TypeDef* pSelf, Config_GPSFrequency_TypeDef frequency){
 800f890:	b580      	push	{r7, lr}
 800f892:	b098      	sub	sp, #96	; 0x60
 800f894:	af02      	add	r7, sp, #8
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 800f89c:	2300      	movs	r3, #0
 800f89e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint16_t measRate	= 0;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t navRate	= 1;
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t timeReg	= 1;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	switch(frequency){
 800f8b4:	78fb      	ldrb	r3, [r7, #3]
 800f8b6:	2b05      	cmp	r3, #5
 800f8b8:	d825      	bhi.n	800f906 <_GPSDriver_sendUbxCfgRateUTCCommand+0x76>
 800f8ba:	a201      	add	r2, pc, #4	; (adr r2, 800f8c0 <_GPSDriver_sendUbxCfgRateUTCCommand+0x30>)
 800f8bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c0:	0800f90b 	.word	0x0800f90b
 800f8c4:	0800f8d9 	.word	0x0800f8d9
 800f8c8:	0800f8e3 	.word	0x0800f8e3
 800f8cc:	0800f8ed 	.word	0x0800f8ed
 800f8d0:	0800f8f7 	.word	0x0800f8f7
 800f8d4:	0800f8ff 	.word	0x0800f8ff
	case Config_GPSFrequency_OFF:
		break;
	case Config_GPSFrequency_0_5Hz:
		measRate = 2000;
 800f8d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f8dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		break;
 800f8e0:	e014      	b.n	800f90c <_GPSDriver_sendUbxCfgRateUTCCommand+0x7c>
	case Config_GPSFrequency_1Hz:
		measRate = 1000;
 800f8e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		break;
 800f8ea:	e00f      	b.n	800f90c <_GPSDriver_sendUbxCfgRateUTCCommand+0x7c>
	case Config_GPSFrequency_2Hz:
		measRate = 500;
 800f8ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f8f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		break;
 800f8f4:	e00a      	b.n	800f90c <_GPSDriver_sendUbxCfgRateUTCCommand+0x7c>
	case Config_GPSFrequency_5Hz:
		measRate = 200;
 800f8f6:	23c8      	movs	r3, #200	; 0xc8
 800f8f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		break;
 800f8fc:	e006      	b.n	800f90c <_GPSDriver_sendUbxCfgRateUTCCommand+0x7c>
	case Config_GPSFrequency_10Hz:
		measRate = 100;
 800f8fe:	2364      	movs	r3, #100	; 0x64
 800f900:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		break;
 800f904:	e002      	b.n	800f90c <_GPSDriver_sendUbxCfgRateUTCCommand+0x7c>
	default:
		return GPSDriver_Status_Error;
 800f906:	2314      	movs	r3, #20
 800f908:	e0ab      	b.n	800fa62 <_GPSDriver_sendUbxCfgRateUTCCommand+0x1d2>
		break;
 800f90a:	bf00      	nop
	}

	uint8_t buffer[GPS_UBX_MAX_COMMAND_LENGTH];
	memset(buffer, 0, GPS_UBX_MAX_COMMAND_LENGTH);
 800f90c:	f107 0310 	add.w	r3, r7, #16
 800f910:	223c      	movs	r2, #60	; 0x3c
 800f912:	2100      	movs	r1, #0
 800f914:	4618      	mov	r0, r3
 800f916:	f000 ffa6 	bl	8010866 <memset>

	buffer[0] = GPS_UBX_SYNC_CHAR_1; //< 0xB5
 800f91a:	23b5      	movs	r3, #181	; 0xb5
 800f91c:	743b      	strb	r3, [r7, #16]
	buffer[1] = GPS_UBX_SYNC_CHAR_2; //< 0x62
 800f91e:	2362      	movs	r3, #98	; 0x62
 800f920:	747b      	strb	r3, [r7, #17]

	buffer[2] = GPS_UBX_CFG_CLASS; //< 0x06
 800f922:	2306      	movs	r3, #6
 800f924:	74bb      	strb	r3, [r7, #18]
	buffer[3] = GPS_UBX_CFG_RATE_ID; //< 0x08
 800f926:	2308      	movs	r3, #8
 800f928:	74fb      	strb	r3, [r7, #19]

	buffer[4] = U16_LSB(GPS_UBX_CFG_RATE_REQUEST_PAYLOAD_LENGTH); //< length
 800f92a:	2306      	movs	r3, #6
 800f92c:	753b      	strb	r3, [r7, #20]
	buffer[5] = U16_MSB(GPS_UBX_CFG_RATE_REQUEST_PAYLOAD_LENGTH); //< length
 800f92e:	2300      	movs	r3, #0
 800f930:	757b      	strb	r3, [r7, #21]

	buffer[6] = U16_LSB(measRate);
 800f932:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f936:	b2db      	uxtb	r3, r3
 800f938:	75bb      	strb	r3, [r7, #22]
	buffer[7] = U16_MSB(measRate);
 800f93a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800f93e:	0a1b      	lsrs	r3, r3, #8
 800f940:	b29b      	uxth	r3, r3
 800f942:	b2db      	uxtb	r3, r3
 800f944:	75fb      	strb	r3, [r7, #23]

	buffer[8] = U16_LSB(navRate);
 800f946:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	763b      	strb	r3, [r7, #24]
	buffer[9] = U16_MSB(navRate);
 800f94e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f952:	0a1b      	lsrs	r3, r3, #8
 800f954:	b29b      	uxth	r3, r3
 800f956:	b2db      	uxtb	r3, r3
 800f958:	767b      	strb	r3, [r7, #25]

	buffer[10] = U16_LSB(timeReg);
 800f95a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	76bb      	strb	r3, [r7, #26]
	buffer[11] = U16_MSB(timeReg);
 800f962:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f966:	0a1b      	lsrs	r3, r3, #8
 800f968:	b29b      	uxth	r3, r3
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	76fb      	strb	r3, [r7, #27]

	if ((ret = _GPSDriver_getUBXChecksumValue(pSelf, buffer+2, 10, buffer + 12)) != GPSDriver_Status_OK){
 800f96e:	f107 0110 	add.w	r1, r7, #16
 800f972:	3102      	adds	r1, #2
 800f974:	f107 0310 	add.w	r3, r7, #16
 800f978:	330c      	adds	r3, #12
 800f97a:	220a      	movs	r2, #10
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	f7ff ff53 	bl	800f828 <_GPSDriver_getUBXChecksumValue>
 800f982:	4603      	mov	r3, r0
 800f984:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f988:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <_GPSDriver_sendUbxCfgRateUTCCommand+0x106>
		return ret;
 800f990:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f994:	e065      	b.n	800fa62 <_GPSDriver_sendUbxCfgRateUTCCommand+0x1d2>
	}

	UartReceiverStartLength_ReaderIterator_TypeDef	ackReaderIterator;
	UartReceiverStartLength_ReaderIterator_TypeDef	nakReaderIterator;
	bool											ackReaderSet = false;
 800f996:	2300      	movs	r3, #0
 800f998:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	bool											nakReaderSet = false;
 800f99c:	2300      	movs	r3, #0
 800f99e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	if (UartReceiverStartLength_registerReader(
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	68d8      	ldr	r0, [r3, #12]
 800f9a6:	f107 010e 	add.w	r1, r7, #14
 800f9aa:	230a      	movs	r3, #10
 800f9ac:	9300      	str	r3, [sp, #0]
 800f9ae:	4b2f      	ldr	r3, [pc, #188]	; (800fa6c <_GPSDriver_sendUbxCfgRateUTCCommand+0x1dc>)
 800f9b0:	2208      	movs	r2, #8
 800f9b2:	f7fe fc3b 	bl	800e22c <UartReceiverStartLength_registerReader>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d003      	beq.n	800f9c4 <_GPSDriver_sendUbxCfgRateUTCCommand+0x134>
			&ackReaderIterator,
			ARRAY_LENGTH(ubxCfgRateACKAnswerPrefix),
			ubxCfgRateACKAnswerPrefix,
			GPS_UBX_STATIC_PARTS_LENGTH + GPS_UBX_ACK_ANSWER_PAYLOAD_LENGTH) != UartReceiverStartLength_Status_OK)
	{
		ret = GPSDriver_Status_UartReceiverStartLengthError;
 800f9bc:	230f      	movs	r3, #15
 800f9be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f9c2:	e002      	b.n	800f9ca <_GPSDriver_sendUbxCfgRateUTCCommand+0x13a>
	} else {
		ackReaderSet	= true;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	}

	if (UartReceiverStartLength_registerReader(
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	68d8      	ldr	r0, [r3, #12]
 800f9ce:	f107 010c 	add.w	r1, r7, #12
 800f9d2:	230a      	movs	r3, #10
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	4b26      	ldr	r3, [pc, #152]	; (800fa70 <_GPSDriver_sendUbxCfgRateUTCCommand+0x1e0>)
 800f9d8:	2208      	movs	r2, #8
 800f9da:	f7fe fc27 	bl	800e22c <UartReceiverStartLength_registerReader>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d003      	beq.n	800f9ec <_GPSDriver_sendUbxCfgRateUTCCommand+0x15c>
			&nakReaderIterator,
			ARRAY_LENGTH(ubxCfgRateNAKAnswerPrefix),
			ubxCfgRateNAKAnswerPrefix,
			GPS_UBX_STATIC_PARTS_LENGTH + GPS_UBX_ACK_ANSWER_PAYLOAD_LENGTH) != UartReceiverStartLength_Status_OK)
	{
		ret = GPSDriver_Status_UartReceiverStartLengthError;
 800f9e4:	230f      	movs	r3, #15
 800f9e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800f9ea:	e002      	b.n	800f9f2 <_GPSDriver_sendUbxCfgRateUTCCommand+0x162>
	} else {
		nakReaderSet	= true;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
	}

	if (ret == GPSDriver_Status_OK){
 800f9f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d10f      	bne.n	800fa1a <_GPSDriver_sendUbxCfgRateUTCCommand+0x18a>
		ret =  _GPSDriver_sendUBXCommandAndWaitForResponse(
 800f9fa:	89f8      	ldrh	r0, [r7, #14]
 800f9fc:	89bb      	ldrh	r3, [r7, #12]
 800f9fe:	f107 0110 	add.w	r1, r7, #16
 800fa02:	f107 0210 	add.w	r2, r7, #16
 800fa06:	9201      	str	r2, [sp, #4]
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	220e      	movs	r2, #14
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7ff fe66 	bl	800f6e0 <_GPSDriver_sendUBXCommandAndWaitForResponse>
 800fa14:	4603      	mov	r3, r0
 800fa16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				ackReaderIterator,
				nakReaderIterator,
				buffer);
	}

	if (ackReaderSet){
 800fa1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d00c      	beq.n	800fa3c <_GPSDriver_sendUbxCfgRateUTCCommand+0x1ac>
		if (UartReceiverStartLength_unregisterReader(pSelf->pUartUBXReceiverHandler, ackReaderIterator) != UartReceiverStartLength_Status_OK){
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68db      	ldr	r3, [r3, #12]
 800fa26:	89fa      	ldrh	r2, [r7, #14]
 800fa28:	4611      	mov	r1, r2
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fe fc88 	bl	800e340 <UartReceiverStartLength_unregisterReader>
 800fa30:	4603      	mov	r3, r0
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <_GPSDriver_sendUbxCfgRateUTCCommand+0x1ac>
			ret = GPSDriver_Status_UartReceiverStartLengthError;
 800fa36:	230f      	movs	r3, #15
 800fa38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
	}
	if (nakReaderSet){
 800fa3c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00c      	beq.n	800fa5e <_GPSDriver_sendUbxCfgRateUTCCommand+0x1ce>
		if (UartReceiverStartLength_unregisterReader(pSelf->pUartUBXReceiverHandler, nakReaderIterator) != UartReceiverStartLength_Status_OK)
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	68db      	ldr	r3, [r3, #12]
 800fa48:	89ba      	ldrh	r2, [r7, #12]
 800fa4a:	4611      	mov	r1, r2
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f7fe fc77 	bl	800e340 <UartReceiverStartLength_unregisterReader>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <_GPSDriver_sendUbxCfgRateUTCCommand+0x1ce>
		{
			ret = GPSDriver_Status_UartReceiverStartLengthError;
 800fa58:	230f      	movs	r3, #15
 800fa5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
	}

	return ret;
 800fa5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3758      	adds	r7, #88	; 0x58
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	08011a30 	.word	0x08011a30
 800fa70:	08011a38 	.word	0x08011a38

0800fa74 <_GPSDriver_parseTime>:

static GPSDriver_Status_TypeDef _GPSDriver_parseTime(uint8_t* pSentence, uint16_t length, volatile DateTime_TypeDef* pRetDateTime){
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	460b      	mov	r3, r1
 800fa7e:	607a      	str	r2, [r7, #4]
 800fa80:	817b      	strh	r3, [r7, #10]

	if (length < 6){
 800fa82:	897b      	ldrh	r3, [r7, #10]
 800fa84:	2b05      	cmp	r3, #5
 800fa86:	d801      	bhi.n	800fa8c <_GPSDriver_parseTime+0x18>
		return GPSDriver_Status_NMEASentenceError;
 800fa88:	2307      	movs	r3, #7
 800fa8a:	e0cb      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}

	uint8_t tmp;
	uint16_t dotIndex;

	if (decChar2Uint8(*pSentence, &tmp) != StringOperations_Status_OK){
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	f107 0212 	add.w	r2, r7, #18
 800fa94:	4611      	mov	r1, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe f81c 	bl	800dad4 <decChar2Uint8>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d001      	beq.n	800faa6 <_GPSDriver_parseTime+0x32>
		return GPSDriver_Status_NMEASentenceError;
 800faa2:	2307      	movs	r3, #7
 800faa4:	e0be      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->hour	= tmp * 10;
 800faa6:	7cbb      	ldrb	r3, [r7, #18]
 800faa8:	461a      	mov	r2, r3
 800faaa:	0092      	lsls	r2, r2, #2
 800faac:	4413      	add	r3, r2
 800faae:	005b      	lsls	r3, r3, #1
 800fab0:	b2da      	uxtb	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	711a      	strb	r2, [r3, #4]

	if (decChar2Uint8(*(pSentence+1), &tmp) != StringOperations_Status_OK){
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3301      	adds	r3, #1
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	f107 0212 	add.w	r2, r7, #18
 800fac0:	4611      	mov	r1, r2
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7fe f806 	bl	800dad4 <decChar2Uint8>
 800fac8:	4603      	mov	r3, r0
 800faca:	2b00      	cmp	r3, #0
 800facc:	d001      	beq.n	800fad2 <_GPSDriver_parseTime+0x5e>
		return GPSDriver_Status_NMEASentenceError;
 800face:	2307      	movs	r3, #7
 800fad0:	e0a8      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->hour	+= tmp;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	791b      	ldrb	r3, [r3, #4]
 800fad6:	b2da      	uxtb	r2, r3
 800fad8:	7cbb      	ldrb	r3, [r7, #18]
 800fada:	4413      	add	r3, r2
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	711a      	strb	r2, [r3, #4]


	if (decChar2Uint8(*(pSentence+2), &tmp) != StringOperations_Status_OK){
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	3302      	adds	r3, #2
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	f107 0212 	add.w	r2, r7, #18
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7fd fff0 	bl	800dad4 <decChar2Uint8>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d001      	beq.n	800fafe <_GPSDriver_parseTime+0x8a>
		return GPSDriver_Status_NMEASentenceError;
 800fafa:	2307      	movs	r3, #7
 800fafc:	e092      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->minute	= tmp * 10;
 800fafe:	7cbb      	ldrb	r3, [r7, #18]
 800fb00:	461a      	mov	r2, r3
 800fb02:	0092      	lsls	r2, r2, #2
 800fb04:	4413      	add	r3, r2
 800fb06:	005b      	lsls	r3, r3, #1
 800fb08:	b2da      	uxtb	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	715a      	strb	r2, [r3, #5]

	if (decChar2Uint8(*(pSentence+3), &tmp) != StringOperations_Status_OK){
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3303      	adds	r3, #3
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f107 0212 	add.w	r2, r7, #18
 800fb18:	4611      	mov	r1, r2
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7fd ffda 	bl	800dad4 <decChar2Uint8>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d001      	beq.n	800fb2a <_GPSDriver_parseTime+0xb6>
		return GPSDriver_Status_NMEASentenceError;
 800fb26:	2307      	movs	r3, #7
 800fb28:	e07c      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->minute	+= tmp;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	795b      	ldrb	r3, [r3, #5]
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	7cbb      	ldrb	r3, [r7, #18]
 800fb32:	4413      	add	r3, r2
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	715a      	strb	r2, [r3, #5]


	if (decChar2Uint8(*(pSentence+4), &tmp) != StringOperations_Status_OK){
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	3304      	adds	r3, #4
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	f107 0212 	add.w	r2, r7, #18
 800fb44:	4611      	mov	r1, r2
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fd ffc4 	bl	800dad4 <decChar2Uint8>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <_GPSDriver_parseTime+0xe2>
		return GPSDriver_Status_NMEASentenceError;
 800fb52:	2307      	movs	r3, #7
 800fb54:	e066      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->second	= tmp * 10;
 800fb56:	7cbb      	ldrb	r3, [r7, #18]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	0092      	lsls	r2, r2, #2
 800fb5c:	4413      	add	r3, r2
 800fb5e:	005b      	lsls	r3, r3, #1
 800fb60:	b2da      	uxtb	r2, r3
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	719a      	strb	r2, [r3, #6]

	if (decChar2Uint8(*(pSentence+5), &tmp) != StringOperations_Status_OK){
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	3305      	adds	r3, #5
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	f107 0212 	add.w	r2, r7, #18
 800fb70:	4611      	mov	r1, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7fd ffae 	bl	800dad4 <decChar2Uint8>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d001      	beq.n	800fb82 <_GPSDriver_parseTime+0x10e>
		return GPSDriver_Status_NMEASentenceError;
 800fb7e:	2307      	movs	r3, #7
 800fb80:	e050      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}
	pRetDateTime->second	+= tmp;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	799b      	ldrb	r3, [r3, #6]
 800fb86:	b2da      	uxtb	r2, r3
 800fb88:	7cbb      	ldrb	r3, [r7, #18]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	719a      	strb	r2, [r3, #6]

	pRetDateTime->miliseconds	= 0;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	811a      	strh	r2, [r3, #8]
	StringOperations_Status_TypeDef strOperStat = findChar(pSentence, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &dotIndex);
 800fb98:	f107 0310 	add.w	r3, r7, #16
 800fb9c:	897a      	ldrh	r2, [r7, #10]
 800fb9e:	212e      	movs	r1, #46	; 0x2e
 800fba0:	68f8      	ldr	r0, [r7, #12]
 800fba2:	f7fd fec0 	bl	800d926 <findChar>
 800fba6:	4603      	mov	r3, r0
 800fba8:	74fb      	strb	r3, [r7, #19]
	if (strOperStat == StringOperations_Status_CharNotFoundError){
 800fbaa:	7cfb      	ldrb	r3, [r7, #19]
 800fbac:	2b03      	cmp	r3, #3
 800fbae:	d101      	bne.n	800fbb4 <_GPSDriver_parseTime+0x140>
		return GPSDriver_Status_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e037      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	} else if (strOperStat != StringOperations_Status_OK){
 800fbb4:	7cfb      	ldrb	r3, [r7, #19]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d001      	beq.n	800fbbe <_GPSDriver_parseTime+0x14a>
		return GPSDriver_Status_NMEASentenceError;
 800fbba:	2307      	movs	r3, #7
 800fbbc:	e032      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
	}

	uint16_t factor				= 100;
 800fbbe:	2364      	movs	r3, #100	; 0x64
 800fbc0:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i = dotIndex+1; i < length && factor > 0; i++){
 800fbc2:	8a3b      	ldrh	r3, [r7, #16]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	82bb      	strh	r3, [r7, #20]
 800fbc8:	e024      	b.n	800fc14 <_GPSDriver_parseTime+0x1a0>
		if (decChar2Uint8(*(pSentence+i), &tmp) != StringOperations_Status_OK){
 800fbca:	8abb      	ldrh	r3, [r7, #20]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	4413      	add	r3, r2
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	f107 0212 	add.w	r2, r7, #18
 800fbd6:	4611      	mov	r1, r2
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd ff7b 	bl	800dad4 <decChar2Uint8>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d001      	beq.n	800fbe8 <_GPSDriver_parseTime+0x174>
			return GPSDriver_Status_NMEASentenceError;
 800fbe4:	2307      	movs	r3, #7
 800fbe6:	e01d      	b.n	800fc24 <_GPSDriver_parseTime+0x1b0>
		}
		pRetDateTime->miliseconds += (factor * tmp);
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	891b      	ldrh	r3, [r3, #8]
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	7cbb      	ldrb	r3, [r7, #18]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	8af9      	ldrh	r1, [r7, #22]
 800fbf4:	fb11 f303 	smulbb	r3, r1, r3
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	4413      	add	r3, r2
 800fbfc:	b29a      	uxth	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	811a      	strh	r2, [r3, #8]
		factor /= 10;
 800fc02:	8afb      	ldrh	r3, [r7, #22]
 800fc04:	4a09      	ldr	r2, [pc, #36]	; (800fc2c <_GPSDriver_parseTime+0x1b8>)
 800fc06:	fba2 2303 	umull	r2, r3, r2, r3
 800fc0a:	08db      	lsrs	r3, r3, #3
 800fc0c:	82fb      	strh	r3, [r7, #22]
	for (uint16_t i = dotIndex+1; i < length && factor > 0; i++){
 800fc0e:	8abb      	ldrh	r3, [r7, #20]
 800fc10:	3301      	adds	r3, #1
 800fc12:	82bb      	strh	r3, [r7, #20]
 800fc14:	8aba      	ldrh	r2, [r7, #20]
 800fc16:	897b      	ldrh	r3, [r7, #10]
 800fc18:	429a      	cmp	r2, r3
 800fc1a:	d202      	bcs.n	800fc22 <_GPSDriver_parseTime+0x1ae>
 800fc1c:	8afb      	ldrh	r3, [r7, #22]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d1d3      	bne.n	800fbca <_GPSDriver_parseTime+0x156>
	}

	return GPSDriver_Status_OK;
 800fc22:	2300      	movs	r3, #0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	cccccccd 	.word	0xcccccccd

0800fc30 <_GPSDriver_parseDate>:

static GPSDriver_Status_TypeDef _GPSDriver_parseDate(uint8_t* pSentence, uint16_t length, volatile DateTime_TypeDef* pRetDateTime){
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b086      	sub	sp, #24
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	817b      	strh	r3, [r7, #10]

	if (length < 6){
 800fc3e:	897b      	ldrh	r3, [r7, #10]
 800fc40:	2b05      	cmp	r3, #5
 800fc42:	d801      	bhi.n	800fc48 <_GPSDriver_parseDate+0x18>
		return GPSDriver_Status_NMEASentenceError;
 800fc44:	2307      	movs	r3, #7
 800fc46:	e085      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}

	uint8_t tmp;

	if (decChar2Uint8(*pSentence, &tmp) != StringOperations_Status_OK){
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f107 0217 	add.w	r2, r7, #23
 800fc50:	4611      	mov	r1, r2
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fd ff3e 	bl	800dad4 <decChar2Uint8>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d001      	beq.n	800fc62 <_GPSDriver_parseDate+0x32>
		return GPSDriver_Status_NMEASentenceError;
 800fc5e:	2307      	movs	r3, #7
 800fc60:	e078      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->day		= tmp * 10;
 800fc62:	7dfb      	ldrb	r3, [r7, #23]
 800fc64:	461a      	mov	r2, r3
 800fc66:	0092      	lsls	r2, r2, #2
 800fc68:	4413      	add	r3, r2
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	b2da      	uxtb	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	70da      	strb	r2, [r3, #3]

	if (decChar2Uint8(*(pSentence+1), &tmp) != StringOperations_Status_OK){
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	3301      	adds	r3, #1
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	f107 0217 	add.w	r2, r7, #23
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fd ff28 	bl	800dad4 <decChar2Uint8>
 800fc84:	4603      	mov	r3, r0
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d001      	beq.n	800fc8e <_GPSDriver_parseDate+0x5e>
		return GPSDriver_Status_NMEASentenceError;
 800fc8a:	2307      	movs	r3, #7
 800fc8c:	e062      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->day		+= tmp;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	78db      	ldrb	r3, [r3, #3]
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	7dfb      	ldrb	r3, [r7, #23]
 800fc96:	4413      	add	r3, r2
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	70da      	strb	r2, [r3, #3]

	if (decChar2Uint8(*(pSentence+2), &tmp) != StringOperations_Status_OK){
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	3302      	adds	r3, #2
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f107 0217 	add.w	r2, r7, #23
 800fca8:	4611      	mov	r1, r2
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fd ff12 	bl	800dad4 <decChar2Uint8>
 800fcb0:	4603      	mov	r3, r0
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d001      	beq.n	800fcba <_GPSDriver_parseDate+0x8a>
		return GPSDriver_Status_NMEASentenceError;
 800fcb6:	2307      	movs	r3, #7
 800fcb8:	e04c      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->month	= tmp * 10;
 800fcba:	7dfb      	ldrb	r3, [r7, #23]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	0092      	lsls	r2, r2, #2
 800fcc0:	4413      	add	r3, r2
 800fcc2:	005b      	lsls	r3, r3, #1
 800fcc4:	b2da      	uxtb	r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	709a      	strb	r2, [r3, #2]

	if (decChar2Uint8(*(pSentence+3), &tmp) != StringOperations_Status_OK){
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	3303      	adds	r3, #3
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	f107 0217 	add.w	r2, r7, #23
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fd fefc 	bl	800dad4 <decChar2Uint8>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d001      	beq.n	800fce6 <_GPSDriver_parseDate+0xb6>
		return GPSDriver_Status_NMEASentenceError;
 800fce2:	2307      	movs	r3, #7
 800fce4:	e036      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->month	+= tmp;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	789b      	ldrb	r3, [r3, #2]
 800fcea:	b2da      	uxtb	r2, r3
 800fcec:	7dfb      	ldrb	r3, [r7, #23]
 800fcee:	4413      	add	r3, r2
 800fcf0:	b2da      	uxtb	r2, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	709a      	strb	r2, [r3, #2]

	if (decChar2Uint8(*(pSentence+4), &tmp) != StringOperations_Status_OK){
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	3304      	adds	r3, #4
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	f107 0217 	add.w	r2, r7, #23
 800fd00:	4611      	mov	r1, r2
 800fd02:	4618      	mov	r0, r3
 800fd04:	f7fd fee6 	bl	800dad4 <decChar2Uint8>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d001      	beq.n	800fd12 <_GPSDriver_parseDate+0xe2>
		return GPSDriver_Status_NMEASentenceError;
 800fd0e:	2307      	movs	r3, #7
 800fd10:	e020      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->year	= tmp * 10;
 800fd12:	7dfb      	ldrb	r3, [r7, #23]
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	461a      	mov	r2, r3
 800fd18:	0092      	lsls	r2, r2, #2
 800fd1a:	4413      	add	r3, r2
 800fd1c:	005b      	lsls	r3, r3, #1
 800fd1e:	b29a      	uxth	r2, r3
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	801a      	strh	r2, [r3, #0]

	if (decChar2Uint8(*(pSentence+5), &tmp) != StringOperations_Status_OK){
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	3305      	adds	r3, #5
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	f107 0217 	add.w	r2, r7, #23
 800fd2e:	4611      	mov	r1, r2
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fd fecf 	bl	800dad4 <decChar2Uint8>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d001      	beq.n	800fd40 <_GPSDriver_parseDate+0x110>
		return GPSDriver_Status_NMEASentenceError;
 800fd3c:	2307      	movs	r3, #7
 800fd3e:	e009      	b.n	800fd54 <_GPSDriver_parseDate+0x124>
	}
	pRetDateTime->year	+= tmp;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	881b      	ldrh	r3, [r3, #0]
 800fd44:	b29a      	uxth	r2, r3
 800fd46:	7dfb      	ldrb	r3, [r7, #23]
 800fd48:	b29b      	uxth	r3, r3
 800fd4a:	4413      	add	r3, r2
 800fd4c:	b29a      	uxth	r2, r3
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	801a      	strh	r2, [r3, #0]

	return GPSDriver_Status_OK;
 800fd52:	2300      	movs	r3, #0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3718      	adds	r7, #24
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <_GPSDriver_parseLatitude>:

static GPSDriver_Status_TypeDef _GPSDriver_parseLatitude(uint8_t* pSentence, uint16_t length, volatile GPSData_TypeDef* pRetGPSData){
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b088      	sub	sp, #32
 800fd60:	af02      	add	r7, sp, #8
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	460b      	mov	r3, r1
 800fd66:	607a      	str	r2, [r7, #4]
 800fd68:	817b      	strh	r3, [r7, #10]

	uint16_t tmp;

	if (findChar(pSentence, GPS_NMEA_DATA_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800fd6a:	f107 0312 	add.w	r3, r7, #18
 800fd6e:	897a      	ldrh	r2, [r7, #10]
 800fd70:	212c      	movs	r1, #44	; 0x2c
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7fd fdd7 	bl	800d926 <findChar>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <_GPSDriver_parseLatitude+0x26>
		return GPSDriver_Status_NMEASentenceError;
 800fd7e:	2307      	movs	r3, #7
 800fd80:	e052      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
	}
	uint16_t commaIndex = tmp;
 800fd82:	8a7b      	ldrh	r3, [r7, #18]
 800fd84:	82fb      	strh	r3, [r7, #22]

	if (findChar(pSentence, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800fd86:	f107 0312 	add.w	r3, r7, #18
 800fd8a:	897a      	ldrh	r2, [r7, #10]
 800fd8c:	212e      	movs	r1, #46	; 0x2e
 800fd8e:	68f8      	ldr	r0, [r7, #12]
 800fd90:	f7fd fdc9 	bl	800d926 <findChar>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d001      	beq.n	800fd9e <_GPSDriver_parseLatitude+0x42>
		return GPSDriver_Status_NMEASentenceError;
 800fd9a:	2307      	movs	r3, #7
 800fd9c:	e044      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
	}
	uint16_t dotIndex = tmp;
 800fd9e:	8a7b      	ldrh	r3, [r7, #18]
 800fda0:	82bb      	strh	r3, [r7, #20]

	if (commaIndex == length){
 800fda2:	8afa      	ldrh	r2, [r7, #22]
 800fda4:	897b      	ldrh	r3, [r7, #10]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d101      	bne.n	800fdae <_GPSDriver_parseLatitude+0x52>
		return GPSDriver_Status_NMEASentenceError;
 800fdaa:	2307      	movs	r3, #7
 800fdac:	e03c      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
	}

	if (dotIndex == length || dotIndex > commaIndex){
 800fdae:	8aba      	ldrh	r2, [r7, #20]
 800fdb0:	897b      	ldrh	r3, [r7, #10]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d003      	beq.n	800fdbe <_GPSDriver_parseLatitude+0x62>
 800fdb6:	8aba      	ldrh	r2, [r7, #20]
 800fdb8:	8afb      	ldrh	r3, [r7, #22]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d901      	bls.n	800fdc2 <_GPSDriver_parseLatitude+0x66>
		return GPSDriver_Status_NMEASentenceError;
 800fdbe:	2307      	movs	r3, #7
 800fdc0:	e032      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
	}

	if (*(pSentence + commaIndex + 1) == 'N'){
 800fdc2:	8afb      	ldrh	r3, [r7, #22]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	68fa      	ldr	r2, [r7, #12]
 800fdc8:	4413      	add	r3, r2
 800fdca:	781b      	ldrb	r3, [r3, #0]
 800fdcc:	2b4e      	cmp	r3, #78	; 0x4e
 800fdce:	d10d      	bne.n	800fdec <_GPSDriver_parseLatitude+0x90>
		 if (stringToFixedPoint(pSentence, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&pRetGPSData->latitude) != StringOperations_Status_OK){
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	3318      	adds	r3, #24
 800fdd4:	8af9      	ldrh	r1, [r7, #22]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	230c      	movs	r3, #12
 800fdda:	222e      	movs	r2, #46	; 0x2e
 800fddc:	68f8      	ldr	r0, [r7, #12]
 800fdde:	f7fd fdff 	bl	800d9e0 <stringToFixedPoint>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d01e      	beq.n	800fe26 <_GPSDriver_parseLatitude+0xca>
			return GPSDriver_Status_NMEASentenceError;
 800fde8:	2307      	movs	r3, #7
 800fdea:	e01d      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
		 }
	} else if (*(pSentence + commaIndex + 1) == 'S'){
 800fdec:	8afb      	ldrh	r3, [r7, #22]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	4413      	add	r3, r2
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	2b53      	cmp	r3, #83	; 0x53
 800fdf8:	d113      	bne.n	800fe22 <_GPSDriver_parseLatitude+0xc6>
		if (stringToFixedPoint(pSentence, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&pRetGPSData->latitude) != StringOperations_Status_OK){
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	3318      	adds	r3, #24
 800fdfe:	8af9      	ldrh	r1, [r7, #22]
 800fe00:	9300      	str	r3, [sp, #0]
 800fe02:	230c      	movs	r3, #12
 800fe04:	222e      	movs	r2, #46	; 0x2e
 800fe06:	68f8      	ldr	r0, [r7, #12]
 800fe08:	f7fd fdea 	bl	800d9e0 <stringToFixedPoint>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <_GPSDriver_parseLatitude+0xba>
			return GPSDriver_Status_NMEASentenceError;
 800fe12:	2307      	movs	r3, #7
 800fe14:	e008      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
		}
		pRetGPSData->latitude.integer *= (-1);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	699b      	ldr	r3, [r3, #24]
 800fe1a:	425a      	negs	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	619a      	str	r2, [r3, #24]
 800fe20:	e001      	b.n	800fe26 <_GPSDriver_parseLatitude+0xca>
	} else {
		return GPSDriver_Status_NMEASentenceError;
 800fe22:	2307      	movs	r3, #7
 800fe24:	e000      	b.n	800fe28 <_GPSDriver_parseLatitude+0xcc>
	}

	return GPSDriver_Status_OK;
 800fe26:	2300      	movs	r3, #0
}
 800fe28:	4618      	mov	r0, r3
 800fe2a:	3718      	adds	r7, #24
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	bd80      	pop	{r7, pc}

0800fe30 <_GPSDriver_parseLongitude>:

static GPSDriver_Status_TypeDef _GPSDriver_parseLongitude(uint8_t* pSentence, uint16_t length, volatile GPSData_TypeDef* pRetGPSData){
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b088      	sub	sp, #32
 800fe34:	af02      	add	r7, sp, #8
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	607a      	str	r2, [r7, #4]
 800fe3c:	817b      	strh	r3, [r7, #10]

	uint16_t tmp;

	if (findChar(pSentence, GPS_NMEA_DATA_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800fe3e:	f107 0312 	add.w	r3, r7, #18
 800fe42:	897a      	ldrh	r2, [r7, #10]
 800fe44:	212c      	movs	r1, #44	; 0x2c
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7fd fd6d 	bl	800d926 <findChar>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <_GPSDriver_parseLongitude+0x26>
		return GPSDriver_Status_NMEASentenceError;
 800fe52:	2307      	movs	r3, #7
 800fe54:	e052      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
	}
	uint16_t commaIndex = tmp;
 800fe56:	8a7b      	ldrh	r3, [r7, #18]
 800fe58:	82fb      	strh	r3, [r7, #22]

	if (findChar(pSentence, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800fe5a:	f107 0312 	add.w	r3, r7, #18
 800fe5e:	897a      	ldrh	r2, [r7, #10]
 800fe60:	212e      	movs	r1, #46	; 0x2e
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7fd fd5f 	bl	800d926 <findChar>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d001      	beq.n	800fe72 <_GPSDriver_parseLongitude+0x42>
		return GPSDriver_Status_NMEASentenceError;
 800fe6e:	2307      	movs	r3, #7
 800fe70:	e044      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
	}
	uint16_t dotIndex = tmp;
 800fe72:	8a7b      	ldrh	r3, [r7, #18]
 800fe74:	82bb      	strh	r3, [r7, #20]

	if (commaIndex == length){
 800fe76:	8afa      	ldrh	r2, [r7, #22]
 800fe78:	897b      	ldrh	r3, [r7, #10]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d101      	bne.n	800fe82 <_GPSDriver_parseLongitude+0x52>
		return GPSDriver_Status_NMEASentenceError;
 800fe7e:	2307      	movs	r3, #7
 800fe80:	e03c      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
	}

	if (dotIndex == length || dotIndex > commaIndex){
 800fe82:	8aba      	ldrh	r2, [r7, #20]
 800fe84:	897b      	ldrh	r3, [r7, #10]
 800fe86:	429a      	cmp	r2, r3
 800fe88:	d003      	beq.n	800fe92 <_GPSDriver_parseLongitude+0x62>
 800fe8a:	8aba      	ldrh	r2, [r7, #20]
 800fe8c:	8afb      	ldrh	r3, [r7, #22]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d901      	bls.n	800fe96 <_GPSDriver_parseLongitude+0x66>
		return GPSDriver_Status_NMEASentenceError;
 800fe92:	2307      	movs	r3, #7
 800fe94:	e032      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
	}

	if (*(pSentence + commaIndex + 1) == 'E'){
 800fe96:	8afb      	ldrh	r3, [r7, #22]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	68fa      	ldr	r2, [r7, #12]
 800fe9c:	4413      	add	r3, r2
 800fe9e:	781b      	ldrb	r3, [r3, #0]
 800fea0:	2b45      	cmp	r3, #69	; 0x45
 800fea2:	d10d      	bne.n	800fec0 <_GPSDriver_parseLongitude+0x90>
		 if (stringToFixedPoint(pSentence, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&pRetGPSData->longitude) != StringOperations_Status_OK){
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	3310      	adds	r3, #16
 800fea8:	8af9      	ldrh	r1, [r7, #22]
 800feaa:	9300      	str	r3, [sp, #0]
 800feac:	230c      	movs	r3, #12
 800feae:	222e      	movs	r2, #46	; 0x2e
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f7fd fd95 	bl	800d9e0 <stringToFixedPoint>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d01e      	beq.n	800fefa <_GPSDriver_parseLongitude+0xca>
			return GPSDriver_Status_NMEASentenceError;
 800febc:	2307      	movs	r3, #7
 800febe:	e01d      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
		 }
	} else if (*(pSentence + commaIndex + 1) == 'W'){
 800fec0:	8afb      	ldrh	r3, [r7, #22]
 800fec2:	3301      	adds	r3, #1
 800fec4:	68fa      	ldr	r2, [r7, #12]
 800fec6:	4413      	add	r3, r2
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	2b57      	cmp	r3, #87	; 0x57
 800fecc:	d113      	bne.n	800fef6 <_GPSDriver_parseLongitude+0xc6>
		if (stringToFixedPoint(pSentence, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&pRetGPSData->longitude) != StringOperations_Status_OK){
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	3310      	adds	r3, #16
 800fed2:	8af9      	ldrh	r1, [r7, #22]
 800fed4:	9300      	str	r3, [sp, #0]
 800fed6:	230c      	movs	r3, #12
 800fed8:	222e      	movs	r2, #46	; 0x2e
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7fd fd80 	bl	800d9e0 <stringToFixedPoint>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d001      	beq.n	800feea <_GPSDriver_parseLongitude+0xba>
			return GPSDriver_Status_NMEASentenceError;
 800fee6:	2307      	movs	r3, #7
 800fee8:	e008      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
		}
		pRetGPSData->latitude.integer *= (-1);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	699b      	ldr	r3, [r3, #24]
 800feee:	425a      	negs	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	619a      	str	r2, [r3, #24]
 800fef4:	e001      	b.n	800fefa <_GPSDriver_parseLongitude+0xca>
	} else {
		return GPSDriver_Status_NMEASentenceError;
 800fef6:	2307      	movs	r3, #7
 800fef8:	e000      	b.n	800fefc <_GPSDriver_parseLongitude+0xcc>
	}

	return GPSDriver_Status_OK;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3718      	adds	r7, #24
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}

0800ff04 <_GPSDriver_parseFixedPoint>:

static GPSDriver_Status_TypeDef _GPSDriver_parseFixedPoint(uint8_t* pSentence, uint16_t length, volatile FixedPoint* pRetFixedPoint){
 800ff04:	b590      	push	{r4, r7, lr}
 800ff06:	b08f      	sub	sp, #60	; 0x3c
 800ff08:	af02      	add	r7, sp, #8
 800ff0a:	6178      	str	r0, [r7, #20]
 800ff0c:	460b      	mov	r3, r1
 800ff0e:	60fa      	str	r2, [r7, #12]
 800ff10:	827b      	strh	r3, [r7, #18]

	uint16_t tmp;

	if (findChar(pSentence, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800ff12:	f107 0326 	add.w	r3, r7, #38	; 0x26
 800ff16:	8a7a      	ldrh	r2, [r7, #18]
 800ff18:	212e      	movs	r1, #46	; 0x2e
 800ff1a:	6978      	ldr	r0, [r7, #20]
 800ff1c:	f7fd fd03 	bl	800d926 <findChar>
 800ff20:	4603      	mov	r3, r0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d001      	beq.n	800ff2a <_GPSDriver_parseFixedPoint+0x26>
		return GPSDriver_Status_NMEASentenceError;
 800ff26:	2307      	movs	r3, #7
 800ff28:	e054      	b.n	800ffd4 <_GPSDriver_parseFixedPoint+0xd0>
	}
	uint16_t dotIndex = tmp;
 800ff2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ff2c:	853b      	strh	r3, [r7, #40]	; 0x28

	if (dotIndex == length){
 800ff2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ff30:	8a7b      	ldrh	r3, [r7, #18]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d101      	bne.n	800ff3a <_GPSDriver_parseFixedPoint+0x36>
		return GPSDriver_Status_NMEASentenceError;
 800ff36:	2307      	movs	r3, #7
 800ff38:	e04c      	b.n	800ffd4 <_GPSDriver_parseFixedPoint+0xd0>
	}

	uint32_t decimalPart, fractionalNumerator, fractionalDenominator = 1;
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (string2UInt32(pSentence, dotIndex, &decimalPart) != StringOperations_Status_OK){ //< Number of satellites being tracked
 800ff3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	f107 0220 	add.w	r2, r7, #32
 800ff46:	4619      	mov	r1, r3
 800ff48:	6978      	ldr	r0, [r7, #20]
 800ff4a:	f7fd fde2 	bl	800db12 <string2UInt32>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d001      	beq.n	800ff58 <_GPSDriver_parseFixedPoint+0x54>
		return GPSDriver_Status_NMEASentenceError;
 800ff54:	2307      	movs	r3, #7
 800ff56:	e03d      	b.n	800ffd4 <_GPSDriver_parseFixedPoint+0xd0>
	}
	pSentence += dotIndex + sizeof(GPS_NMEA_DECIMAL_SEPARATOR_SIGN);
 800ff58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	4413      	add	r3, r2
 800ff60:	617b      	str	r3, [r7, #20]
	length -= dotIndex + sizeof(GPS_NMEA_DECIMAL_SEPARATOR_SIGN);
 800ff62:	8a7a      	ldrh	r2, [r7, #18]
 800ff64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ff66:	1ad3      	subs	r3, r2, r3
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	827b      	strh	r3, [r7, #18]
	if (string2UInt32(pSentence, length, &fractionalNumerator) != StringOperations_Status_OK){ //TODO czy sizeof tu dobrze zadziala?
 800ff6e:	8a7b      	ldrh	r3, [r7, #18]
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	f107 021c 	add.w	r2, r7, #28
 800ff76:	4619      	mov	r1, r3
 800ff78:	6978      	ldr	r0, [r7, #20]
 800ff7a:	f7fd fdca 	bl	800db12 <string2UInt32>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <_GPSDriver_parseFixedPoint+0x84>
		return GPSDriver_Status_NMEASentenceError;
 800ff84:	2307      	movs	r3, #7
 800ff86:	e025      	b.n	800ffd4 <_GPSDriver_parseFixedPoint+0xd0>
	}

	for (uint8_t i=0; i<length; i++){
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ff8e:	e00a      	b.n	800ffa6 <_GPSDriver_parseFixedPoint+0xa2>
		fractionalDenominator *= 10;
 800ff90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff92:	4613      	mov	r3, r2
 800ff94:	009b      	lsls	r3, r3, #2
 800ff96:	4413      	add	r3, r2
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t i=0; i<length; i++){
 800ff9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ffa6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	8a7a      	ldrh	r2, [r7, #18]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d8ee      	bhi.n	800ff90 <_GPSDriver_parseFixedPoint+0x8c>
	}

	*pRetFixedPoint = FixedPoint_constrDecimalFrac(decimalPart, fractionalNumerator, fractionalDenominator, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS);
 800ffb2:	6a3b      	ldr	r3, [r7, #32]
 800ffb4:	4619      	mov	r1, r3
 800ffb6:	69fa      	ldr	r2, [r7, #28]
 800ffb8:	68fc      	ldr	r4, [r7, #12]
 800ffba:	4638      	mov	r0, r7
 800ffbc:	230c      	movs	r3, #12
 800ffbe:	9300      	str	r3, [sp, #0]
 800ffc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffc2:	f7fd f91f 	bl	800d204 <FixedPoint_constrDecimalFrac>
 800ffc6:	4622      	mov	r2, r4
 800ffc8:	463b      	mov	r3, r7
 800ffca:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ffce:	e882 0003 	stmia.w	r2, {r0, r1}

	return GPSDriver_Status_OK;
 800ffd2:	2300      	movs	r3, #0
}
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3734      	adds	r7, #52	; 0x34
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd90      	pop	{r4, r7, pc}

0800ffdc <_GPSDriver_handleGNGGASentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGNGGASentence(volatile Ublox8MGPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* pNmeaSentenceString){
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b088      	sub	sp, #32
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	77fb      	strb	r3, [r7, #31]
	uint16_t					tmp_u16;
	uint32_t					tmp_u32;

	if ((ret = _GPSDriver_checkNMEAChecksum(pNmeaSentenceString->sentenceString)) != GPSDriver_Status_OK){
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	3306      	adds	r3, #6
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7ff fb1d 	bl	800f62e <_GPSDriver_checkNMEAChecksum>
 800fff4:	4603      	mov	r3, r0
 800fff6:	77fb      	strb	r3, [r7, #31]
 800fff8:	7ffb      	ldrb	r3, [r7, #31]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d001      	beq.n	8010002 <_GPSDriver_handleGNGGASentence+0x26>
		return ret;
 800fffe:	7ffb      	ldrb	r3, [r7, #31]
 8010000:	e14d      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}

	uint32_t	tmp1 = sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010002:	2301      	movs	r3, #1
 8010004:	61bb      	str	r3, [r7, #24]
	uint32_t	tmp2 = strlen(GPS_NMEA_GPGGA_PREFIX);
 8010006:	2306      	movs	r3, #6
 8010008:	617b      	str	r3, [r7, #20]
	uint8_t*					it = pNmeaSentenceString->sentenceString + tmp2 + tmp1;
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	1d9a      	adds	r2, r3, #6
 801000e:	6979      	ldr	r1, [r7, #20]
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	440b      	add	r3, r1
 8010014:	4413      	add	r3, r2
 8010016:	613b      	str	r3, [r7, #16]

	//< ----- Parse fix time ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	3306      	adds	r3, #6
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	8892      	ldrh	r2, [r2, #4]
 8010020:	4413      	add	r3, r2
 8010022:	461a      	mov	r2, r3
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	b29a      	uxth	r2, r3
 801002a:	f107 030e 	add.w	r3, r7, #14
 801002e:	212c      	movs	r1, #44	; 0x2c
 8010030:	6938      	ldr	r0, [r7, #16]
 8010032:	f7fd fc78 	bl	800d926 <findChar>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d001      	beq.n	8010040 <_GPSDriver_handleGNGGASentence+0x64>
		return GPSDriver_Status_NMEASentenceError;
 801003c:	2307      	movs	r3, #7
 801003e:	e12e      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if ((ret = _GPSDriver_parseTime(it, tmp_u16, &pSelf->partialGPSData.gpsDateTime)) != GPSDriver_Status_OK){
 8010040:	89f9      	ldrh	r1, [r7, #14]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3330      	adds	r3, #48	; 0x30
 8010046:	461a      	mov	r2, r3
 8010048:	6938      	ldr	r0, [r7, #16]
 801004a:	f7ff fd13 	bl	800fa74 <_GPSDriver_parseTime>
 801004e:	4603      	mov	r3, r0
 8010050:	77fb      	strb	r3, [r7, #31]
 8010052:	7ffb      	ldrb	r3, [r7, #31]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d001      	beq.n	801005c <_GPSDriver_handleGNGGASentence+0x80>
		return ret;
 8010058:	7ffb      	ldrb	r3, [r7, #31]
 801005a:	e120      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 801005c:	89fb      	ldrh	r3, [r7, #14]
 801005e:	3301      	adds	r3, #1
 8010060:	693a      	ldr	r2, [r7, #16]
 8010062:	4413      	add	r3, r2
 8010064:	613b      	str	r3, [r7, #16]

	//< ----- Parse latitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	3306      	adds	r3, #6
 801006a:	683a      	ldr	r2, [r7, #0]
 801006c:	8892      	ldrh	r2, [r2, #4]
 801006e:	4413      	add	r3, r2
 8010070:	461a      	mov	r2, r3
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	1ad3      	subs	r3, r2, r3
 8010076:	b29a      	uxth	r2, r3
 8010078:	f107 030e 	add.w	r3, r7, #14
 801007c:	212c      	movs	r1, #44	; 0x2c
 801007e:	6938      	ldr	r0, [r7, #16]
 8010080:	f7fd fc51 	bl	800d926 <findChar>
 8010084:	4603      	mov	r3, r0
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <_GPSDriver_handleGNGGASentence+0xb2>
		return GPSDriver_Status_NMEASentenceError;
 801008a:	2307      	movs	r3, #7
 801008c:	e107      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if ((ret = _GPSDriver_parseLatitude(it, tmp_u16 + 2/*comma and N/S*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 801008e:	89fb      	ldrh	r3, [r7, #14]
 8010090:	3302      	adds	r3, #2
 8010092:	b299      	uxth	r1, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	332c      	adds	r3, #44	; 0x2c
 8010098:	461a      	mov	r2, r3
 801009a:	6938      	ldr	r0, [r7, #16]
 801009c:	f7ff fe5e 	bl	800fd5c <_GPSDriver_parseLatitude>
 80100a0:	4603      	mov	r3, r0
 80100a2:	77fb      	strb	r3, [r7, #31]
 80100a4:	7ffb      	ldrb	r3, [r7, #31]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <_GPSDriver_handleGNGGASentence+0xd2>
		return ret;
 80100aa:	7ffb      	ldrb	r3, [r7, #31]
 80100ac:	e0f7      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}

	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80100ae:	89fb      	ldrh	r3, [r7, #14]
 80100b0:	3301      	adds	r3, #1
 80100b2:	693a      	ldr	r2, [r7, #16]
 80100b4:	4413      	add	r3, r2
 80100b6:	613b      	str	r3, [r7, #16]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	3306      	adds	r3, #6
 80100bc:	683a      	ldr	r2, [r7, #0]
 80100be:	8892      	ldrh	r2, [r2, #4]
 80100c0:	4413      	add	r3, r2
 80100c2:	461a      	mov	r2, r3
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	f107 030e 	add.w	r3, r7, #14
 80100ce:	212c      	movs	r1, #44	; 0x2c
 80100d0:	6938      	ldr	r0, [r7, #16]
 80100d2:	f7fd fc28 	bl	800d926 <findChar>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <_GPSDriver_handleGNGGASentence+0x104>
		return GPSDriver_Status_NMEASentenceError;
 80100dc:	2307      	movs	r3, #7
 80100de:	e0de      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< N/S and comma
 80100e0:	89fb      	ldrh	r3, [r7, #14]
 80100e2:	3301      	adds	r3, #1
 80100e4:	693a      	ldr	r2, [r7, #16]
 80100e6:	4413      	add	r3, r2
 80100e8:	613b      	str	r3, [r7, #16]

	//< ----- Parse longitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	3306      	adds	r3, #6
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	8892      	ldrh	r2, [r2, #4]
 80100f2:	4413      	add	r3, r2
 80100f4:	461a      	mov	r2, r3
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	f107 030e 	add.w	r3, r7, #14
 8010100:	212c      	movs	r1, #44	; 0x2c
 8010102:	6938      	ldr	r0, [r7, #16]
 8010104:	f7fd fc0f 	bl	800d926 <findChar>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d001      	beq.n	8010112 <_GPSDriver_handleGNGGASentence+0x136>
		return GPSDriver_Status_NMEASentenceError;
 801010e:	2307      	movs	r3, #7
 8010110:	e0c5      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if ((ret = _GPSDriver_parseLongitude(it, tmp_u16 + 2/*comma and E/W*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8010112:	89fb      	ldrh	r3, [r7, #14]
 8010114:	3302      	adds	r3, #2
 8010116:	b299      	uxth	r1, r3
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	332c      	adds	r3, #44	; 0x2c
 801011c:	461a      	mov	r2, r3
 801011e:	6938      	ldr	r0, [r7, #16]
 8010120:	f7ff fe86 	bl	800fe30 <_GPSDriver_parseLongitude>
 8010124:	4603      	mov	r3, r0
 8010126:	77fb      	strb	r3, [r7, #31]
 8010128:	7ffb      	ldrb	r3, [r7, #31]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d001      	beq.n	8010132 <_GPSDriver_handleGNGGASentence+0x156>
		return ret;
 801012e:	7ffb      	ldrb	r3, [r7, #31]
 8010130:	e0b5      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}

	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010132:	89fb      	ldrh	r3, [r7, #14]
 8010134:	3301      	adds	r3, #1
 8010136:	693a      	ldr	r2, [r7, #16]
 8010138:	4413      	add	r3, r2
 801013a:	613b      	str	r3, [r7, #16]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	3306      	adds	r3, #6
 8010140:	683a      	ldr	r2, [r7, #0]
 8010142:	8892      	ldrh	r2, [r2, #4]
 8010144:	4413      	add	r3, r2
 8010146:	461a      	mov	r2, r3
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	b29a      	uxth	r2, r3
 801014e:	f107 030e 	add.w	r3, r7, #14
 8010152:	212c      	movs	r1, #44	; 0x2c
 8010154:	6938      	ldr	r0, [r7, #16]
 8010156:	f7fd fbe6 	bl	800d926 <findChar>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d001      	beq.n	8010164 <_GPSDriver_handleGNGGASentence+0x188>
		return GPSDriver_Status_NMEASentenceError;
 8010160:	2307      	movs	r3, #7
 8010162:	e09c      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< comma and E/W
 8010164:	89fb      	ldrh	r3, [r7, #14]
 8010166:	3301      	adds	r3, #1
 8010168:	693a      	ldr	r2, [r7, #16]
 801016a:	4413      	add	r3, r2
 801016c:	613b      	str	r3, [r7, #16]

	//< ----- Fix quality ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	3306      	adds	r3, #6
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	8892      	ldrh	r2, [r2, #4]
 8010176:	4413      	add	r3, r2
 8010178:	461a      	mov	r2, r3
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	b29a      	uxth	r2, r3
 8010180:	f107 030e 	add.w	r3, r7, #14
 8010184:	212c      	movs	r1, #44	; 0x2c
 8010186:	6938      	ldr	r0, [r7, #16]
 8010188:	f7fd fbcd 	bl	800d926 <findChar>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d001      	beq.n	8010196 <_GPSDriver_handleGNGGASentence+0x1ba>
		return GPSDriver_Status_NMEASentenceError;
 8010192:	2307      	movs	r3, #7
 8010194:	e083      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< ignore fix quality
 8010196:	89fb      	ldrh	r3, [r7, #14]
 8010198:	3301      	adds	r3, #1
 801019a:	693a      	ldr	r2, [r7, #16]
 801019c:	4413      	add	r3, r2
 801019e:	613b      	str	r3, [r7, #16]

	//< ----- Parse number of satellites being tracked ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	3306      	adds	r3, #6
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	8892      	ldrh	r2, [r2, #4]
 80101a8:	4413      	add	r3, r2
 80101aa:	461a      	mov	r2, r3
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	b29a      	uxth	r2, r3
 80101b2:	f107 030e 	add.w	r3, r7, #14
 80101b6:	212c      	movs	r1, #44	; 0x2c
 80101b8:	6938      	ldr	r0, [r7, #16]
 80101ba:	f7fd fbb4 	bl	800d926 <findChar>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <_GPSDriver_handleGNGGASentence+0x1ec>
		return GPSDriver_Status_NMEASentenceError;
 80101c4:	2307      	movs	r3, #7
 80101c6:	e06a      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if (string2UInt32(it, tmp_u16, &tmp_u32) != StringOperations_Status_OK){ //< Number of satellites being tracked
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	f107 0208 	add.w	r2, r7, #8
 80101d0:	4619      	mov	r1, r3
 80101d2:	6938      	ldr	r0, [r7, #16]
 80101d4:	f7fd fc9d 	bl	800db12 <string2UInt32>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d001      	beq.n	80101e2 <_GPSDriver_handleGNGGASentence+0x206>
		return GPSDriver_Status_NMEASentenceError;
 80101de:	2307      	movs	r3, #7
 80101e0:	e05d      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if (tmp_u32 > 0xFF){
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	2bff      	cmp	r3, #255	; 0xff
 80101e6:	d901      	bls.n	80101ec <_GPSDriver_handleGNGGASentence+0x210>
		return GPSDriver_Status_NMEASentenceError;
 80101e8:	2307      	movs	r3, #7
 80101ea:	e058      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	} else {
		pSelf->partialGPSData.nSatellites = (uint8_t) tmp_u32;
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	b2da      	uxtb	r2, r3
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80101f6:	89fb      	ldrh	r3, [r7, #14]
 80101f8:	3301      	adds	r3, #1
 80101fa:	693a      	ldr	r2, [r7, #16]
 80101fc:	4413      	add	r3, r2
 80101fe:	613b      	str	r3, [r7, #16]

	//< ----- Parse horizontal dilution of position ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	3306      	adds	r3, #6
 8010204:	683a      	ldr	r2, [r7, #0]
 8010206:	8892      	ldrh	r2, [r2, #4]
 8010208:	4413      	add	r3, r2
 801020a:	461a      	mov	r2, r3
 801020c:	693b      	ldr	r3, [r7, #16]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	b29a      	uxth	r2, r3
 8010212:	f107 030e 	add.w	r3, r7, #14
 8010216:	212c      	movs	r1, #44	; 0x2c
 8010218:	6938      	ldr	r0, [r7, #16]
 801021a:	f7fd fb84 	bl	800d926 <findChar>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d001      	beq.n	8010228 <_GPSDriver_handleGNGGASentence+0x24c>
		return GPSDriver_Status_NMEASentenceError;
 8010224:	2307      	movs	r3, #7
 8010226:	e03a      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.horizontalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 8010228:	89f9      	ldrh	r1, [r7, #14]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	336c      	adds	r3, #108	; 0x6c
 801022e:	461a      	mov	r2, r3
 8010230:	6938      	ldr	r0, [r7, #16]
 8010232:	f7ff fe67 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 8010236:	4603      	mov	r3, r0
 8010238:	77fb      	strb	r3, [r7, #31]
 801023a:	7ffb      	ldrb	r3, [r7, #31]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d001      	beq.n	8010244 <_GPSDriver_handleGNGGASentence+0x268>
		return ret;
 8010240:	7ffb      	ldrb	r3, [r7, #31]
 8010242:	e02c      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010244:	89fb      	ldrh	r3, [r7, #14]
 8010246:	3301      	adds	r3, #1
 8010248:	693a      	ldr	r2, [r7, #16]
 801024a:	4413      	add	r3, r2
 801024c:	613b      	str	r3, [r7, #16]

	//< ----- Parse altitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	3306      	adds	r3, #6
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	8892      	ldrh	r2, [r2, #4]
 8010256:	4413      	add	r3, r2
 8010258:	461a      	mov	r2, r3
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	1ad3      	subs	r3, r2, r3
 801025e:	b29a      	uxth	r2, r3
 8010260:	f107 030e 	add.w	r3, r7, #14
 8010264:	212c      	movs	r1, #44	; 0x2c
 8010266:	6938      	ldr	r0, [r7, #16]
 8010268:	f7fd fb5d 	bl	800d926 <findChar>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <_GPSDriver_handleGNGGASentence+0x29a>
		return GPSDriver_Status_NMEASentenceError;
 8010272:	2307      	movs	r3, #7
 8010274:	e013      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.altitude)) != GPSDriver_Status_OK){ //< Altitude, Meters, above mean sea level
 8010276:	89f9      	ldrh	r1, [r7, #14]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3350      	adds	r3, #80	; 0x50
 801027c:	461a      	mov	r2, r3
 801027e:	6938      	ldr	r0, [r7, #16]
 8010280:	f7ff fe40 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 8010284:	4603      	mov	r3, r0
 8010286:	77fb      	strb	r3, [r7, #31]
 8010288:	7ffb      	ldrb	r3, [r7, #31]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d001      	beq.n	8010292 <_GPSDriver_handleGNGGASentence+0x2b6>
		return ret;
 801028e:	7ffb      	ldrb	r3, [r7, #31]
 8010290:	e005      	b.n	801029e <_GPSDriver_handleGNGGASentence+0x2c2>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010292:	89fb      	ldrh	r3, [r7, #14]
 8010294:	3301      	adds	r3, #1
 8010296:	693a      	ldr	r2, [r7, #16]
 8010298:	4413      	add	r3, r2
 801029a:	613b      	str	r3, [r7, #16]

	// Rest of fields is ignored
	return ret;
 801029c:	7ffb      	ldrb	r3, [r7, #31]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <_GPSDriver_handleGNGSASentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGNGSASentence(volatile Ublox8MGPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* pNmeaSentenceString){
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b086      	sub	sp, #24
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	6039      	str	r1, [r7, #0]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 80102b0:	2300      	movs	r3, #0
 80102b2:	74bb      	strb	r3, [r7, #18]
	uint16_t					tmp_u16;
	uint32_t					tmp_u32;

	if ((ret = _GPSDriver_checkNMEAChecksum(pNmeaSentenceString->sentenceString)) != GPSDriver_Status_OK){
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	3306      	adds	r3, #6
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff f9b8 	bl	800f62e <_GPSDriver_checkNMEAChecksum>
 80102be:	4603      	mov	r3, r0
 80102c0:	74bb      	strb	r3, [r7, #18]
 80102c2:	7cbb      	ldrb	r3, [r7, #18]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d001      	beq.n	80102cc <_GPSDriver_handleGNGSASentence+0x26>
		return ret;
 80102c8:	7cbb      	ldrb	r3, [r7, #18]
 80102ca:	e0cb      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}

	uint8_t*					it = pNmeaSentenceString->sentenceString + strlen(GPS_NMEA_GPGGA_PREFIX) + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	3306      	adds	r3, #6
 80102d0:	3307      	adds	r3, #7
 80102d2:	617b      	str	r3, [r7, #20]

	//< ----- Auto selection of 2D or 3D fix ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	3306      	adds	r3, #6
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	8892      	ldrh	r2, [r2, #4]
 80102dc:	4413      	add	r3, r2
 80102de:	461a      	mov	r2, r3
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	1ad3      	subs	r3, r2, r3
 80102e4:	b29a      	uxth	r2, r3
 80102e6:	f107 0310 	add.w	r3, r7, #16
 80102ea:	212c      	movs	r1, #44	; 0x2c
 80102ec:	6978      	ldr	r0, [r7, #20]
 80102ee:	f7fd fb1a 	bl	800d926 <findChar>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <_GPSDriver_handleGNGSASentence+0x56>
		return GPSDriver_Status_NMEASentenceError;
 80102f8:	2307      	movs	r3, #7
 80102fa:	e0b3      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< Ignore auto selection of 2D or 3D fix
 80102fc:	8a3b      	ldrh	r3, [r7, #16]
 80102fe:	3301      	adds	r3, #1
 8010300:	697a      	ldr	r2, [r7, #20]
 8010302:	4413      	add	r3, r2
 8010304:	617b      	str	r3, [r7, #20]

	//< ----- Parse fix type ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010306:	683b      	ldr	r3, [r7, #0]
 8010308:	3306      	adds	r3, #6
 801030a:	683a      	ldr	r2, [r7, #0]
 801030c:	8892      	ldrh	r2, [r2, #4]
 801030e:	4413      	add	r3, r2
 8010310:	461a      	mov	r2, r3
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	b29a      	uxth	r2, r3
 8010318:	f107 0310 	add.w	r3, r7, #16
 801031c:	212c      	movs	r1, #44	; 0x2c
 801031e:	6978      	ldr	r0, [r7, #20]
 8010320:	f7fd fb01 	bl	800d926 <findChar>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d001      	beq.n	801032e <_GPSDriver_handleGNGSASentence+0x88>
		return GPSDriver_Status_NMEASentenceError;
 801032a:	2307      	movs	r3, #7
 801032c:	e09a      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	if (string2UInt32(it, tmp_u16, &tmp_u32) != StringOperations_Status_OK){ //< Number of satellites being tracked
 801032e:	8a3b      	ldrh	r3, [r7, #16]
 8010330:	b2db      	uxtb	r3, r3
 8010332:	f107 020c 	add.w	r2, r7, #12
 8010336:	4619      	mov	r1, r3
 8010338:	6978      	ldr	r0, [r7, #20]
 801033a:	f7fd fbea 	bl	800db12 <string2UInt32>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <_GPSDriver_handleGNGSASentence+0xa2>
		return GPSDriver_Status_NMEASentenceError;
 8010344:	2307      	movs	r3, #7
 8010346:	e08d      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}

	switch (tmp_u32){
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	2b02      	cmp	r3, #2
 801034c:	d008      	beq.n	8010360 <_GPSDriver_handleGNGSASentence+0xba>
 801034e:	2b03      	cmp	r3, #3
 8010350:	d00b      	beq.n	801036a <_GPSDriver_handleGNGSASentence+0xc4>
 8010352:	2b01      	cmp	r3, #1
 8010354:	d10e      	bne.n	8010374 <_GPSDriver_handleGNGSASentence+0xce>
	case 1:
		pSelf->partialGPSData.fixType = GPSFixType_NoFix;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2201      	movs	r2, #1
 801035a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		break;
 801035e:	e00b      	b.n	8010378 <_GPSDriver_handleGNGSASentence+0xd2>
	case 2:
		pSelf->partialGPSData.fixType = GPSFixType_2DFix;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2202      	movs	r2, #2
 8010364:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		break;
 8010368:	e006      	b.n	8010378 <_GPSDriver_handleGNGSASentence+0xd2>
	case 3:
		pSelf->partialGPSData.fixType = GPSFixType_3DFix;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2203      	movs	r2, #3
 801036e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
		break;
 8010372:	e001      	b.n	8010378 <_GPSDriver_handleGNGSASentence+0xd2>
	default:
		return GPSDriver_Status_NMEASentenceError;
 8010374:	2307      	movs	r3, #7
 8010376:	e075      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010378:	8a3b      	ldrh	r3, [r7, #16]
 801037a:	3301      	adds	r3, #1
 801037c:	697a      	ldr	r2, [r7, #20]
 801037e:	4413      	add	r3, r2
 8010380:	617b      	str	r3, [r7, #20]

	//< ----- Parse/ignore PRNs of satellites used for fix (space for 12) and PDOP (dilution of precision) ----- >//
	#define GPS_GPGSA_FIELDS_TO_IGNORE	13 //< PRNs of satellites used for fix (space for 12)  and PDOP (dilution of precision)
	for (uint8_t i=0; i<GPS_GPGSA_FIELDS_TO_IGNORE; i++){ //TODO mocno do sprawdzenia
 8010382:	2300      	movs	r3, #0
 8010384:	74fb      	strb	r3, [r7, #19]
 8010386:	e01b      	b.n	80103c0 <_GPSDriver_handleGNGSASentence+0x11a>
		if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	3306      	adds	r3, #6
 801038c:	683a      	ldr	r2, [r7, #0]
 801038e:	8892      	ldrh	r2, [r2, #4]
 8010390:	4413      	add	r3, r2
 8010392:	461a      	mov	r2, r3
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	1ad3      	subs	r3, r2, r3
 8010398:	b29a      	uxth	r2, r3
 801039a:	f107 0310 	add.w	r3, r7, #16
 801039e:	212c      	movs	r1, #44	; 0x2c
 80103a0:	6978      	ldr	r0, [r7, #20]
 80103a2:	f7fd fac0 	bl	800d926 <findChar>
 80103a6:	4603      	mov	r3, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d001      	beq.n	80103b0 <_GPSDriver_handleGNGSASentence+0x10a>
			return GPSDriver_Status_NMEASentenceError;
 80103ac:	2307      	movs	r3, #7
 80103ae:	e059      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
		}
		it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80103b0:	8a3b      	ldrh	r3, [r7, #16]
 80103b2:	3301      	adds	r3, #1
 80103b4:	697a      	ldr	r2, [r7, #20]
 80103b6:	4413      	add	r3, r2
 80103b8:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0; i<GPS_GPGSA_FIELDS_TO_IGNORE; i++){ //TODO mocno do sprawdzenia
 80103ba:	7cfb      	ldrb	r3, [r7, #19]
 80103bc:	3301      	adds	r3, #1
 80103be:	74fb      	strb	r3, [r7, #19]
 80103c0:	7cfb      	ldrb	r3, [r7, #19]
 80103c2:	2b0c      	cmp	r3, #12
 80103c4:	d9e0      	bls.n	8010388 <_GPSDriver_handleGNGSASentence+0xe2>
	}

	//< ----- Parse horizontal dilution of precision (HDOP) ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	3306      	adds	r3, #6
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	8892      	ldrh	r2, [r2, #4]
 80103ce:	4413      	add	r3, r2
 80103d0:	461a      	mov	r2, r3
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	1ad3      	subs	r3, r2, r3
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	f107 0310 	add.w	r3, r7, #16
 80103dc:	212c      	movs	r1, #44	; 0x2c
 80103de:	6978      	ldr	r0, [r7, #20]
 80103e0:	f7fd faa1 	bl	800d926 <findChar>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d001      	beq.n	80103ee <_GPSDriver_handleGNGSASentence+0x148>
		return GPSDriver_Status_NMEASentenceError;
 80103ea:	2307      	movs	r3, #7
 80103ec:	e03a      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.horizontalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 80103ee:	8a39      	ldrh	r1, [r7, #16]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	336c      	adds	r3, #108	; 0x6c
 80103f4:	461a      	mov	r2, r3
 80103f6:	6978      	ldr	r0, [r7, #20]
 80103f8:	f7ff fd84 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 80103fc:	4603      	mov	r3, r0
 80103fe:	74bb      	strb	r3, [r7, #18]
 8010400:	7cbb      	ldrb	r3, [r7, #18]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d001      	beq.n	801040a <_GPSDriver_handleGNGSASentence+0x164>
		return ret;
 8010406:	7cbb      	ldrb	r3, [r7, #18]
 8010408:	e02c      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 801040a:	8a3b      	ldrh	r3, [r7, #16]
 801040c:	3301      	adds	r3, #1
 801040e:	697a      	ldr	r2, [r7, #20]
 8010410:	4413      	add	r3, r2
 8010412:	617b      	str	r3, [r7, #20]

	//< ----- Parse Vertical dilution of precision (HDOP) ----- >//
	if (findChar(it, GPS_NMEA_CHECKSUM_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	3306      	adds	r3, #6
 8010418:	683a      	ldr	r2, [r7, #0]
 801041a:	8892      	ldrh	r2, [r2, #4]
 801041c:	4413      	add	r3, r2
 801041e:	461a      	mov	r2, r3
 8010420:	697b      	ldr	r3, [r7, #20]
 8010422:	1ad3      	subs	r3, r2, r3
 8010424:	b29a      	uxth	r2, r3
 8010426:	f107 0310 	add.w	r3, r7, #16
 801042a:	212a      	movs	r1, #42	; 0x2a
 801042c:	6978      	ldr	r0, [r7, #20]
 801042e:	f7fd fa7a 	bl	800d926 <findChar>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d001      	beq.n	801043c <_GPSDriver_handleGNGSASentence+0x196>
		return GPSDriver_Status_NMEASentenceError;
 8010438:	2307      	movs	r3, #7
 801043a:	e013      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.verticalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 801043c:	8a39      	ldrh	r1, [r7, #16]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	3374      	adds	r3, #116	; 0x74
 8010442:	461a      	mov	r2, r3
 8010444:	6978      	ldr	r0, [r7, #20]
 8010446:	f7ff fd5d 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 801044a:	4603      	mov	r3, r0
 801044c:	74bb      	strb	r3, [r7, #18]
 801044e:	7cbb      	ldrb	r3, [r7, #18]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <_GPSDriver_handleGNGSASentence+0x1b2>
		return ret;
 8010454:	7cbb      	ldrb	r3, [r7, #18]
 8010456:	e005      	b.n	8010464 <_GPSDriver_handleGNGSASentence+0x1be>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010458:	8a3b      	ldrh	r3, [r7, #16]
 801045a:	3301      	adds	r3, #1
 801045c:	697a      	ldr	r2, [r7, #20]
 801045e:	4413      	add	r3, r2
 8010460:	617b      	str	r3, [r7, #20]

	return ret;
 8010462:	7cbb      	ldrb	r3, [r7, #18]
}
 8010464:	4618      	mov	r0, r3
 8010466:	3718      	adds	r7, #24
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <_GPSDriver_handleGNRMCSentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGNRMCSentence(volatile Ublox8MGPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* pNmeaSentenceString){
 801046c:	b590      	push	{r4, r7, lr}
 801046e:	b08d      	sub	sp, #52	; 0x34
 8010470:	af02      	add	r7, sp, #8
 8010472:	60f8      	str	r0, [r7, #12]
 8010474:	60b9      	str	r1, [r7, #8]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 8010476:	2300      	movs	r3, #0
 8010478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t					tmp_u16;

	if ((ret = _GPSDriver_checkNMEAChecksum(pNmeaSentenceString->sentenceString)) != GPSDriver_Status_OK){
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	3306      	adds	r3, #6
 8010480:	4618      	mov	r0, r3
 8010482:	f7ff f8d4 	bl	800f62e <_GPSDriver_checkNMEAChecksum>
 8010486:	4603      	mov	r3, r0
 8010488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801048c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <_GPSDriver_handleGNRMCSentence+0x2e>
		return ret;
 8010494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010498:	e182      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}

	uint8_t*					it = pNmeaSentenceString->sentenceString + strlen(GPS_NMEA_GPGGA_PREFIX) + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	3306      	adds	r3, #6
 801049e:	3307      	adds	r3, #7
 80104a0:	623b      	str	r3, [r7, #32]

	//< ----- Parse fix time ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	3306      	adds	r3, #6
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	8892      	ldrh	r2, [r2, #4]
 80104aa:	4413      	add	r3, r2
 80104ac:	461a      	mov	r2, r3
 80104ae:	6a3b      	ldr	r3, [r7, #32]
 80104b0:	1ad3      	subs	r3, r2, r3
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	f107 0316 	add.w	r3, r7, #22
 80104b8:	212c      	movs	r1, #44	; 0x2c
 80104ba:	6a38      	ldr	r0, [r7, #32]
 80104bc:	f7fd fa33 	bl	800d926 <findChar>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <_GPSDriver_handleGNRMCSentence+0x5e>
		return GPSDriver_Status_NMEASentenceError;
 80104c6:	2307      	movs	r3, #7
 80104c8:	e16a      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if ((ret = _GPSDriver_parseTime(it, tmp_u16, &pSelf->partialGPSData.gpsDateTime)) != GPSDriver_Status_OK){
 80104ca:	8af9      	ldrh	r1, [r7, #22]
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	3330      	adds	r3, #48	; 0x30
 80104d0:	461a      	mov	r2, r3
 80104d2:	6a38      	ldr	r0, [r7, #32]
 80104d4:	f7ff face 	bl	800fa74 <_GPSDriver_parseTime>
 80104d8:	4603      	mov	r3, r0
 80104da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80104de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <_GPSDriver_handleGNRMCSentence+0x80>
		return ret;
 80104e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104ea:	e159      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80104ec:	8afb      	ldrh	r3, [r7, #22]
 80104ee:	3301      	adds	r3, #1
 80104f0:	6a3a      	ldr	r2, [r7, #32]
 80104f2:	4413      	add	r3, r2
 80104f4:	623b      	str	r3, [r7, #32]

	//< ----- Parse status (Active/Void) ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	3306      	adds	r3, #6
 80104fa:	68ba      	ldr	r2, [r7, #8]
 80104fc:	8892      	ldrh	r2, [r2, #4]
 80104fe:	4413      	add	r3, r2
 8010500:	461a      	mov	r2, r3
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	b29a      	uxth	r2, r3
 8010508:	f107 0316 	add.w	r3, r7, #22
 801050c:	212c      	movs	r1, #44	; 0x2c
 801050e:	6a38      	ldr	r0, [r7, #32]
 8010510:	f7fd fa09 	bl	800d926 <findChar>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d001      	beq.n	801051e <_GPSDriver_handleGNRMCSentence+0xb2>
		return GPSDriver_Status_NMEASentenceError;
 801051a:	2307      	movs	r3, #7
 801051c:	e140      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< ignore field
 801051e:	8afb      	ldrh	r3, [r7, #22]
 8010520:	3301      	adds	r3, #1
 8010522:	6a3a      	ldr	r2, [r7, #32]
 8010524:	4413      	add	r3, r2
 8010526:	623b      	str	r3, [r7, #32]

	//< ----- Parse latitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	3306      	adds	r3, #6
 801052c:	68ba      	ldr	r2, [r7, #8]
 801052e:	8892      	ldrh	r2, [r2, #4]
 8010530:	4413      	add	r3, r2
 8010532:	461a      	mov	r2, r3
 8010534:	6a3b      	ldr	r3, [r7, #32]
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	b29a      	uxth	r2, r3
 801053a:	f107 0316 	add.w	r3, r7, #22
 801053e:	212c      	movs	r1, #44	; 0x2c
 8010540:	6a38      	ldr	r0, [r7, #32]
 8010542:	f7fd f9f0 	bl	800d926 <findChar>
 8010546:	4603      	mov	r3, r0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d001      	beq.n	8010550 <_GPSDriver_handleGNRMCSentence+0xe4>
		return GPSDriver_Status_NMEASentenceError;
 801054c:	2307      	movs	r3, #7
 801054e:	e127      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if ((ret = _GPSDriver_parseLatitude(it, tmp_u16 + 2/*comma and N/S*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8010550:	8afb      	ldrh	r3, [r7, #22]
 8010552:	3302      	adds	r3, #2
 8010554:	b299      	uxth	r1, r3
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	332c      	adds	r3, #44	; 0x2c
 801055a:	461a      	mov	r2, r3
 801055c:	6a38      	ldr	r0, [r7, #32]
 801055e:	f7ff fbfd 	bl	800fd5c <_GPSDriver_parseLatitude>
 8010562:	4603      	mov	r3, r0
 8010564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <_GPSDriver_handleGNRMCSentence+0x10a>
		return ret;
 8010570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010574:	e114      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}

	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010576:	8afb      	ldrh	r3, [r7, #22]
 8010578:	3301      	adds	r3, #1
 801057a:	6a3a      	ldr	r2, [r7, #32]
 801057c:	4413      	add	r3, r2
 801057e:	623b      	str	r3, [r7, #32]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	3306      	adds	r3, #6
 8010584:	68ba      	ldr	r2, [r7, #8]
 8010586:	8892      	ldrh	r2, [r2, #4]
 8010588:	4413      	add	r3, r2
 801058a:	461a      	mov	r2, r3
 801058c:	6a3b      	ldr	r3, [r7, #32]
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	b29a      	uxth	r2, r3
 8010592:	f107 0316 	add.w	r3, r7, #22
 8010596:	212c      	movs	r1, #44	; 0x2c
 8010598:	6a38      	ldr	r0, [r7, #32]
 801059a:	f7fd f9c4 	bl	800d926 <findChar>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <_GPSDriver_handleGNRMCSentence+0x13c>
		return GPSDriver_Status_NMEASentenceError;
 80105a4:	2307      	movs	r3, #7
 80105a6:	e0fb      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< N/S and comma
 80105a8:	8afb      	ldrh	r3, [r7, #22]
 80105aa:	3301      	adds	r3, #1
 80105ac:	6a3a      	ldr	r2, [r7, #32]
 80105ae:	4413      	add	r3, r2
 80105b0:	623b      	str	r3, [r7, #32]

	//< ----- Parse longitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	3306      	adds	r3, #6
 80105b6:	68ba      	ldr	r2, [r7, #8]
 80105b8:	8892      	ldrh	r2, [r2, #4]
 80105ba:	4413      	add	r3, r2
 80105bc:	461a      	mov	r2, r3
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	1ad3      	subs	r3, r2, r3
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	f107 0316 	add.w	r3, r7, #22
 80105c8:	212c      	movs	r1, #44	; 0x2c
 80105ca:	6a38      	ldr	r0, [r7, #32]
 80105cc:	f7fd f9ab 	bl	800d926 <findChar>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d001      	beq.n	80105da <_GPSDriver_handleGNRMCSentence+0x16e>
		return GPSDriver_Status_NMEASentenceError;
 80105d6:	2307      	movs	r3, #7
 80105d8:	e0e2      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if ((ret = _GPSDriver_parseLongitude(it, tmp_u16 + 2/*comma and E/W*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 80105da:	8afb      	ldrh	r3, [r7, #22]
 80105dc:	3302      	adds	r3, #2
 80105de:	b299      	uxth	r1, r3
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	332c      	adds	r3, #44	; 0x2c
 80105e4:	461a      	mov	r2, r3
 80105e6:	6a38      	ldr	r0, [r7, #32]
 80105e8:	f7ff fc22 	bl	800fe30 <_GPSDriver_parseLongitude>
 80105ec:	4603      	mov	r3, r0
 80105ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <_GPSDriver_handleGNRMCSentence+0x194>
		return ret;
 80105fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105fe:	e0cf      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}

	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010600:	8afb      	ldrh	r3, [r7, #22]
 8010602:	3301      	adds	r3, #1
 8010604:	6a3a      	ldr	r2, [r7, #32]
 8010606:	4413      	add	r3, r2
 8010608:	623b      	str	r3, [r7, #32]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	3306      	adds	r3, #6
 801060e:	68ba      	ldr	r2, [r7, #8]
 8010610:	8892      	ldrh	r2, [r2, #4]
 8010612:	4413      	add	r3, r2
 8010614:	461a      	mov	r2, r3
 8010616:	6a3b      	ldr	r3, [r7, #32]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	b29a      	uxth	r2, r3
 801061c:	f107 0316 	add.w	r3, r7, #22
 8010620:	212c      	movs	r1, #44	; 0x2c
 8010622:	6a38      	ldr	r0, [r7, #32]
 8010624:	f7fd f97f 	bl	800d926 <findChar>
 8010628:	4603      	mov	r3, r0
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <_GPSDriver_handleGNRMCSentence+0x1c6>
		return GPSDriver_Status_NMEASentenceError;
 801062e:	2307      	movs	r3, #7
 8010630:	e0b6      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN); //< comma and E/W
 8010632:	8afb      	ldrh	r3, [r7, #22]
 8010634:	3301      	adds	r3, #1
 8010636:	6a3a      	ldr	r2, [r7, #32]
 8010638:	4413      	add	r3, r2
 801063a:	623b      	str	r3, [r7, #32]


	//< ----- Parse speed over the ground in knots ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	3306      	adds	r3, #6
 8010640:	68ba      	ldr	r2, [r7, #8]
 8010642:	8892      	ldrh	r2, [r2, #4]
 8010644:	4413      	add	r3, r2
 8010646:	461a      	mov	r2, r3
 8010648:	6a3b      	ldr	r3, [r7, #32]
 801064a:	1ad3      	subs	r3, r2, r3
 801064c:	b29a      	uxth	r2, r3
 801064e:	f107 0316 	add.w	r3, r7, #22
 8010652:	212c      	movs	r1, #44	; 0x2c
 8010654:	6a38      	ldr	r0, [r7, #32]
 8010656:	f7fd f966 	bl	800d926 <findChar>
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d001      	beq.n	8010664 <_GPSDriver_handleGNRMCSentence+0x1f8>
		return GPSDriver_Status_NMEASentenceError;
 8010660:	2307      	movs	r3, #7
 8010662:	e09d      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.speed)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 8010664:	8af9      	ldrh	r1, [r7, #22]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	3358      	adds	r3, #88	; 0x58
 801066a:	461a      	mov	r2, r3
 801066c:	6a38      	ldr	r0, [r7, #32]
 801066e:	f7ff fc49 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 8010672:	4603      	mov	r3, r0
 8010674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <_GPSDriver_handleGNRMCSentence+0x21a>
		return ret;
 8010680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010684:	e08c      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	pSelf->partialGPSData.speed = FixedPoint_a_mult_b(pSelf->partialGPSData.speed, GPS_KNOT_TO_KPH_FACTOR, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS);
 8010686:	f107 0018 	add.w	r0, r7, #24
 801068a:	230c      	movs	r3, #12
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010692:	f44f 7255 	mov.w	r2, #852	; 0x354
 8010696:	2101      	movs	r1, #1
 8010698:	f7fc fdb4 	bl	800d204 <FixedPoint_constrDecimalFrac>
 801069c:	68fc      	ldr	r4, [r7, #12]
 801069e:	4638      	mov	r0, r7
 80106a0:	68fa      	ldr	r2, [r7, #12]
 80106a2:	230c      	movs	r3, #12
 80106a4:	9301      	str	r3, [sp, #4]
 80106a6:	69fb      	ldr	r3, [r7, #28]
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	3258      	adds	r2, #88	; 0x58
 80106ae:	ca06      	ldmia	r2, {r1, r2}
 80106b0:	f7fc fde1 	bl	800d276 <FixedPoint_a_mult_b>
 80106b4:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80106b8:	463a      	mov	r2, r7
 80106ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106be:	e883 0003 	stmia.w	r3, {r0, r1}

	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 80106c2:	8afb      	ldrh	r3, [r7, #22]
 80106c4:	3301      	adds	r3, #1
 80106c6:	6a3a      	ldr	r2, [r7, #32]
 80106c8:	4413      	add	r3, r2
 80106ca:	623b      	str	r3, [r7, #32]

	//< ----- Parse track angle in degrees ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	3306      	adds	r3, #6
 80106d0:	68ba      	ldr	r2, [r7, #8]
 80106d2:	8892      	ldrh	r2, [r2, #4]
 80106d4:	4413      	add	r3, r2
 80106d6:	461a      	mov	r2, r3
 80106d8:	6a3b      	ldr	r3, [r7, #32]
 80106da:	1ad3      	subs	r3, r2, r3
 80106dc:	b29a      	uxth	r2, r3
 80106de:	f107 0316 	add.w	r3, r7, #22
 80106e2:	212c      	movs	r1, #44	; 0x2c
 80106e4:	6a38      	ldr	r0, [r7, #32]
 80106e6:	f7fd f91e 	bl	800d926 <findChar>
 80106ea:	4603      	mov	r3, r0
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d001      	beq.n	80106f4 <_GPSDriver_handleGNRMCSentence+0x288>
		return GPSDriver_Status_NMEASentenceError;
 80106f0:	2307      	movs	r3, #7
 80106f2:	e055      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if (tmp_u16 == 0){
 80106f4:	8afb      	ldrh	r3, [r7, #22]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d110      	bne.n	801071c <_GPSDriver_handleGNRMCSentence+0x2b0>
		pSelf->partialGPSData.trackAngle = FixedPoint_constrDecimalFrac(0, 0, 1, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS); //< zero
 80106fa:	68fc      	ldr	r4, [r7, #12]
 80106fc:	4638      	mov	r0, r7
 80106fe:	230c      	movs	r3, #12
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	2301      	movs	r3, #1
 8010704:	2200      	movs	r2, #0
 8010706:	2100      	movs	r1, #0
 8010708:	f7fc fd7c 	bl	800d204 <FixedPoint_constrDecimalFrac>
 801070c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8010710:	463a      	mov	r2, r7
 8010712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010716:	e883 0003 	stmia.w	r3, {r0, r1}
 801071a:	e010      	b.n	801073e <_GPSDriver_handleGNRMCSentence+0x2d2>
	} else if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.trackAngle)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 801071c:	8af9      	ldrh	r1, [r7, #22]
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	3360      	adds	r3, #96	; 0x60
 8010722:	461a      	mov	r2, r3
 8010724:	6a38      	ldr	r0, [r7, #32]
 8010726:	f7ff fbed 	bl	800ff04 <_GPSDriver_parseFixedPoint>
 801072a:	4603      	mov	r3, r0
 801072c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010734:	2b00      	cmp	r3, #0
 8010736:	d002      	beq.n	801073e <_GPSDriver_handleGNRMCSentence+0x2d2>
		return ret;
 8010738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801073c:	e030      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 801073e:	8afb      	ldrh	r3, [r7, #22]
 8010740:	3301      	adds	r3, #1
 8010742:	6a3a      	ldr	r2, [r7, #32]
 8010744:	4413      	add	r3, r2
 8010746:	623b      	str	r3, [r7, #32]

	//< ----- Parse date ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, pNmeaSentenceString->sentenceString + pNmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	3306      	adds	r3, #6
 801074c:	68ba      	ldr	r2, [r7, #8]
 801074e:	8892      	ldrh	r2, [r2, #4]
 8010750:	4413      	add	r3, r2
 8010752:	461a      	mov	r2, r3
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	b29a      	uxth	r2, r3
 801075a:	f107 0316 	add.w	r3, r7, #22
 801075e:	212c      	movs	r1, #44	; 0x2c
 8010760:	6a38      	ldr	r0, [r7, #32]
 8010762:	f7fd f8e0 	bl	800d926 <findChar>
 8010766:	4603      	mov	r3, r0
 8010768:	2b00      	cmp	r3, #0
 801076a:	d001      	beq.n	8010770 <_GPSDriver_handleGNRMCSentence+0x304>
		return GPSDriver_Status_NMEASentenceError;
 801076c:	2307      	movs	r3, #7
 801076e:	e017      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	if ((ret = _GPSDriver_parseDate(it, tmp_u16, &pSelf->partialGPSData.gpsDateTime)) != GPSDriver_Status_OK){
 8010770:	8af9      	ldrh	r1, [r7, #22]
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	3330      	adds	r3, #48	; 0x30
 8010776:	461a      	mov	r2, r3
 8010778:	6a38      	ldr	r0, [r7, #32]
 801077a:	f7ff fa59 	bl	800fc30 <_GPSDriver_parseDate>
 801077e:	4603      	mov	r3, r0
 8010780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <_GPSDriver_handleGNRMCSentence+0x326>
		return ret;
 801078c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010790:	e006      	b.n	80107a0 <_GPSDriver_handleGNRMCSentence+0x334>
	}
	it += tmp_u16 + sizeof(GPS_NMEA_DATA_SEPARATOR_SIGN);
 8010792:	8afb      	ldrh	r3, [r7, #22]
 8010794:	3301      	adds	r3, #1
 8010796:	6a3a      	ldr	r2, [r7, #32]
 8010798:	4413      	add	r3, r2
 801079a:	623b      	str	r3, [r7, #32]

	return ret;
 801079c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	372c      	adds	r7, #44	; 0x2c
 80107a4:	46bd      	mov	sp, r7
 80107a6:	bd90      	pop	{r4, r7, pc}

080107a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80107a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80107e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80107ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80107ae:	e003      	b.n	80107b8 <LoopCopyDataInit>

080107b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80107b0:	4b0c      	ldr	r3, [pc, #48]	; (80107e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80107b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80107b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80107b6:	3104      	adds	r1, #4

080107b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80107b8:	480b      	ldr	r0, [pc, #44]	; (80107e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80107ba:	4b0c      	ldr	r3, [pc, #48]	; (80107ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80107bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80107be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80107c0:	d3f6      	bcc.n	80107b0 <CopyDataInit>
  ldr  r2, =_sbss
 80107c2:	4a0b      	ldr	r2, [pc, #44]	; (80107f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80107c4:	e002      	b.n	80107cc <LoopFillZerobss>

080107c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80107c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80107c8:	f842 3b04 	str.w	r3, [r2], #4

080107cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80107cc:	4b09      	ldr	r3, [pc, #36]	; (80107f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80107ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80107d0:	d3f9      	bcc.n	80107c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80107d2:	f7f9 fdcf 	bl	800a374 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80107d6:	f000 f817 	bl	8010808 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80107da:	f7f8 fef1 	bl	80095c0 <main>
  bx  lr    
 80107de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80107e0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80107e4:	08011a84 	.word	0x08011a84
  ldr  r0, =_sdata
 80107e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80107ec:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80107f0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80107f4:	2000f3b0 	.word	0x2000f3b0

080107f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80107f8:	e7fe      	b.n	80107f8 <ADC_IRQHandler>
	...

080107fc <__errno>:
 80107fc:	4b01      	ldr	r3, [pc, #4]	; (8010804 <__errno+0x8>)
 80107fe:	6818      	ldr	r0, [r3, #0]
 8010800:	4770      	bx	lr
 8010802:	bf00      	nop
 8010804:	20000014 	.word	0x20000014

08010808 <__libc_init_array>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	4e0d      	ldr	r6, [pc, #52]	; (8010840 <__libc_init_array+0x38>)
 801080c:	4c0d      	ldr	r4, [pc, #52]	; (8010844 <__libc_init_array+0x3c>)
 801080e:	1ba4      	subs	r4, r4, r6
 8010810:	10a4      	asrs	r4, r4, #2
 8010812:	2500      	movs	r5, #0
 8010814:	42a5      	cmp	r5, r4
 8010816:	d109      	bne.n	801082c <__libc_init_array+0x24>
 8010818:	4e0b      	ldr	r6, [pc, #44]	; (8010848 <__libc_init_array+0x40>)
 801081a:	4c0c      	ldr	r4, [pc, #48]	; (801084c <__libc_init_array+0x44>)
 801081c:	f000 fc3e 	bl	801109c <_init>
 8010820:	1ba4      	subs	r4, r4, r6
 8010822:	10a4      	asrs	r4, r4, #2
 8010824:	2500      	movs	r5, #0
 8010826:	42a5      	cmp	r5, r4
 8010828:	d105      	bne.n	8010836 <__libc_init_array+0x2e>
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010830:	4798      	blx	r3
 8010832:	3501      	adds	r5, #1
 8010834:	e7ee      	b.n	8010814 <__libc_init_array+0xc>
 8010836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801083a:	4798      	blx	r3
 801083c:	3501      	adds	r5, #1
 801083e:	e7f2      	b.n	8010826 <__libc_init_array+0x1e>
 8010840:	08011a7c 	.word	0x08011a7c
 8010844:	08011a7c 	.word	0x08011a7c
 8010848:	08011a7c 	.word	0x08011a7c
 801084c:	08011a80 	.word	0x08011a80

08010850 <memcpy>:
 8010850:	b510      	push	{r4, lr}
 8010852:	1e43      	subs	r3, r0, #1
 8010854:	440a      	add	r2, r1
 8010856:	4291      	cmp	r1, r2
 8010858:	d100      	bne.n	801085c <memcpy+0xc>
 801085a:	bd10      	pop	{r4, pc}
 801085c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010864:	e7f7      	b.n	8010856 <memcpy+0x6>

08010866 <memset>:
 8010866:	4402      	add	r2, r0
 8010868:	4603      	mov	r3, r0
 801086a:	4293      	cmp	r3, r2
 801086c:	d100      	bne.n	8010870 <memset+0xa>
 801086e:	4770      	bx	lr
 8010870:	f803 1b01 	strb.w	r1, [r3], #1
 8010874:	e7f9      	b.n	801086a <memset+0x4>
	...

08010878 <siprintf>:
 8010878:	b40e      	push	{r1, r2, r3}
 801087a:	b500      	push	{lr}
 801087c:	b09c      	sub	sp, #112	; 0x70
 801087e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8010882:	ab1d      	add	r3, sp, #116	; 0x74
 8010884:	f8ad 1014 	strh.w	r1, [sp, #20]
 8010888:	9002      	str	r0, [sp, #8]
 801088a:	9006      	str	r0, [sp, #24]
 801088c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010890:	480a      	ldr	r0, [pc, #40]	; (80108bc <siprintf+0x44>)
 8010892:	9104      	str	r1, [sp, #16]
 8010894:	9107      	str	r1, [sp, #28]
 8010896:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801089a:	f853 2b04 	ldr.w	r2, [r3], #4
 801089e:	f8ad 1016 	strh.w	r1, [sp, #22]
 80108a2:	6800      	ldr	r0, [r0, #0]
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	a902      	add	r1, sp, #8
 80108a8:	f000 f866 	bl	8010978 <_svfiprintf_r>
 80108ac:	9b02      	ldr	r3, [sp, #8]
 80108ae:	2200      	movs	r2, #0
 80108b0:	701a      	strb	r2, [r3, #0]
 80108b2:	b01c      	add	sp, #112	; 0x70
 80108b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108b8:	b003      	add	sp, #12
 80108ba:	4770      	bx	lr
 80108bc:	20000014 	.word	0x20000014

080108c0 <__ssputs_r>:
 80108c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108c4:	688e      	ldr	r6, [r1, #8]
 80108c6:	429e      	cmp	r6, r3
 80108c8:	4682      	mov	sl, r0
 80108ca:	460c      	mov	r4, r1
 80108cc:	4691      	mov	r9, r2
 80108ce:	4698      	mov	r8, r3
 80108d0:	d835      	bhi.n	801093e <__ssputs_r+0x7e>
 80108d2:	898a      	ldrh	r2, [r1, #12]
 80108d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108d8:	d031      	beq.n	801093e <__ssputs_r+0x7e>
 80108da:	6825      	ldr	r5, [r4, #0]
 80108dc:	6909      	ldr	r1, [r1, #16]
 80108de:	1a6f      	subs	r7, r5, r1
 80108e0:	6965      	ldr	r5, [r4, #20]
 80108e2:	2302      	movs	r3, #2
 80108e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80108ec:	f108 0301 	add.w	r3, r8, #1
 80108f0:	443b      	add	r3, r7
 80108f2:	429d      	cmp	r5, r3
 80108f4:	bf38      	it	cc
 80108f6:	461d      	movcc	r5, r3
 80108f8:	0553      	lsls	r3, r2, #21
 80108fa:	d531      	bpl.n	8010960 <__ssputs_r+0xa0>
 80108fc:	4629      	mov	r1, r5
 80108fe:	f000 fb2d 	bl	8010f5c <_malloc_r>
 8010902:	4606      	mov	r6, r0
 8010904:	b950      	cbnz	r0, 801091c <__ssputs_r+0x5c>
 8010906:	230c      	movs	r3, #12
 8010908:	f8ca 3000 	str.w	r3, [sl]
 801090c:	89a3      	ldrh	r3, [r4, #12]
 801090e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010912:	81a3      	strh	r3, [r4, #12]
 8010914:	f04f 30ff 	mov.w	r0, #4294967295
 8010918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801091c:	463a      	mov	r2, r7
 801091e:	6921      	ldr	r1, [r4, #16]
 8010920:	f7ff ff96 	bl	8010850 <memcpy>
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801092e:	81a3      	strh	r3, [r4, #12]
 8010930:	6126      	str	r6, [r4, #16]
 8010932:	6165      	str	r5, [r4, #20]
 8010934:	443e      	add	r6, r7
 8010936:	1bed      	subs	r5, r5, r7
 8010938:	6026      	str	r6, [r4, #0]
 801093a:	60a5      	str	r5, [r4, #8]
 801093c:	4646      	mov	r6, r8
 801093e:	4546      	cmp	r6, r8
 8010940:	bf28      	it	cs
 8010942:	4646      	movcs	r6, r8
 8010944:	4632      	mov	r2, r6
 8010946:	4649      	mov	r1, r9
 8010948:	6820      	ldr	r0, [r4, #0]
 801094a:	f000 fa9f 	bl	8010e8c <memmove>
 801094e:	68a3      	ldr	r3, [r4, #8]
 8010950:	1b9b      	subs	r3, r3, r6
 8010952:	60a3      	str	r3, [r4, #8]
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	441e      	add	r6, r3
 8010958:	6026      	str	r6, [r4, #0]
 801095a:	2000      	movs	r0, #0
 801095c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010960:	462a      	mov	r2, r5
 8010962:	f000 fb59 	bl	8011018 <_realloc_r>
 8010966:	4606      	mov	r6, r0
 8010968:	2800      	cmp	r0, #0
 801096a:	d1e1      	bne.n	8010930 <__ssputs_r+0x70>
 801096c:	6921      	ldr	r1, [r4, #16]
 801096e:	4650      	mov	r0, sl
 8010970:	f000 faa6 	bl	8010ec0 <_free_r>
 8010974:	e7c7      	b.n	8010906 <__ssputs_r+0x46>
	...

08010978 <_svfiprintf_r>:
 8010978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801097c:	b09d      	sub	sp, #116	; 0x74
 801097e:	4680      	mov	r8, r0
 8010980:	9303      	str	r3, [sp, #12]
 8010982:	898b      	ldrh	r3, [r1, #12]
 8010984:	061c      	lsls	r4, r3, #24
 8010986:	460d      	mov	r5, r1
 8010988:	4616      	mov	r6, r2
 801098a:	d50f      	bpl.n	80109ac <_svfiprintf_r+0x34>
 801098c:	690b      	ldr	r3, [r1, #16]
 801098e:	b96b      	cbnz	r3, 80109ac <_svfiprintf_r+0x34>
 8010990:	2140      	movs	r1, #64	; 0x40
 8010992:	f000 fae3 	bl	8010f5c <_malloc_r>
 8010996:	6028      	str	r0, [r5, #0]
 8010998:	6128      	str	r0, [r5, #16]
 801099a:	b928      	cbnz	r0, 80109a8 <_svfiprintf_r+0x30>
 801099c:	230c      	movs	r3, #12
 801099e:	f8c8 3000 	str.w	r3, [r8]
 80109a2:	f04f 30ff 	mov.w	r0, #4294967295
 80109a6:	e0c5      	b.n	8010b34 <_svfiprintf_r+0x1bc>
 80109a8:	2340      	movs	r3, #64	; 0x40
 80109aa:	616b      	str	r3, [r5, #20]
 80109ac:	2300      	movs	r3, #0
 80109ae:	9309      	str	r3, [sp, #36]	; 0x24
 80109b0:	2320      	movs	r3, #32
 80109b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109b6:	2330      	movs	r3, #48	; 0x30
 80109b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109bc:	f04f 0b01 	mov.w	fp, #1
 80109c0:	4637      	mov	r7, r6
 80109c2:	463c      	mov	r4, r7
 80109c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d13c      	bne.n	8010a46 <_svfiprintf_r+0xce>
 80109cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80109d0:	d00b      	beq.n	80109ea <_svfiprintf_r+0x72>
 80109d2:	4653      	mov	r3, sl
 80109d4:	4632      	mov	r2, r6
 80109d6:	4629      	mov	r1, r5
 80109d8:	4640      	mov	r0, r8
 80109da:	f7ff ff71 	bl	80108c0 <__ssputs_r>
 80109de:	3001      	adds	r0, #1
 80109e0:	f000 80a3 	beq.w	8010b2a <_svfiprintf_r+0x1b2>
 80109e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109e6:	4453      	add	r3, sl
 80109e8:	9309      	str	r3, [sp, #36]	; 0x24
 80109ea:	783b      	ldrb	r3, [r7, #0]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	f000 809c 	beq.w	8010b2a <_svfiprintf_r+0x1b2>
 80109f2:	2300      	movs	r3, #0
 80109f4:	f04f 32ff 	mov.w	r2, #4294967295
 80109f8:	9304      	str	r3, [sp, #16]
 80109fa:	9307      	str	r3, [sp, #28]
 80109fc:	9205      	str	r2, [sp, #20]
 80109fe:	9306      	str	r3, [sp, #24]
 8010a00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a04:	931a      	str	r3, [sp, #104]	; 0x68
 8010a06:	2205      	movs	r2, #5
 8010a08:	7821      	ldrb	r1, [r4, #0]
 8010a0a:	4850      	ldr	r0, [pc, #320]	; (8010b4c <_svfiprintf_r+0x1d4>)
 8010a0c:	f7ef fc20 	bl	8000250 <memchr>
 8010a10:	1c67      	adds	r7, r4, #1
 8010a12:	9b04      	ldr	r3, [sp, #16]
 8010a14:	b9d8      	cbnz	r0, 8010a4e <_svfiprintf_r+0xd6>
 8010a16:	06d9      	lsls	r1, r3, #27
 8010a18:	bf44      	itt	mi
 8010a1a:	2220      	movmi	r2, #32
 8010a1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a20:	071a      	lsls	r2, r3, #28
 8010a22:	bf44      	itt	mi
 8010a24:	222b      	movmi	r2, #43	; 0x2b
 8010a26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a2a:	7822      	ldrb	r2, [r4, #0]
 8010a2c:	2a2a      	cmp	r2, #42	; 0x2a
 8010a2e:	d016      	beq.n	8010a5e <_svfiprintf_r+0xe6>
 8010a30:	9a07      	ldr	r2, [sp, #28]
 8010a32:	2100      	movs	r1, #0
 8010a34:	200a      	movs	r0, #10
 8010a36:	4627      	mov	r7, r4
 8010a38:	3401      	adds	r4, #1
 8010a3a:	783b      	ldrb	r3, [r7, #0]
 8010a3c:	3b30      	subs	r3, #48	; 0x30
 8010a3e:	2b09      	cmp	r3, #9
 8010a40:	d951      	bls.n	8010ae6 <_svfiprintf_r+0x16e>
 8010a42:	b1c9      	cbz	r1, 8010a78 <_svfiprintf_r+0x100>
 8010a44:	e011      	b.n	8010a6a <_svfiprintf_r+0xf2>
 8010a46:	2b25      	cmp	r3, #37	; 0x25
 8010a48:	d0c0      	beq.n	80109cc <_svfiprintf_r+0x54>
 8010a4a:	4627      	mov	r7, r4
 8010a4c:	e7b9      	b.n	80109c2 <_svfiprintf_r+0x4a>
 8010a4e:	4a3f      	ldr	r2, [pc, #252]	; (8010b4c <_svfiprintf_r+0x1d4>)
 8010a50:	1a80      	subs	r0, r0, r2
 8010a52:	fa0b f000 	lsl.w	r0, fp, r0
 8010a56:	4318      	orrs	r0, r3
 8010a58:	9004      	str	r0, [sp, #16]
 8010a5a:	463c      	mov	r4, r7
 8010a5c:	e7d3      	b.n	8010a06 <_svfiprintf_r+0x8e>
 8010a5e:	9a03      	ldr	r2, [sp, #12]
 8010a60:	1d11      	adds	r1, r2, #4
 8010a62:	6812      	ldr	r2, [r2, #0]
 8010a64:	9103      	str	r1, [sp, #12]
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	db01      	blt.n	8010a6e <_svfiprintf_r+0xf6>
 8010a6a:	9207      	str	r2, [sp, #28]
 8010a6c:	e004      	b.n	8010a78 <_svfiprintf_r+0x100>
 8010a6e:	4252      	negs	r2, r2
 8010a70:	f043 0302 	orr.w	r3, r3, #2
 8010a74:	9207      	str	r2, [sp, #28]
 8010a76:	9304      	str	r3, [sp, #16]
 8010a78:	783b      	ldrb	r3, [r7, #0]
 8010a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a7c:	d10e      	bne.n	8010a9c <_svfiprintf_r+0x124>
 8010a7e:	787b      	ldrb	r3, [r7, #1]
 8010a80:	2b2a      	cmp	r3, #42	; 0x2a
 8010a82:	f107 0101 	add.w	r1, r7, #1
 8010a86:	d132      	bne.n	8010aee <_svfiprintf_r+0x176>
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	1d1a      	adds	r2, r3, #4
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	9203      	str	r2, [sp, #12]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	bfb8      	it	lt
 8010a94:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a98:	3702      	adds	r7, #2
 8010a9a:	9305      	str	r3, [sp, #20]
 8010a9c:	4c2c      	ldr	r4, [pc, #176]	; (8010b50 <_svfiprintf_r+0x1d8>)
 8010a9e:	7839      	ldrb	r1, [r7, #0]
 8010aa0:	2203      	movs	r2, #3
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	f7ef fbd4 	bl	8000250 <memchr>
 8010aa8:	b138      	cbz	r0, 8010aba <_svfiprintf_r+0x142>
 8010aaa:	2340      	movs	r3, #64	; 0x40
 8010aac:	1b00      	subs	r0, r0, r4
 8010aae:	fa03 f000 	lsl.w	r0, r3, r0
 8010ab2:	9b04      	ldr	r3, [sp, #16]
 8010ab4:	4303      	orrs	r3, r0
 8010ab6:	9304      	str	r3, [sp, #16]
 8010ab8:	3701      	adds	r7, #1
 8010aba:	7839      	ldrb	r1, [r7, #0]
 8010abc:	4825      	ldr	r0, [pc, #148]	; (8010b54 <_svfiprintf_r+0x1dc>)
 8010abe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ac2:	2206      	movs	r2, #6
 8010ac4:	1c7e      	adds	r6, r7, #1
 8010ac6:	f7ef fbc3 	bl	8000250 <memchr>
 8010aca:	2800      	cmp	r0, #0
 8010acc:	d035      	beq.n	8010b3a <_svfiprintf_r+0x1c2>
 8010ace:	4b22      	ldr	r3, [pc, #136]	; (8010b58 <_svfiprintf_r+0x1e0>)
 8010ad0:	b9fb      	cbnz	r3, 8010b12 <_svfiprintf_r+0x19a>
 8010ad2:	9b03      	ldr	r3, [sp, #12]
 8010ad4:	3307      	adds	r3, #7
 8010ad6:	f023 0307 	bic.w	r3, r3, #7
 8010ada:	3308      	adds	r3, #8
 8010adc:	9303      	str	r3, [sp, #12]
 8010ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ae0:	444b      	add	r3, r9
 8010ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ae4:	e76c      	b.n	80109c0 <_svfiprintf_r+0x48>
 8010ae6:	fb00 3202 	mla	r2, r0, r2, r3
 8010aea:	2101      	movs	r1, #1
 8010aec:	e7a3      	b.n	8010a36 <_svfiprintf_r+0xbe>
 8010aee:	2300      	movs	r3, #0
 8010af0:	9305      	str	r3, [sp, #20]
 8010af2:	4618      	mov	r0, r3
 8010af4:	240a      	movs	r4, #10
 8010af6:	460f      	mov	r7, r1
 8010af8:	3101      	adds	r1, #1
 8010afa:	783a      	ldrb	r2, [r7, #0]
 8010afc:	3a30      	subs	r2, #48	; 0x30
 8010afe:	2a09      	cmp	r2, #9
 8010b00:	d903      	bls.n	8010b0a <_svfiprintf_r+0x192>
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d0ca      	beq.n	8010a9c <_svfiprintf_r+0x124>
 8010b06:	9005      	str	r0, [sp, #20]
 8010b08:	e7c8      	b.n	8010a9c <_svfiprintf_r+0x124>
 8010b0a:	fb04 2000 	mla	r0, r4, r0, r2
 8010b0e:	2301      	movs	r3, #1
 8010b10:	e7f1      	b.n	8010af6 <_svfiprintf_r+0x17e>
 8010b12:	ab03      	add	r3, sp, #12
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	462a      	mov	r2, r5
 8010b18:	4b10      	ldr	r3, [pc, #64]	; (8010b5c <_svfiprintf_r+0x1e4>)
 8010b1a:	a904      	add	r1, sp, #16
 8010b1c:	4640      	mov	r0, r8
 8010b1e:	f3af 8000 	nop.w
 8010b22:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010b26:	4681      	mov	r9, r0
 8010b28:	d1d9      	bne.n	8010ade <_svfiprintf_r+0x166>
 8010b2a:	89ab      	ldrh	r3, [r5, #12]
 8010b2c:	065b      	lsls	r3, r3, #25
 8010b2e:	f53f af38 	bmi.w	80109a2 <_svfiprintf_r+0x2a>
 8010b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b34:	b01d      	add	sp, #116	; 0x74
 8010b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3a:	ab03      	add	r3, sp, #12
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	462a      	mov	r2, r5
 8010b40:	4b06      	ldr	r3, [pc, #24]	; (8010b5c <_svfiprintf_r+0x1e4>)
 8010b42:	a904      	add	r1, sp, #16
 8010b44:	4640      	mov	r0, r8
 8010b46:	f000 f881 	bl	8010c4c <_printf_i>
 8010b4a:	e7ea      	b.n	8010b22 <_svfiprintf_r+0x1aa>
 8010b4c:	08011a40 	.word	0x08011a40
 8010b50:	08011a46 	.word	0x08011a46
 8010b54:	08011a4a 	.word	0x08011a4a
 8010b58:	00000000 	.word	0x00000000
 8010b5c:	080108c1 	.word	0x080108c1

08010b60 <_printf_common>:
 8010b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b64:	4691      	mov	r9, r2
 8010b66:	461f      	mov	r7, r3
 8010b68:	688a      	ldr	r2, [r1, #8]
 8010b6a:	690b      	ldr	r3, [r1, #16]
 8010b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b70:	4293      	cmp	r3, r2
 8010b72:	bfb8      	it	lt
 8010b74:	4613      	movlt	r3, r2
 8010b76:	f8c9 3000 	str.w	r3, [r9]
 8010b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b7e:	4606      	mov	r6, r0
 8010b80:	460c      	mov	r4, r1
 8010b82:	b112      	cbz	r2, 8010b8a <_printf_common+0x2a>
 8010b84:	3301      	adds	r3, #1
 8010b86:	f8c9 3000 	str.w	r3, [r9]
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	0699      	lsls	r1, r3, #26
 8010b8e:	bf42      	ittt	mi
 8010b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b94:	3302      	addmi	r3, #2
 8010b96:	f8c9 3000 	strmi.w	r3, [r9]
 8010b9a:	6825      	ldr	r5, [r4, #0]
 8010b9c:	f015 0506 	ands.w	r5, r5, #6
 8010ba0:	d107      	bne.n	8010bb2 <_printf_common+0x52>
 8010ba2:	f104 0a19 	add.w	sl, r4, #25
 8010ba6:	68e3      	ldr	r3, [r4, #12]
 8010ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	429d      	cmp	r5, r3
 8010bb0:	db29      	blt.n	8010c06 <_printf_common+0xa6>
 8010bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010bb6:	6822      	ldr	r2, [r4, #0]
 8010bb8:	3300      	adds	r3, #0
 8010bba:	bf18      	it	ne
 8010bbc:	2301      	movne	r3, #1
 8010bbe:	0692      	lsls	r2, r2, #26
 8010bc0:	d42e      	bmi.n	8010c20 <_printf_common+0xc0>
 8010bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bc6:	4639      	mov	r1, r7
 8010bc8:	4630      	mov	r0, r6
 8010bca:	47c0      	blx	r8
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d021      	beq.n	8010c14 <_printf_common+0xb4>
 8010bd0:	6823      	ldr	r3, [r4, #0]
 8010bd2:	68e5      	ldr	r5, [r4, #12]
 8010bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bd8:	f003 0306 	and.w	r3, r3, #6
 8010bdc:	2b04      	cmp	r3, #4
 8010bde:	bf08      	it	eq
 8010be0:	1aad      	subeq	r5, r5, r2
 8010be2:	68a3      	ldr	r3, [r4, #8]
 8010be4:	6922      	ldr	r2, [r4, #16]
 8010be6:	bf0c      	ite	eq
 8010be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bec:	2500      	movne	r5, #0
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	bfc4      	itt	gt
 8010bf2:	1a9b      	subgt	r3, r3, r2
 8010bf4:	18ed      	addgt	r5, r5, r3
 8010bf6:	f04f 0900 	mov.w	r9, #0
 8010bfa:	341a      	adds	r4, #26
 8010bfc:	454d      	cmp	r5, r9
 8010bfe:	d11b      	bne.n	8010c38 <_printf_common+0xd8>
 8010c00:	2000      	movs	r0, #0
 8010c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c06:	2301      	movs	r3, #1
 8010c08:	4652      	mov	r2, sl
 8010c0a:	4639      	mov	r1, r7
 8010c0c:	4630      	mov	r0, r6
 8010c0e:	47c0      	blx	r8
 8010c10:	3001      	adds	r0, #1
 8010c12:	d103      	bne.n	8010c1c <_printf_common+0xbc>
 8010c14:	f04f 30ff 	mov.w	r0, #4294967295
 8010c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1c:	3501      	adds	r5, #1
 8010c1e:	e7c2      	b.n	8010ba6 <_printf_common+0x46>
 8010c20:	18e1      	adds	r1, r4, r3
 8010c22:	1c5a      	adds	r2, r3, #1
 8010c24:	2030      	movs	r0, #48	; 0x30
 8010c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c2a:	4422      	add	r2, r4
 8010c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c34:	3302      	adds	r3, #2
 8010c36:	e7c4      	b.n	8010bc2 <_printf_common+0x62>
 8010c38:	2301      	movs	r3, #1
 8010c3a:	4622      	mov	r2, r4
 8010c3c:	4639      	mov	r1, r7
 8010c3e:	4630      	mov	r0, r6
 8010c40:	47c0      	blx	r8
 8010c42:	3001      	adds	r0, #1
 8010c44:	d0e6      	beq.n	8010c14 <_printf_common+0xb4>
 8010c46:	f109 0901 	add.w	r9, r9, #1
 8010c4a:	e7d7      	b.n	8010bfc <_printf_common+0x9c>

08010c4c <_printf_i>:
 8010c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c50:	4617      	mov	r7, r2
 8010c52:	7e0a      	ldrb	r2, [r1, #24]
 8010c54:	b085      	sub	sp, #20
 8010c56:	2a6e      	cmp	r2, #110	; 0x6e
 8010c58:	4698      	mov	r8, r3
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	460c      	mov	r4, r1
 8010c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8010c64:	f000 80bc 	beq.w	8010de0 <_printf_i+0x194>
 8010c68:	d81a      	bhi.n	8010ca0 <_printf_i+0x54>
 8010c6a:	2a63      	cmp	r2, #99	; 0x63
 8010c6c:	d02e      	beq.n	8010ccc <_printf_i+0x80>
 8010c6e:	d80a      	bhi.n	8010c86 <_printf_i+0x3a>
 8010c70:	2a00      	cmp	r2, #0
 8010c72:	f000 80c8 	beq.w	8010e06 <_printf_i+0x1ba>
 8010c76:	2a58      	cmp	r2, #88	; 0x58
 8010c78:	f000 808a 	beq.w	8010d90 <_printf_i+0x144>
 8010c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8010c84:	e02a      	b.n	8010cdc <_printf_i+0x90>
 8010c86:	2a64      	cmp	r2, #100	; 0x64
 8010c88:	d001      	beq.n	8010c8e <_printf_i+0x42>
 8010c8a:	2a69      	cmp	r2, #105	; 0x69
 8010c8c:	d1f6      	bne.n	8010c7c <_printf_i+0x30>
 8010c8e:	6821      	ldr	r1, [r4, #0]
 8010c90:	681a      	ldr	r2, [r3, #0]
 8010c92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8010c96:	d023      	beq.n	8010ce0 <_printf_i+0x94>
 8010c98:	1d11      	adds	r1, r2, #4
 8010c9a:	6019      	str	r1, [r3, #0]
 8010c9c:	6813      	ldr	r3, [r2, #0]
 8010c9e:	e027      	b.n	8010cf0 <_printf_i+0xa4>
 8010ca0:	2a73      	cmp	r2, #115	; 0x73
 8010ca2:	f000 80b4 	beq.w	8010e0e <_printf_i+0x1c2>
 8010ca6:	d808      	bhi.n	8010cba <_printf_i+0x6e>
 8010ca8:	2a6f      	cmp	r2, #111	; 0x6f
 8010caa:	d02a      	beq.n	8010d02 <_printf_i+0xb6>
 8010cac:	2a70      	cmp	r2, #112	; 0x70
 8010cae:	d1e5      	bne.n	8010c7c <_printf_i+0x30>
 8010cb0:	680a      	ldr	r2, [r1, #0]
 8010cb2:	f042 0220 	orr.w	r2, r2, #32
 8010cb6:	600a      	str	r2, [r1, #0]
 8010cb8:	e003      	b.n	8010cc2 <_printf_i+0x76>
 8010cba:	2a75      	cmp	r2, #117	; 0x75
 8010cbc:	d021      	beq.n	8010d02 <_printf_i+0xb6>
 8010cbe:	2a78      	cmp	r2, #120	; 0x78
 8010cc0:	d1dc      	bne.n	8010c7c <_printf_i+0x30>
 8010cc2:	2278      	movs	r2, #120	; 0x78
 8010cc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8010cc8:	496e      	ldr	r1, [pc, #440]	; (8010e84 <_printf_i+0x238>)
 8010cca:	e064      	b.n	8010d96 <_printf_i+0x14a>
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8010cd2:	1d11      	adds	r1, r2, #4
 8010cd4:	6019      	str	r1, [r3, #0]
 8010cd6:	6813      	ldr	r3, [r2, #0]
 8010cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cdc:	2301      	movs	r3, #1
 8010cde:	e0a3      	b.n	8010e28 <_printf_i+0x1dc>
 8010ce0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8010ce4:	f102 0104 	add.w	r1, r2, #4
 8010ce8:	6019      	str	r1, [r3, #0]
 8010cea:	d0d7      	beq.n	8010c9c <_printf_i+0x50>
 8010cec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da03      	bge.n	8010cfc <_printf_i+0xb0>
 8010cf4:	222d      	movs	r2, #45	; 0x2d
 8010cf6:	425b      	negs	r3, r3
 8010cf8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010cfc:	4962      	ldr	r1, [pc, #392]	; (8010e88 <_printf_i+0x23c>)
 8010cfe:	220a      	movs	r2, #10
 8010d00:	e017      	b.n	8010d32 <_printf_i+0xe6>
 8010d02:	6820      	ldr	r0, [r4, #0]
 8010d04:	6819      	ldr	r1, [r3, #0]
 8010d06:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010d0a:	d003      	beq.n	8010d14 <_printf_i+0xc8>
 8010d0c:	1d08      	adds	r0, r1, #4
 8010d0e:	6018      	str	r0, [r3, #0]
 8010d10:	680b      	ldr	r3, [r1, #0]
 8010d12:	e006      	b.n	8010d22 <_printf_i+0xd6>
 8010d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d18:	f101 0004 	add.w	r0, r1, #4
 8010d1c:	6018      	str	r0, [r3, #0]
 8010d1e:	d0f7      	beq.n	8010d10 <_printf_i+0xc4>
 8010d20:	880b      	ldrh	r3, [r1, #0]
 8010d22:	4959      	ldr	r1, [pc, #356]	; (8010e88 <_printf_i+0x23c>)
 8010d24:	2a6f      	cmp	r2, #111	; 0x6f
 8010d26:	bf14      	ite	ne
 8010d28:	220a      	movne	r2, #10
 8010d2a:	2208      	moveq	r2, #8
 8010d2c:	2000      	movs	r0, #0
 8010d2e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8010d32:	6865      	ldr	r5, [r4, #4]
 8010d34:	60a5      	str	r5, [r4, #8]
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	f2c0 809c 	blt.w	8010e74 <_printf_i+0x228>
 8010d3c:	6820      	ldr	r0, [r4, #0]
 8010d3e:	f020 0004 	bic.w	r0, r0, #4
 8010d42:	6020      	str	r0, [r4, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d13f      	bne.n	8010dc8 <_printf_i+0x17c>
 8010d48:	2d00      	cmp	r5, #0
 8010d4a:	f040 8095 	bne.w	8010e78 <_printf_i+0x22c>
 8010d4e:	4675      	mov	r5, lr
 8010d50:	2a08      	cmp	r2, #8
 8010d52:	d10b      	bne.n	8010d6c <_printf_i+0x120>
 8010d54:	6823      	ldr	r3, [r4, #0]
 8010d56:	07da      	lsls	r2, r3, #31
 8010d58:	d508      	bpl.n	8010d6c <_printf_i+0x120>
 8010d5a:	6923      	ldr	r3, [r4, #16]
 8010d5c:	6862      	ldr	r2, [r4, #4]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	bfde      	ittt	le
 8010d62:	2330      	movle	r3, #48	; 0x30
 8010d64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010d6c:	ebae 0305 	sub.w	r3, lr, r5
 8010d70:	6123      	str	r3, [r4, #16]
 8010d72:	f8cd 8000 	str.w	r8, [sp]
 8010d76:	463b      	mov	r3, r7
 8010d78:	aa03      	add	r2, sp, #12
 8010d7a:	4621      	mov	r1, r4
 8010d7c:	4630      	mov	r0, r6
 8010d7e:	f7ff feef 	bl	8010b60 <_printf_common>
 8010d82:	3001      	adds	r0, #1
 8010d84:	d155      	bne.n	8010e32 <_printf_i+0x1e6>
 8010d86:	f04f 30ff 	mov.w	r0, #4294967295
 8010d8a:	b005      	add	sp, #20
 8010d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d90:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8010d94:	493c      	ldr	r1, [pc, #240]	; (8010e88 <_printf_i+0x23c>)
 8010d96:	6822      	ldr	r2, [r4, #0]
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8010d9e:	f100 0504 	add.w	r5, r0, #4
 8010da2:	601d      	str	r5, [r3, #0]
 8010da4:	d001      	beq.n	8010daa <_printf_i+0x15e>
 8010da6:	6803      	ldr	r3, [r0, #0]
 8010da8:	e002      	b.n	8010db0 <_printf_i+0x164>
 8010daa:	0655      	lsls	r5, r2, #25
 8010dac:	d5fb      	bpl.n	8010da6 <_printf_i+0x15a>
 8010dae:	8803      	ldrh	r3, [r0, #0]
 8010db0:	07d0      	lsls	r0, r2, #31
 8010db2:	bf44      	itt	mi
 8010db4:	f042 0220 	orrmi.w	r2, r2, #32
 8010db8:	6022      	strmi	r2, [r4, #0]
 8010dba:	b91b      	cbnz	r3, 8010dc4 <_printf_i+0x178>
 8010dbc:	6822      	ldr	r2, [r4, #0]
 8010dbe:	f022 0220 	bic.w	r2, r2, #32
 8010dc2:	6022      	str	r2, [r4, #0]
 8010dc4:	2210      	movs	r2, #16
 8010dc6:	e7b1      	b.n	8010d2c <_printf_i+0xe0>
 8010dc8:	4675      	mov	r5, lr
 8010dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8010dce:	fb02 3310 	mls	r3, r2, r0, r3
 8010dd2:	5ccb      	ldrb	r3, [r1, r3]
 8010dd4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010dd8:	4603      	mov	r3, r0
 8010dda:	2800      	cmp	r0, #0
 8010ddc:	d1f5      	bne.n	8010dca <_printf_i+0x17e>
 8010dde:	e7b7      	b.n	8010d50 <_printf_i+0x104>
 8010de0:	6808      	ldr	r0, [r1, #0]
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	6949      	ldr	r1, [r1, #20]
 8010de6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8010dea:	d004      	beq.n	8010df6 <_printf_i+0x1aa>
 8010dec:	1d10      	adds	r0, r2, #4
 8010dee:	6018      	str	r0, [r3, #0]
 8010df0:	6813      	ldr	r3, [r2, #0]
 8010df2:	6019      	str	r1, [r3, #0]
 8010df4:	e007      	b.n	8010e06 <_printf_i+0x1ba>
 8010df6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010dfa:	f102 0004 	add.w	r0, r2, #4
 8010dfe:	6018      	str	r0, [r3, #0]
 8010e00:	6813      	ldr	r3, [r2, #0]
 8010e02:	d0f6      	beq.n	8010df2 <_printf_i+0x1a6>
 8010e04:	8019      	strh	r1, [r3, #0]
 8010e06:	2300      	movs	r3, #0
 8010e08:	6123      	str	r3, [r4, #16]
 8010e0a:	4675      	mov	r5, lr
 8010e0c:	e7b1      	b.n	8010d72 <_printf_i+0x126>
 8010e0e:	681a      	ldr	r2, [r3, #0]
 8010e10:	1d11      	adds	r1, r2, #4
 8010e12:	6019      	str	r1, [r3, #0]
 8010e14:	6815      	ldr	r5, [r2, #0]
 8010e16:	6862      	ldr	r2, [r4, #4]
 8010e18:	2100      	movs	r1, #0
 8010e1a:	4628      	mov	r0, r5
 8010e1c:	f7ef fa18 	bl	8000250 <memchr>
 8010e20:	b108      	cbz	r0, 8010e26 <_printf_i+0x1da>
 8010e22:	1b40      	subs	r0, r0, r5
 8010e24:	6060      	str	r0, [r4, #4]
 8010e26:	6863      	ldr	r3, [r4, #4]
 8010e28:	6123      	str	r3, [r4, #16]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e30:	e79f      	b.n	8010d72 <_printf_i+0x126>
 8010e32:	6923      	ldr	r3, [r4, #16]
 8010e34:	462a      	mov	r2, r5
 8010e36:	4639      	mov	r1, r7
 8010e38:	4630      	mov	r0, r6
 8010e3a:	47c0      	blx	r8
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d0a2      	beq.n	8010d86 <_printf_i+0x13a>
 8010e40:	6823      	ldr	r3, [r4, #0]
 8010e42:	079b      	lsls	r3, r3, #30
 8010e44:	d507      	bpl.n	8010e56 <_printf_i+0x20a>
 8010e46:	2500      	movs	r5, #0
 8010e48:	f104 0919 	add.w	r9, r4, #25
 8010e4c:	68e3      	ldr	r3, [r4, #12]
 8010e4e:	9a03      	ldr	r2, [sp, #12]
 8010e50:	1a9b      	subs	r3, r3, r2
 8010e52:	429d      	cmp	r5, r3
 8010e54:	db05      	blt.n	8010e62 <_printf_i+0x216>
 8010e56:	68e0      	ldr	r0, [r4, #12]
 8010e58:	9b03      	ldr	r3, [sp, #12]
 8010e5a:	4298      	cmp	r0, r3
 8010e5c:	bfb8      	it	lt
 8010e5e:	4618      	movlt	r0, r3
 8010e60:	e793      	b.n	8010d8a <_printf_i+0x13e>
 8010e62:	2301      	movs	r3, #1
 8010e64:	464a      	mov	r2, r9
 8010e66:	4639      	mov	r1, r7
 8010e68:	4630      	mov	r0, r6
 8010e6a:	47c0      	blx	r8
 8010e6c:	3001      	adds	r0, #1
 8010e6e:	d08a      	beq.n	8010d86 <_printf_i+0x13a>
 8010e70:	3501      	adds	r5, #1
 8010e72:	e7eb      	b.n	8010e4c <_printf_i+0x200>
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1a7      	bne.n	8010dc8 <_printf_i+0x17c>
 8010e78:	780b      	ldrb	r3, [r1, #0]
 8010e7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e82:	e765      	b.n	8010d50 <_printf_i+0x104>
 8010e84:	08011a62 	.word	0x08011a62
 8010e88:	08011a51 	.word	0x08011a51

08010e8c <memmove>:
 8010e8c:	4288      	cmp	r0, r1
 8010e8e:	b510      	push	{r4, lr}
 8010e90:	eb01 0302 	add.w	r3, r1, r2
 8010e94:	d803      	bhi.n	8010e9e <memmove+0x12>
 8010e96:	1e42      	subs	r2, r0, #1
 8010e98:	4299      	cmp	r1, r3
 8010e9a:	d10c      	bne.n	8010eb6 <memmove+0x2a>
 8010e9c:	bd10      	pop	{r4, pc}
 8010e9e:	4298      	cmp	r0, r3
 8010ea0:	d2f9      	bcs.n	8010e96 <memmove+0xa>
 8010ea2:	1881      	adds	r1, r0, r2
 8010ea4:	1ad2      	subs	r2, r2, r3
 8010ea6:	42d3      	cmn	r3, r2
 8010ea8:	d100      	bne.n	8010eac <memmove+0x20>
 8010eaa:	bd10      	pop	{r4, pc}
 8010eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010eb0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010eb4:	e7f7      	b.n	8010ea6 <memmove+0x1a>
 8010eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010ebe:	e7eb      	b.n	8010e98 <memmove+0xc>

08010ec0 <_free_r>:
 8010ec0:	b538      	push	{r3, r4, r5, lr}
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	2900      	cmp	r1, #0
 8010ec6:	d045      	beq.n	8010f54 <_free_r+0x94>
 8010ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ecc:	1f0c      	subs	r4, r1, #4
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	bfb8      	it	lt
 8010ed2:	18e4      	addlt	r4, r4, r3
 8010ed4:	f000 f8d6 	bl	8011084 <__malloc_lock>
 8010ed8:	4a1f      	ldr	r2, [pc, #124]	; (8010f58 <_free_r+0x98>)
 8010eda:	6813      	ldr	r3, [r2, #0]
 8010edc:	4610      	mov	r0, r2
 8010ede:	b933      	cbnz	r3, 8010eee <_free_r+0x2e>
 8010ee0:	6063      	str	r3, [r4, #4]
 8010ee2:	6014      	str	r4, [r2, #0]
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010eea:	f000 b8cc 	b.w	8011086 <__malloc_unlock>
 8010eee:	42a3      	cmp	r3, r4
 8010ef0:	d90c      	bls.n	8010f0c <_free_r+0x4c>
 8010ef2:	6821      	ldr	r1, [r4, #0]
 8010ef4:	1862      	adds	r2, r4, r1
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	bf04      	itt	eq
 8010efa:	681a      	ldreq	r2, [r3, #0]
 8010efc:	685b      	ldreq	r3, [r3, #4]
 8010efe:	6063      	str	r3, [r4, #4]
 8010f00:	bf04      	itt	eq
 8010f02:	1852      	addeq	r2, r2, r1
 8010f04:	6022      	streq	r2, [r4, #0]
 8010f06:	6004      	str	r4, [r0, #0]
 8010f08:	e7ec      	b.n	8010ee4 <_free_r+0x24>
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	685a      	ldr	r2, [r3, #4]
 8010f0e:	b10a      	cbz	r2, 8010f14 <_free_r+0x54>
 8010f10:	42a2      	cmp	r2, r4
 8010f12:	d9fa      	bls.n	8010f0a <_free_r+0x4a>
 8010f14:	6819      	ldr	r1, [r3, #0]
 8010f16:	1858      	adds	r0, r3, r1
 8010f18:	42a0      	cmp	r0, r4
 8010f1a:	d10b      	bne.n	8010f34 <_free_r+0x74>
 8010f1c:	6820      	ldr	r0, [r4, #0]
 8010f1e:	4401      	add	r1, r0
 8010f20:	1858      	adds	r0, r3, r1
 8010f22:	4282      	cmp	r2, r0
 8010f24:	6019      	str	r1, [r3, #0]
 8010f26:	d1dd      	bne.n	8010ee4 <_free_r+0x24>
 8010f28:	6810      	ldr	r0, [r2, #0]
 8010f2a:	6852      	ldr	r2, [r2, #4]
 8010f2c:	605a      	str	r2, [r3, #4]
 8010f2e:	4401      	add	r1, r0
 8010f30:	6019      	str	r1, [r3, #0]
 8010f32:	e7d7      	b.n	8010ee4 <_free_r+0x24>
 8010f34:	d902      	bls.n	8010f3c <_free_r+0x7c>
 8010f36:	230c      	movs	r3, #12
 8010f38:	602b      	str	r3, [r5, #0]
 8010f3a:	e7d3      	b.n	8010ee4 <_free_r+0x24>
 8010f3c:	6820      	ldr	r0, [r4, #0]
 8010f3e:	1821      	adds	r1, r4, r0
 8010f40:	428a      	cmp	r2, r1
 8010f42:	bf04      	itt	eq
 8010f44:	6811      	ldreq	r1, [r2, #0]
 8010f46:	6852      	ldreq	r2, [r2, #4]
 8010f48:	6062      	str	r2, [r4, #4]
 8010f4a:	bf04      	itt	eq
 8010f4c:	1809      	addeq	r1, r1, r0
 8010f4e:	6021      	streq	r1, [r4, #0]
 8010f50:	605c      	str	r4, [r3, #4]
 8010f52:	e7c7      	b.n	8010ee4 <_free_r+0x24>
 8010f54:	bd38      	pop	{r3, r4, r5, pc}
 8010f56:	bf00      	nop
 8010f58:	200004d8 	.word	0x200004d8

08010f5c <_malloc_r>:
 8010f5c:	b570      	push	{r4, r5, r6, lr}
 8010f5e:	1ccd      	adds	r5, r1, #3
 8010f60:	f025 0503 	bic.w	r5, r5, #3
 8010f64:	3508      	adds	r5, #8
 8010f66:	2d0c      	cmp	r5, #12
 8010f68:	bf38      	it	cc
 8010f6a:	250c      	movcc	r5, #12
 8010f6c:	2d00      	cmp	r5, #0
 8010f6e:	4606      	mov	r6, r0
 8010f70:	db01      	blt.n	8010f76 <_malloc_r+0x1a>
 8010f72:	42a9      	cmp	r1, r5
 8010f74:	d903      	bls.n	8010f7e <_malloc_r+0x22>
 8010f76:	230c      	movs	r3, #12
 8010f78:	6033      	str	r3, [r6, #0]
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	bd70      	pop	{r4, r5, r6, pc}
 8010f7e:	f000 f881 	bl	8011084 <__malloc_lock>
 8010f82:	4a23      	ldr	r2, [pc, #140]	; (8011010 <_malloc_r+0xb4>)
 8010f84:	6814      	ldr	r4, [r2, #0]
 8010f86:	4621      	mov	r1, r4
 8010f88:	b991      	cbnz	r1, 8010fb0 <_malloc_r+0x54>
 8010f8a:	4c22      	ldr	r4, [pc, #136]	; (8011014 <_malloc_r+0xb8>)
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	b91b      	cbnz	r3, 8010f98 <_malloc_r+0x3c>
 8010f90:	4630      	mov	r0, r6
 8010f92:	f000 f867 	bl	8011064 <_sbrk_r>
 8010f96:	6020      	str	r0, [r4, #0]
 8010f98:	4629      	mov	r1, r5
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	f000 f862 	bl	8011064 <_sbrk_r>
 8010fa0:	1c43      	adds	r3, r0, #1
 8010fa2:	d126      	bne.n	8010ff2 <_malloc_r+0x96>
 8010fa4:	230c      	movs	r3, #12
 8010fa6:	6033      	str	r3, [r6, #0]
 8010fa8:	4630      	mov	r0, r6
 8010faa:	f000 f86c 	bl	8011086 <__malloc_unlock>
 8010fae:	e7e4      	b.n	8010f7a <_malloc_r+0x1e>
 8010fb0:	680b      	ldr	r3, [r1, #0]
 8010fb2:	1b5b      	subs	r3, r3, r5
 8010fb4:	d41a      	bmi.n	8010fec <_malloc_r+0x90>
 8010fb6:	2b0b      	cmp	r3, #11
 8010fb8:	d90f      	bls.n	8010fda <_malloc_r+0x7e>
 8010fba:	600b      	str	r3, [r1, #0]
 8010fbc:	50cd      	str	r5, [r1, r3]
 8010fbe:	18cc      	adds	r4, r1, r3
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f000 f860 	bl	8011086 <__malloc_unlock>
 8010fc6:	f104 000b 	add.w	r0, r4, #11
 8010fca:	1d23      	adds	r3, r4, #4
 8010fcc:	f020 0007 	bic.w	r0, r0, #7
 8010fd0:	1ac3      	subs	r3, r0, r3
 8010fd2:	d01b      	beq.n	801100c <_malloc_r+0xb0>
 8010fd4:	425a      	negs	r2, r3
 8010fd6:	50e2      	str	r2, [r4, r3]
 8010fd8:	bd70      	pop	{r4, r5, r6, pc}
 8010fda:	428c      	cmp	r4, r1
 8010fdc:	bf0d      	iteet	eq
 8010fde:	6863      	ldreq	r3, [r4, #4]
 8010fe0:	684b      	ldrne	r3, [r1, #4]
 8010fe2:	6063      	strne	r3, [r4, #4]
 8010fe4:	6013      	streq	r3, [r2, #0]
 8010fe6:	bf18      	it	ne
 8010fe8:	460c      	movne	r4, r1
 8010fea:	e7e9      	b.n	8010fc0 <_malloc_r+0x64>
 8010fec:	460c      	mov	r4, r1
 8010fee:	6849      	ldr	r1, [r1, #4]
 8010ff0:	e7ca      	b.n	8010f88 <_malloc_r+0x2c>
 8010ff2:	1cc4      	adds	r4, r0, #3
 8010ff4:	f024 0403 	bic.w	r4, r4, #3
 8010ff8:	42a0      	cmp	r0, r4
 8010ffa:	d005      	beq.n	8011008 <_malloc_r+0xac>
 8010ffc:	1a21      	subs	r1, r4, r0
 8010ffe:	4630      	mov	r0, r6
 8011000:	f000 f830 	bl	8011064 <_sbrk_r>
 8011004:	3001      	adds	r0, #1
 8011006:	d0cd      	beq.n	8010fa4 <_malloc_r+0x48>
 8011008:	6025      	str	r5, [r4, #0]
 801100a:	e7d9      	b.n	8010fc0 <_malloc_r+0x64>
 801100c:	bd70      	pop	{r4, r5, r6, pc}
 801100e:	bf00      	nop
 8011010:	200004d8 	.word	0x200004d8
 8011014:	200004dc 	.word	0x200004dc

08011018 <_realloc_r>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	4607      	mov	r7, r0
 801101c:	4614      	mov	r4, r2
 801101e:	460e      	mov	r6, r1
 8011020:	b921      	cbnz	r1, 801102c <_realloc_r+0x14>
 8011022:	4611      	mov	r1, r2
 8011024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011028:	f7ff bf98 	b.w	8010f5c <_malloc_r>
 801102c:	b922      	cbnz	r2, 8011038 <_realloc_r+0x20>
 801102e:	f7ff ff47 	bl	8010ec0 <_free_r>
 8011032:	4625      	mov	r5, r4
 8011034:	4628      	mov	r0, r5
 8011036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011038:	f000 f826 	bl	8011088 <_malloc_usable_size_r>
 801103c:	4284      	cmp	r4, r0
 801103e:	d90f      	bls.n	8011060 <_realloc_r+0x48>
 8011040:	4621      	mov	r1, r4
 8011042:	4638      	mov	r0, r7
 8011044:	f7ff ff8a 	bl	8010f5c <_malloc_r>
 8011048:	4605      	mov	r5, r0
 801104a:	2800      	cmp	r0, #0
 801104c:	d0f2      	beq.n	8011034 <_realloc_r+0x1c>
 801104e:	4631      	mov	r1, r6
 8011050:	4622      	mov	r2, r4
 8011052:	f7ff fbfd 	bl	8010850 <memcpy>
 8011056:	4631      	mov	r1, r6
 8011058:	4638      	mov	r0, r7
 801105a:	f7ff ff31 	bl	8010ec0 <_free_r>
 801105e:	e7e9      	b.n	8011034 <_realloc_r+0x1c>
 8011060:	4635      	mov	r5, r6
 8011062:	e7e7      	b.n	8011034 <_realloc_r+0x1c>

08011064 <_sbrk_r>:
 8011064:	b538      	push	{r3, r4, r5, lr}
 8011066:	4c06      	ldr	r4, [pc, #24]	; (8011080 <_sbrk_r+0x1c>)
 8011068:	2300      	movs	r3, #0
 801106a:	4605      	mov	r5, r0
 801106c:	4608      	mov	r0, r1
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	f7f9 f954 	bl	800a31c <_sbrk>
 8011074:	1c43      	adds	r3, r0, #1
 8011076:	d102      	bne.n	801107e <_sbrk_r+0x1a>
 8011078:	6823      	ldr	r3, [r4, #0]
 801107a:	b103      	cbz	r3, 801107e <_sbrk_r+0x1a>
 801107c:	602b      	str	r3, [r5, #0]
 801107e:	bd38      	pop	{r3, r4, r5, pc}
 8011080:	2000f3ac 	.word	0x2000f3ac

08011084 <__malloc_lock>:
 8011084:	4770      	bx	lr

08011086 <__malloc_unlock>:
 8011086:	4770      	bx	lr

08011088 <_malloc_usable_size_r>:
 8011088:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801108c:	2800      	cmp	r0, #0
 801108e:	f1a0 0004 	sub.w	r0, r0, #4
 8011092:	bfbc      	itt	lt
 8011094:	580b      	ldrlt	r3, [r1, r0]
 8011096:	18c0      	addlt	r0, r0, r3
 8011098:	4770      	bx	lr
	...

0801109c <_init>:
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	bf00      	nop
 80110a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110a2:	bc08      	pop	{r3}
 80110a4:	469e      	mov	lr, r3
 80110a6:	4770      	bx	lr

080110a8 <_fini>:
 80110a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110aa:	bf00      	nop
 80110ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ae:	bc08      	pop	{r3}
 80110b0:	469e      	mov	lr, r3
 80110b2:	4770      	bx	lr
