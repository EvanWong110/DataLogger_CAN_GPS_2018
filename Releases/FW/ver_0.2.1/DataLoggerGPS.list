
DataLoggerGPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a540  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800a740  0800a740  0001a740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800aa70  0800aa70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa78  0800aa78  0001aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aa7c  0800aa7c  0001aa7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800aa80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00016884  20000070  0800aaf0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00040200  200168f4  0800aaf0  000268f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022629  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004950  00000000  00000000  000426c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015a8  00000000  00000000  00047018  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001330  00000000  00000000  000485c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b0a3  00000000  00000000  000498f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000088fe  00000000  00000000  00054993  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005d291  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000058bc  00000000  00000000  0005d310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a728 	.word	0x0800a728

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800a728 	.word	0x0800a728

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b97a 	b.w	80005ec <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	468c      	mov	ip, r1
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	9e08      	ldr	r6, [sp, #32]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d151      	bne.n	80003c4 <__udivmoddi4+0xb4>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d96d      	bls.n	8000402 <__udivmoddi4+0xf2>
 8000326:	fab2 fe82 	clz	lr, r2
 800032a:	f1be 0f00 	cmp.w	lr, #0
 800032e:	d00b      	beq.n	8000348 <__udivmoddi4+0x38>
 8000330:	f1ce 0c20 	rsb	ip, lr, #32
 8000334:	fa01 f50e 	lsl.w	r5, r1, lr
 8000338:	fa20 fc0c 	lsr.w	ip, r0, ip
 800033c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000340:	ea4c 0c05 	orr.w	ip, ip, r5
 8000344:	fa00 f40e 	lsl.w	r4, r0, lr
 8000348:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800034c:	0c25      	lsrs	r5, r4, #16
 800034e:	fbbc f8fa 	udiv	r8, ip, sl
 8000352:	fa1f f987 	uxth.w	r9, r7
 8000356:	fb0a cc18 	mls	ip, sl, r8, ip
 800035a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035e:	fb08 f309 	mul.w	r3, r8, r9
 8000362:	42ab      	cmp	r3, r5
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x6c>
 8000366:	19ed      	adds	r5, r5, r7
 8000368:	f108 32ff 	add.w	r2, r8, #4294967295
 800036c:	f080 8123 	bcs.w	80005b6 <__udivmoddi4+0x2a6>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f240 8120 	bls.w	80005b6 <__udivmoddi4+0x2a6>
 8000376:	f1a8 0802 	sub.w	r8, r8, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aed      	subs	r5, r5, r3
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb5 f0fa 	udiv	r0, r5, sl
 8000384:	fb0a 5510 	mls	r5, sl, r0, r5
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb00 f909 	mul.w	r9, r0, r9
 8000390:	45a1      	cmp	r9, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x98>
 8000394:	19e4      	adds	r4, r4, r7
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 810a 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8107 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 0409 	sub.w	r4, r4, r9
 80003ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003b0:	2100      	movs	r1, #0
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d061      	beq.n	800047a <__udivmoddi4+0x16a>
 80003b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80003ba:	2300      	movs	r3, #0
 80003bc:	6034      	str	r4, [r6, #0]
 80003be:	6073      	str	r3, [r6, #4]
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0xc8>
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d054      	beq.n	8000476 <__udivmoddi4+0x166>
 80003cc:	2100      	movs	r1, #0
 80003ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80003d2:	4608      	mov	r0, r1
 80003d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d8:	fab3 f183 	clz	r1, r3
 80003dc:	2900      	cmp	r1, #0
 80003de:	f040 808e 	bne.w	80004fe <__udivmoddi4+0x1ee>
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xdc>
 80003e6:	4282      	cmp	r2, r0
 80003e8:	f200 80fa 	bhi.w	80005e0 <__udivmoddi4+0x2d0>
 80003ec:	1a84      	subs	r4, r0, r2
 80003ee:	eb65 0503 	sbc.w	r5, r5, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	46ac      	mov	ip, r5
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d03f      	beq.n	800047a <__udivmoddi4+0x16a>
 80003fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	b912      	cbnz	r2, 800040a <__udivmoddi4+0xfa>
 8000404:	2701      	movs	r7, #1
 8000406:	fbb7 f7f2 	udiv	r7, r7, r2
 800040a:	fab7 fe87 	clz	lr, r7
 800040e:	f1be 0f00 	cmp.w	lr, #0
 8000412:	d134      	bne.n	800047e <__udivmoddi4+0x16e>
 8000414:	1beb      	subs	r3, r5, r7
 8000416:	0c3a      	lsrs	r2, r7, #16
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	2101      	movs	r1, #1
 800041e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000422:	0c25      	lsrs	r5, r4, #16
 8000424:	fb02 3318 	mls	r3, r2, r8, r3
 8000428:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800042c:	fb0c f308 	mul.w	r3, ip, r8
 8000430:	42ab      	cmp	r3, r5
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x134>
 8000434:	19ed      	adds	r5, r5, r7
 8000436:	f108 30ff 	add.w	r0, r8, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x132>
 800043c:	42ab      	cmp	r3, r5
 800043e:	f200 80d1 	bhi.w	80005e4 <__udivmoddi4+0x2d4>
 8000442:	4680      	mov	r8, r0
 8000444:	1aed      	subs	r5, r5, r3
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb5 f0f2 	udiv	r0, r5, r2
 800044c:	fb02 5510 	mls	r5, r2, r0, r5
 8000450:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000454:	fb0c fc00 	mul.w	ip, ip, r0
 8000458:	45a4      	cmp	ip, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x15c>
 800045c:	19e4      	adds	r4, r4, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x15a>
 8000464:	45a4      	cmp	ip, r4
 8000466:	f200 80b8 	bhi.w	80005da <__udivmoddi4+0x2ca>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 040c 	sub.w	r4, r4, ip
 8000470:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000474:	e79d      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000476:	4631      	mov	r1, r6
 8000478:	4630      	mov	r0, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	f1ce 0420 	rsb	r4, lr, #32
 8000482:	fa05 f30e 	lsl.w	r3, r5, lr
 8000486:	fa07 f70e 	lsl.w	r7, r7, lr
 800048a:	fa20 f804 	lsr.w	r8, r0, r4
 800048e:	0c3a      	lsrs	r2, r7, #16
 8000490:	fa25 f404 	lsr.w	r4, r5, r4
 8000494:	ea48 0803 	orr.w	r8, r8, r3
 8000498:	fbb4 f1f2 	udiv	r1, r4, r2
 800049c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80004a0:	fb02 4411 	mls	r4, r2, r1, r4
 80004a4:	fa1f fc87 	uxth.w	ip, r7
 80004a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80004ac:	fb01 f30c 	mul.w	r3, r1, ip
 80004b0:	42ab      	cmp	r3, r5
 80004b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1bc>
 80004b8:	19ed      	adds	r5, r5, r7
 80004ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80004be:	f080 808a 	bcs.w	80005d6 <__udivmoddi4+0x2c6>
 80004c2:	42ab      	cmp	r3, r5
 80004c4:	f240 8087 	bls.w	80005d6 <__udivmoddi4+0x2c6>
 80004c8:	3902      	subs	r1, #2
 80004ca:	443d      	add	r5, r7
 80004cc:	1aeb      	subs	r3, r5, r3
 80004ce:	fa1f f588 	uxth.w	r5, r8
 80004d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004d6:	fb02 3310 	mls	r3, r2, r0, r3
 80004da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004de:	fb00 f30c 	mul.w	r3, r0, ip
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x1e6>
 80004e6:	19ed      	adds	r5, r5, r7
 80004e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ec:	d26f      	bcs.n	80005ce <__udivmoddi4+0x2be>
 80004ee:	42ab      	cmp	r3, r5
 80004f0:	d96d      	bls.n	80005ce <__udivmoddi4+0x2be>
 80004f2:	3802      	subs	r0, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	1aeb      	subs	r3, r5, r3
 80004f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004fc:	e78f      	b.n	800041e <__udivmoddi4+0x10e>
 80004fe:	f1c1 0720 	rsb	r7, r1, #32
 8000502:	fa22 f807 	lsr.w	r8, r2, r7
 8000506:	408b      	lsls	r3, r1
 8000508:	fa05 f401 	lsl.w	r4, r5, r1
 800050c:	ea48 0303 	orr.w	r3, r8, r3
 8000510:	fa20 fe07 	lsr.w	lr, r0, r7
 8000514:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000518:	40fd      	lsrs	r5, r7
 800051a:	ea4e 0e04 	orr.w	lr, lr, r4
 800051e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000522:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000526:	fb0c 5519 	mls	r5, ip, r9, r5
 800052a:	fa1f f883 	uxth.w	r8, r3
 800052e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000532:	fb09 f408 	mul.w	r4, r9, r8
 8000536:	42ac      	cmp	r4, r5
 8000538:	fa02 f201 	lsl.w	r2, r2, r1
 800053c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x244>
 8000542:	18ed      	adds	r5, r5, r3
 8000544:	f109 30ff 	add.w	r0, r9, #4294967295
 8000548:	d243      	bcs.n	80005d2 <__udivmoddi4+0x2c2>
 800054a:	42ac      	cmp	r4, r5
 800054c:	d941      	bls.n	80005d2 <__udivmoddi4+0x2c2>
 800054e:	f1a9 0902 	sub.w	r9, r9, #2
 8000552:	441d      	add	r5, r3
 8000554:	1b2d      	subs	r5, r5, r4
 8000556:	fa1f fe8e 	uxth.w	lr, lr
 800055a:	fbb5 f0fc 	udiv	r0, r5, ip
 800055e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000562:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000566:	fb00 f808 	mul.w	r8, r0, r8
 800056a:	45a0      	cmp	r8, r4
 800056c:	d907      	bls.n	800057e <__udivmoddi4+0x26e>
 800056e:	18e4      	adds	r4, r4, r3
 8000570:	f100 35ff 	add.w	r5, r0, #4294967295
 8000574:	d229      	bcs.n	80005ca <__udivmoddi4+0x2ba>
 8000576:	45a0      	cmp	r8, r4
 8000578:	d927      	bls.n	80005ca <__udivmoddi4+0x2ba>
 800057a:	3802      	subs	r0, #2
 800057c:	441c      	add	r4, r3
 800057e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000582:	eba4 0408 	sub.w	r4, r4, r8
 8000586:	fba0 8902 	umull	r8, r9, r0, r2
 800058a:	454c      	cmp	r4, r9
 800058c:	46c6      	mov	lr, r8
 800058e:	464d      	mov	r5, r9
 8000590:	d315      	bcc.n	80005be <__udivmoddi4+0x2ae>
 8000592:	d012      	beq.n	80005ba <__udivmoddi4+0x2aa>
 8000594:	b156      	cbz	r6, 80005ac <__udivmoddi4+0x29c>
 8000596:	ebba 030e 	subs.w	r3, sl, lr
 800059a:	eb64 0405 	sbc.w	r4, r4, r5
 800059e:	fa04 f707 	lsl.w	r7, r4, r7
 80005a2:	40cb      	lsrs	r3, r1
 80005a4:	431f      	orrs	r7, r3
 80005a6:	40cc      	lsrs	r4, r1
 80005a8:	6037      	str	r7, [r6, #0]
 80005aa:	6074      	str	r4, [r6, #4]
 80005ac:	2100      	movs	r1, #0
 80005ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005b2:	4618      	mov	r0, r3
 80005b4:	e6f8      	b.n	80003a8 <__udivmoddi4+0x98>
 80005b6:	4690      	mov	r8, r2
 80005b8:	e6e0      	b.n	800037c <__udivmoddi4+0x6c>
 80005ba:	45c2      	cmp	sl, r8
 80005bc:	d2ea      	bcs.n	8000594 <__udivmoddi4+0x284>
 80005be:	ebb8 0e02 	subs.w	lr, r8, r2
 80005c2:	eb69 0503 	sbc.w	r5, r9, r3
 80005c6:	3801      	subs	r0, #1
 80005c8:	e7e4      	b.n	8000594 <__udivmoddi4+0x284>
 80005ca:	4628      	mov	r0, r5
 80005cc:	e7d7      	b.n	800057e <__udivmoddi4+0x26e>
 80005ce:	4640      	mov	r0, r8
 80005d0:	e791      	b.n	80004f6 <__udivmoddi4+0x1e6>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e7be      	b.n	8000554 <__udivmoddi4+0x244>
 80005d6:	4601      	mov	r1, r0
 80005d8:	e778      	b.n	80004cc <__udivmoddi4+0x1bc>
 80005da:	3802      	subs	r0, #2
 80005dc:	443c      	add	r4, r7
 80005de:	e745      	b.n	800046c <__udivmoddi4+0x15c>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e708      	b.n	80003f6 <__udivmoddi4+0xe6>
 80005e4:	f1a8 0802 	sub.w	r8, r8, #2
 80005e8:	443d      	add	r5, r7
 80005ea:	e72b      	b.n	8000444 <__udivmoddi4+0x134>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 fcc3 	bl	8000f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f006 f8aa 	bl	8006758 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 fceb 	bl	8001006 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295
 8000648:	f000 fca5 	bl	8000f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	200004c4 	.word	0x200004c4

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	200004c4 	.word	0x200004c4

080006ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b4:	f7ff ffee 	bl	8000694 <HAL_GetTick>
 80006b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c4:	d005      	beq.n	80006d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_Delay+0x40>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	461a      	mov	r2, r3
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d2:	bf00      	nop
 80006d4:	f7ff ffde 	bl	8000694 <HAL_GetTick>
 80006d8:	4602      	mov	r2, r0
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	1ad2      	subs	r2, r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3f7      	bcc.n	80006d4 <HAL_Delay+0x28>
  {
  }
}
 80006e4:	bf00      	nop
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000004 	.word	0x20000004

080006f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
 80006fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000704:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000706:	7dfb      	ldrb	r3, [r7, #23]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d003      	beq.n	8000714 <HAL_CAN_GetRxMessage+0x24>
 800070c:	7dfb      	ldrb	r3, [r7, #23]
 800070e:	2b02      	cmp	r3, #2
 8000710:	f040 80f4 	bne.w	80008fc <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10e      	bne.n	8000738 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	f003 0303 	and.w	r3, r3, #3
 8000724:	2b00      	cmp	r3, #0
 8000726:	d116      	bne.n	8000756 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000734:	2301      	movs	r3, #1
 8000736:	e0e8      	b.n	800090a <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	f003 0303 	and.w	r3, r3, #3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d107      	bne.n	8000756 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800074a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000752:	2301      	movs	r3, #1
 8000754:	e0d9      	b.n	800090a <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	331b      	adds	r3, #27
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	4413      	add	r3, r2
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f003 0204 	and.w	r2, r3, #4
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10c      	bne.n	800078e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	331b      	adds	r3, #27
 800077c:	011b      	lsls	r3, r3, #4
 800077e:	4413      	add	r3, r2
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	0d5b      	lsrs	r3, r3, #21
 8000784:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e00b      	b.n	80007a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	331b      	adds	r3, #27
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	4413      	add	r3, r2
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	08db      	lsrs	r3, r3, #3
 800079e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	331b      	adds	r3, #27
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	4413      	add	r3, r2
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	f003 0201 	and.w	r2, r3, #1
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	331b      	adds	r3, #27
 80007c6:	011b      	lsls	r3, r3, #4
 80007c8:	4413      	add	r3, r2
 80007ca:	3304      	adds	r3, #4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f003 020f 	and.w	r2, r3, #15
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	331b      	adds	r3, #27
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	4413      	add	r3, r2
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	0a1b      	lsrs	r3, r3, #8
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	331b      	adds	r3, #27
 80007f6:	011b      	lsls	r3, r3, #4
 80007f8:	4413      	add	r3, r2
 80007fa:	3304      	adds	r3, #4
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	0c1b      	lsrs	r3, r3, #16
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	011b      	lsls	r3, r3, #4
 800080e:	4413      	add	r3, r2
 8000810:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	6811      	ldr	r1, [r2, #0]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	0112      	lsls	r2, r2, #4
 8000828:	440a      	add	r2, r1
 800082a:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800082e:	6812      	ldr	r2, [r2, #0]
 8000830:	0a12      	lsrs	r2, r2, #8
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	3302      	adds	r3, #2
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	6811      	ldr	r1, [r2, #0]
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	0112      	lsls	r2, r2, #4
 8000842:	440a      	add	r2, r1
 8000844:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000848:	6812      	ldr	r2, [r2, #0]
 800084a:	0c12      	lsrs	r2, r2, #16
 800084c:	b2d2      	uxtb	r2, r2
 800084e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3303      	adds	r3, #3
 8000854:	68fa      	ldr	r2, [r7, #12]
 8000856:	6811      	ldr	r1, [r2, #0]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	0112      	lsls	r2, r2, #4
 800085c:	440a      	add	r2, r1
 800085e:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	0e12      	lsrs	r2, r2, #24
 8000866:	b2d2      	uxtb	r2, r2
 8000868:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	3304      	adds	r3, #4
 800086e:	68fa      	ldr	r2, [r7, #12]
 8000870:	6811      	ldr	r1, [r2, #0]
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	0112      	lsls	r2, r2, #4
 8000876:	440a      	add	r2, r1
 8000878:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3305      	adds	r3, #5
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	6811      	ldr	r1, [r2, #0]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	0112      	lsls	r2, r2, #4
 800088e:	440a      	add	r2, r1
 8000890:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	0a12      	lsrs	r2, r2, #8
 8000898:	b2d2      	uxtb	r2, r2
 800089a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	3306      	adds	r3, #6
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	0112      	lsls	r2, r2, #4
 80008a8:	440a      	add	r2, r1
 80008aa:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80008ae:	6812      	ldr	r2, [r2, #0]
 80008b0:	0c12      	lsrs	r2, r2, #16
 80008b2:	b2d2      	uxtb	r2, r2
 80008b4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	3307      	adds	r3, #7
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	6811      	ldr	r1, [r2, #0]
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	0112      	lsls	r2, r2, #4
 80008c2:	440a      	add	r2, r1
 80008c4:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d108      	bne.n	80008e8 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	6812      	ldr	r2, [r2, #0]
 80008de:	68d2      	ldr	r2, [r2, #12]
 80008e0:	f042 0220 	orr.w	r2, r2, #32
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	e007      	b.n	80008f8 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	6912      	ldr	r2, [r2, #16]
 80008f2:	f042 0220 	orr.w	r2, r2, #32
 80008f6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e006      	b.n	800090a <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
  }
}
 800090a:	4618      	mov	r0, r3
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b08a      	sub	sp, #40	; 0x28
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	695b      	ldr	r3, [r3, #20]
 8000928:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	691b      	ldr	r3, [r3, #16]
 8000948:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d07c      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	2b00      	cmp	r3, #0
 8000964:	d023      	beq.n	80009ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2201      	movs	r2, #1
 800096c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d003      	beq.n	8000980 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f000 f97d 	bl	8000c78 <HAL_CAN_TxMailbox0CompleteCallback>
 800097e:	e016      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	2b00      	cmp	r3, #0
 8000988:	d004      	beq.n	8000994 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
 8000992:	e00c      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
 80009a6:	e002      	b.n	80009ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 f983 	bl	8000cb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d024      	beq.n	8000a02 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d003      	beq.n	80009d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 f95d 	bl	8000c8c <HAL_CAN_TxMailbox1CompleteCallback>
 80009d2:	e016      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d004      	beq.n	80009e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
 80009e6:	e00c      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d004      	beq.n	80009fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
 80009fa:	e002      	b.n	8000a02 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f000 f963 	bl	8000cc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d024      	beq.n	8000a56 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a14:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d003      	beq.n	8000a28 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a20:	6878      	ldr	r0, [r7, #4]
 8000a22:	f000 f93d 	bl	8000ca0 <HAL_CAN_TxMailbox2CompleteCallback>
 8000a26:	e016      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d004      	beq.n	8000a3c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
 8000a3a:	e00c      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a4e:	e002      	b.n	8000a56 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f943 	bl	8000cdc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a56:	6a3b      	ldr	r3, [r7, #32]
 8000a58:	f003 0308 	and.w	r3, r3, #8
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d00c      	beq.n	8000a7a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0310 	and.w	r3, r3, #16
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d007      	beq.n	8000a7a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2210      	movs	r2, #16
 8000a78:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a7a:	6a3b      	ldr	r3, [r7, #32]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d00b      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d006      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2208      	movs	r2, #8
 8000a94:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 f92a 	bl	8000cf0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d009      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f006 f8a3 	bl	8006c00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000aba:	6a3b      	ldr	r3, [r7, #32]
 8000abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00c      	beq.n	8000ade <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2210      	movs	r2, #16
 8000adc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	f003 0320 	and.w	r3, r3, #32
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	f003 0308 	and.w	r3, r3, #8
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d006      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2208      	movs	r2, #8
 8000af8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f902 	bl	8000d04 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	f003 0310 	and.w	r3, r3, #16
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d009      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	f003 0303 	and.w	r3, r3, #3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f006 f8a3 	bl	8006c64 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00b      	beq.n	8000b40 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d006      	beq.n	8000b40 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2210      	movs	r2, #16
 8000b38:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f000 f8ec 	bl	8000d18 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b40:	6a3b      	ldr	r3, [r7, #32]
 8000b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d006      	beq.n	8000b62 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2208      	movs	r2, #8
 8000b5a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f8e5 	bl	8000d2c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d075      	beq.n	8000c58 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d06c      	beq.n	8000c50 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b76:	6a3b      	ldr	r3, [r7, #32]
 8000b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d008      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d003      	beq.n	8000b92 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b92:	6a3b      	ldr	r3, [r7, #32]
 8000b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d008      	beq.n	8000bae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d003      	beq.n	8000bca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bca:	6a3b      	ldr	r3, [r7, #32]
 8000bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d03d      	beq.n	8000c50 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d038      	beq.n	8000c50 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000be4:	2b30      	cmp	r3, #48	; 0x30
 8000be6:	d017      	beq.n	8000c18 <HAL_CAN_IRQHandler+0x302>
 8000be8:	2b30      	cmp	r3, #48	; 0x30
 8000bea:	d804      	bhi.n	8000bf6 <HAL_CAN_IRQHandler+0x2e0>
 8000bec:	2b10      	cmp	r3, #16
 8000bee:	d009      	beq.n	8000c04 <HAL_CAN_IRQHandler+0x2ee>
 8000bf0:	2b20      	cmp	r3, #32
 8000bf2:	d00c      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bf4:	e024      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8000bf6:	2b50      	cmp	r3, #80	; 0x50
 8000bf8:	d018      	beq.n	8000c2c <HAL_CAN_IRQHandler+0x316>
 8000bfa:	2b60      	cmp	r3, #96	; 0x60
 8000bfc:	d01b      	beq.n	8000c36 <HAL_CAN_IRQHandler+0x320>
 8000bfe:	2b40      	cmp	r3, #64	; 0x40
 8000c00:	d00f      	beq.n	8000c22 <HAL_CAN_IRQHandler+0x30c>
            break;
 8000c02:	e01d      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c0c:	e018      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c16:	e013      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	f043 0320 	orr.w	r3, r3, #32
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c20:	e00e      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c2a:	e009      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c34:	e004      	b.n	8000c40 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6812      	ldr	r2, [r2, #0]
 8000c48:	6992      	ldr	r2, [r2, #24]
 8000c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2204      	movs	r2, #4
 8000c56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d008      	beq.n	8000c70 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f006 f82c 	bl	8006cc8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d6a:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d002      	beq.n	8000d78 <HAL_CAN_ResetError+0x20>
 8000d72:	7bbb      	ldrb	r3, [r7, #14]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d103      	bne.n	8000d80 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
 8000d7e:	e007      	b.n	8000d90 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	05fa0000 	.word	0x05fa0000

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	4909      	ldr	r1, [pc, #36]	; (8000e3c <__NVIC_EnableIRQ+0x38>)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	095b      	lsrs	r3, r3, #5
 8000e1e:	79fa      	ldrb	r2, [r7, #7]
 8000e20:	f002 021f 	and.w	r2, r2, #31
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db10      	blt.n	8000e74 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	490b      	ldr	r1, [pc, #44]	; (8000e80 <__NVIC_DisableIRQ+0x40>)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	095b      	lsrs	r3, r3, #5
 8000e5a:	79fa      	ldrb	r2, [r7, #7]
 8000e5c:	f002 021f 	and.w	r2, r2, #31
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	3320      	adds	r3, #32
 8000e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100

08000e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	db0a      	blt.n	8000eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <__NVIC_SetPriority+0x4c>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	b2d2      	uxtb	r2, r2
 8000ea2:	0112      	lsls	r2, r2, #4
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eac:	e00a      	b.n	8000ec4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eae:	4909      	ldr	r1, [pc, #36]	; (8000ed4 <__NVIC_SetPriority+0x50>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	f003 030f 	and.w	r3, r3, #15
 8000eb6:	3b04      	subs	r3, #4
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	b2d2      	uxtb	r2, r2
 8000ebc:	0112      	lsls	r2, r2, #4
 8000ebe:	b2d2      	uxtb	r2, r2
 8000ec0:	440b      	add	r3, r1
 8000ec2:	761a      	strb	r2, [r3, #24]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000e100 	.word	0xe000e100
 8000ed4:	e000ed00 	.word	0xe000ed00

08000ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f1c3 0307 	rsb	r3, r3, #7
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	bf28      	it	cs
 8000ef6:	2304      	movcs	r3, #4
 8000ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3304      	adds	r3, #4
 8000efe:	2b06      	cmp	r3, #6
 8000f00:	d902      	bls.n	8000f08 <NVIC_EncodePriority+0x30>
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3b03      	subs	r3, #3
 8000f06:	e000      	b.n	8000f0a <NVIC_EncodePriority+0x32>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	1e5a      	subs	r2, r3, #1
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	401a      	ands	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f1e:	2101      	movs	r1, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	1e59      	subs	r1, r3, #1
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	4313      	orrs	r3, r2
         );
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3724      	adds	r7, #36	; 0x24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f4c:	d301      	bcc.n	8000f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00f      	b.n	8000f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <SysTick_Config+0x40>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f5a:	210f      	movs	r1, #15
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f7ff ff90 	bl	8000e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f64:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <SysTick_Config+0x40>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <SysTick_Config+0x40>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	e000e010 	.word	0xe000e010

08000f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ff09 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
 8000fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa8:	f7ff ff1e 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	68b9      	ldr	r1, [r7, #8]
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff ff90 	bl	8000ed8 <NVIC_EncodePriority>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff5f 	bl	8000e84 <__NVIC_SetPriority>
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff11 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff21 	bl	8000e40 <__NVIC_DisableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff94 	bl	8000f3c <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001022:	f005 f859 	bl	80060d8 <HAL_SYSTICK_Callback>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff fb2c 	bl	8000694 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d008      	beq.n	800105c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2280      	movs	r2, #128	; 0x80
 800104e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e052      	b.n	8001102 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	f022 0216 	bic.w	r2, r2, #22
 800106a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	6952      	ldr	r2, [r2, #20]
 8001076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800107a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <HAL_DMA_Abort+0x62>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001088:	2b00      	cmp	r3, #0
 800108a:	d007      	beq.n	800109c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	f022 0208 	bic.w	r2, r2, #8
 800109a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6812      	ldr	r2, [r2, #0]
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	f022 0201 	bic.w	r2, r2, #1
 80010aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ac:	e013      	b.n	80010d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ae:	f7ff faf1 	bl	8000694 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b05      	cmp	r3, #5
 80010ba:	d90c      	bls.n	80010d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2220      	movs	r2, #32
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e015      	b.n	8001102 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1e4      	bne.n	80010ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e8:	223f      	movs	r2, #63	; 0x3f
 80010ea:	409a      	lsls	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d004      	beq.n	8001128 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2280      	movs	r2, #128	; 0x80
 8001122:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e00c      	b.n	8001142 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2205      	movs	r2, #5
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	f022 0201 	bic.w	r2, r2, #1
 800113e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	; 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e175      	b.n	8001474 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 8164 	bne.w	800146e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x4e>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d123      	bne.n	80011fe <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	08da      	lsrs	r2, r3, #3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	3208      	adds	r2, #8
 80011be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	691a      	ldr	r2, [r3, #16]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	69b9      	ldr	r1, [r7, #24]
 80011fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0203 	and.w	r2, r3, #3
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d00b      	beq.n	8001252 <HAL_GPIO_Init+0xea>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001246:	2b11      	cmp	r3, #17
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b12      	cmp	r3, #18
 8001250:	d130      	bne.n	80012b4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 0201 	and.w	r2, r3, #1
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80be 	beq.w	800146e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_GPIO_Init+0x320>)
 80012f4:	4b64      	ldr	r3, [pc, #400]	; (8001488 <HAL_GPIO_Init+0x320>)
 80012f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	; 0x44
 80012fe:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_GPIO_Init+0x320>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800130a:	4a60      	ldr	r2, [pc, #384]	; (800148c <HAL_GPIO_Init+0x324>)
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a57      	ldr	r2, [pc, #348]	; (8001490 <HAL_GPIO_Init+0x328>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d037      	beq.n	80013a6 <HAL_GPIO_Init+0x23e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a56      	ldr	r2, [pc, #344]	; (8001494 <HAL_GPIO_Init+0x32c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d031      	beq.n	80013a2 <HAL_GPIO_Init+0x23a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_GPIO_Init+0x330>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d02b      	beq.n	800139e <HAL_GPIO_Init+0x236>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a54      	ldr	r2, [pc, #336]	; (800149c <HAL_GPIO_Init+0x334>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d025      	beq.n	800139a <HAL_GPIO_Init+0x232>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a53      	ldr	r2, [pc, #332]	; (80014a0 <HAL_GPIO_Init+0x338>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d01f      	beq.n	8001396 <HAL_GPIO_Init+0x22e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	; (80014a4 <HAL_GPIO_Init+0x33c>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d019      	beq.n	8001392 <HAL_GPIO_Init+0x22a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a51      	ldr	r2, [pc, #324]	; (80014a8 <HAL_GPIO_Init+0x340>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d013      	beq.n	800138e <HAL_GPIO_Init+0x226>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a50      	ldr	r2, [pc, #320]	; (80014ac <HAL_GPIO_Init+0x344>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d00d      	beq.n	800138a <HAL_GPIO_Init+0x222>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4f      	ldr	r2, [pc, #316]	; (80014b0 <HAL_GPIO_Init+0x348>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d007      	beq.n	8001386 <HAL_GPIO_Init+0x21e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4e      	ldr	r2, [pc, #312]	; (80014b4 <HAL_GPIO_Init+0x34c>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d101      	bne.n	8001382 <HAL_GPIO_Init+0x21a>
 800137e:	2309      	movs	r3, #9
 8001380:	e012      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001382:	230a      	movs	r3, #10
 8001384:	e010      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001386:	2308      	movs	r3, #8
 8001388:	e00e      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138a:	2307      	movs	r3, #7
 800138c:	e00c      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800138e:	2306      	movs	r3, #6
 8001390:	e00a      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001392:	2305      	movs	r3, #5
 8001394:	e008      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 8001396:	2304      	movs	r3, #4
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139a:	2303      	movs	r3, #3
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x240>
 80013a6:	2300      	movs	r3, #0
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	f002 0203 	and.w	r2, r2, #3
 80013ae:	0092      	lsls	r2, r2, #2
 80013b0:	4093      	lsls	r3, r2
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013b8:	4934      	ldr	r1, [pc, #208]	; (800148c <HAL_GPIO_Init+0x324>)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3302      	adds	r3, #2
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013c6:	4b3c      	ldr	r3, [pc, #240]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013ea:	4a33      	ldr	r2, [pc, #204]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_GPIO_Init+0x350>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <HAL_GPIO_Init+0x350>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <HAL_GPIO_Init+0x350>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3301      	adds	r3, #1
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	f67f ae86 	bls.w	8001188 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40023800 	.word	0x40023800
 800148c:	40013800 	.word	0x40013800
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00
 80014b0:	40022000 	.word	0x40022000
 80014b4:	40022400 	.word	0x40022400
 80014b8:	40013c00 	.word	0x40013c00

080014bc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e0da      	b.n	800168e <HAL_GPIO_DeInit+0x1d2>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014d8:	2201      	movs	r2, #1
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	f040 80ca 	bne.w	8001688 <HAL_GPIO_DeInit+0x1cc>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80014f4:	4a6b      	ldr	r2, [pc, #428]	; (80016a4 <HAL_GPIO_DeInit+0x1e8>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	4013      	ands	r3, r2
 8001514:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_GPIO_DeInit+0x1ec>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d037      	beq.n	800158e <HAL_GPIO_DeInit+0xd2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a62      	ldr	r2, [pc, #392]	; (80016ac <HAL_GPIO_DeInit+0x1f0>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d031      	beq.n	800158a <HAL_GPIO_DeInit+0xce>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a61      	ldr	r2, [pc, #388]	; (80016b0 <HAL_GPIO_DeInit+0x1f4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d02b      	beq.n	8001586 <HAL_GPIO_DeInit+0xca>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a60      	ldr	r2, [pc, #384]	; (80016b4 <HAL_GPIO_DeInit+0x1f8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d025      	beq.n	8001582 <HAL_GPIO_DeInit+0xc6>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a5f      	ldr	r2, [pc, #380]	; (80016b8 <HAL_GPIO_DeInit+0x1fc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d01f      	beq.n	800157e <HAL_GPIO_DeInit+0xc2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_GPIO_DeInit+0x200>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d019      	beq.n	800157a <HAL_GPIO_DeInit+0xbe>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a5d      	ldr	r2, [pc, #372]	; (80016c0 <HAL_GPIO_DeInit+0x204>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_DeInit+0xba>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a5c      	ldr	r2, [pc, #368]	; (80016c4 <HAL_GPIO_DeInit+0x208>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d00d      	beq.n	8001572 <HAL_GPIO_DeInit+0xb6>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a5b      	ldr	r2, [pc, #364]	; (80016c8 <HAL_GPIO_DeInit+0x20c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d007      	beq.n	800156e <HAL_GPIO_DeInit+0xb2>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_GPIO_DeInit+0x210>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d101      	bne.n	800156a <HAL_GPIO_DeInit+0xae>
 8001566:	2309      	movs	r3, #9
 8001568:	e012      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800156a:	230a      	movs	r3, #10
 800156c:	e010      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800156e:	2308      	movs	r3, #8
 8001570:	e00e      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 8001572:	2307      	movs	r3, #7
 8001574:	e00c      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 8001576:	2306      	movs	r3, #6
 8001578:	e00a      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800157a:	2305      	movs	r3, #5
 800157c:	e008      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800157e:	2304      	movs	r3, #4
 8001580:	e006      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 8001582:	2303      	movs	r3, #3
 8001584:	e004      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 8001586:	2302      	movs	r3, #2
 8001588:	e002      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <HAL_GPIO_DeInit+0xd4>
 800158e:	2300      	movs	r3, #0
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	f002 0203 	and.w	r2, r2, #3
 8001596:	0092      	lsls	r2, r2, #2
 8001598:	fa03 f202 	lsl.w	r2, r3, r2
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d132      	bne.n	8001608 <HAL_GPIO_DeInit+0x14c>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	220f      	movs	r2, #15
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80015b2:	483c      	ldr	r0, [pc, #240]	; (80016a4 <HAL_GPIO_DeInit+0x1e8>)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	493a      	ldr	r1, [pc, #232]	; (80016a4 <HAL_GPIO_DeInit+0x1e8>)
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	0892      	lsrs	r2, r2, #2
 80015be:	3202      	adds	r2, #2
 80015c0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	43d2      	mvns	r2, r2
 80015c8:	400a      	ands	r2, r1
 80015ca:	3302      	adds	r3, #2
 80015cc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80015d0:	493f      	ldr	r1, [pc, #252]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80015de:	493c      	ldr	r1, [pc, #240]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015e0:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80015ec:	4938      	ldr	r1, [pc, #224]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015f0:	689a      	ldr	r2, [r3, #8]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	4013      	ands	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80015fa:	4935      	ldr	r1, [pc, #212]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_GPIO_DeInit+0x214>)
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	43db      	mvns	r3, r3
 8001604:	4013      	ands	r3, r2
 8001606:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	2103      	movs	r1, #3
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	08d9      	lsrs	r1, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3108      	adds	r1, #8
 800162a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	200f      	movs	r0, #15
 8001638:	fa00 f303 	lsl.w	r3, r0, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	4019      	ands	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3208      	adds	r2, #8
 8001644:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2103      	movs	r1, #3
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	2101      	movs	r1, #1
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	401a      	ands	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2103      	movs	r1, #3
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	f67f af21 	bls.w	80014d8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	40020400 	.word	0x40020400
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020c00 	.word	0x40020c00
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40021400 	.word	0x40021400
 80016c0:	40021800 	.word	0x40021800
 80016c4:	40021c00 	.word	0x40021c00
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40022400 	.word	0x40022400
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800170c:	4a05      	ldr	r2, [pc, #20]	; (8001724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40007000 	.word	0x40007000

08001728 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_PWR_DisableBkUpAccess+0x1c>)
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000

08001748 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800176a:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001774:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001776:	f7fe ff8d 	bl	8000694 <HAL_GetTick>
 800177a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800177c:	e009      	b.n	8001792 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800177e:	f7fe ff89 	bl	8000694 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178c:	d901      	bls.n	8001792 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e022      	b.n	80017d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179e:	d1ee      	bne.n	800177e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017a0:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ac:	f7fe ff72 	bl	8000694 <HAL_GetTick>
 80017b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017b2:	e009      	b.n	80017c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017b4:	f7fe ff6e 	bl	8000694 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c2:	d901      	bls.n	80017c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e007      	b.n	80017d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80017d4:	d1ee      	bne.n	80017b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40007000 	.word	0x40007000

080017e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e25e      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8087 	beq.w	800191a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800180c:	4b96      	ldr	r3, [pc, #600]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d00c      	beq.n	8001832 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b08      	cmp	r3, #8
 8001822:	d112      	bne.n	800184a <HAL_RCC_OscConfig+0x62>
 8001824:	4b90      	ldr	r3, [pc, #576]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001830:	d10b      	bne.n	800184a <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001832:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06c      	beq.n	8001918 <HAL_RCC_OscConfig+0x130>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d168      	bne.n	8001918 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e238      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x7a>
 8001854:	4a84      	ldr	r2, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001856:	4b84      	ldr	r3, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	e02e      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x9c>
 800186a:	4a7f      	ldr	r2, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800186c:	4b7e      	ldr	r3, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4a7c      	ldr	r2, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001878:	4b7b      	ldr	r3, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc0>
 800188e:	4a76      	ldr	r2, [pc, #472]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001890:	4b75      	ldr	r3, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800189c:	4b72      	ldr	r3, [pc, #456]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xd8>
 80018a8:	4a6f      	ldr	r2, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018aa:	4b6f      	ldr	r3, [pc, #444]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4a6c      	ldr	r2, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018b6:	4b6c      	ldr	r3, [pc, #432]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7fe fee4 	bl	8000694 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d0:	f7fe fee0 	bl	8000694 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e1ec      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b61      	ldr	r3, [pc, #388]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe8>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7fe fed0 	bl	8000694 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f8:	f7fe fecc 	bl	8000694 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1d8      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b57      	ldr	r3, [pc, #348]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x110>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d069      	beq.n	80019fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001926:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x190>
 800193e:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x17a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1ac      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4941      	ldr	r1, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e040      	b.n	80019fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d023      	beq.n	80019c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4a39      	ldr	r2, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7fe fe82 	bl	8000694 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001994:	f7fe fe7e 	bl	8000694 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e18a      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b2:	492d      	ldr	r1, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019b4:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]
 80019c6:	e018      	b.n	80019fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c8:	4a27      	ldr	r2, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019ca:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7fe fe5e 	bl	8000694 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019dc:	f7fe fe5a 	bl	8000694 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e166      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d038      	beq.n	8001a78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4a16      	ldr	r2, [pc, #88]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7fe fe3b 	bl	8000694 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a22:	f7fe fe37 	bl	8000694 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e143      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0f0      	beq.n	8001a22 <HAL_RCC_OscConfig+0x23a>
 8001a40:	e01a      	b.n	8001a78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <HAL_RCC_OscConfig+0x280>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4e:	f7fe fe21 	bl	8000694 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7fe fe1d 	bl	8000694 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d903      	bls.n	8001a6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e129      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
 8001a68:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b95      	ldr	r3, [pc, #596]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ee      	bne.n	8001a56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a4 	beq.w	8001bce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8f      	ldr	r3, [pc, #572]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4a8c      	ldr	r2, [pc, #560]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001a94:	4b8b      	ldr	r3, [pc, #556]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aae:	4b86      	ldr	r3, [pc, #536]	; (8001cc8 <HAL_RCC_OscConfig+0x4e0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001aba:	4a83      	ldr	r2, [pc, #524]	; (8001cc8 <HAL_RCC_OscConfig+0x4e0>)
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_OscConfig+0x4e0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7fe fde5 	bl	8000694 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7fe fde1 	bl	8000694 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e0ed      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x4e0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x31a>
 8001af4:	4a73      	ldr	r2, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6713      	str	r3, [r2, #112]	; 0x70
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x33c>
 8001b0a:	4a6e      	ldr	r2, [pc, #440]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b0c:	4b6d      	ldr	r3, [pc, #436]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	4a6b      	ldr	r2, [pc, #428]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b18:	4b6a      	ldr	r3, [pc, #424]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6713      	str	r3, [r2, #112]	; 0x70
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x35e>
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b2e:	4b65      	ldr	r3, [pc, #404]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6713      	str	r3, [r2, #112]	; 0x70
 8001b38:	4a62      	ldr	r2, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b3a:	4b62      	ldr	r3, [pc, #392]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6713      	str	r3, [r2, #112]	; 0x70
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x376>
 8001b46:	4a5f      	ldr	r2, [pc, #380]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b48:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6713      	str	r3, [r2, #112]	; 0x70
 8001b52:	4a5c      	ldr	r2, [pc, #368]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b54:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b66:	f7fe fd95 	bl	8000694 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7fe fd91 	bl	8000694 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e09b      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x386>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b92:	f7fe fd7f 	bl	8000694 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7fe fd7b 	bl	8000694 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e085      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b44      	ldr	r3, [pc, #272]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4a40      	ldr	r2, [pc, #256]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bc4:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d071      	beq.n	8001cba <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd6:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d069      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d14b      	bne.n	8001c82 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bea:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bec:	4b35      	ldr	r3, [pc, #212]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fd4d 	bl	8000694 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe fd49 	bl	8000694 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e055      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c10:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1c:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	431a      	orrs	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	085b      	lsrs	r3, r3, #1
 8001c36:	3b01      	subs	r3, #1
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	071b      	lsls	r3, r3, #28
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c50:	4b1c      	ldr	r3, [pc, #112]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7fe fd1b 	bl	8000694 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7fe fd17 	bl	8000694 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e023      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x47a>
 8001c80:	e01b      	b.n	8001cba <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4a10      	ldr	r2, [pc, #64]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c84:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe fd01 	bl	8000694 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe fcfd 	bl	8000694 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e009      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_RCC_OscConfig+0x4dc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x4ae>
 8001cb4:	e001      	b.n	8001cba <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40007000 	.word	0x40007000

08001ccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e0ce      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b69      	ldr	r3, [pc, #420]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 020f 	and.w	r2, r3, #15
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d210      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4966      	ldr	r1, [pc, #408]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 020f 	bic.w	r2, r3, #15
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b6      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d020      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d005      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d2c:	4a58      	ldr	r2, [pc, #352]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d44:	4a52      	ldr	r2, [pc, #328]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d50:	494f      	ldr	r1, [pc, #316]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d040      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b46      	ldr	r3, [pc, #280]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d115      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07d      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d8e:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e071      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	4b3c      	ldr	r3, [pc, #240]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e069      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dae:	4938      	ldr	r1, [pc, #224]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	4b37      	ldr	r3, [pc, #220]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f023 0203 	bic.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dc0:	f7fe fc68 	bl	8000694 <HAL_GetTick>
 8001dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc8:	f7fe fc64 	bl	8000694 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e051      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 020c 	and.w	r2, r3, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d1eb      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d910      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4923      	ldr	r1, [pc, #140]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 020f 	bic.w	r2, r3, #15
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e030      	b.n	8001e82 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2c:	4918      	ldr	r1, [pc, #96]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e4a:	4911      	ldr	r1, [pc, #68]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e5e:	f000 f81d 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e62:	4601      	mov	r1, r0
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	5cd3      	ldrb	r3, [r2, r3]
 8001e72:	fa21 f303 	lsr.w	r3, r1, r3
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <HAL_RCC_ClockConfig+0x1cc>)
 8001e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7fe fbc6 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00
 8001e90:	40023800 	.word	0x40023800
 8001e94:	0800aa0c 	.word	0x0800aa0c
 8001e98:	20000008 	.word	0x20000008

08001e9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea0:	b08f      	sub	sp, #60	; 0x3c
 8001ea2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8001eac:	2300      	movs	r3, #0
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eb4:	4b62      	ldr	r3, [pc, #392]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 030c 	and.w	r3, r3, #12
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d007      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d008      	beq.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f040 80b2 	bne.w	800202e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8001ece:	e0b1      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ed2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ed4:	e0ae      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed6:	4b5a      	ldr	r3, [pc, #360]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001ee0:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d04e      	beq.n	8001f8a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eec:	4b54      	ldr	r3, [pc, #336]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	f04f 0400 	mov.w	r4, #0
 8001ef6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	ea01 0103 	and.w	r1, r1, r3
 8001f02:	ea02 0204 	and.w	r2, r2, r4
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	0160      	lsls	r0, r4, #5
 8001f0c:	6278      	str	r0, [r7, #36]	; 0x24
 8001f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f10:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001f14:	6278      	str	r0, [r7, #36]	; 0x24
 8001f16:	015b      	lsls	r3, r3, #5
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f1e:	1a5b      	subs	r3, r3, r1
 8001f20:	eb64 0402 	sbc.w	r4, r4, r2
 8001f24:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001f28:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001f2c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001f30:	ebb8 0803 	subs.w	r8, r8, r3
 8001f34:	eb69 0904 	sbc.w	r9, r9, r4
 8001f38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f3c:	61fb      	str	r3, [r7, #28]
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f44:	61fb      	str	r3, [r7, #28]
 8001f46:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001f50:	eb18 0801 	adds.w	r8, r8, r1
 8001f54:	eb49 0902 	adc.w	r9, r9, r2
 8001f58:	ea4f 2389 	mov.w	r3, r9, lsl #10
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	ea43 5398 	orr.w	r3, r3, r8, lsr #22
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	ea4f 2388 	mov.w	r3, r8, lsl #10
 8001f6a:	613b      	str	r3, [r7, #16]
 8001f6c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001f70:	4640      	mov	r0, r8
 8001f72:	4649      	mov	r1, r9
 8001f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f76:	f04f 0400 	mov.w	r4, #0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	f7fe f9af 	bl	80002e0 <__aeabi_uldivmod>
 8001f82:	4603      	mov	r3, r0
 8001f84:	460c      	mov	r4, r1
 8001f86:	637b      	str	r3, [r7, #52]	; 0x34
 8001f88:	e043      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	f04f 0400 	mov.w	r4, #0
 8001f94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	ea01 0103 	and.w	r1, r1, r3
 8001fa0:	ea02 0204 	and.w	r2, r2, r4
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4614      	mov	r4, r2
 8001fa8:	0160      	lsls	r0, r4, #5
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	015b      	lsls	r3, r3, #5
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001fbc:	1a5b      	subs	r3, r3, r1
 8001fbe:	eb64 0402 	sbc.w	r4, r4, r2
 8001fc2:	01a6      	lsls	r6, r4, #6
 8001fc4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8001fc8:	019d      	lsls	r5, r3, #6
 8001fca:	1aed      	subs	r5, r5, r3
 8001fcc:	eb66 0604 	sbc.w	r6, r6, r4
 8001fd0:	00f3      	lsls	r3, r6, #3
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	00eb      	lsls	r3, r5, #3
 8001fde:	603b      	str	r3, [r7, #0]
 8001fe0:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001fe4:	186d      	adds	r5, r5, r1
 8001fe6:	eb46 0602 	adc.w	r6, r6, r2
 8001fea:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8001fee:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8001ff2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001ff6:	4655      	mov	r5, sl
 8001ff8:	465e      	mov	r6, fp
 8001ffa:	4628      	mov	r0, r5
 8001ffc:	4631      	mov	r1, r6
 8001ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002000:	f04f 0400 	mov.w	r4, #0
 8002004:	461a      	mov	r2, r3
 8002006:	4623      	mov	r3, r4
 8002008:	f7fe f96a 	bl	80002e0 <__aeabi_uldivmod>
 800200c:	4603      	mov	r3, r0
 800200e:	460c      	mov	r4, r1
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0c1b      	lsrs	r3, r3, #16
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	3301      	adds	r3, #1
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800202c:	e002      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800202e:	4b05      	ldr	r3, [pc, #20]	; (8002044 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002030:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002032:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002036:	4618      	mov	r0, r3
 8002038:	373c      	adds	r7, #60	; 0x3c
 800203a:	46bd      	mov	sp, r7
 800203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	00f42400 	.word	0x00f42400

08002048 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800204c:	4b03      	ldr	r3, [pc, #12]	; (800205c <HAL_RCC_GetHCLKFreq+0x14>)
 800204e:	681b      	ldr	r3, [r3, #0]
}
 8002050:	4618      	mov	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20000008 	.word	0x20000008

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff0 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002068:	4601      	mov	r1, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a9b      	lsrs	r3, r3, #10
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5cd3      	ldrb	r3, [r2, r3]
 8002078:	fa21 f303 	lsr.w	r3, r1, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800
 8002084:	0800aa1c 	.word	0x0800aa1c

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffdc 	bl	8002048 <HAL_RCC_GetHCLKFreq>
 8002090:	4601      	mov	r1, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	0b5b      	lsrs	r3, r3, #13
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4a03      	ldr	r2, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40023800 	.word	0x40023800
 80020ac:	0800aa1c 	.word	0x0800aa1c

080020b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d012      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d8:	4a69      	ldr	r2, [pc, #420]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020da:	4b69      	ldr	r3, [pc, #420]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020e2:	6093      	str	r3, [r2, #8]
 80020e4:	4966      	ldr	r1, [pc, #408]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e6:	4b66      	ldr	r3, [pc, #408]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d017      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800210a:	495d      	ldr	r1, [pc, #372]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210c:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800210e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002112:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002128:	d101      	bne.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800212a:	2301      	movs	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d017      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002146:	494e      	ldr	r1, [pc, #312]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002148:	4b4d      	ldr	r3, [pc, #308]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002164:	d101      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002166:	2301      	movs	r3, #1
 8002168:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002172:	2301      	movs	r3, #1
 8002174:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 808b 	beq.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4a3a      	ldr	r2, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002196:	4b3a      	ldr	r3, [pc, #232]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	; 0x40
 80021a0:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021ac:	4a35      	ldr	r2, [pc, #212]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f7fe fa6c 	bl	8000694 <HAL_GetTick>
 80021bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c0:	f7fe fa68 	bl	8000694 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e38d      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021d2:	4b2c      	ldr	r3, [pc, #176]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021de:	4b28      	ldr	r3, [pc, #160]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d035      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d02e      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021fc:	4b20      	ldr	r3, [pc, #128]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002204:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800220a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002210:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002212:	4a1b      	ldr	r2, [pc, #108]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800221e:	4a18      	ldr	r2, [pc, #96]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002224:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b01      	cmp	r3, #1
 800222e:	d114      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fa30 	bl	8000694 <HAL_GetTick>
 8002234:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002236:	e00a      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002238:	f7fe fa2c 	bl	8000694 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f241 3288 	movw	r2, #5000	; 0x1388
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e34f      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0ee      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002266:	d111      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	4b05      	ldr	r3, [pc, #20]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002278:	400b      	ands	r3, r1
 800227a:	4313      	orrs	r3, r2
 800227c:	6083      	str	r3, [r0, #8]
 800227e:	e00b      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002280:	40023800 	.word	0x40023800
 8002284:	40007000 	.word	0x40007000
 8002288:	0ffffcff 	.word	0x0ffffcff
 800228c:	4ab2      	ldr	r2, [pc, #712]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800228e:	4bb2      	ldr	r3, [pc, #712]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002296:	6093      	str	r3, [r2, #8]
 8002298:	49af      	ldr	r1, [pc, #700]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800229a:	4baf      	ldr	r3, [pc, #700]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800229c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a6:	4313      	orrs	r3, r2
 80022a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d010      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022b6:	4aa8      	ldr	r2, [pc, #672]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022b8:	4ba7      	ldr	r3, [pc, #668]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022c6:	49a4      	ldr	r1, [pc, #656]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022c8:	4ba3      	ldr	r3, [pc, #652]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022ca:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022e4:	499c      	ldr	r1, [pc, #624]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022e6:	4b9c      	ldr	r3, [pc, #624]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002306:	4994      	ldr	r1, [pc, #592]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002308:	4b93      	ldr	r3, [pc, #588]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00a      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002328:	498b      	ldr	r1, [pc, #556]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800232a:	4b8b      	ldr	r3, [pc, #556]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00a      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800234a:	4983      	ldr	r1, [pc, #524]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800234c:	4b82      	ldr	r3, [pc, #520]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800236c:	497a      	ldr	r1, [pc, #488]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	f023 0203 	bic.w	r2, r3, #3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800238e:	4972      	ldr	r1, [pc, #456]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002390:	4b71      	ldr	r3, [pc, #452]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002396:	f023 020c 	bic.w	r2, r3, #12
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00a      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023b0:	4969      	ldr	r1, [pc, #420]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023b2:	4b69      	ldr	r3, [pc, #420]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023d2:	4961      	ldr	r1, [pc, #388]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023d4:	4b60      	ldr	r3, [pc, #384]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023f4:	4958      	ldr	r1, [pc, #352]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023f6:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002416:	4950      	ldr	r1, [pc, #320]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002418:	4b4f      	ldr	r3, [pc, #316]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002438:	4947      	ldr	r1, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800243a:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800245a:	493f      	ldr	r1, [pc, #252]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800245c:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800247c:	4936      	ldr	r1, [pc, #216]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800247e:	4b36      	ldr	r3, [pc, #216]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d011      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800249e:	492e      	ldr	r1, [pc, #184]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024a0:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024bc:	d101      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024de:	491e      	ldr	r1, [pc, #120]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002500:	4915      	ldr	r1, [pc, #84]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002512:	4313      	orrs	r3, r2
 8002514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002526:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00e      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002548:	4903      	ldr	r1, [pc, #12]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800254a:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800254c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002550:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	e001      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8002558:	40023800 	.word	0x40023800
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x4da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002572:	4981      	ldr	r1, [pc, #516]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800257a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d005      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002598:	f040 80d6 	bne.w	8002748 <HAL_RCCEx_PeriphCLKConfig+0x698>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800259c:	4a76      	ldr	r2, [pc, #472]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe f874 	bl	8000694 <HAL_GetTick>
 80025ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x512>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025b0:	f7fe f870 	bl	8000694 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b64      	cmp	r3, #100	; 0x64
 80025bc:	d901      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x512>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e195      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80025c2:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x500>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d021      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d11d      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x56e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80025f0:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80025f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025f6:	0e1b      	lsrs	r3, r3, #24
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80025fe:	495e      	ldr	r1, [pc, #376]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	019a      	lsls	r2, r3, #6
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	061b      	lsls	r3, r3, #24
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	071b      	lsls	r3, r3, #28
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d004      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002632:	d00a      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x59a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800263c:	2b00      	cmp	r3, #0
 800263e:	d02e      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d129      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800264c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002658:	4b47      	ldr	r3, [pc, #284]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800265a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800265e:	0f1b      	lsrs	r3, r3, #28
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002666:	4944      	ldr	r1, [pc, #272]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	019a      	lsls	r2, r3, #6
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	041b      	lsls	r3, r3, #16
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	061b      	lsls	r3, r3, #24
 800267a:	431a      	orrs	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	071b      	lsls	r3, r3, #28
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002686:	493c      	ldr	r1, [pc, #240]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002688:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800268a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268e:	f023 021f 	bic.w	r2, r3, #31
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	3b01      	subs	r3, #1
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d01d      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x636>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026b0:	0e1b      	lsrs	r3, r3, #24
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026b8:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026be:	0f1b      	lsrs	r3, r3, #28
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80026c6:	492c      	ldr	r1, [pc, #176]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	019a      	lsls	r2, r3, #6
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	041b      	lsls	r3, r3, #16
 80026d4:	431a      	orrs	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	061b      	lsls	r3, r3, #24
 80026da:	431a      	orrs	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	071b      	lsls	r3, r3, #28
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x666>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80026f2:	4921      	ldr	r1, [pc, #132]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	019a      	lsls	r2, r3, #6
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	071b      	lsls	r3, r3, #28
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002720:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002722:	f7fd ffb7 	bl	8000694 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800272a:	f7fd ffb3 	bl	8000694 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b64      	cmp	r3, #100	; 0x64
 8002736:	d901      	bls.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x68c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e0d8      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x67a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b01      	cmp	r3, #1
 800274c:	f040 80ce 	bne.w	80028ec <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002752:	4b09      	ldr	r3, [pc, #36]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800275c:	f7fd ff9a 	bl	8000694 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002762:	e00b      	b.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002764:	f7fd ff96 	bl	8000694 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d904      	bls.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0bb      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002776:	bf00      	nop
 8002778:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800277c:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002788:	d0ec      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x6b4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02e      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d12a      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027b2:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	0c1b      	lsrs	r3, r3, #16
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80027c0:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c6:	0f1b      	lsrs	r3, r3, #28
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80027ce:	494a      	ldr	r1, [pc, #296]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	019a      	lsls	r2, r3, #6
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	071b      	lsls	r3, r3, #28
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027ee:	4942      	ldr	r1, [pc, #264]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027f0:	4b41      	ldr	r3, [pc, #260]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80027f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fe:	3b01      	subs	r3, #1
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d022      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800281c:	d11d      	bne.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800281e:	4b36      	ldr	r3, [pc, #216]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002824:	0e1b      	lsrs	r3, r3, #24
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	0f1b      	lsrs	r3, r3, #28
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800283a:	492f      	ldr	r1, [pc, #188]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	019a      	lsls	r2, r3, #6
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	431a      	orrs	r2, r3
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	071b      	lsls	r3, r3, #28
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0308 	and.w	r3, r3, #8
 8002862:	2b00      	cmp	r3, #0
 8002864:	d028      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	0e1b      	lsrs	r3, r3, #24
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002874:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	0c1b      	lsrs	r3, r3, #16
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002882:	491d      	ldr	r1, [pc, #116]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	695b      	ldr	r3, [r3, #20]
 8002888:	019a      	lsls	r2, r3, #6
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	041b      	lsls	r3, r3, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	071b      	lsls	r3, r3, #28
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80028a2:	4915      	ldr	r1, [pc, #84]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b2:	4313      	orrs	r3, r2
 80028b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c4:	f7fd fee6 	bl	8000694 <HAL_GetTick>
 80028c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028cc:	f7fd fee2 	bl	8000694 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b64      	cmp	r3, #100	; 0x64
 80028d8:	d901      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e007      	b.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028ea:	d1ef      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800

080028fc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e06b      	b.n	80029e6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7f5b      	ldrb	r3, [r3, #29]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f003 fd9a 	bl	8006458 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	22ca      	movs	r2, #202	; 0xca
 8002930:	625a      	str	r2, [r3, #36]	; 0x24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2253      	movs	r2, #83	; 0x53
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fa96 	bl	8002e6c <RTC_EnterInitMode>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d008      	beq.n	8002958 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2204      	movs	r2, #4
 8002952:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e046      	b.n	80029e6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6899      	ldr	r1, [r3, #8]
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RTC_Init+0xf4>)
 8002964:	400b      	ands	r3, r1
 8002966:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	6891      	ldr	r1, [r2, #8]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6850      	ldr	r0, [r2, #4]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6912      	ldr	r2, [r2, #16]
 800297a:	4310      	orrs	r0, r2
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	6952      	ldr	r2, [r2, #20]
 8002980:	4302      	orrs	r2, r0
 8002982:	430a      	orrs	r2, r1
 8002984:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68d2      	ldr	r2, [r2, #12]
 800298e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	6911      	ldr	r1, [r2, #16]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6892      	ldr	r2, [r2, #8]
 800299e:	0412      	lsls	r2, r2, #16
 80029a0:	430a      	orrs	r2, r1
 80029a2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6992      	ldr	r2, [r2, #24]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	22ff      	movs	r2, #255	; 0xff
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	ff8fffbf 	.word	0xff8fffbf

080029f4 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	7f1b      	ldrb	r3, [r3, #28]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_RTC_SetTime+0x1c>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0a8      	b.n	8002b62 <HAL_RTC_SetTime+0x16e>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2201      	movs	r2, #1
 8002a14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d126      	bne.n	8002a70 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fa42 	bl	8002ec4 <RTC_ByteToBcd2>
 8002a40:	4603      	mov	r3, r0
 8002a42:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fa3b 	bl	8002ec4 <RTC_ByteToBcd2>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002a52:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	789b      	ldrb	r3, [r3, #2]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fa33 	bl	8002ec4 <RTC_ByteToBcd2>
 8002a5e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002a60:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	7b1b      	ldrb	r3, [r3, #12]
 8002a68:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e018      	b.n	8002aa2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	785b      	ldrb	r3, [r3, #1]
 8002a8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002a90:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002a96:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	7b1b      	ldrb	r3, [r3, #12]
 8002a9c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	22ca      	movs	r2, #202	; 0xca
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2253      	movs	r2, #83	; 0x53
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f9da 	bl	8002e6c <RTC_EnterInitMode>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2204      	movs	r2, #4
 8002aca:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e045      	b.n	8002b62 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	6979      	ldr	r1, [r7, #20]
 8002adc:	4b23      	ldr	r3, [pc, #140]	; (8002b6c <HAL_RTC_SetTime+0x178>)
 8002ade:	400b      	ands	r3, r1
 8002ae0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	6892      	ldr	r2, [r2, #8]
 8002aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002af0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	6891      	ldr	r1, [r2, #8]
 8002afc:	68ba      	ldr	r2, [r7, #8]
 8002afe:	6910      	ldr	r0, [r2, #16]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	6952      	ldr	r2, [r2, #20]
 8002b04:	4302      	orrs	r2, r0
 8002b06:	430a      	orrs	r2, r1
 8002b08:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	68d2      	ldr	r2, [r2, #12]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b18:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d111      	bne.n	8002b4c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f977 	bl	8002e1c <HAL_RTC_WaitForSynchro>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00b      	beq.n	8002b4c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2204      	movs	r2, #4
 8002b40:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2200      	movs	r2, #0
 8002b46:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e00a      	b.n	8002b62 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	22ff      	movs	r2, #255	; 0xff
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002b60:	2300      	movs	r3, #0
  }
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd90      	pop	{r4, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	007f7f7f 	.word	0x007f7f7f

08002b70 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RTC_GetTime+0xb8>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	0c1b      	lsrs	r3, r3, #16
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	0c1b      	lsrs	r3, r3, #16
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11a      	bne.n	8002c1e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 f987 	bl	8002f00 <RTC_Bcd2ToByte>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	785b      	ldrb	r3, [r3, #1]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f97e 	bl	8002f00 <RTC_Bcd2ToByte>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f975 	bl	8002f00 <RTC_Bcd2ToByte>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	007f7f7f 	.word	0x007f7f7f

08002c2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c2c:	b590      	push	{r4, r7, lr}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	7f1b      	ldrb	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RTC_SetDate+0x1c>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e092      	b.n	8002d6e <HAL_RTC_SetDate+0x142>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10e      	bne.n	8002c78 <HAL_RTC_SetDate+0x4c>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	785b      	ldrb	r3, [r3, #1]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d008      	beq.n	8002c78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	785b      	ldrb	r3, [r3, #1]
 8002c6a:	f023 0310 	bic.w	r3, r3, #16
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	330a      	adds	r3, #10
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11c      	bne.n	8002cb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f91e 	bl	8002ec4 <RTC_ByteToBcd2>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f000 f917 	bl	8002ec4 <RTC_ByteToBcd2>
 8002c96:	4603      	mov	r3, r0
 8002c98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002c9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	789b      	ldrb	r3, [r3, #2]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 f90f 	bl	8002ec4 <RTC_ByteToBcd2>
 8002ca6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002ca8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
 8002cb6:	e00e      	b.n	8002cd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	78db      	ldrb	r3, [r3, #3]
 8002cbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	785b      	ldrb	r3, [r3, #1]
 8002cc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002cc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8002cca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	22ca      	movs	r2, #202	; 0xca
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2253      	movs	r2, #83	; 0x53
 8002ce4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f000 f8c0 	bl	8002e6c <RTC_EnterInitMode>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	22ff      	movs	r2, #255	; 0xff
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e031      	b.n	8002d6e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	6979      	ldr	r1, [r7, #20]
 8002d10:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <HAL_RTC_SetDate+0x14c>)
 8002d12:	400b      	ands	r3, r1
 8002d14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	68d2      	ldr	r2, [r2, #12]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f871 	bl	8002e1c <HAL_RTC_WaitForSynchro>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00b      	beq.n	8002d58 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e00a      	b.n	8002d6e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	22ff      	movs	r2, #255	; 0xff
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	00ffff3f 	.word	0x00ffff3f

08002d7c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4b21      	ldr	r3, [pc, #132]	; (8002e18 <HAL_RTC_GetDate+0x9c>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0b5b      	lsrs	r3, r3, #13
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d11a      	bne.n	8002e0c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	78db      	ldrb	r3, [r3, #3]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f890 	bl	8002f00 <RTC_Bcd2ToByte>
 8002de0:	4603      	mov	r3, r0
 8002de2:	461a      	mov	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	785b      	ldrb	r3, [r3, #1]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f887 	bl	8002f00 <RTC_Bcd2ToByte>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	789b      	ldrb	r3, [r3, #2]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 f87e 	bl	8002f00 <RTC_Bcd2ToByte>
 8002e04:	4603      	mov	r3, r0
 8002e06:	461a      	mov	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	00ffff3f 	.word	0x00ffff3f

08002e1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	68d2      	ldr	r2, [r2, #12]
 8002e32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e36:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e38:	f7fd fc2c 	bl	8000694 <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e3e:	e009      	b.n	8002e54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e40:	f7fd fc28 	bl	8000694 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4e:	d901      	bls.n	8002e54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e007      	b.n	8002e64 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d119      	bne.n	8002eba <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e90:	f7fd fc00 	bl	8000694 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002e96:	e009      	b.n	8002eac <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e98:	f7fd fbfc 	bl	8000694 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea6:	d901      	bls.n	8002eac <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e007      	b.n	8002ebc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0ee      	beq.n	8002e98 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8002ed2:	e005      	b.n	8002ee0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	3b0a      	subs	r3, #10
 8002ede:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	d8f6      	bhi.n	8002ed4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	b2db      	uxtb	r3, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8002f0e:	79fb      	ldrb	r3, [r7, #7]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b2db      	uxtb	r3, r3
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3350      	adds	r3, #80	; 0x50
 8002f52:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	601a      	str	r2, [r3, #0]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3350      	adds	r3, #80	; 0x50
 8002f84:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e01d      	b.n	8002fee <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d105      	bne.n	8002fca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f003 fb65 	bl	8006694 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f80f 	bl	8002ff6 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002ff6:	b5b0      	push	{r4, r5, r7, lr}
 8002ff8:	b08e      	sub	sp, #56	; 0x38
 8002ffa:	af04      	add	r7, sp, #16
 8002ffc:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8003006:	2300      	movs	r3, #0
 8003008:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003016:	2376      	movs	r3, #118	; 0x76
 8003018:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681d      	ldr	r5, [r3, #0]
 800301e:	466c      	mov	r4, sp
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800302c:	f107 030c 	add.w	r3, r7, #12
 8003030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003032:	4628      	mov	r0, r5
 8003034:	f002 f9a6 	bl	8005384 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	6852      	ldr	r2, [r2, #4]
 8003042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003046:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f002 f9e3 	bl	8005418 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6812      	ldr	r2, [r2, #0]
 800305a:	6852      	ldr	r2, [r2, #4]
 800305c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003060:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8003062:	2002      	movs	r0, #2
 8003064:	f7fd fb22 	bl	80006ac <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f001 f844 	bl	80040f6 <SD_PowerON>
 800306e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00b      	beq.n	800308e <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e013      	b.n	80030b6 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 ff68 	bl	8003f64 <SD_InitCard>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00b      	beq.n	80030b4 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e000      	b.n	80030b6 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3728      	adds	r7, #40	; 0x28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bdb0      	pop	{r4, r5, r7, pc}

080030be <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80030be:	b590      	push	{r4, r7, lr}
 80030c0:	b08f      	sub	sp, #60	; 0x3c
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	60f8      	str	r0, [r7, #12]
 80030c6:	60b9      	str	r1, [r7, #8]
 80030c8:	607a      	str	r2, [r7, #4]
 80030ca:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7fd fae0 	bl	8000694 <HAL_GetTick>
 80030d4:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80030d6:	2300      	movs	r3, #0
 80030d8:	633b      	str	r3, [r7, #48]	; 0x30
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d107      	bne.n	80030f4 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e176      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	f040 8169 	bne.w	80033d4 <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	441a      	add	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003112:	429a      	cmp	r2, r3
 8003114:	d907      	bls.n	8003126 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e15d      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2203      	movs	r2, #3
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	2b01      	cmp	r3, #1
 800313c:	d002      	beq.n	8003144 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	025b      	lsls	r3, r3, #9
 8003142:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 7100 	mov.w	r1, #512	; 0x200
 800314c:	4618      	mov	r0, r3
 800314e:	f002 f9f7 	bl	8005540 <SDMMC_CmdBlockLength>
 8003152:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003156:	2b00      	cmp	r3, #0
 8003158:	d010      	beq.n	800317c <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316a:	431a      	orrs	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e132      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800317c:	f04f 33ff 	mov.w	r3, #4294967295
 8003180:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	025b      	lsls	r3, r3, #9
 8003186:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003188:	2390      	movs	r3, #144	; 0x90
 800318a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800318c:	2302      	movs	r3, #2
 800318e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003190:	2300      	movs	r3, #0
 8003192:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003194:	2301      	movs	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f107 0210 	add.w	r2, r7, #16
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 f9a0 	bl	80054e8 <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d90a      	bls.n	80031c4 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2202      	movs	r2, #2
 80031b2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fa08 	bl	80055d0 <SDMMC_CmdReadMultiBlock>
 80031c0:	6378      	str	r0, [r7, #52]	; 0x34
 80031c2:	e009      	b.n	80031d8 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2201      	movs	r2, #1
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f002 f9d9 	bl	8005588 <SDMMC_CmdReadSingleBlock>
 80031d6:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d04a      	beq.n	8003274 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ee:	431a      	orrs	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e0f0      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800320e:	2300      	movs	r3, #0
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
 8003212:	e00d      	b.n	8003230 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8003214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800321a:	18d4      	adds	r4, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f002 f8db 	bl	80053dc <SDMMC_ReadFIFO>
 8003226:	4603      	mov	r3, r0
 8003228:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 800322a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800322c:	3301      	adds	r3, #1
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	2b07      	cmp	r3, #7
 8003234:	d9ee      	bls.n	8003214 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	3320      	adds	r3, #32
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 800323c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_SD_ReadBlocks+0x194>
 8003242:	f7fd fa27 	bl	8000694 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800324e:	429a      	cmp	r2, r3
 8003250:	d310      	bcc.n	8003274 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800325a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003260:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0b6      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0be      	beq.n	8003200 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d020      	beq.n	80032d2 <HAL_SD_ReadBlocks+0x214>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d91d      	bls.n	80032d2 <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329a:	2b03      	cmp	r3, #3
 800329c:	d019      	beq.n	80032d2 <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f002 fa00 	bl	80056a8 <SDMMC_CmdStopTransfer>
 80032a8:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80032b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e087      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	f043 0208 	orr.w	r2, r3, #8
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e06f      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d010      	beq.n	8003332 <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003318:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331e:	f043 0202 	orr.w	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e057      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d037      	beq.n	80033b0 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f043 0220 	orr.w	r2, r3, #32
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e03f      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f002 f838 	bl	80053dc <SDMMC_ReadFIFO>
 800336c:	4602      	mov	r2, r0
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8003372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003374:	3304      	adds	r3, #4
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800337a:	2b00      	cmp	r3, #0
 800337c:	d007      	beq.n	800338e <HAL_SD_ReadBlocks+0x2d0>
 800337e:	f7fd f989 	bl	8000694 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	1ad2      	subs	r2, r2, r3
 8003388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338a:	429a      	cmp	r2, r3
 800338c:	d310      	bcc.n	80033b0 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003396:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e018      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1d1      	bne.n	8003362 <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	e006      	b.n	80033e2 <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	373c      	adds	r7, #60	; 0x3c
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b08e      	sub	sp, #56	; 0x38
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7fd f94a 	bl	8000694 <HAL_GetTick>
 8003400:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d107      	bne.n	8003420 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e147      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b01      	cmp	r3, #1
 800342a:	f040 813a 	bne.w	80036a2 <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	441a      	add	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	429a      	cmp	r2, r3
 8003440:	d907      	bls.n	8003452 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003446:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e12e      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2203      	movs	r2, #3
 8003456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2200      	movs	r2, #0
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	2b01      	cmp	r3, #1
 8003468:	d002      	beq.n	8003470 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	025b      	lsls	r3, r3, #9
 800346e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003478:	4618      	mov	r0, r3
 800347a:	f002 f861 	bl	8005540 <SDMMC_CmdBlockLength>
 800347e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8003480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	d010      	beq.n	80034a8 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e103      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d90a      	bls.n	80034c4 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 f8d0 	bl	8005660 <SDMMC_CmdWriteMultiBlock>
 80034c0:	6378      	str	r0, [r7, #52]	; 0x34
 80034c2:	e009      	b.n	80034d8 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2210      	movs	r2, #16
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 f8a1 	bl	8005618 <SDMMC_CmdWriteSingleBlock>
 80034d6:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80034d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ee:	431a      	orrs	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d7      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	025b      	lsls	r3, r3, #9
 800350a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800350c:	2390      	movs	r3, #144	; 0x90
 800350e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003510:	2300      	movs	r3, #0
 8003512:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f107 0210 	add.w	r2, r7, #16
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f001 ffde 	bl	80054e8 <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800352c:	e037      	b.n	800359e <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d014      	beq.n	8003566 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800353c:	2300      	movs	r3, #0
 800353e:	633b      	str	r3, [r7, #48]	; 0x30
 8003540:	e00b      	b.n	800355a <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800354c:	4413      	add	r3, r2
 800354e:	4619      	mov	r1, r3
 8003550:	f001 ff51 	bl	80053f6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	3301      	adds	r3, #1
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	2b07      	cmp	r3, #7
 800355e:	d9f0      	bls.n	8003542 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8003560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003562:	3320      	adds	r3, #32
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8003566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_SD_WriteBlocks+0x192>
 800356c:	f7fd f892 	bl	8000694 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	1ad2      	subs	r2, r2, r3
 8003576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003578:	429a      	cmp	r2, r3
 800357a:	d310      	bcc.n	800359e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e088      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d0c0      	beq.n	800352e <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d020      	beq.n	80035fc <HAL_SD_WriteBlocks+0x212>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d91d      	bls.n	80035fc <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d019      	beq.n	80035fc <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 f86b 	bl	80056a8 <SDMMC_CmdStopTransfer>
 80035d2:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 80035d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80035e2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ea:	431a      	orrs	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e059      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b00      	cmp	r3, #0
 8003608:	d010      	beq.n	800362c <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	f043 0208 	orr.w	r2, r3, #8
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e041      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	f043 0202 	orr.w	r2, r3, #2
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e029      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003662:	f003 0310 	and.w	r3, r3, #16
 8003666:	2b00      	cmp	r3, #0
 8003668:	d010      	beq.n	800368c <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	f043 0210 	orr.w	r2, r3, #16
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e011      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e006      	b.n	80036b0 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3738      	adds	r7, #56	; 0x38
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 808b 	beq.w	80037ea <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03a      	beq.n	8003770 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <HAL_SD_IRQHandler+0x5a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f001 ffc6 	bl	80056a8 <SDMMC_CmdStopTransfer>
 800371c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f915 	bl	8003960 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800373e:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d105      	bne.n	8003760 <HAL_SD_IRQHandler+0xa8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f002 fc0b 	bl	8005f7c <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 8003766:	e0f3      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f002 fbfd 	bl	8005f68 <HAL_SD_TxCpltCallback>
}
 800376e:	e0ef      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80e9 	beq.w	8003950 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d011      	beq.n	80037ae <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f001 ff8a 	bl	80056a8 <SDMMC_CmdStopTransfer>
 8003794:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f8d9 	bl	8003960 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 80ca 	bne.w	8003950 <HAL_SD_IRQHandler+0x298>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f040 80c3 	bne.w	8003950 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6812      	ldr	r2, [r2, #0]
 80037d2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037d4:	f022 0208 	bic.w	r2, r2, #8
 80037d8:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f002 fbc0 	bl	8005f68 <HAL_SD_TxCpltCallback>
}
 80037e8:	e0b2      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fd71 	bl	80042ea <SD_Write_IT>
}
 8003808:	e0a2      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fd39 	bl	800429a <SD_Read_IT>
}
 8003828:	e092      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003830:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 808b 	beq.w	8003950 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384c:	f043 0202 	orr.w	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d005      	beq.n	800386e <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	f043 0208 	orr.w	r2, r3, #8
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d005      	beq.n	8003888 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d005      	beq.n	80038a2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80038aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038b6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80038ba:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d036      	beq.n	8003936 <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d011      	beq.n	80038f4 <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	4a20      	ldr	r2, [pc, #128]	; (8003958 <HAL_SD_IRQHandler+0x2a0>)
 80038d6:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fd fc14 	bl	800110a <HAL_DMA_Abort_IT>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d033      	beq.n	8003950 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fabd 	bl	8003e6c <SD_DMATxAbort>
}
 80038f2:	e02d      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d011      	beq.n	8003920 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	4a16      	ldr	r2, [pc, #88]	; (800395c <HAL_SD_IRQHandler+0x2a4>)
 8003902:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fbfe 	bl	800110a <HAL_DMA_Abort_IT>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01d      	beq.n	8003950 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fae5 	bl	8003ee8 <SD_DMARxAbort>
}
 800391e:	e017      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f002 fb10 	bl	8005f54 <HAL_SD_AbortCallback>
}
 8003934:	e00c      	b.n	8003950 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0308 	and.w	r3, r3, #8
 800393e:	2b00      	cmp	r3, #0
 8003940:	d006      	beq.n	8003950 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f808 	bl	8003960 <HAL_SD_ErrorCallback>
}
 8003950:	bf00      	nop
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	08003e6d 	.word	0x08003e6d
 800395c:	08003ee9 	.word	0x08003ee9

08003960 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003974:	b490      	push	{r4, r7}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003986:	0e1b      	lsrs	r3, r3, #24
 8003988:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	099b      	lsrs	r3, r3, #6
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	089b      	lsrs	r3, r3, #2
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039bc:	0c1b      	lsrs	r3, r3, #16
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f0:	0e1b      	lsrs	r3, r3, #24
 80039f2:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	88db      	ldrh	r3, [r3, #6]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	099b      	lsrs	r3, r3, #6
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f040 8086 	bne.w	8003b98 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	029b      	lsls	r3, r3, #10
 8003a90:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ab2:	0e1b      	lsrs	r3, r3, #24
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	095b      	lsrs	r3, r3, #5
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	089b      	lsrs	r3, r3, #2
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0306 	and.w	r3, r3, #6
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	7e1b      	ldrb	r3, [r3, #24]
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	09db      	lsrs	r3, r3, #7
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	7e1b      	ldrb	r3, [r3, #24]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3302      	adds	r3, #2
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b62:	fb02 f203 	mul.w	r2, r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	7a1b      	ldrb	r3, [r3, #8]
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	461a      	mov	r2, r3
 8003b72:	2301      	movs	r3, #1
 8003b74:	4093      	lsls	r3, r2
 8003b76:	461a      	mov	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b84:	0a52      	lsrs	r2, r2, #9
 8003b86:	fb02 f203 	mul.w	r2, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60
 8003b96:	e051      	b.n	8003c3c <HAL_SD_GetCardCSD+0x2c8>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d13c      	bne.n	8003c1a <HAL_SD_GetCardCSD+0x2a6>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb8:	0e1b      	lsrs	r3, r3, #24
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691a      	ldr	r2, [r3, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	691b      	ldr	r3, [r3, #16]
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	f144 0400 	adc.w	r4, r4, #0
 8003bfa:	029a      	lsls	r2, r3, #10
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	659a      	str	r2, [r3, #88]	; 0x58
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	661a      	str	r2, [r3, #96]	; 0x60
 8003c18:	e010      	b.n	8003c3c <HAL_SD_GetCardCSD+0x2c8>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0c1      	b.n	8003dc0 <HAL_SD_GetCardCSD+0x44c>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	099b      	lsrs	r3, r3, #6
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7e9b      	ldrb	r3, [r3, #26]
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	09db      	lsrs	r3, r3, #7
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c92:	0e1b      	lsrs	r3, r3, #24
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	09db      	lsrs	r3, r3, #7
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f003 030c 	and.w	r3, r3, #12
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	7fdb      	ldrb	r3, [r3, #31]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2c:	0a1b      	lsrs	r3, r3, #8
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	09db      	lsrs	r3, r3, #7
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	091b      	lsrs	r3, r3, #4
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	085b      	lsrs	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc90      	pop	{r4, r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fa02 	bl	8004246 <SD_SendStatus>
 8003e42:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	0a5b      	lsrs	r3, r3, #9
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ffc6 	bl	8003e22 <HAL_SD_GetCardState>
 8003e96:	4603      	mov	r3, r0
 8003e98:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ea8:	7afb      	ldrb	r3, [r7, #11]
 8003eaa:	2b06      	cmp	r3, #6
 8003eac:	d002      	beq.n	8003eb4 <SD_DMATxAbort+0x48>
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d115      	bne.n	8003ee0 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f001 fbf5 	bl	80056a8 <SDMMC_CmdStopTransfer>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f002 f83e 	bl	8005f54 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8003ed8:	e002      	b.n	8003ee0 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff fd40 	bl	8003960 <HAL_SD_ErrorCallback>
}
 8003ee0:	bf00      	nop
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d127      	bne.n	8003f5c <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff88 	bl	8003e22 <HAL_SD_GetCardState>
 8003f12:	4603      	mov	r3, r0
 8003f14:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	2b06      	cmp	r3, #6
 8003f28:	d002      	beq.n	8003f30 <SD_DMARxAbort+0x48>
 8003f2a:	7afb      	ldrb	r3, [r7, #11]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d115      	bne.n	8003f5c <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f001 fbb7 	bl	80056a8 <SDMMC_CmdStopTransfer>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f002 f800 	bl	8005f54 <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8003f54:	e002      	b.n	8003f5c <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fd02 	bl	8003960 <HAL_SD_ErrorCallback>
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003f64:	b5b0      	push	{r4, r5, r7, lr}
 8003f66:	b094      	sub	sp, #80	; 0x50
 8003f68:	af04      	add	r7, sp, #16
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8003f70:	2301      	movs	r3, #1
 8003f72:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 fa5b 	bl	8005434 <SDMMC_GetPowerState>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d102      	bne.n	8003f8a <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f88:	e0b1      	b.n	80040ee <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d02f      	beq.n	8003ff2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f001 fc5a 	bl	8005850 <SDMMC_CmdSendCID>
 8003f9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <SD_InitCard+0x44>
    {
      return errorstate;
 8003fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa6:	e0a2      	b.n	80040ee <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fa85 	bl	80054be <SDMMC_GetResponse>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fa7c 	bl	80054be <SDMMC_GetResponse>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2108      	movs	r1, #8
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 fa73 	bl	80054be <SDMMC_GetResponse>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	210c      	movs	r1, #12
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fa6a 	bl	80054be <SDMMC_GetResponse>
 8003fea:	4602      	mov	r2, r0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d00d      	beq.n	8004016 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f107 020e 	add.w	r2, r7, #14
 8004002:	4611      	mov	r1, r2
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fc64 	bl	80058d2 <SDMMC_CmdSetRelAdd>
 800400a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800400c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <SD_InitCard+0xb2>
    {
      return errorstate;
 8004012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004014:	e06b      	b.n	80040ee <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	2b03      	cmp	r3, #3
 800401c:	d036      	beq.n	800408c <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800401e:	89fb      	ldrh	r3, [r7, #14]
 8004020:	461a      	mov	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	4619      	mov	r1, r3
 8004032:	4610      	mov	r0, r2
 8004034:	f001 fc2c 	bl	8005890 <SDMMC_CmdSendCSD>
 8004038:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800403a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <SD_InitCard+0xe0>
    {
      return errorstate;
 8004040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004042:	e054      	b.n	80040ee <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fa37 	bl	80054be <SDMMC_GetResponse>
 8004050:	4602      	mov	r2, r0
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2104      	movs	r1, #4
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fa2e 	bl	80054be <SDMMC_GetResponse>
 8004062:	4602      	mov	r2, r0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2108      	movs	r1, #8
 800406e:	4618      	mov	r0, r3
 8004070:	f001 fa25 	bl	80054be <SDMMC_GetResponse>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	210c      	movs	r1, #12
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fa1c 	bl	80054be <SDMMC_GetResponse>
 8004086:	4602      	mov	r2, r0
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2104      	movs	r1, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f001 fa13 	bl	80054be <SDMMC_GetResponse>
 8004098:	4603      	mov	r3, r0
 800409a:	0d1a      	lsrs	r2, r3, #20
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80040a0:	f107 0310 	add.w	r3, r7, #16
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fc64 	bl	8003974 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	f04f 0400 	mov.w	r4, #0
 80040ba:	461a      	mov	r2, r3
 80040bc:	4623      	mov	r3, r4
 80040be:	4608      	mov	r0, r1
 80040c0:	f001 fb16 	bl	80056f0 <SDMMC_CmdSelDesel>
 80040c4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <SD_InitCard+0x16c>
  {
    return errorstate;
 80040cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ce:	e00e      	b.n	80040ee <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681d      	ldr	r5, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	466c      	mov	r4, sp
 80040d8:	f103 0210 	add.w	r2, r3, #16
 80040dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80040de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80040e2:	3304      	adds	r3, #4
 80040e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040e6:	4628      	mov	r0, r5
 80040e8:	f001 f94c 	bl	8005384 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3740      	adds	r7, #64	; 0x40
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bdb0      	pop	{r4, r5, r7, pc}

080040f6 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800410a:	2300      	movs	r3, #0
 800410c:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4618      	mov	r0, r3
 8004114:	f001 fb11 	bl	800573a <SDMMC_CmdGoIdleState>
 8004118:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <SD_PowerON+0x2e>
  {
    return errorstate;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	e08c      	b.n	800423e <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4618      	mov	r0, r3
 800412a:	f001 fb26 	bl	800577a <SDMMC_CmdOperCond>
 800412e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d03d      	beq.n	80041b2 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800413c:	e032      	b.n	80041a4 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	60ba      	str	r2, [r7, #8]
 8004144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004148:	4293      	cmp	r3, r2
 800414a:	d102      	bne.n	8004152 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800414c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004150:	e075      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2100      	movs	r1, #0
 8004158:	4618      	mov	r0, r3
 800415a:	f001 fb2f 	bl	80057bc <SDMMC_CmdAppCommand>
 800415e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004166:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800416a:	e068      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2100      	movs	r1, #0
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fb46 	bl	8005804 <SDMMC_CmdAppOperCommand>
 8004178:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004180:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004184:	e05b      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f001 f996 	bl	80054be <SDMMC_GetResponse>
 8004192:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	0fdb      	lsrs	r3, r3, #31
 8004198:	2b01      	cmp	r3, #1
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0c9      	beq.n	800413e <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	645a      	str	r2, [r3, #68]	; 0x44
 80041b0:	e044      	b.n	800423c <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80041b8:	e031      	b.n	800421e <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	60ba      	str	r2, [r7, #8]
 80041c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d102      	bne.n	80041ce <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80041c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041cc:	e037      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f001 faf1 	bl	80057bc <SDMMC_CmdAppCommand>
 80041da:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <SD_PowerON+0xf0>
      {
        return errorstate;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	e02b      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 fb08 	bl	8005804 <SDMMC_CmdAppOperCommand>
 80041f4:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <SD_PowerON+0x10a>
      {
        return errorstate;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	e01e      	b.n	800423e <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2100      	movs	r1, #0
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f959 	bl	80054be <SDMMC_GetResponse>
 800420c:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	0fdb      	lsrs	r3, r3, #31
 8004212:	2b01      	cmp	r3, #1
 8004214:	bf0c      	ite	eq
 8004216:	2301      	moveq	r3, #1
 8004218:	2300      	movne	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ca      	beq.n	80041ba <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	645a      	str	r2, [r3, #68]	; 0x44
 8004234:	e002      	b.n	800423c <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800425a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800425e:	e018      	b.n	8004292 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f001 fb53 	bl	8005918 <SDMMC_CmdSendStatus>
 8004272:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <SD_SendStatus+0x38>
  {
    return errorstate;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	e009      	b.n	8004292 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f91a 	bl	80054be <SDMMC_GetResponse>
 800428a:	4602      	mov	r2, r0
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800429a:	b590      	push	{r4, r7, lr}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	e00d      	b.n	80042ce <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	18d4      	adds	r4, r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f001 f88c 	bl	80053dc <SDMMC_ReadFIFO>
 80042c4:	4603      	mov	r3, r0
 80042c6:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	d9ee      	bls.n	80042b2 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d8:	f103 0220 	add.w	r2, r3, #32
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd90      	pop	{r4, r7, pc}

080042ea <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e00b      	b.n	800431a <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6818      	ldr	r0, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	4413      	add	r3, r2
 800430e:	4619      	mov	r1, r3
 8004310:	f001 f871 	bl	80053f6 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b07      	cmp	r3, #7
 800431e:	d9f0      	bls.n	8004302 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f103 0220 	add.w	r2, r3, #32
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e040      	b.n	80043ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f002 faf7 	bl	800694c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2224      	movs	r2, #36	; 0x24
 8004362:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	6812      	ldr	r2, [r2, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fadd 	bl	8004934 <UART_SetConfig>
 800437a:	4603      	mov	r3, r0
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e022      	b.n	80043ca <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fd75 	bl	8004e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6812      	ldr	r2, [r2, #0]
 800439a:	6852      	ldr	r2, [r2, #4]
 800439c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6812      	ldr	r2, [r2, #0]
 80043aa:	6892      	ldr	r2, [r2, #8]
 80043ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f042 0201 	orr.w	r2, r2, #1
 80043c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fdfc 	bl	8004fc0 <UART_CheckIdleState>
 80043c8:	4603      	mov	r3, r0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e027      	b.n	8004434 <HAL_UART_DeInit+0x62>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2224      	movs	r2, #36	; 0x24
 80043e8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	f022 0201 	bic.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f002 fade 	bl	80069d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_RESET;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	4613      	mov	r3, r2
 8004448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444e:	2b20      	cmp	r3, #32
 8004450:	d144      	bne.n	80044dc <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_UART_Transmit_IT+0x22>
 8004458:	88fb      	ldrh	r3, [r7, #6]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e03d      	b.n	80044de <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_UART_Transmit_IT+0x34>
 800446c:	2302      	movs	r3, #2
 800446e:	e036      	b.n	80044de <HAL_UART_Transmit_IT+0xa2>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	88fa      	ldrh	r2, [r7, #6]
 8004482:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2221      	movs	r2, #33	; 0x21
 800449e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a8:	d107      	bne.n	80044ba <HAL_UART_Transmit_IT+0x7e>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a0d      	ldr	r2, [pc, #52]	; (80044ec <HAL_UART_Transmit_IT+0xb0>)
 80044b6:	665a      	str	r2, [r3, #100]	; 0x64
 80044b8:	e002      	b.n	80044c0 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_UART_Transmit_IT+0xb4>)
 80044be:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e000      	b.n	80044de <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 80044dc:	2302      	movs	r3, #2
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	0800518d 	.word	0x0800518d
 80044f0:	0800511b 	.word	0x0800511b

080044f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004506:	2b20      	cmp	r3, #32
 8004508:	f040 808a 	bne.w	8004620 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Receive_IT+0x24>
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e082      	b.n	8004622 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UART_Receive_IT+0x36>
 8004526:	2302      	movs	r3, #2
 8004528:	e07b      	b.n	8004622 <HAL_UART_Receive_IT+0x12e>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004556:	d10e      	bne.n	8004576 <HAL_UART_Receive_IT+0x82>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <HAL_UART_Receive_IT+0x78>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004566:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800456a:	e02d      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	22ff      	movs	r2, #255	; 0xff
 8004570:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004574:	e028      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10d      	bne.n	800459a <HAL_UART_Receive_IT+0xa6>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d104      	bne.n	8004590 <HAL_UART_Receive_IT+0x9c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	22ff      	movs	r2, #255	; 0xff
 800458a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800458e:	e01b      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	227f      	movs	r2, #127	; 0x7f
 8004594:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004598:	e016      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045a2:	d10d      	bne.n	80045c0 <HAL_UART_Receive_IT+0xcc>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <HAL_UART_Receive_IT+0xc2>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	227f      	movs	r2, #127	; 0x7f
 80045b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045b4:	e008      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	223f      	movs	r2, #63	; 0x3f
 80045ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045be:	e003      	b.n	80045c8 <HAL_UART_Receive_IT+0xd4>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2222      	movs	r2, #34	; 0x22
 80045d2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	6812      	ldr	r2, [r2, #0]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	f042 0201 	orr.w	r2, r2, #1
 80045e2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ec:	d107      	bne.n	80045fe <HAL_UART_Receive_IT+0x10a>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a0d      	ldr	r2, [pc, #52]	; (8004630 <HAL_UART_Receive_IT+0x13c>)
 80045fa:	661a      	str	r2, [r3, #96]	; 0x60
 80045fc:	e002      	b.n	8004604 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a0c      	ldr	r2, [pc, #48]	; (8004634 <HAL_UART_Receive_IT+0x140>)
 8004602:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	6812      	ldr	r2, [r2, #0]
 8004616:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800461a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	080052df 	.word	0x080052df
 8004634:	08005239 	.word	0x08005239

08004638 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	6812      	ldr	r2, [r2, #0]
 8004648:	6812      	ldr	r2, [r2, #0]
 800464a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800464e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6812      	ldr	r2, [r2, #0]
 8004658:	6892      	ldr	r2, [r2, #8]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	609a      	str	r2, [r3, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466a:	2b40      	cmp	r3, #64	; 0x40
 800466c:	d124      	bne.n	80046b8 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6812      	ldr	r2, [r2, #0]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800467c:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d018      	beq.n	80046b8 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800468a:	2200      	movs	r2, #0
 800468c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fcc9 	bl	800102a <HAL_DMA_Abort>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fc fd53 	bl	800114e <HAL_DMA_GetError>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d104      	bne.n	80046b8 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2210      	movs	r2, #16
 80046b2:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e013      	b.n	80046e0 <HAL_UART_AbortReceive+0xa8>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	220f      	movs	r2, #15
 80046c6:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6812      	ldr	r2, [r2, #0]
 80046d0:	6992      	ldr	r2, [r2, #24]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2220      	movs	r2, #32
 80046dc:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d113      	bne.n	800473e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0320 	and.w	r3, r3, #32
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 80eb 	beq.w	800490a <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
      }
      return;
 800473c:	e0e5      	b.n	800490a <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80c0 	beq.w	80048c6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004756:	2b00      	cmp	r3, #0
 8004758:	f000 80b5 	beq.w	80048c6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00e      	beq.n	8004784 <HAL_UART_IRQHandler+0x9c>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d009      	beq.n	8004784 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	f043 0201 	orr.w	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00e      	beq.n	80047ac <HAL_UART_IRQHandler+0xc4>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0301 	and.w	r3, r3, #1
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2202      	movs	r2, #2
 800479e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a4:	f043 0204 	orr.w	r2, r3, #4
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00e      	beq.n	80047d4 <HAL_UART_IRQHandler+0xec>
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d009      	beq.n	80047d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2204      	movs	r2, #4
 80047c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047cc:	f043 0202 	orr.w	r2, r3, #2
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d013      	beq.n	8004806 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d009      	beq.n	8004806 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2208      	movs	r2, #8
 80047f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fe:	f043 0208 	orr.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d07f      	beq.n	800490e <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00c      	beq.n	8004832 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b40      	cmp	r3, #64	; 0x40
 8004844:	d004      	beq.n	8004850 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800484c:	2b00      	cmp	r3, #0
 800484e:	d031      	beq.n	80048b4 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fc2c 	bl	80050ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b40      	cmp	r3, #64	; 0x40
 8004862:	d123      	bne.n	80048ac <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004872:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004880:	4a26      	ldr	r2, [pc, #152]	; (800491c <HAL_UART_IRQHandler+0x234>)
 8004882:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004888:	4618      	mov	r0, r3
 800488a:	f7fc fc3e 	bl	800110a <HAL_DMA_Abort_IT>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800489e:	4610      	mov	r0, r2
 80048a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a2:	e00e      	b.n	80048c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f83b 	bl	8004920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048aa:	e00a      	b.n	80048c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 f837 	bl	8004920 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b2:	e006      	b.n	80048c2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f833 	bl	8004920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80048c0:	e025      	b.n	800490e <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c2:	bf00      	nop
    return;
 80048c4:	e023      	b.n	800490e <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d008      	beq.n	80048ec <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d017      	beq.n	8004912 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
    }
    return;
 80048ea:	e012      	b.n	8004912 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00e      	beq.n	8004914 <HAL_UART_IRQHandler+0x22c>
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fc80 	bl	8005206 <UART_EndTransmit_IT>
    return;
 8004906:	bf00      	nop
 8004908:	e004      	b.n	8004914 <HAL_UART_IRQHandler+0x22c>
      return;
 800490a:	bf00      	nop
 800490c:	e002      	b.n	8004914 <HAL_UART_IRQHandler+0x22c>
    return;
 800490e:	bf00      	nop
 8004910:	e000      	b.n	8004914 <HAL_UART_IRQHandler+0x22c>
    return;
 8004912:	bf00      	nop
  }

}
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	080050ef 	.word	0x080050ef

08004920 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	4bb3      	ldr	r3, [pc, #716]	; (8004c34 <UART_SetConfig+0x300>)
 8004968:	400b      	ands	r3, r1
 800496a:	6939      	ldr	r1, [r7, #16]
 800496c:	430b      	orrs	r3, r1
 800496e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6812      	ldr	r2, [r2, #0]
 8004978:	6852      	ldr	r2, [r2, #4]
 800497a:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	68d2      	ldr	r2, [r2, #12]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	6892      	ldr	r2, [r2, #8]
 80049a0:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4aa2      	ldr	r2, [pc, #648]	; (8004c38 <UART_SetConfig+0x304>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d121      	bne.n	80049f8 <UART_SetConfig+0xc4>
 80049b4:	4ba1      	ldr	r3, [pc, #644]	; (8004c3c <UART_SetConfig+0x308>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d816      	bhi.n	80049f0 <UART_SetConfig+0xbc>
 80049c2:	a201      	add	r2, pc, #4	; (adr r2, 80049c8 <UART_SetConfig+0x94>)
 80049c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049e5 	.word	0x080049e5
 80049d0:	080049df 	.word	0x080049df
 80049d4:	080049eb 	.word	0x080049eb
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e150      	b.n	8004c80 <UART_SetConfig+0x34c>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e14d      	b.n	8004c80 <UART_SetConfig+0x34c>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e14a      	b.n	8004c80 <UART_SetConfig+0x34c>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e147      	b.n	8004c80 <UART_SetConfig+0x34c>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	bf00      	nop
 80049f6:	e143      	b.n	8004c80 <UART_SetConfig+0x34c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a90      	ldr	r2, [pc, #576]	; (8004c40 <UART_SetConfig+0x30c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d134      	bne.n	8004a6c <UART_SetConfig+0x138>
 8004a02:	4b8e      	ldr	r3, [pc, #568]	; (8004c3c <UART_SetConfig+0x308>)
 8004a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	d829      	bhi.n	8004a64 <UART_SetConfig+0x130>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0xe4>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004a65 	.word	0x08004a65
 8004a20:	08004a65 	.word	0x08004a65
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a59 	.word	0x08004a59
 8004a2c:	08004a65 	.word	0x08004a65
 8004a30:	08004a65 	.word	0x08004a65
 8004a34:	08004a65 	.word	0x08004a65
 8004a38:	08004a53 	.word	0x08004a53
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a65 	.word	0x08004a65
 8004a48:	08004a5f 	.word	0x08004a5f
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e116      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a52:	2302      	movs	r3, #2
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e113      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e110      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a5e:	2308      	movs	r3, #8
 8004a60:	77fb      	strb	r3, [r7, #31]
 8004a62:	e10d      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a64:	2310      	movs	r3, #16
 8004a66:	77fb      	strb	r3, [r7, #31]
 8004a68:	bf00      	nop
 8004a6a:	e109      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a74      	ldr	r2, [pc, #464]	; (8004c44 <UART_SetConfig+0x310>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d120      	bne.n	8004ab8 <UART_SetConfig+0x184>
 8004a76:	4b71      	ldr	r3, [pc, #452]	; (8004c3c <UART_SetConfig+0x308>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a80:	2b10      	cmp	r3, #16
 8004a82:	d00f      	beq.n	8004aa4 <UART_SetConfig+0x170>
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d802      	bhi.n	8004a8e <UART_SetConfig+0x15a>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <UART_SetConfig+0x164>
 8004a8c:	e010      	b.n	8004ab0 <UART_SetConfig+0x17c>
 8004a8e:	2b20      	cmp	r3, #32
 8004a90:	d005      	beq.n	8004a9e <UART_SetConfig+0x16a>
 8004a92:	2b30      	cmp	r3, #48	; 0x30
 8004a94:	d009      	beq.n	8004aaa <UART_SetConfig+0x176>
 8004a96:	e00b      	b.n	8004ab0 <UART_SetConfig+0x17c>
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77fb      	strb	r3, [r7, #31]
 8004a9c:	e0f0      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e0ed      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e0ea      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004aaa:	2308      	movs	r3, #8
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e0e7      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	bf00      	nop
 8004ab6:	e0e3      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a62      	ldr	r2, [pc, #392]	; (8004c48 <UART_SetConfig+0x314>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d120      	bne.n	8004b04 <UART_SetConfig+0x1d0>
 8004ac2:	4b5e      	ldr	r3, [pc, #376]	; (8004c3c <UART_SetConfig+0x308>)
 8004ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d00f      	beq.n	8004af0 <UART_SetConfig+0x1bc>
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d802      	bhi.n	8004ada <UART_SetConfig+0x1a6>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <UART_SetConfig+0x1b0>
 8004ad8:	e010      	b.n	8004afc <UART_SetConfig+0x1c8>
 8004ada:	2b80      	cmp	r3, #128	; 0x80
 8004adc:	d005      	beq.n	8004aea <UART_SetConfig+0x1b6>
 8004ade:	2bc0      	cmp	r3, #192	; 0xc0
 8004ae0:	d009      	beq.n	8004af6 <UART_SetConfig+0x1c2>
 8004ae2:	e00b      	b.n	8004afc <UART_SetConfig+0x1c8>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e0ca      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004aea:	2302      	movs	r3, #2
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e0c7      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004af0:	2304      	movs	r3, #4
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e0c4      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004af6:	2308      	movs	r3, #8
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e0c1      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004afc:	2310      	movs	r3, #16
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	bf00      	nop
 8004b02:	e0bd      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a50      	ldr	r2, [pc, #320]	; (8004c4c <UART_SetConfig+0x318>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d124      	bne.n	8004b58 <UART_SetConfig+0x224>
 8004b0e:	4b4b      	ldr	r3, [pc, #300]	; (8004c3c <UART_SetConfig+0x308>)
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1c:	d012      	beq.n	8004b44 <UART_SetConfig+0x210>
 8004b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b22:	d802      	bhi.n	8004b2a <UART_SetConfig+0x1f6>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <UART_SetConfig+0x204>
 8004b28:	e012      	b.n	8004b50 <UART_SetConfig+0x21c>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	d006      	beq.n	8004b3e <UART_SetConfig+0x20a>
 8004b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b34:	d009      	beq.n	8004b4a <UART_SetConfig+0x216>
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x21c>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e0a0      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e09d      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b44:	2304      	movs	r3, #4
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e09a      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e097      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b50:	2310      	movs	r3, #16
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	bf00      	nop
 8004b56:	e093      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a3c      	ldr	r2, [pc, #240]	; (8004c50 <UART_SetConfig+0x31c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d124      	bne.n	8004bac <UART_SetConfig+0x278>
 8004b62:	4b36      	ldr	r3, [pc, #216]	; (8004c3c <UART_SetConfig+0x308>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b70:	d012      	beq.n	8004b98 <UART_SetConfig+0x264>
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b76:	d802      	bhi.n	8004b7e <UART_SetConfig+0x24a>
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <UART_SetConfig+0x258>
 8004b7c:	e012      	b.n	8004ba4 <UART_SetConfig+0x270>
 8004b7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b82:	d006      	beq.n	8004b92 <UART_SetConfig+0x25e>
 8004b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b88:	d009      	beq.n	8004b9e <UART_SetConfig+0x26a>
 8004b8a:	e00b      	b.n	8004ba4 <UART_SetConfig+0x270>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e076      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e073      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e070      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e06d      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	bf00      	nop
 8004baa:	e069      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a28      	ldr	r2, [pc, #160]	; (8004c54 <UART_SetConfig+0x320>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d124      	bne.n	8004c00 <UART_SetConfig+0x2cc>
 8004bb6:	4b21      	ldr	r3, [pc, #132]	; (8004c3c <UART_SetConfig+0x308>)
 8004bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bbc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d012      	beq.n	8004bec <UART_SetConfig+0x2b8>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	d802      	bhi.n	8004bd2 <UART_SetConfig+0x29e>
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <UART_SetConfig+0x2ac>
 8004bd0:	e012      	b.n	8004bf8 <UART_SetConfig+0x2c4>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	d006      	beq.n	8004be6 <UART_SetConfig+0x2b2>
 8004bd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004bdc:	d009      	beq.n	8004bf2 <UART_SetConfig+0x2be>
 8004bde:	e00b      	b.n	8004bf8 <UART_SetConfig+0x2c4>
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e04c      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e049      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e046      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e043      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	bf00      	nop
 8004bfe:	e03f      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <UART_SetConfig+0x324>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d138      	bne.n	8004c7c <UART_SetConfig+0x348>
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_SetConfig+0x308>)
 8004c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c18:	d026      	beq.n	8004c68 <UART_SetConfig+0x334>
 8004c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c1e:	d802      	bhi.n	8004c26 <UART_SetConfig+0x2f2>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d01b      	beq.n	8004c5c <UART_SetConfig+0x328>
 8004c24:	e026      	b.n	8004c74 <UART_SetConfig+0x340>
 8004c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2a:	d01a      	beq.n	8004c62 <UART_SetConfig+0x32e>
 8004c2c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004c30:	d01d      	beq.n	8004c6e <UART_SetConfig+0x33a>
 8004c32:	e01f      	b.n	8004c74 <UART_SetConfig+0x340>
 8004c34:	efff69f3 	.word	0xefff69f3
 8004c38:	40011000 	.word	0x40011000
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	40004400 	.word	0x40004400
 8004c44:	40004800 	.word	0x40004800
 8004c48:	40004c00 	.word	0x40004c00
 8004c4c:	40005000 	.word	0x40005000
 8004c50:	40011400 	.word	0x40011400
 8004c54:	40007800 	.word	0x40007800
 8004c58:	40007c00 	.word	0x40007c00
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e00e      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e00b      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e008      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e005      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c74:	2310      	movs	r3, #16
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	bf00      	nop
 8004c7a:	e001      	b.n	8004c80 <UART_SetConfig+0x34c>
 8004c7c:	2310      	movs	r3, #16
 8004c7e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c88:	d17d      	bne.n	8004d86 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d85a      	bhi.n	8004d46 <UART_SetConfig+0x412>
 8004c90:	a201      	add	r2, pc, #4	; (adr r2, 8004c98 <UART_SetConfig+0x364>)
 8004c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c96:	bf00      	nop
 8004c98:	08004cbd 	.word	0x08004cbd
 8004c9c:	08004cdb 	.word	0x08004cdb
 8004ca0:	08004cf9 	.word	0x08004cf9
 8004ca4:	08004d47 	.word	0x08004d47
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004d47 	.word	0x08004d47
 8004cb0:	08004d47 	.word	0x08004d47
 8004cb4:	08004d47 	.word	0x08004d47
 8004cb8:	08004d2f 	.word	0x08004d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004cbc:	f7fd f9d0 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	005a      	lsls	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	085b      	lsrs	r3, r3, #1
 8004cca:	441a      	add	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	61bb      	str	r3, [r7, #24]
        break;
 8004cd8:	e038      	b.n	8004d4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004cda:	f7fd f9d5 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	005a      	lsls	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	441a      	add	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	61bb      	str	r3, [r7, #24]
        break;
 8004cf6:	e029      	b.n	8004d4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	085a      	lsrs	r2, r3, #1
 8004cfe:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <UART_SetConfig+0x540>)
 8004d00:	4413      	add	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6852      	ldr	r2, [r2, #4]
 8004d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	61bb      	str	r3, [r7, #24]
        break;
 8004d0e:	e01d      	b.n	8004d4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004d10:	f7fd f8c4 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8004d14:	4603      	mov	r3, r0
 8004d16:	005a      	lsls	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	085b      	lsrs	r3, r3, #1
 8004d1e:	441a      	add	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	e00e      	b.n	8004d4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	61bb      	str	r3, [r7, #24]
        break;
 8004d44:	e002      	b.n	8004d4c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	75fb      	strb	r3, [r7, #23]
        break;
 8004d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b0f      	cmp	r3, #15
 8004d50:	d916      	bls.n	8004d80 <UART_SetConfig+0x44c>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d212      	bcs.n	8004d80 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	f023 030f 	bic.w	r3, r3, #15
 8004d62:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	89fb      	ldrh	r3, [r7, #14]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	89fa      	ldrh	r2, [r7, #14]
 8004d7c:	60da      	str	r2, [r3, #12]
 8004d7e:	e06e      	b.n	8004e5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
 8004d84:	e06b      	b.n	8004e5e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004d86:	7ffb      	ldrb	r3, [r7, #31]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d857      	bhi.n	8004e3c <UART_SetConfig+0x508>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x460>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dd5 	.word	0x08004dd5
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004e3d 	.word	0x08004e3d
 8004da4:	08004e09 	.word	0x08004e09
 8004da8:	08004e3d 	.word	0x08004e3d
 8004dac:	08004e3d 	.word	0x08004e3d
 8004db0:	08004e3d 	.word	0x08004e3d
 8004db4:	08004e25 	.word	0x08004e25
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004db8:	f7fd f952 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	61bb      	str	r3, [r7, #24]
        break;
 8004dd2:	e036      	b.n	8004e42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004dd4:	f7fd f958 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	085b      	lsrs	r3, r3, #1
 8004de0:	441a      	add	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	61bb      	str	r3, [r7, #24]
        break;
 8004dee:	e028      	b.n	8004e42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	085a      	lsrs	r2, r3, #1
 8004df6:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <UART_SetConfig+0x544>)
 8004df8:	4413      	add	r3, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6852      	ldr	r2, [r2, #4]
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	61bb      	str	r3, [r7, #24]
        break;
 8004e06:	e01c      	b.n	8004e42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004e08:	f7fd f848 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	441a      	add	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	61bb      	str	r3, [r7, #24]
        break;
 8004e22:	e00e      	b.n	8004e42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	085b      	lsrs	r3, r3, #1
 8004e2a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	61bb      	str	r3, [r7, #24]
        break;
 8004e3a:	e002      	b.n	8004e42 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
        break;
 8004e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	2b0f      	cmp	r3, #15
 8004e46:	d908      	bls.n	8004e5a <UART_SetConfig+0x526>
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d204      	bcs.n	8004e5a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69ba      	ldr	r2, [r7, #24]
 8004e56:	60da      	str	r2, [r3, #12]
 8004e58:	e001      	b.n	8004e5e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	01e84800 	.word	0x01e84800
 8004e78:	00f42400 	.word	0x00f42400

08004e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	6852      	ldr	r2, [r2, #4]
 8004e9a:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	f003 0302 	and.w	r3, r3, #2
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6812      	ldr	r2, [r2, #0]
 8004eba:	6852      	ldr	r2, [r2, #4]
 8004ebc:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	6852      	ldr	r2, [r2, #4]
 8004ede:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6852      	ldr	r2, [r2, #4]
 8004f00:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	f003 0310 	and.w	r3, r3, #16
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	6892      	ldr	r2, [r2, #8]
 8004f22:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d01a      	beq.n	8004f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	6852      	ldr	r2, [r2, #4]
 8004f66:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d10a      	bne.n	8004f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	6852      	ldr	r2, [r2, #4]
 8004f86:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	6852      	ldr	r2, [r2, #4]
 8004fa8:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	605a      	str	r2, [r3, #4]
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004fce:	f7fb fb61 	bl	8000694 <HAL_GetTick>
 8004fd2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d10e      	bne.n	8005000 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f814 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d001      	beq.n	8005000 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e00a      	b.n	8005016 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b084      	sub	sp, #16
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e02a      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d026      	beq.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005038:	f7fb fb2c 	bl	8000694 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	1ad2      	subs	r2, r2, r3
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	429a      	cmp	r2, r3
 8005046:	d802      	bhi.n	800504e <UART_WaitOnFlagUntilTimeout+0x30>
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d11b      	bne.n	8005086 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	6812      	ldr	r2, [r2, #0]
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	6812      	ldr	r2, [r2, #0]
 8005066:	6892      	ldr	r2, [r2, #8]
 8005068:	f022 0201 	bic.w	r2, r2, #1
 800506c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e00f      	b.n	80050a6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	401a      	ands	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	bf0c      	ite	eq
 8005096:	2301      	moveq	r3, #1
 8005098:	2300      	movne	r3, #0
 800509a:	b2db      	uxtb	r3, r3
 800509c:	461a      	mov	r2, r3
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d0c5      	beq.n	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050c4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	6892      	ldr	r2, [r2, #8]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	661a      	str	r2, [r3, #96]	; 0x60
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7ff fc07 	bl	8004920 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005126:	2b21      	cmp	r3, #33	; 0x21
 8005128:	d12a      	bne.n	8005180 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d110      	bne.n	8005158 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005144:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	6812      	ldr	r2, [r2, #0]
 8005150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005154:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005156:	e013      	b.n	8005180 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005160:	7812      	ldrb	r2, [r2, #0]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005198:	2b21      	cmp	r3, #33	; 0x21
 800519a:	d12e      	bne.n	80051fa <UART_TxISR_16BIT+0x6e>
  {
    if (huart->TxXferCount == 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d110      	bne.n	80051ca <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6812      	ldr	r2, [r2, #0]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051c6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80051c8:	e017      	b.n	80051fa <UART_TxISR_16BIT+0x6e>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	8812      	ldrh	r2, [r2, #0]
 80051d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e2:	1c9a      	adds	r2, r3, #2
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800521c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f004 fdce 	bl	8009dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005230:	bf00      	nop
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005246:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800524c:	2b22      	cmp	r3, #34	; 0x22
 800524e:	d13a      	bne.n	80052c6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525c:	89ba      	ldrh	r2, [r7, #12]
 800525e:	b2d1      	uxtb	r1, r2
 8005260:	89fa      	ldrh	r2, [r7, #14]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	400a      	ands	r2, r1
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d121      	bne.n	80052d6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052a0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6812      	ldr	r2, [r2, #0]
 80052aa:	6892      	ldr	r2, [r2, #8]
 80052ac:	f022 0201 	bic.w	r2, r2, #1
 80052b0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f004 fd9e 	bl	8009e00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052c4:	e007      	b.n	80052d6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	6992      	ldr	r2, [r2, #24]
 80052d0:	f042 0208 	orr.w	r2, r2, #8
 80052d4:	619a      	str	r2, [r3, #24]
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b084      	sub	sp, #16
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052f2:	2b22      	cmp	r3, #34	; 0x22
 80052f4:	d13a      	bne.n	800536c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005304:	89ba      	ldrh	r2, [r7, #12]
 8005306:	89fb      	ldrh	r3, [r7, #14]
 8005308:	4013      	ands	r3, r2
 800530a:	b29a      	uxth	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	1c9a      	adds	r2, r3, #2
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d121      	bne.n	800537c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005346:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	6892      	ldr	r2, [r2, #8]
 8005352:	f022 0201 	bic.w	r2, r2, #1
 8005356:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f004 fd4b 	bl	8009e00 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800536a:	e007      	b.n	800537c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6812      	ldr	r2, [r2, #0]
 8005374:	6992      	ldr	r2, [r2, #24]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	619a      	str	r2, [r3, #24]
}
 800537c:	bf00      	nop
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005384:	b084      	sub	sp, #16
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	f107 001c 	add.w	r0, r7, #28
 8005392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800539a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800539c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800539e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80053a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80053a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80053a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80053a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80053aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80053ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80053ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <SDMMC_Init+0x54>)
 80053bc:	4013      	ands	r3, r2
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	b004      	add	sp, #16
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	ffff8100 	.word	0xffff8100

080053dc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	370c      	adds	r7, #12
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80053f6:	b480      	push	{r7}
 80053f8:	b083      	sub	sp, #12
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
 80053fe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2203      	movs	r2, #3
 8005424:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0303 	and.w	r3, r3, #3
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800546e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005474:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800547a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <SDMMC_SendCommand+0x50>)
 8005488:	4013      	ands	r3, r2
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	fffff000 	.word	0xfffff000

080054a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	b2db      	uxtb	r3, r3
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	3314      	adds	r3, #20
 80054d0:	461a      	mov	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4413      	add	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
}  
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800550e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005514:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800551a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005532:	2300      	movs	r3, #0

}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800554a:	2300      	movs	r3, #0
 800554c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005552:	2310      	movs	r3, #16
 8005554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005556:	2340      	movs	r3, #64	; 0x40
 8005558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800555e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005562:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005564:	f107 0308 	add.w	r3, r7, #8
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7ff ff70 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8005570:	f241 3288 	movw	r2, #5000	; 0x1388
 8005574:	2110      	movs	r1, #16
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa1c 	bl	80059b4 <SDMMC_GetCmdResp1>
 800557c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800557e:	69fb      	ldr	r3, [r7, #28]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3720      	adds	r7, #32
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800559a:	2311      	movs	r3, #17
 800559c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800559e:	2340      	movs	r3, #64	; 0x40
 80055a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055aa:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055ac:	f107 0308 	add.w	r3, r7, #8
 80055b0:	4619      	mov	r1, r3
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff ff4c 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80055b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055bc:	2111      	movs	r1, #17
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f9f8 	bl	80059b4 <SDMMC_GetCmdResp1>
 80055c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c6:	69fb      	ldr	r3, [r7, #28]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3720      	adds	r7, #32
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80055e2:	2312      	movs	r3, #18
 80055e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055e6:	2340      	movs	r3, #64	; 0x40
 80055e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055f4:	f107 0308 	add.w	r3, r7, #8
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7ff ff28 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005600:	f241 3288 	movw	r2, #5000	; 0x1388
 8005604:	2112      	movs	r1, #18
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9d4 	bl	80059b4 <SDMMC_GetCmdResp1>
 800560c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800560e:	69fb      	ldr	r3, [r7, #28]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800562a:	2318      	movs	r3, #24
 800562c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005632:	2300      	movs	r3, #0
 8005634:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800563a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800563c:	f107 0308 	add.w	r3, r7, #8
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff ff04 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005648:	f241 3288 	movw	r2, #5000	; 0x1388
 800564c:	2118      	movs	r1, #24
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f9b0 	bl	80059b4 <SDMMC_GetCmdResp1>
 8005654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005656:	69fb      	ldr	r3, [r7, #28]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005672:	2319      	movs	r3, #25
 8005674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005676:	2340      	movs	r3, #64	; 0x40
 8005678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005682:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fee0 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005690:	f241 3288 	movw	r2, #5000	; 0x1388
 8005694:	2119      	movs	r1, #25
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f98c 	bl	80059b4 <SDMMC_GetCmdResp1>
 800569c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800569e:	69fb      	ldr	r3, [r7, #28]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80056b8:	230c      	movs	r3, #12
 80056ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80056bc:	2340      	movs	r3, #64	; 0x40
 80056be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056c0:	2300      	movs	r3, #0
 80056c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056ca:	f107 0308 	add.w	r3, r7, #8
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f7ff febd 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <SDMMC_CmdStopTransfer+0x44>)
 80056d8:	210c      	movs	r1, #12
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f96a 	bl	80059b4 <SDMMC_GetCmdResp1>
 80056e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056e2:	69fb      	ldr	r3, [r7, #28]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3720      	adds	r7, #32
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	05f5e100 	.word	0x05f5e100

080056f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80056fc:	2300      	movs	r3, #0
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005704:	2307      	movs	r3, #7
 8005706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005708:	2340      	movs	r3, #64	; 0x40
 800570a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005710:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005714:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005716:	f107 0310 	add.w	r3, r7, #16
 800571a:	4619      	mov	r1, r3
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f7ff fe97 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005722:	f241 3288 	movw	r2, #5000	; 0x1388
 8005726:	2107      	movs	r1, #7
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f943 	bl	80059b4 <SDMMC_GetCmdResp1>
 800572e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005732:	4618      	mov	r0, r3
 8005734:	3728      	adds	r7, #40	; 0x28
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005742:	2300      	movs	r3, #0
 8005744:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800575a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	4619      	mov	r1, r3
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7ff fe74 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f8f9 	bl	8005960 <SDMMC_GetCmdError>
 800576e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005770:	69fb      	ldr	r3, [r7, #28]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b088      	sub	sp, #32
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005782:	2300      	movs	r3, #0
 8005784:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005786:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800578a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800578c:	2308      	movs	r3, #8
 800578e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005790:	2340      	movs	r3, #64	; 0x40
 8005792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800579c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	4619      	mov	r1, r3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff fe53 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 faca 	bl	8005d44 <SDMMC_GetCmdResp7>
 80057b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057b2:	69fb      	ldr	r3, [r7, #28]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80057ce:	2337      	movs	r3, #55	; 0x37
 80057d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80057d2:	2340      	movs	r3, #64	; 0x40
 80057d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057de:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057e0:	f107 0308 	add.w	r3, r7, #8
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fe32 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80057ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f0:	2137      	movs	r1, #55	; 0x37
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f8de 	bl	80059b4 <SDMMC_GetCmdResp1>
 80057f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <SDMMC_CmdAppOperCommand+0x48>)
 8005816:	4313      	orrs	r3, r2
 8005818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800581a:	2329      	movs	r3, #41	; 0x29
 800581c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800581e:	2340      	movs	r3, #64	; 0x40
 8005820:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005822:	2300      	movs	r3, #0
 8005824:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800582a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800582c:	f107 0308 	add.w	r3, r7, #8
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7ff fe0c 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f9e1 	bl	8005c00 <SDMMC_GetCmdResp3>
 800583e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005840:	69fb      	ldr	r3, [r7, #28]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3720      	adds	r7, #32
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	80100000 	.word	0x80100000

08005850 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b088      	sub	sp, #32
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005858:	2300      	movs	r3, #0
 800585a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005860:	2302      	movs	r3, #2
 8005862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005864:	23c0      	movs	r3, #192	; 0xc0
 8005866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fde9 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f97e 	bl	8005b80 <SDMMC_GetCmdResp2>
 8005884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005886:	69fb      	ldr	r3, [r7, #28]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80058a2:	2309      	movs	r3, #9
 80058a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80058a6:	23c0      	movs	r3, #192	; 0xc0
 80058a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fdc8 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f95d 	bl	8005b80 <SDMMC_GetCmdResp2>
 80058c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058c8:	69fb      	ldr	r3, [r7, #28]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3720      	adds	r7, #32
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b088      	sub	sp, #32
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80058dc:	2300      	movs	r3, #0
 80058de:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80058e4:	2303      	movs	r3, #3
 80058e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80058f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80058f6:	f107 0308 	add.w	r3, r7, #8
 80058fa:	4619      	mov	r1, r3
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7ff fda7 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	2103      	movs	r1, #3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f9ae 	bl	8005c68 <SDMMC_GetCmdResp6>
 800590c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800590e:	69fb      	ldr	r3, [r7, #28]
}
 8005910:	4618      	mov	r0, r3
 8005912:	3720      	adds	r7, #32
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800592a:	230d      	movs	r3, #13
 800592c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800592e:	2340      	movs	r3, #64	; 0x40
 8005930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800593a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	4619      	mov	r1, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fd84 	bl	8005450 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	210d      	movs	r1, #13
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f830 	bl	80059b4 <SDMMC_GetCmdResp1>
 8005954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005956:	69fb      	ldr	r3, [r7, #28]
}
 8005958:	4618      	mov	r0, r3
 800595a:	3720      	adds	r7, #32
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005960:	b490      	push	{r4, r7}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005968:	4b10      	ldr	r3, [pc, #64]	; (80059ac <SDMMC_GetCmdError+0x4c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a10      	ldr	r2, [pc, #64]	; (80059b0 <SDMMC_GetCmdError+0x50>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0a5b      	lsrs	r3, r3, #9
 8005974:	f241 3288 	movw	r2, #5000	; 0x1388
 8005978:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800597c:	4623      	mov	r3, r4
 800597e:	1e5c      	subs	r4, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005984:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005988:	e00a      	b.n	80059a0 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f2      	beq.n	800597c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800599c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc90      	pop	{r4, r7}
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	20000008 	.word	0x20000008
 80059b0:	10624dd3 	.word	0x10624dd3

080059b4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	460b      	mov	r3, r1
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059c2:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <SDMMC_GetCmdResp1+0x1c0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6c      	ldr	r2, [pc, #432]	; (8005b78 <SDMMC_GetCmdResp1+0x1c4>)
 80059c8:	fba2 2303 	umull	r2, r3, r2, r3
 80059cc:	0a5b      	lsrs	r3, r3, #9
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 80059d4:	4623      	mov	r3, r4
 80059d6:	1e5c      	subs	r4, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d102      	bne.n	80059e2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059e0:	e0c3      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f2      	beq.n	80059d4 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	f003 0304 	and.w	r3, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2204      	movs	r2, #4
 80059fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a00:	2304      	movs	r3, #4
 8005a02:	e0b2      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d004      	beq.n	8005a1a <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2201      	movs	r2, #1
 8005a14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e0a7      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f7ff fd42 	bl	80054a4 <SDMMC_GetCommandResponse>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d001      	beq.n	8005a2e <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e09d      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005a36:	2100      	movs	r1, #0
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fd40 	bl	80054be <SDMMC_GetResponse>
 8005a3e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <SDMMC_GetCmdResp1+0x1c8>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e08d      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	da02      	bge.n	8005a5a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005a54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a58:	e087      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005a64:	2340      	movs	r3, #64	; 0x40
 8005a66:	e080      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	e079      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a84:	e071      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a94:	e069      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005aa4:	e061      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ab4:	e059      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ac4:	e051      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ad4:	e049      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ae4:	e041      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8005af0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af4:	e039      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005b04:	e031      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005b10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b14:	e029      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d002      	beq.n	8005b26 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005b20:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b24:	e021      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d002      	beq.n	8005b36 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005b30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005b34:	e019      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005b44:	e011      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005b50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005b54:	e009      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f003 0308 	and.w	r3, r3, #8
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005b60:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005b64:	e001      	b.n	8005b6a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd90      	pop	{r4, r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000008 	.word	0x20000008
 8005b78:	10624dd3 	.word	0x10624dd3
 8005b7c:	fdffe008 	.word	0xfdffe008

08005b80 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8005b80:	b490      	push	{r4, r7}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <SDMMC_GetCmdResp2+0x78>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <SDMMC_GetCmdResp2+0x7c>)
 8005b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b92:	0a5b      	lsrs	r3, r3, #9
 8005b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005b9c:	4623      	mov	r3, r4
 8005b9e:	1e5c      	subs	r4, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d102      	bne.n	8005baa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ba8:	e020      	b.n	8005bec <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d0f2      	beq.n	8005b9c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	f003 0304 	and.w	r3, r3, #4
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d004      	beq.n	8005bcc <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bc8:	2304      	movs	r3, #4
 8005bca:	e00f      	b.n	8005bec <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d004      	beq.n	8005be2 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e004      	b.n	8005bec <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3708      	adds	r7, #8
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc90      	pop	{r4, r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000008 	.word	0x20000008
 8005bfc:	10624dd3 	.word	0x10624dd3

08005c00 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005c00:	b490      	push	{r4, r7}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c08:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <SDMMC_GetCmdResp3+0x60>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <SDMMC_GetCmdResp3+0x64>)
 8005c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c12:	0a5b      	lsrs	r3, r3, #9
 8005c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005c1c:	4623      	mov	r3, r4
 8005c1e:	1e5c      	subs	r4, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d102      	bne.n	8005c2a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c28:	e015      	b.n	8005c56 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d0f2      	beq.n	8005c1c <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2204      	movs	r2, #4
 8005c46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c48:	2304      	movs	r3, #4
 8005c4a:	e004      	b.n	8005c56 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bc90      	pop	{r4, r7}
 8005c5e:	4770      	bx	lr
 8005c60:	20000008 	.word	0x20000008
 8005c64:	10624dd3 	.word	0x10624dd3

08005c68 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	460b      	mov	r3, r1
 8005c72:	607a      	str	r2, [r7, #4]
 8005c74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c76:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <SDMMC_GetCmdResp6+0xd4>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a31      	ldr	r2, [pc, #196]	; (8005d40 <SDMMC_GetCmdResp6+0xd8>)
 8005c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c80:	0a5b      	lsrs	r3, r3, #9
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005c8a:	4623      	mov	r3, r4
 8005c8c:	1e5c      	subs	r4, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d102      	bne.n	8005c98 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c96:	e04c      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f2      	beq.n	8005c8a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005cb6:	2304      	movs	r3, #4
 8005cb8:	e03b      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e030      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff fbe7 	bl	80054a4 <SDMMC_GetCommandResponse>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	461a      	mov	r2, r3
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d001      	beq.n	8005ce4 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e026      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005cea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005cec:	2100      	movs	r1, #0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fbe5 	bl	80054be <SDMMC_GetResponse>
 8005cf4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	0c1b      	lsrs	r3, r3, #16
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e011      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d1c:	e009      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d2c:	e001      	b.n	8005d32 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	371c      	adds	r7, #28
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd90      	pop	{r4, r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	20000008 	.word	0x20000008
 8005d40:	10624dd3 	.word	0x10624dd3

08005d44 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005d44:	b490      	push	{r4, r7}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005d4c:	4b18      	ldr	r3, [pc, #96]	; (8005db0 <SDMMC_GetCmdResp7+0x6c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a18      	ldr	r2, [pc, #96]	; (8005db4 <SDMMC_GetCmdResp7+0x70>)
 8005d52:	fba2 2303 	umull	r2, r3, r2, r3
 8005d56:	0a5b      	lsrs	r3, r3, #9
 8005d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8005d60:	4623      	mov	r3, r4
 8005d62:	1e5c      	subs	r4, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d102      	bne.n	8005d6e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d6c:	e01a      	b.n	8005da4 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0f2      	beq.n	8005d60 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d004      	beq.n	8005d90 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	e009      	b.n	8005da4 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2240      	movs	r2, #64	; 0x40
 8005da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005da2:	2300      	movs	r3, #0
  
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bc90      	pop	{r4, r7}
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	20000008 	.word	0x20000008
 8005db4:	10624dd3 	.word	0x10624dd3

08005db8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b087      	sub	sp, #28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005dce:	4b1f      	ldr	r3, [pc, #124]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005dd0:	7a5b      	ldrb	r3, [r3, #9]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d131      	bne.n	8005e3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005dd8:	4b1c      	ldr	r3, [pc, #112]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005dda:	7a5b      	ldrb	r3, [r3, #9]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005de2:	2100      	movs	r1, #0
 8005de4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005de6:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005de8:	7a5b      	ldrb	r3, [r3, #9]
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005df6:	4b15      	ldr	r3, [pc, #84]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005df8:	7a5b      	ldrb	r3, [r3, #9]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	4b13      	ldr	r3, [pc, #76]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005e00:	4413      	add	r3, r2
 8005e02:	79fa      	ldrb	r2, [r7, #7]
 8005e04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e06:	4b11      	ldr	r3, [pc, #68]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005e08:	7a5b      	ldrb	r3, [r3, #9]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	b2d1      	uxtb	r1, r2
 8005e10:	4a0e      	ldr	r2, [pc, #56]	; (8005e4c <FATFS_LinkDriverEx+0x94>)
 8005e12:	7251      	strb	r1, [r2, #9]
 8005e14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005e16:	7dbb      	ldrb	r3, [r7, #22]
 8005e18:	3330      	adds	r3, #48	; 0x30
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3301      	adds	r3, #1
 8005e24:	223a      	movs	r2, #58	; 0x3a
 8005e26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	3302      	adds	r3, #2
 8005e2c:	222f      	movs	r2, #47	; 0x2f
 8005e2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	3303      	adds	r3, #3
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	2000008c 	.word	0x2000008c

08005e50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff ffaa 	bl	8005db8 <FATFS_LinkDriverEx>
 8005e64:	4603      	mov	r3, r0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005e7a:	f000 f89e 	bl	8005fba <BSP_SD_IsDetected>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005e84:	2302      	movs	r3, #2
 8005e86:	e005      	b.n	8005e94 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8005e88:	4804      	ldr	r0, [pc, #16]	; (8005e9c <BSP_SD_Init+0x2c>)
 8005e8a:	f7fd f889 	bl	8002fa0 <HAL_SD_Init>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005e92:	79fb      	ldrb	r3, [r7, #7]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	200167ec 	.word	0x200167ec

08005ea0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af02      	add	r7, sp, #8
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	4806      	ldr	r0, [pc, #24]	; (8005ed8 <BSP_SD_ReadBlocks+0x38>)
 8005ebe:	f7fd f8fe 	bl	80030be <HAL_SD_ReadBlocks>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200167ec 	.word	0x200167ec

08005edc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af02      	add	r7, sp, #8
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
 8005ee8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	4806      	ldr	r0, [pc, #24]	; (8005f14 <BSP_SD_WriteBlocks+0x38>)
 8005efa:	f7fd fa76 	bl	80033ea <HAL_SD_WriteBlocks>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	200167ec 	.word	0x200167ec

08005f18 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005f1c:	4805      	ldr	r0, [pc, #20]	; (8005f34 <BSP_SD_GetCardState+0x1c>)
 8005f1e:	f7fd ff80 	bl	8003e22 <HAL_SD_GetCardState>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	200167ec 	.word	0x200167ec

08005f38 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4803      	ldr	r0, [pc, #12]	; (8005f50 <BSP_SD_GetCardInfo+0x18>)
 8005f44:	f7fd ff41 	bl	8003dca <HAL_SD_GetCardInfo>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	200167ec 	.word	0x200167ec

08005f54 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005f5c:	f000 f818 	bl	8005f90 <BSP_SD_AbortCallback>
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005f70:	f000 f815 	bl	8005f9e <BSP_SD_WriteCpltCallback>
}
 8005f74:	bf00      	nop
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8005f84:	f000 f812 	bl	8005fac <BSP_SD_ReadCpltCallback>
}
 8005f88:	bf00      	nop
 8005f8a:	3708      	adds	r7, #8
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0

}
 8005f94:	bf00      	nop
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	af00      	add	r7, sp, #0

}
 8005fa2:	bf00      	nop
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0

}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005fc4:	79fb      	ldrb	r3, [r7, #7]
 8005fc6:	b2db      	uxtb	r3, r3
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fd8:	4904      	ldr	r1, [pc, #16]	; (8005fec <MX_FATFS_Init+0x18>)
 8005fda:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <MX_FATFS_Init+0x1c>)
 8005fdc:	f7ff ff38 	bl	8005e50 <FATFS_LinkDriver>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	4b03      	ldr	r3, [pc, #12]	; (8005ff4 <MX_FATFS_Init+0x20>)
 8005fe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005fe8:	bf00      	nop
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	200004f4 	.word	0x200004f4
 8005ff0:	0800a9f8 	.word	0x0800a9f8
 8005ff4:	200004f0 	.word	0x200004f0

08005ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b08a      	sub	sp, #40	; 0x28
 8005ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	605a      	str	r2, [r3, #4]
 8006008:	609a      	str	r2, [r3, #8]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800600e:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006010:	4b2e      	ldr	r3, [pc, #184]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	f043 0304 	orr.w	r3, r3, #4
 8006018:	6313      	str	r3, [r2, #48]	; 0x30
 800601a:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <MX_GPIO_Init+0xd4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	613b      	str	r3, [r7, #16]
 8006024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006028:	4b28      	ldr	r3, [pc, #160]	; (80060cc <MX_GPIO_Init+0xd4>)
 800602a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006030:	6313      	str	r3, [r2, #48]	; 0x30
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800603e:	4a23      	ldr	r2, [pc, #140]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006040:	4b22      	ldr	r3, [pc, #136]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	6313      	str	r3, [r2, #48]	; 0x30
 800604a:	4b20      	ldr	r3, [pc, #128]	; (80060cc <MX_GPIO_Init+0xd4>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006056:	4a1d      	ldr	r2, [pc, #116]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <MX_GPIO_Init+0xd4>)
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	6313      	str	r3, [r2, #48]	; 0x30
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800606e:	4a17      	ldr	r2, [pc, #92]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006070:	4b16      	ldr	r3, [pc, #88]	; (80060cc <MX_GPIO_Init+0xd4>)
 8006072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006074:	f043 0308 	orr.w	r3, r3, #8
 8006078:	6313      	str	r3, [r2, #48]	; 0x30
 800607a:	4b14      	ldr	r3, [pc, #80]	; (80060cc <MX_GPIO_Init+0xd4>)
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, my_LED_DEBUG2_Pin|my_LED_DEBUG1_Pin, GPIO_PIN_RESET);
 8006086:	2200      	movs	r2, #0
 8006088:	2103      	movs	r1, #3
 800608a:	4811      	ldr	r0, [pc, #68]	; (80060d0 <MX_GPIO_Init+0xd8>)
 800608c:	f7fb fb22 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = my_LED_DEBUG2_Pin|my_LED_DEBUG1_Pin;
 8006090:	2303      	movs	r3, #3
 8006092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006094:	2301      	movs	r3, #1
 8006096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800609c:	2300      	movs	r3, #0
 800609e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a0:	f107 0314 	add.w	r3, r7, #20
 80060a4:	4619      	mov	r1, r3
 80060a6:	480a      	ldr	r0, [pc, #40]	; (80060d0 <MX_GPIO_Init+0xd8>)
 80060a8:	f7fb f85e 	bl	8001168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = my_SDMMC_IRQ_Pin|my_SDMMC_CS_CD_Pin;
 80060ac:	2303      	movs	r3, #3
 80060ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060b0:	2300      	movs	r3, #0
 80060b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b4:	2300      	movs	r3, #0
 80060b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060b8:	f107 0314 	add.w	r3, r7, #20
 80060bc:	4619      	mov	r1, r3
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <MX_GPIO_Init+0xdc>)
 80060c0:	f7fb f852 	bl	8001168 <HAL_GPIO_Init>

}
 80060c4:	bf00      	nop
 80060c6:	3728      	adds	r7, #40	; 0x28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	40020400 	.word	0x40020400
 80060d4:	40020c00 	.word	0x40020c00

080060d8 <HAL_SYSTICK_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_SYSTICK_Callback(void){
 80060d8:	b580      	push	{r7, lr}
 80060da:	af00      	add	r7, sp, #0
	if (LedDriver_1msElapsedCallbackHandler(&ledDebug1Driver) != LedDriver_Status_OK){
 80060dc:	4808      	ldr	r0, [pc, #32]	; (8006100 <HAL_SYSTICK_Callback+0x28>)
 80060de:	f002 fe9d 	bl	8008e1c <LedDriver_1msElapsedCallbackHandler>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <HAL_SYSTICK_Callback+0x14>
		Error_Handler();
 80060e8:	f000 f98a 	bl	8006400 <Error_Handler>
	}
	if (LedDriver_1msElapsedCallbackHandler(&ledDebug2Driver) != LedDriver_Status_OK){
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <HAL_SYSTICK_Callback+0x2c>)
 80060ee:	f002 fe95 	bl	8008e1c <LedDriver_1msElapsedCallbackHandler>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <HAL_SYSTICK_Callback+0x24>
		Error_Handler();
 80060f8:	f000 f982 	bl	8006400 <Error_Handler>
	}
	/*if (ActionScheduler_1msElapsedCallbackHandler(&actionScheduler) != ActionScheduler_Status_OK){
		Error_Handler();
	}*/
}
 80060fc:	bf00      	nop
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	2000aefc 	.word	0x2000aefc
 8006104:	2000fe14 	.word	0x2000fe14

08006108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b094      	sub	sp, #80	; 0x50
 800610c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800610e:	f7fa fa6f 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006112:	f000 f889 	bl	8006228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006116:	f7ff ff6f 	bl	8005ff8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800611a:	f000 fa9b 	bl	8006654 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800611e:	f7ff ff59 	bl	8005fd4 <MX_FATFS_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8006122:	f000 f927 	bl	8006374 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  LedDriver_Pin_TypeDef ledDebug1Pin = my_LED_DEBUG1_Pin;
 8006126:	2302      	movs	r3, #2
 8006128:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  LedDriver_Pin_TypeDef ledDebug2Pin = my_LED_DEBUG2_Pin;
 800612c:	2301      	movs	r3, #1
 800612e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

  if (LedDriver_init(&ledDebug1Driver, (LedDriver_Port_TypeDef*)my_LED_DEBUG1_GPIO_Port, &ledDebug1Pin) != LedDriver_Status_OK){
 8006132:	f107 0346 	add.w	r3, r7, #70	; 0x46
 8006136:	461a      	mov	r2, r3
 8006138:	492f      	ldr	r1, [pc, #188]	; (80061f8 <main+0xf0>)
 800613a:	4830      	ldr	r0, [pc, #192]	; (80061fc <main+0xf4>)
 800613c:	f002 fe42 	bl	8008dc4 <LedDriver_init>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <main+0x42>
	  Error_Handler();
 8006146:	f000 f95b 	bl	8006400 <Error_Handler>
  }
  if (LedDriver_init(&ledDebug2Driver, (LedDriver_Port_TypeDef*)my_LED_DEBUG2_GPIO_Port, &ledDebug2Pin) != LedDriver_Status_OK){
 800614a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800614e:	461a      	mov	r2, r3
 8006150:	4929      	ldr	r1, [pc, #164]	; (80061f8 <main+0xf0>)
 8006152:	482b      	ldr	r0, [pc, #172]	; (8006200 <main+0xf8>)
 8006154:	f002 fe36 	bl	8008dc4 <LedDriver_init>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d001      	beq.n	8006162 <main+0x5a>
	  Error_Handler();
 800615e:	f000 f94f 	bl	8006400 <Error_Handler>
  }
  if (RTCDriver_init(&rtcDriver, &hrtc) != RTCDriver_Status_OK){
 8006162:	4928      	ldr	r1, [pc, #160]	; (8006204 <main+0xfc>)
 8006164:	4828      	ldr	r0, [pc, #160]	; (8006208 <main+0x100>)
 8006166:	f002 ffad 	bl	80090c4 <RTCDriver_init>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d001      	beq.n	8006174 <main+0x6c>
	  Error_Handler();
 8006170:	f000 f946 	bl	8006400 <Error_Handler>
  }
  if (MSTimerDriver_init(&msTimerDriver) != MSTimerDriver_Status_OK){
 8006174:	4825      	ldr	r0, [pc, #148]	; (800620c <main+0x104>)
 8006176:	f002 fe8a 	bl	8008e8e <MSTimerDriver_init>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <main+0x7c>
	  Error_Handler();
 8006180:	f000 f93e 	bl	8006400 <Error_Handler>
//
//  if (DataSaver_init(&dataSaver, pConfig, &fileSystem) != DataSaver_Status_OK){
//	  Error_Handler();
//  }

  if (UartDriver_init(&uart1Driver, &huart1, USART1, &msTimerDriver, 9600) != UartDriver_Status_OK){
 8006184:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	4b20      	ldr	r3, [pc, #128]	; (800620c <main+0x104>)
 800618c:	4a20      	ldr	r2, [pc, #128]	; (8006210 <main+0x108>)
 800618e:	4921      	ldr	r1, [pc, #132]	; (8006214 <main+0x10c>)
 8006190:	4821      	ldr	r0, [pc, #132]	; (8006218 <main+0x110>)
 8006192:	f003 f955 	bl	8009440 <UartDriver_init>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <main+0x98>
	  Error_Handler();
 800619c:	f000 f930 	bl	8006400 <Error_Handler>
  }
  if (GPSDriver_init(&gpsDriver, &uart1Driver, &msTimerDriver, GPSDriver_Frequency_5Hz) != GPSDriver_Status_OK){
 80061a0:	2304      	movs	r3, #4
 80061a2:	4a1a      	ldr	r2, [pc, #104]	; (800620c <main+0x104>)
 80061a4:	491c      	ldr	r1, [pc, #112]	; (8006218 <main+0x110>)
 80061a6:	481d      	ldr	r0, [pc, #116]	; (800621c <main+0x114>)
 80061a8:	f001 fa34 	bl	8007614 <GPSDriver_init>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <main+0xae>
	  Error_Handler();
 80061b2:	f000 f925 	bl	8006400 <Error_Handler>
//  }
//  if (ActionScheduler_startScheduler(&actionScheduler) != ActionScheduler_Status_OK){
//	  Error_Handler();
//  }

	if (GPSReceiver_start(&gpsReceiver) != GPSReceiver_Status_OK){
 80061b6:	481a      	ldr	r0, [pc, #104]	; (8006220 <main+0x118>)
 80061b8:	f002 fdca 	bl	8008d50 <GPSReceiver_start>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <main+0xbe>
		Error_Handler();
 80061c2:	f000 f91d 	bl	8006400 <Error_Handler>

//	if (ActionScheduler_thread(&actionScheduler) != ActionScheduler_Status_OK){
//		Warning_Handler("ActionScheduler_thread returned error.");
//	}

	if (GPSDriver_thread(&gpsDriver) != GPSDriver_Status_OK){
 80061c6:	4815      	ldr	r0, [pc, #84]	; (800621c <main+0x114>)
 80061c8:	f001 fb1c 	bl	8007804 <GPSDriver_thread>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <main+0xd0>
		Warning_Handler("GPSDriver_thread returned error.");
 80061d2:	4814      	ldr	r0, [pc, #80]	; (8006224 <main+0x11c>)
 80061d4:	f000 f90a 	bl	80063ec <Warning_Handler>
	}

	GPSData_TypeDef retGPSData;
	if (GPSReceiver_pullLastFrame(&gpsReceiver, &retGPSData) != GPSReceiver_Status_OK){
 80061d8:	463b      	mov	r3, r7
 80061da:	4619      	mov	r1, r3
 80061dc:	4810      	ldr	r0, [pc, #64]	; (8006220 <main+0x118>)
 80061de:	f002 fdd2 	bl	8008d86 <GPSReceiver_pullLastFrame>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <main+0xe4>
		Error_Handler();
 80061e8:	f000 f90a 	bl	8006400 <Error_Handler>
	}


	return ActionScheduler_Status_Error;
 80061ec:	2303      	movs	r3, #3
  }
  /* USER CODE END 3 */
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3748      	adds	r7, #72	; 0x48
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40020400 	.word	0x40020400
 80061fc:	2000aefc 	.word	0x2000aefc
 8006200:	2000fe14 	.word	0x2000fe14
 8006204:	200167cc 	.word	0x200167cc
 8006208:	2000fe60 	.word	0x2000fe60
 800620c:	2001474c 	.word	0x2001474c
 8006210:	40011000 	.word	0x40011000
 8006214:	20016870 	.word	0x20016870
 8006218:	20014758 	.word	0x20014758
 800621c:	2000af14 	.word	0x2000af14
 8006220:	20010330 	.word	0x20010330
 8006224:	0800a740 	.word	0x0800a740

08006228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b0b8      	sub	sp, #224	; 0xe0
 800622c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800622e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006232:	2234      	movs	r2, #52	; 0x34
 8006234:	2100      	movs	r1, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f003 fe5b 	bl	8009ef2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800623c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800624c:	f107 0308 	add.w	r3, r7, #8
 8006250:	2290      	movs	r2, #144	; 0x90
 8006252:	2100      	movs	r1, #0
 8006254:	4618      	mov	r0, r3
 8006256:	f003 fe4c 	bl	8009ef2 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800625a:	f7fb fa55 	bl	8001708 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800625e:	4a42      	ldr	r2, [pc, #264]	; (8006368 <SystemClock_Config+0x140>)
 8006260:	4b41      	ldr	r3, [pc, #260]	; (8006368 <SystemClock_Config+0x140>)
 8006262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006264:	f023 0318 	bic.w	r3, r3, #24
 8006268:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800626a:	4a3f      	ldr	r2, [pc, #252]	; (8006368 <SystemClock_Config+0x140>)
 800626c:	4b3e      	ldr	r3, [pc, #248]	; (8006368 <SystemClock_Config+0x140>)
 800626e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
 8006276:	4b3c      	ldr	r3, [pc, #240]	; (8006368 <SystemClock_Config+0x140>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627e:	607b      	str	r3, [r7, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8006282:	4a3a      	ldr	r2, [pc, #232]	; (800636c <SystemClock_Config+0x144>)
 8006284:	4b39      	ldr	r3, [pc, #228]	; (800636c <SystemClock_Config+0x144>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800628c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b36      	ldr	r3, [pc, #216]	; (800636c <SystemClock_Config+0x144>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800629e:	2305      	movs	r3, #5
 80062a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80062a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80062a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80062ac:	2301      	movs	r3, #1
 80062ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80062b2:	2302      	movs	r3, #2
 80062b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80062b8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80062bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 80062c0:	2308      	movs	r3, #8
 80062c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80062c6:	2360      	movs	r3, #96	; 0x60
 80062c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80062cc:	2302      	movs	r3, #2
 80062ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80062d2:	2304      	movs	r3, #4
 80062d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80062d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fb fa83 	bl	80017e8 <HAL_RCC_OscConfig>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80062e8:	f000 f88a 	bl	8006400 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80062ec:	f7fb fa2c 	bl	8001748 <HAL_PWREx_EnableOverDrive>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80062f6:	f000 f883 	bl	8006400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80062fa:	230f      	movs	r3, #15
 80062fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006300:	2302      	movs	r3, #2
 8006302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006306:	2300      	movs	r3, #0
 8006308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800630c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006310:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800631c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006320:	2103      	movs	r1, #3
 8006322:	4618      	mov	r0, r3
 8006324:	f7fb fcd2 	bl	8001ccc <HAL_RCC_ClockConfig>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800632e:	f000 f867 	bl	8006400 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8006332:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <SystemClock_Config+0x148>)
 8006334:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006336:	f44f 7380 	mov.w	r3, #256	; 0x100
 800633a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800633c:	2300      	movs	r3, #0
 800633e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006340:	2300      	movs	r3, #0
 8006342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8006346:	2300      	movs	r3, #0
 8006348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800634c:	f107 0308 	add.w	r3, r7, #8
 8006350:	4618      	mov	r0, r3
 8006352:	f7fb fead 	bl	80020b0 <HAL_RCCEx_PeriphCLKConfig>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <SystemClock_Config+0x138>
  {
    Error_Handler();
 800635c:	f000 f850 	bl	8006400 <Error_Handler>
  }
}
 8006360:	bf00      	nop
 8006362:	37e0      	adds	r7, #224	; 0xe0
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40023800 	.word	0x40023800
 800636c:	40007000 	.word	0x40007000
 8006370:	00a00060 	.word	0x00a00060

08006374 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8006378:	2200      	movs	r2, #0
 800637a:	2100      	movs	r1, #0
 800637c:	2005      	movs	r0, #5
 800637e:	f7fa fe0a 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006382:	2005      	movs	r0, #5
 8006384:	f7fa fe23 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* CAN1_TX_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8006388:	2200      	movs	r2, #0
 800638a:	2100      	movs	r1, #0
 800638c:	2013      	movs	r0, #19
 800638e:	f7fa fe02 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006392:	2013      	movs	r0, #19
 8006394:	f7fa fe1b 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006398:	2200      	movs	r2, #0
 800639a:	2100      	movs	r1, #0
 800639c:	2014      	movs	r0, #20
 800639e:	f7fa fdfa 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80063a2:	2014      	movs	r0, #20
 80063a4:	f7fa fe13 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* CAN1_RX1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80063a8:	2200      	movs	r2, #0
 80063aa:	2100      	movs	r1, #0
 80063ac:	2015      	movs	r0, #21
 80063ae:	f7fa fdf2 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80063b2:	2015      	movs	r0, #21
 80063b4:	f7fa fe0b 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* CAN1_SCE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	2016      	movs	r0, #22
 80063be:	f7fa fdea 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80063c2:	2016      	movs	r0, #22
 80063c4:	f7fa fe03 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	2025      	movs	r0, #37	; 0x25
 80063ce:	f7fa fde2 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80063d2:	2025      	movs	r0, #37	; 0x25
 80063d4:	f7fa fdfb 	bl	8000fce <HAL_NVIC_EnableIRQ>
  /* SDMMC1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80063d8:	2200      	movs	r2, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	2031      	movs	r0, #49	; 0x31
 80063de:	f7fa fdda 	bl	8000f96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80063e2:	2031      	movs	r0, #49	; 0x31
 80063e4:	f7fa fdf3 	bl	8000fce <HAL_NVIC_EnableIRQ>
}
 80063e8:	bf00      	nop
 80063ea:	bd80      	pop	{r7, pc}

080063ec <Warning_Handler>:

/* USER CODE BEGIN 4 */

void Warning_Handler(char* description){
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  if (errorInCounter++ > 0){
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <Error_Handler+0x50>)
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	1c5a      	adds	r2, r3, #1
 800640a:	b291      	uxth	r1, r2
 800640c:	4a10      	ldr	r2, [pc, #64]	; (8006450 <Error_Handler+0x50>)
 800640e:	8011      	strh	r1, [r2, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d11a      	bne.n	800644a <Error_Handler+0x4a>
	  return;
  }
  while(1)
  {
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_SET);
 8006414:	2201      	movs	r2, #1
 8006416:	2101      	movs	r1, #1
 8006418:	480e      	ldr	r0, [pc, #56]	; (8006454 <Error_Handler+0x54>)
 800641a:	f7fb f95b 	bl	80016d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(my_LED_DEBUG1_GPIO_Port, my_LED_DEBUG1_Pin, GPIO_PIN_SET);
 800641e:	2201      	movs	r2, #1
 8006420:	2102      	movs	r1, #2
 8006422:	480c      	ldr	r0, [pc, #48]	; (8006454 <Error_Handler+0x54>)
 8006424:	f7fb f956 	bl	80016d4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8006428:	2032      	movs	r0, #50	; 0x32
 800642a:	f7fa f93f 	bl	80006ac <HAL_Delay>
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_RESET);
 800642e:	2200      	movs	r2, #0
 8006430:	2101      	movs	r1, #1
 8006432:	4808      	ldr	r0, [pc, #32]	; (8006454 <Error_Handler+0x54>)
 8006434:	f7fb f94e 	bl	80016d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(my_LED_DEBUG1_GPIO_Port, my_LED_DEBUG1_Pin, GPIO_PIN_RESET);
 8006438:	2200      	movs	r2, #0
 800643a:	2102      	movs	r1, #2
 800643c:	4805      	ldr	r0, [pc, #20]	; (8006454 <Error_Handler+0x54>)
 800643e:	f7fb f949 	bl	80016d4 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8006442:	2032      	movs	r0, #50	; 0x32
 8006444:	f7fa f932 	bl	80006ac <HAL_Delay>
	  HAL_GPIO_WritePin(my_LED_DEBUG2_GPIO_Port, my_LED_DEBUG2_Pin, GPIO_PIN_SET);
 8006448:	e7e4      	b.n	8006414 <Error_Handler+0x14>
	  return;
 800644a:	bf00      	nop
  }
  /* USER CODE END Error_Handler_Debug */
}
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20000098 	.word	0x20000098
 8006454:	40020400 	.word	0x40020400

08006458 <HAL_RTC_MspInit>:
  }

}

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a07      	ldr	r2, [pc, #28]	; (8006484 <HAL_RTC_MspInit+0x2c>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d105      	bne.n	8006476 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800646a:	4a07      	ldr	r2, [pc, #28]	; (8006488 <HAL_RTC_MspInit+0x30>)
 800646c:	4b06      	ldr	r3, [pc, #24]	; (8006488 <HAL_RTC_MspInit+0x30>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006474:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40002800 	.word	0x40002800
 8006488:	40023800 	.word	0x40023800

0800648c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006496:	4b0b      	ldr	r3, [pc, #44]	; (80064c4 <SD_CheckStatus+0x38>)
 8006498:	2201      	movs	r2, #1
 800649a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800649c:	f7ff fd3c 	bl	8005f18 <BSP_SD_GetCardState>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d107      	bne.n	80064b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80064a6:	4b07      	ldr	r3, [pc, #28]	; (80064c4 <SD_CheckStatus+0x38>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	4b04      	ldr	r3, [pc, #16]	; (80064c4 <SD_CheckStatus+0x38>)
 80064b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80064b6:	4b03      	ldr	r3, [pc, #12]	; (80064c4 <SD_CheckStatus+0x38>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000005 	.word	0x20000005

080064c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <SD_initialize+0x38>)
 80064d4:	2201      	movs	r2, #1
 80064d6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80064d8:	f7ff fcca 	bl	8005e70 <BSP_SD_Init>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff ffd1 	bl	800648c <SD_CheckStatus>
 80064ea:	4603      	mov	r3, r0
 80064ec:	461a      	mov	r2, r3
 80064ee:	4b04      	ldr	r3, [pc, #16]	; (8006500 <SD_initialize+0x38>)
 80064f0:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80064f2:	4b03      	ldr	r3, [pc, #12]	; (8006500 <SD_initialize+0x38>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	b2db      	uxtb	r3, r3
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000005 	.word	0x20000005

08006504 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800650e:	79fb      	ldrb	r3, [r7, #7]
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff ffbb 	bl	800648c <SD_CheckStatus>
 8006516:	4603      	mov	r3, r0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3708      	adds	r7, #8
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006534:	f04f 33ff 	mov.w	r3, #4294967295
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	68b8      	ldr	r0, [r7, #8]
 800653e:	f7ff fcaf 	bl	8005ea0 <BSP_SD_ReadBlocks>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d107      	bne.n	8006558 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006548:	bf00      	nop
 800654a:	f7ff fce5 	bl	8005f18 <BSP_SD_GetCardState>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1fa      	bne.n	800654a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4603      	mov	r3, r0
 8006570:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	f7ff fcac 	bl	8005edc <BSP_SD_WriteBlocks>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d107      	bne.n	800659a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800658a:	bf00      	nop
 800658c:	f7ff fcc4 	bl	8005f18 <BSP_SD_GetCardState>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1fa      	bne.n	800658c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800659a:	7dfb      	ldrb	r3, [r7, #23]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08c      	sub	sp, #48	; 0x30
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	603a      	str	r2, [r7, #0]
 80065ae:	71fb      	strb	r3, [r7, #7]
 80065b0:	460b      	mov	r3, r1
 80065b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80065ba:	4b25      	ldr	r3, [pc, #148]	; (8006650 <SD_ioctl+0xac>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <SD_ioctl+0x28>
 80065c8:	2303      	movs	r3, #3
 80065ca:	e03c      	b.n	8006646 <SD_ioctl+0xa2>

  switch (cmd)
 80065cc:	79bb      	ldrb	r3, [r7, #6]
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d834      	bhi.n	800663c <SD_ioctl+0x98>
 80065d2:	a201      	add	r2, pc, #4	; (adr r2, 80065d8 <SD_ioctl+0x34>)
 80065d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f1 	.word	0x080065f1
 80065e0:	08006609 	.word	0x08006609
 80065e4:	08006623 	.word	0x08006623
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80065ee:	e028      	b.n	8006642 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80065f0:	f107 030c 	add.w	r3, r7, #12
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fc9f 	bl	8005f38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80065fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006606:	e01c      	b.n	8006642 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fc93 	bl	8005f38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	b29a      	uxth	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006620:	e00f      	b.n	8006642 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006622:	f107 030c 	add.w	r3, r7, #12
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fc86 	bl	8005f38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	0a5a      	lsrs	r2, r3, #9
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800663a:	e002      	b.n	8006642 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800663c:	2304      	movs	r3, #4
 800663e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006642:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006646:	4618      	mov	r0, r3
 8006648:	3730      	adds	r7, #48	; 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000005 	.word	0x20000005

08006654 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 800665a:	4a0d      	ldr	r2, [pc, #52]	; (8006690 <MX_SDMMC1_SD_Init+0x3c>)
 800665c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800665e:	4b0b      	ldr	r3, [pc, #44]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 8006660:	2200      	movs	r2, #0
 8006662:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 8006666:	2200      	movs	r2, #0
 8006668:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 800666c:	2200      	movs	r2, #0
 800666e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 8006672:	2200      	movs	r2, #0
 8006674:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 8006678:	2200      	movs	r2, #0
 800667a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 10;
 800667c:	4b03      	ldr	r3, [pc, #12]	; (800668c <MX_SDMMC1_SD_Init+0x38>)
 800667e:	220a      	movs	r2, #10
 8006680:	619a      	str	r2, [r3, #24]

}
 8006682:	bf00      	nop
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	200167ec 	.word	0x200167ec
 8006690:	40012c00 	.word	0x40012c00

08006694 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800669c:	f107 0314 	add.w	r3, r7, #20
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	609a      	str	r2, [r3, #8]
 80066a8:	60da      	str	r2, [r3, #12]
 80066aa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a25      	ldr	r2, [pc, #148]	; (8006748 <HAL_SD_MspInit+0xb4>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d144      	bne.n	8006740 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80066b6:	4a25      	ldr	r2, [pc, #148]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066b8:	4b24      	ldr	r3, [pc, #144]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066c0:	6453      	str	r3, [r2, #68]	; 0x44
 80066c2:	4b22      	ldr	r3, [pc, #136]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066ce:	4a1f      	ldr	r2, [pc, #124]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066d0:	4b1e      	ldr	r3, [pc, #120]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6313      	str	r3, [r2, #48]	; 0x30
 80066da:	4b1c      	ldr	r3, [pc, #112]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066e8:	4b18      	ldr	r3, [pc, #96]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ec:	f043 0308 	orr.w	r3, r3, #8
 80066f0:	6313      	str	r3, [r2, #48]	; 0x30
 80066f2:	4b16      	ldr	r3, [pc, #88]	; (800674c <HAL_SD_MspInit+0xb8>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80066fe:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8006702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006704:	2302      	movs	r3, #2
 8006706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006708:	2300      	movs	r3, #0
 800670a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800670c:	2303      	movs	r3, #3
 800670e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006710:	230c      	movs	r3, #12
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006714:	f107 0314 	add.w	r3, r7, #20
 8006718:	4619      	mov	r1, r3
 800671a:	480d      	ldr	r0, [pc, #52]	; (8006750 <HAL_SD_MspInit+0xbc>)
 800671c:	f7fa fd24 	bl	8001168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006720:	2304      	movs	r3, #4
 8006722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006724:	2302      	movs	r3, #2
 8006726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006728:	2300      	movs	r3, #0
 800672a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800672c:	2303      	movs	r3, #3
 800672e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8006730:	230c      	movs	r3, #12
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006734:	f107 0314 	add.w	r3, r7, #20
 8006738:	4619      	mov	r1, r3
 800673a:	4806      	ldr	r0, [pc, #24]	; (8006754 <HAL_SD_MspInit+0xc0>)
 800673c:	f7fa fd14 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8006740:	bf00      	nop
 8006742:	3728      	adds	r7, #40	; 0x28
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40012c00 	.word	0x40012c00
 800674c:	40023800 	.word	0x40023800
 8006750:	40020800 	.word	0x40020800
 8006754:	40020c00 	.word	0x40020c00

08006758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800675e:	4a0f      	ldr	r2, [pc, #60]	; (800679c <HAL_MspInit+0x44>)
 8006760:	4b0e      	ldr	r3, [pc, #56]	; (800679c <HAL_MspInit+0x44>)
 8006762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006768:	6413      	str	r3, [r2, #64]	; 0x40
 800676a:	4b0c      	ldr	r3, [pc, #48]	; (800679c <HAL_MspInit+0x44>)
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006772:	607b      	str	r3, [r7, #4]
 8006774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <HAL_MspInit+0x44>)
 8006778:	4b08      	ldr	r3, [pc, #32]	; (800679c <HAL_MspInit+0x44>)
 800677a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006780:	6453      	str	r3, [r2, #68]	; 0x44
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <HAL_MspInit+0x44>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800678a:	603b      	str	r3, [r7, #0]
 800678c:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40023800 	.word	0x40023800

080067a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80067ae:	b480      	push	{r7}
 80067b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80067b2:	e7fe      	b.n	80067b2 <HardFault_Handler+0x4>

080067b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80067b8:	e7fe      	b.n	80067b8 <MemManage_Handler+0x4>

080067ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80067ba:	b480      	push	{r7}
 80067bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80067be:	e7fe      	b.n	80067be <BusFault_Handler+0x4>

080067c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80067c4:	e7fe      	b.n	80067c4 <UsageFault_Handler+0x4>

080067c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80067c6:	b480      	push	{r7}
 80067c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80067d8:	bf00      	nop
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80067e2:	b480      	push	{r7}
 80067e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80067e6:	bf00      	nop
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80067f4:	f7f9 ff3a 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80067f8:	f7fa fc11 	bl	800101e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80067fc:	bf00      	nop
 80067fe:	bd80      	pop	{r7, pc}

08006800 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8006800:	b480      	push	{r7}
 8006802:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
	...

08006810 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006814:	4802      	ldr	r0, [pc, #8]	; (8006820 <CAN1_TX_IRQHandler+0x10>)
 8006816:	f7fa f87e 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800681a:	bf00      	nop
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200004c8 	.word	0x200004c8

08006824 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006828:	4802      	ldr	r0, [pc, #8]	; (8006834 <CAN1_RX0_IRQHandler+0x10>)
 800682a:	f7fa f874 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800682e:	bf00      	nop
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200004c8 	.word	0x200004c8

08006838 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800683c:	4802      	ldr	r0, [pc, #8]	; (8006848 <CAN1_RX1_IRQHandler+0x10>)
 800683e:	f7fa f86a 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	200004c8 	.word	0x200004c8

0800684c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006850:	4802      	ldr	r0, [pc, #8]	; (800685c <CAN1_SCE_IRQHandler+0x10>)
 8006852:	f7fa f860 	bl	8000916 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	200004c8 	.word	0x200004c8

08006860 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006864:	4802      	ldr	r0, [pc, #8]	; (8006870 <USART1_IRQHandler+0x10>)
 8006866:	f7fd ff3f 	bl	80046e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800686a:	bf00      	nop
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20016870 	.word	0x20016870

08006874 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8006878:	4802      	ldr	r0, [pc, #8]	; (8006884 <SDMMC1_IRQHandler+0x10>)
 800687a:	f7fc ff1d 	bl	80036b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	200167ec 	.word	0x200167ec

08006888 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <_sbrk+0x50>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d102      	bne.n	800689e <_sbrk+0x16>
		heap_end = &end;
 8006898:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <_sbrk+0x50>)
 800689a:	4a10      	ldr	r2, [pc, #64]	; (80068dc <_sbrk+0x54>)
 800689c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800689e:	4b0e      	ldr	r3, [pc, #56]	; (80068d8 <_sbrk+0x50>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <_sbrk+0x50>)
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4413      	add	r3, r2
 80068ac:	466a      	mov	r2, sp
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d907      	bls.n	80068c2 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80068b2:	f003 fae9 	bl	8009e88 <__errno>
 80068b6:	4602      	mov	r2, r0
 80068b8:	230c      	movs	r3, #12
 80068ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80068bc:	f04f 33ff 	mov.w	r3, #4294967295
 80068c0:	e006      	b.n	80068d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <_sbrk+0x50>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4413      	add	r3, r2
 80068ca:	4a03      	ldr	r2, [pc, #12]	; (80068d8 <_sbrk+0x50>)
 80068cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80068ce:	68fb      	ldr	r3, [r7, #12]
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	2000009c 	.word	0x2000009c
 80068dc:	200168f4 	.word	0x200168f4

080068e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068e4:	4a15      	ldr	r2, [pc, #84]	; (800693c <SystemInit+0x5c>)
 80068e6:	4b15      	ldr	r3, [pc, #84]	; (800693c <SystemInit+0x5c>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80068f4:	4a12      	ldr	r2, [pc, #72]	; (8006940 <SystemInit+0x60>)
 80068f6:	4b12      	ldr	r3, [pc, #72]	; (8006940 <SystemInit+0x60>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <SystemInit+0x60>)
 8006902:	2200      	movs	r2, #0
 8006904:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8006906:	490e      	ldr	r1, [pc, #56]	; (8006940 <SystemInit+0x60>)
 8006908:	4b0d      	ldr	r3, [pc, #52]	; (8006940 <SystemInit+0x60>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4b0d      	ldr	r3, [pc, #52]	; (8006944 <SystemInit+0x64>)
 800690e:	4013      	ands	r3, r2
 8006910:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006912:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <SystemInit+0x60>)
 8006914:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <SystemInit+0x68>)
 8006916:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8006918:	4a09      	ldr	r2, [pc, #36]	; (8006940 <SystemInit+0x60>)
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <SystemInit+0x60>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006922:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006924:	4b06      	ldr	r3, [pc, #24]	; (8006940 <SystemInit+0x60>)
 8006926:	2200      	movs	r2, #0
 8006928:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800692a:	4b04      	ldr	r3, [pc, #16]	; (800693c <SystemInit+0x5c>)
 800692c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006930:	609a      	str	r2, [r3, #8]
#endif
}
 8006932:	bf00      	nop
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	e000ed00 	.word	0xe000ed00
 8006940:	40023800 	.word	0x40023800
 8006944:	fef6ffff 	.word	0xfef6ffff
 8006948:	24003010 	.word	0x24003010

0800694c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	; 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006954:	f107 0314 	add.w	r3, r7, #20
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a17      	ldr	r2, [pc, #92]	; (80069c8 <HAL_UART_MspInit+0x7c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d128      	bne.n	80069c0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800696e:	4a17      	ldr	r2, [pc, #92]	; (80069cc <HAL_UART_MspInit+0x80>)
 8006970:	4b16      	ldr	r3, [pc, #88]	; (80069cc <HAL_UART_MspInit+0x80>)
 8006972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006974:	f043 0310 	orr.w	r3, r3, #16
 8006978:	6453      	str	r3, [r2, #68]	; 0x44
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <HAL_UART_MspInit+0x80>)
 800697c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006986:	4a11      	ldr	r2, [pc, #68]	; (80069cc <HAL_UART_MspInit+0x80>)
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <HAL_UART_MspInit+0x80>)
 800698a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698c:	f043 0302 	orr.w	r3, r3, #2
 8006990:	6313      	str	r3, [r2, #48]	; 0x30
 8006992:	4b0e      	ldr	r3, [pc, #56]	; (80069cc <HAL_UART_MspInit+0x80>)
 8006994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = my_GPS_UART_TX_Pin|my_GPS_UART_RX_Pin;
 800699e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80069a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a4:	2302      	movs	r3, #2
 80069a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069a8:	2301      	movs	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069ac:	2303      	movs	r3, #3
 80069ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80069b0:	2304      	movs	r3, #4
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069b4:	f107 0314 	add.w	r3, r7, #20
 80069b8:	4619      	mov	r1, r3
 80069ba:	4805      	ldr	r0, [pc, #20]	; (80069d0 <HAL_UART_MspInit+0x84>)
 80069bc:	f7fa fbd4 	bl	8001168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80069c0:	bf00      	nop
 80069c2:	3728      	adds	r7, #40	; 0x28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	40011000 	.word	0x40011000
 80069cc:	40023800 	.word	0x40023800
 80069d0:	40020400 	.word	0x40020400

080069d4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a0a      	ldr	r2, [pc, #40]	; (8006a0c <HAL_UART_MspDeInit+0x38>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d10d      	bne.n	8006a02 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80069e6:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <HAL_UART_MspDeInit+0x3c>)
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <HAL_UART_MspDeInit+0x3c>)
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	f023 0310 	bic.w	r3, r3, #16
 80069f0:	6453      	str	r3, [r2, #68]	; 0x44
  
    /**USART1 GPIO Configuration    
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX 
    */
    HAL_GPIO_DeInit(GPIOB, my_GPS_UART_TX_Pin|my_GPS_UART_RX_Pin);
 80069f2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80069f6:	4807      	ldr	r0, [pc, #28]	; (8006a14 <HAL_UART_MspDeInit+0x40>)
 80069f8:	f7fa fd60 	bl	80014bc <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80069fc:	2025      	movs	r0, #37	; 0x25
 80069fe:	f7fa faf4 	bl	8000fea <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
} 
 8006a02:	bf00      	nop
 8006a04:	3708      	adds	r7, #8
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	40011000 	.word	0x40011000
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40020400 	.word	0x40020400

08006a18 <CANTransceiverDriver_receivedMsgCallbackHandler>:

	return CANTransceiverDriver_Status_OK;

}

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_receivedMsgCallbackHandler(CANTransceiverDriver_TypeDef* pSelf, uint16_t ID, uint8_t DLC, uint8_t aData[8], uint16_t timestamp){
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08a      	sub	sp, #40	; 0x28
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	607b      	str	r3, [r7, #4]
 8006a22:	460b      	mov	r3, r1
 8006a24:	817b      	strh	r3, [r7, #10]
 8006a26:	4613      	mov	r3, r2
 8006a28:	727b      	strb	r3, [r7, #9]

	CANData_TypeDef canData;
	canData.DLC = DLC;
 8006a2a:	7a7b      	ldrb	r3, [r7, #9]
 8006a2c:	75bb      	strb	r3, [r7, #22]
	canData.ID = ID;
 8006a2e:	897b      	ldrh	r3, [r7, #10]
 8006a30:	82bb      	strh	r3, [r7, #20]
	memcpy(canData.Data, aData, 8);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	f107 031c 	add.w	r3, r7, #28
 8006a38:	6810      	ldr	r0, [r2, #0]
 8006a3a:	6851      	ldr	r1, [r2, #4]
 8006a3c:	c303      	stmia	r3!, {r0, r1}
	canData.msTime = timestamp; //TODO !!!!! to jest zle, ale niech bedzie na razie
 8006a3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006a40:	61bb      	str	r3, [r7, #24]

	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 8006a42:	2300      	movs	r3, #0
 8006a44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a46:	e017      	b.n	8006a78 <CANTransceiverDriver_receivedMsgCallbackHandler+0x60>

		if (pSelf->pRxCallbackFunctions[i] == NULL){
 8006a48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d014      	beq.n	8006a80 <CANTransceiverDriver_receivedMsgCallbackHandler+0x68>
			break;
		}

		pSelf->pRxCallbackFunctions[i](&canData, pSelf->pRxCallbackArguemnts[i]);
 8006a56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	4413      	add	r3, r2
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	3104      	adds	r1, #4
 8006a66:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8006a6a:	f107 0214 	add.w	r2, r7, #20
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4798      	blx	r3
	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 8006a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a74:	3301      	adds	r3, #1
 8006a76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d9e4      	bls.n	8006a48 <CANTransceiverDriver_receivedMsgCallbackHandler+0x30>
 8006a7e:	e000      	b.n	8006a82 <CANTransceiverDriver_receivedMsgCallbackHandler+0x6a>
			break;
 8006a80:	bf00      	nop
	}

	return CANTransceiverDriver_Status_OK;
 8006a82:	2300      	movs	r3, #0

}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3728      	adds	r7, #40	; 0x28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <checkErrorcode>:

	return CANTransceiverDriver_Status_OK;

}

static void checkErrorcode(uint32_t errorcodeHAL, uint32_t errorMask, CANTransceiverDriver_ErrorCode_TypeDef* errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TypeDef errorTracsceiverMaskOut){
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
 8006a98:	807b      	strh	r3, [r7, #2]

	if ((errorcodeHAL & errorMask) != 0){
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d006      	beq.n	8006ab2 <checkErrorcode+0x26>
		*errorcodeTransceiverOut |= errorTracsceiverMaskOut;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	881a      	ldrh	r2, [r3, #0]
 8006aa8:	887b      	ldrh	r3, [r7, #2]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	801a      	strh	r2, [r3, #0]
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <CANTransceiverDriver_errorCallbackHandler>:

CANTransceiverDriver_Status_TypeDef CANTransceiverDriver_errorCallbackHandler(CANTransceiverDriver_TypeDef* pSelf){
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]

	uint32_t errorcodeHAL = HAL_CAN_GetError(pSelf->pHcan);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fa f938 	bl	8000d40 <HAL_CAN_GetError>
 8006ad0:	6138      	str	r0, [r7, #16]

	CANTransceiverDriver_ErrorCode_TypeDef	errorcodeTransceiverOut = CANTransceiverDriver_ErrorCode_None;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	81fb      	strh	r3, [r7, #14]

	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_EWG, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ProtocolErrWarn);
 8006ad6:	f107 020e 	add.w	r2, r7, #14
 8006ada:	2301      	movs	r3, #1
 8006adc:	2101      	movs	r1, #1
 8006ade:	6938      	ldr	r0, [r7, #16]
 8006ae0:	f7ff ffd4 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_EPV, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ErrPassive);
 8006ae4:	f107 020e 	add.w	r2, r7, #14
 8006ae8:	2302      	movs	r3, #2
 8006aea:	2102      	movs	r1, #2
 8006aec:	6938      	ldr	r0, [r7, #16]
 8006aee:	f7ff ffcd 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BOF, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BusOff);
 8006af2:	f107 020e 	add.w	r2, r7, #14
 8006af6:	2304      	movs	r3, #4
 8006af8:	2104      	movs	r1, #4
 8006afa:	6938      	ldr	r0, [r7, #16]
 8006afc:	f7ff ffc6 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_STF, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitStuffingError);
 8006b00:	f107 020e 	add.w	r2, r7, #14
 8006b04:	2308      	movs	r3, #8
 8006b06:	2108      	movs	r1, #8
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7ff ffbf 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_FOR, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_FormError);
 8006b0e:	f107 020e 	add.w	r2, r7, #14
 8006b12:	2310      	movs	r3, #16
 8006b14:	2110      	movs	r1, #16
 8006b16:	6938      	ldr	r0, [r7, #16]
 8006b18:	f7ff ffb8 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_ACK, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_ACKError);
 8006b1c:	f107 020e 	add.w	r2, r7, #14
 8006b20:	2320      	movs	r3, #32
 8006b22:	2120      	movs	r1, #32
 8006b24:	6938      	ldr	r0, [r7, #16]
 8006b26:	f7ff ffb1 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BR,  &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitRecessiveError);
 8006b2a:	f107 020e 	add.w	r2, r7, #14
 8006b2e:	2340      	movs	r3, #64	; 0x40
 8006b30:	2140      	movs	r1, #64	; 0x40
 8006b32:	6938      	ldr	r0, [r7, #16]
 8006b34:	f7ff ffaa 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_BD,  &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_BitDominantError);
 8006b38:	f107 020e 	add.w	r2, r7, #14
 8006b3c:	2380      	movs	r3, #128	; 0x80
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	6938      	ldr	r0, [r7, #16]
 8006b42:	f7ff ffa3 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_CRC, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_CRCError);
 8006b46:	f107 020e 	add.w	r2, r7, #14
 8006b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f7ff ff9a 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL,
 8006b58:	f107 020e 	add.w	r2, r7, #14
 8006b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b64:	6938      	ldr	r0, [r7, #16]
 8006b66:	f7ff ff91 	bl	8006a8c <checkErrorcode>
			HAL_CAN_ERROR_RX_FOV0 |
			HAL_CAN_ERROR_RX_FOV1, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_RxFIFOError);
	checkErrorcode(errorcodeHAL,
 8006b6a:	f107 020e 	add.w	r2, r7, #14
 8006b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b72:	f44f 31fc 	mov.w	r1, #129024	; 0x1f800
 8006b76:	6938      	ldr	r0, [r7, #16]
 8006b78:	f7ff ff88 	bl	8006a8c <checkErrorcode>
			HAL_CAN_ERROR_TX_TERR0 |
			HAL_CAN_ERROR_TX_ALST1 |
			HAL_CAN_ERROR_TX_TERR1 |
			HAL_CAN_ERROR_TX_ALST2 |
			HAL_CAN_ERROR_TX_TERR2, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TxMailboxError);
	checkErrorcode(errorcodeHAL, HAL_CAN_ERROR_TIMEOUT, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_TimeoutError);
 8006b7c:	f107 020e 	add.w	r2, r7, #14
 8006b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b84:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8006b88:	6938      	ldr	r0, [r7, #16]
 8006b8a:	f7ff ff7f 	bl	8006a8c <checkErrorcode>
	checkErrorcode(errorcodeHAL,
 8006b8e:	f107 020e 	add.w	r2, r7, #14
 8006b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b96:	f44f 1170 	mov.w	r1, #3932160	; 0x3c0000
 8006b9a:	6938      	ldr	r0, [r7, #16]
 8006b9c:	f7ff ff76 	bl	8006a8c <checkErrorcode>
			HAL_CAN_ERROR_NOT_INITIALIZED |
			HAL_CAN_ERROR_NOT_READY |
			HAL_CAN_ERROR_NOT_STARTED |
			HAL_CAN_ERROR_PARAM, &errorcodeTransceiverOut, CANTransceiverDriver_ErrorCode_OtherError);

	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	82fb      	strh	r3, [r7, #22]
 8006ba4:	e018      	b.n	8006bd8 <CANTransceiverDriver_errorCallbackHandler+0x11a>

		if (pSelf->pErrorCallbackFunctions[i] == NULL){
 8006ba6:	8afb      	ldrh	r3, [r7, #22]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	3306      	adds	r3, #6
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d014      	beq.n	8006be0 <CANTransceiverDriver_errorCallbackHandler+0x122>
			break;
		}

		pSelf->pErrorCallbackFunctions[i](errorcodeTransceiverOut, pSelf->pErrorCallbackArguemnts[i]);
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	3306      	adds	r3, #6
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	4413      	add	r3, r2
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	89f8      	ldrh	r0, [r7, #14]
 8006bc4:	8af9      	ldrh	r1, [r7, #22]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	310a      	adds	r1, #10
 8006bca:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8006bce:	4611      	mov	r1, r2
 8006bd0:	4798      	blx	r3
	for (uint16_t i=0; i<CAN_MAX_CALLBACK_NUMBER; i++){
 8006bd2:	8afb      	ldrh	r3, [r7, #22]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	82fb      	strh	r3, [r7, #22]
 8006bd8:	8afb      	ldrh	r3, [r7, #22]
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d9e3      	bls.n	8006ba6 <CANTransceiverDriver_errorCallbackHandler+0xe8>
 8006bde:	e000      	b.n	8006be2 <CANTransceiverDriver_errorCallbackHandler+0x124>
			break;
 8006be0:	bf00      	nop
	}

	if (HAL_CAN_ResetError(pSelf->pHcan) != HAL_OK){
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fa f8b6 	bl	8000d58 <HAL_CAN_ResetError>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <CANTransceiverDriver_errorCallbackHandler+0x138>
		Error_Handler();
 8006bf2:	f7ff fc05 	bl	8006400 <Error_Handler>
	}

	return CANTransceiverDriver_Status_OK;
 8006bf6:	2300      	movs	r3, #0

}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <HAL_CAN_RxFifo0MsgPendingCallback>:

/****************************** Implementations of stm32f7xx_hal_can.h __weak functions placeholders ******************************/

extern CANTransceiverDriver_TypeDef canTransceiverDriver;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08e      	sub	sp, #56	; 0x38
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d001      	beq.n	8006c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x14>
		Error_Handler();
 8006c10:	f7ff fbf6 	bl	8006400 <Error_Handler>
	}

	CAN_RxHeaderTypeDef	header;
	uint8_t				data[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &header, data) != HAL_OK){
 8006c14:	f107 030c 	add.w	r3, r7, #12
 8006c18:	f107 0214 	add.w	r2, r7, #20
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7f9 fd66 	bl	80006f0 <HAL_CAN_GetRxMessage>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
		Error_Handler();
 8006c2a:	f7ff fbe9 	bl	8006400 <Error_Handler>
	}

	if (CANTransceiverDriver_receivedMsgCallbackHandler(&canTransceiverDriver, header.StdId, header.DLC, data, header.Timestamp) != CANTransceiverDriver_Status_OK){
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	b299      	uxth	r1, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f107 000c 	add.w	r0, r7, #12
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4603      	mov	r3, r0
 8006c42:	4807      	ldr	r0, [pc, #28]	; (8006c60 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8006c44:	f7ff fee8 	bl	8006a18 <CANTransceiverDriver_receivedMsgCallbackHandler>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
		Error_Handler();
 8006c4e:	f7ff fbd7 	bl	8006400 <Error_Handler>
	}

}
 8006c52:	bf00      	nop
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	200004c8 	.word	0x200004c8
 8006c60:	2000fe2c 	.word	0x2000fe2c

08006c64 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08e      	sub	sp, #56	; 0x38
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_CAN_RxFifo1MsgPendingCallback+0x5c>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d001      	beq.n	8006c78 <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
		Error_Handler();
 8006c74:	f7ff fbc4 	bl	8006400 <Error_Handler>
	}

	CAN_RxHeaderTypeDef	header;
	uint8_t				data[8];

	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &header, data) != HAL_OK){
 8006c78:	f107 030c 	add.w	r3, r7, #12
 8006c7c:	f107 0214 	add.w	r2, r7, #20
 8006c80:	2101      	movs	r1, #1
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7f9 fd34 	bl	80006f0 <HAL_CAN_GetRxMessage>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e>
		Error_Handler();
 8006c8e:	f7ff fbb7 	bl	8006400 <Error_Handler>
	}

	if (CANTransceiverDriver_receivedMsgCallbackHandler(&canTransceiverDriver, header.StdId, header.DLC, data, header.Timestamp) != CANTransceiverDriver_Status_OK){
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	b299      	uxth	r1, r3
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f107 000c 	add.w	r0, r7, #12
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	4807      	ldr	r0, [pc, #28]	; (8006cc4 <HAL_CAN_RxFifo1MsgPendingCallback+0x60>)
 8006ca8:	f7ff feb6 	bl	8006a18 <CANTransceiverDriver_receivedMsgCallbackHandler>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_CAN_RxFifo1MsgPendingCallback+0x52>
		Error_Handler();
 8006cb2:	f7ff fba5 	bl	8006400 <Error_Handler>
	}

}
 8006cb6:	bf00      	nop
 8006cb8:	3730      	adds	r7, #48	; 0x30
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200004c8 	.word	0x200004c8
 8006cc4:	2000fe2c 	.word	0x2000fe2c

08006cc8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

	if (hcan != &hcan1){
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a08      	ldr	r2, [pc, #32]	; (8006cf4 <HAL_CAN_ErrorCallback+0x2c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d001      	beq.n	8006cdc <HAL_CAN_ErrorCallback+0x14>
		Error_Handler();
 8006cd8:	f7ff fb92 	bl	8006400 <Error_Handler>
	}

	if (CANTransceiverDriver_errorCallbackHandler(&canTransceiverDriver) != CANTransceiverDriver_Status_OK){
 8006cdc:	4806      	ldr	r0, [pc, #24]	; (8006cf8 <HAL_CAN_ErrorCallback+0x30>)
 8006cde:	f7ff feee 	bl	8006abe <CANTransceiverDriver_errorCallbackHandler>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_CAN_ErrorCallback+0x24>
		Error_Handler();
 8006ce8:	f7ff fb8a 	bl	8006400 <Error_Handler>
	}

}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	200004c8 	.word	0x200004c8
 8006cf8:	2000fe2c 	.word	0x2000fe2c

08006cfc <FIFOQueue_init>:
 */

#include "user/fifo_queue.h"
#include "string.h"

FIFO_Status_TypeDef FIFOQueue_init(volatile FIFOQueue_TypeDef* pSelf, volatile void* pTabPtrArg, uint8_t elementSize, uint16_t queueSize){
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	4611      	mov	r1, r2
 8006d08:	461a      	mov	r2, r3
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	71fb      	strb	r3, [r7, #7]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	80bb      	strh	r3, [r7, #4]

	if (pSelf == NULL || pTabPtrArg == NULL){
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <FIFOQueue_init+0x22>
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <FIFOQueue_init+0x26>
		return FIFO_Status_Error;
 8006d1e:	2304      	movs	r3, #4
 8006d20:	e01c      	b.n	8006d5c <FIFOQueue_init+0x60>
	}

	if (pSelf->state != FIFO_State_UnInitialized){
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	7a1b      	ldrb	r3, [r3, #8]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <FIFOQueue_init+0x34>
		return FIFO_Status_UnInitializedError;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e015      	b.n	8006d5c <FIFOQueue_init+0x60>
	}

	pSelf->pTabPtr			= pTabPtrArg;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	601a      	str	r2, [r3, #0]
	pSelf->elementSize		= elementSize;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	79fa      	ldrb	r2, [r7, #7]
 8006d3a:	711a      	strb	r2, [r3, #4]
	pSelf->queueLength		= queueSize;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	88ba      	ldrh	r2, [r7, #4]
 8006d40:	80da      	strh	r2, [r3, #6]
	pSelf->elementsNumber	= 0;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	815a      	strh	r2, [r3, #10]
	pSelf->headIndex		= 0;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	819a      	strh	r2, [r3, #12]
	pSelf->tailIndex		= 0;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	81da      	strh	r2, [r3, #14]

	pSelf->state			= FIFO_State_Ready;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	721a      	strb	r2, [r3, #8]

	return FIFO_Status_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <FIFOQueue_enqueue>:

FIFO_Status_TypeDef FIFOQueue_enqueue(volatile FIFOQueue_TypeDef* pSelf, volatile void* pElement){
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pElement == NULL){
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d002      	beq.n	8006d7e <FIFOQueue_enqueue+0x16>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d101      	bne.n	8006d82 <FIFOQueue_enqueue+0x1a>
		return FIFO_Status_Error;
 8006d7e:	2304      	movs	r3, #4
 8006d80:	e038      	b.n	8006df4 <FIFOQueue_enqueue+0x8c>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7a1b      	ldrb	r3, [r3, #8]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <FIFOQueue_enqueue+0x28>
		return FIFO_Status_UnInitializedError;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e031      	b.n	8006df4 <FIFOQueue_enqueue+0x8c>
	}

	if (FIFOQueue_isFull(pSelf)){
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 f87d 	bl	8006e90 <FIFOQueue_isFull>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <FIFOQueue_enqueue+0x38>
		return FIFO_Status_Full;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e029      	b.n	8006df4 <FIFOQueue_enqueue+0x8c>
	}

	pSelf->tailIndex = (pSelf->tailIndex + 1) % (pSelf->queueLength); // Notice incrementing tail value
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	89db      	ldrh	r3, [r3, #14]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3301      	adds	r3, #1
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	88d2      	ldrh	r2, [r2, #6]
 8006dac:	b292      	uxth	r2, r2
 8006dae:	fb93 f1f2 	sdiv	r1, r3, r2
 8006db2:	fb02 f201 	mul.w	r2, r2, r1
 8006db6:	1a9b      	subs	r3, r3, r2
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	81da      	strh	r2, [r3, #14]
	pSelf->elementsNumber++;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	895b      	ldrh	r3, [r3, #10]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	815a      	strh	r2, [r3, #10]

	memcpy(pSelf->pTabPtr + (pSelf->tailIndex * pSelf->elementSize), pElement, pSelf->elementSize);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	89d2      	ldrh	r2, [r2, #14]
 8006dd4:	b292      	uxth	r2, r2
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7912      	ldrb	r2, [r2, #4]
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	fb02 f201 	mul.w	r2, r2, r1
 8006de2:	1898      	adds	r0, r3, r2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	791b      	ldrb	r3, [r3, #4]
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	461a      	mov	r2, r3
 8006dec:	6839      	ldr	r1, [r7, #0]
 8006dee:	f003 f875 	bl	8009edc <memcpy>

	return FIFO_Status_OK;
 8006df2:	2300      	movs	r3, #0

}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <FIFOQueue_dequeue>:

FIFO_Status_TypeDef FIFOQueue_dequeue(volatile FIFOQueue_TypeDef* pSelf, volatile void* pRetElement){
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetElement == NULL){
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <FIFOQueue_dequeue+0x16>
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <FIFOQueue_dequeue+0x1a>
		return FIFO_Status_Error;
 8006e12:	2304      	movs	r3, #4
 8006e14:	e038      	b.n	8006e88 <FIFOQueue_dequeue+0x8c>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7a1b      	ldrb	r3, [r3, #8]
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <FIFOQueue_dequeue+0x28>
		return FIFO_Status_UnInitializedError;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e031      	b.n	8006e88 <FIFOQueue_dequeue+0x8c>
	}

	if (FIFOQueue_isEmpty(pSelf)){
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f854 	bl	8006ed2 <FIFOQueue_isEmpty>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <FIFOQueue_dequeue+0x38>
		return FIFO_Status_Empty;
 8006e30:	2302      	movs	r3, #2
 8006e32:	e029      	b.n	8006e88 <FIFOQueue_dequeue+0x8c>
	}

	memcpy(pRetElement, pSelf->pTabPtr + (pSelf->headIndex * pSelf->elementSize), pSelf->elementSize);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	8992      	ldrh	r2, [r2, #12]
 8006e3c:	b292      	uxth	r2, r2
 8006e3e:	4611      	mov	r1, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7912      	ldrb	r2, [r2, #4]
 8006e44:	b2d2      	uxtb	r2, r2
 8006e46:	fb02 f201 	mul.w	r2, r2, r1
 8006e4a:	1899      	adds	r1, r3, r2
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	791b      	ldrb	r3, [r3, #4]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	461a      	mov	r2, r3
 8006e54:	6838      	ldr	r0, [r7, #0]
 8006e56:	f003 f841 	bl	8009edc <memcpy>

	pSelf->headIndex = (pSelf->headIndex + 1) % (pSelf->queueLength); // Notice incrementing head value
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	899b      	ldrh	r3, [r3, #12]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	3301      	adds	r3, #1
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	88d2      	ldrh	r2, [r2, #6]
 8006e66:	b292      	uxth	r2, r2
 8006e68:	fb93 f1f2 	sdiv	r1, r3, r2
 8006e6c:	fb02 f201 	mul.w	r2, r2, r1
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	819a      	strh	r2, [r3, #12]
	pSelf->elementsNumber--;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	895b      	ldrh	r3, [r3, #10]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	815a      	strh	r2, [r3, #10]

	return FIFO_Status_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <FIFOQueue_isFull>:
	*pRetElementsNumber = pSelf->elementsNumber;

	return FIFO_Status_OK;
}

uint8_t FIFOQueue_isFull(volatile FIFOQueue_TypeDef* pSelf){
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <FIFOQueue_isFull+0x12>
		return FIFO_Status_Error;
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	e011      	b.n	8006ec6 <FIFOQueue_isFull+0x36>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	7a1b      	ldrb	r3, [r3, #8]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <FIFOQueue_isFull+0x20>
		return 1;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e00a      	b.n	8006ec6 <FIFOQueue_isFull+0x36>
	}

	return pSelf->elementsNumber >= pSelf->queueLength;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	895b      	ldrh	r3, [r3, #10]
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	88db      	ldrh	r3, [r3, #6]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	bf2c      	ite	cs
 8006ec0:	2301      	movcs	r3, #1
 8006ec2:	2300      	movcc	r3, #0
 8006ec4:	b2db      	uxtb	r3, r3
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <FIFOQueue_isEmpty>:

uint8_t FIFOQueue_isEmpty(volatile FIFOQueue_TypeDef* pSelf){
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <FIFOQueue_isEmpty+0x12>
		return FIFO_Status_Error;
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	e00e      	b.n	8006f02 <FIFOQueue_isEmpty+0x30>
	}

	if (pSelf->state == FIFO_State_UnInitialized){
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7a1b      	ldrb	r3, [r3, #8]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <FIFOQueue_isEmpty+0x20>
		return 1;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e007      	b.n	8006f02 <FIFOQueue_isEmpty+0x30>
	}

	return (pSelf->elementsNumber == 0) ? 1 : 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	895b      	ldrh	r3, [r3, #10]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	bf0c      	ite	eq
 8006efc:	2301      	moveq	r3, #1
 8006efe:	2300      	movne	r3, #0
 8006f00:	b2db      	uxtb	r3, r3
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <FIFOMultiread_init>:

#include <user/fifo_queue_multiread.h>
#include "stdint.h"
#include "string.h"

FIFOMultiread_Status_TypeDef FIFOMultiread_init(volatile FIFOMultiread_TypeDef* pSelf, volatile void* pTabPtrArg, uint8_t elementSize, uint16_t queueSize){
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b086      	sub	sp, #24
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	71fb      	strb	r3, [r7, #7]
 8006f20:	4613      	mov	r3, r2
 8006f22:	80bb      	strh	r3, [r7, #4]

	if (pSelf==NULL || pTabPtrArg == NULL){
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <FIFOMultiread_init+0x22>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <FIFOMultiread_init+0x26>
		return FIFOMultiread_Status_Error;
 8006f30:	2306      	movs	r3, #6
 8006f32:	e03d      	b.n	8006fb0 <FIFOMultiread_init+0xa2>
	}

	if (pSelf->state != FIFOMultiread_State_UnInitialized){
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	7a1b      	ldrb	r3, [r3, #8]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <FIFOMultiread_init+0x34>
		return FIFOMultiread_Status_Error;
 8006f3e:	2306      	movs	r3, #6
 8006f40:	e036      	b.n	8006fb0 <FIFOMultiread_init+0xa2>
	}

	pSelf->pTabPtr		= pTabPtrArg;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	601a      	str	r2, [r3, #0]
	pSelf->elementSize	= elementSize;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	79fa      	ldrb	r2, [r7, #7]
 8006f4c:	711a      	strb	r2, [r3, #4]
	pSelf->queueLength	= queueSize;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	88ba      	ldrh	r2, [r7, #4]
 8006f52:	80da      	strh	r2, [r3, #6]
	pSelf->tailIndex	= 0;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	83da      	strh	r2, [r3, #30]

	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75fb      	strb	r3, [r7, #23]
 8006f5e:	e016      	b.n	8006f8e <FIFOMultiread_init+0x80>
		pSelf->elementsNumber[i]	= 0;
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	3304      	adds	r3, #4
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	4413      	add	r3, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	805a      	strh	r2, [r3, #2]
		pSelf->headIndex[i]			= 0;
 8006f6e:	7dfb      	ldrb	r3, [r7, #23]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	3308      	adds	r3, #8
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	2200      	movs	r2, #0
 8006f7a:	809a      	strh	r2, [r3, #4]
		pSelf->readerActive[i]		= false;
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2020 	strb.w	r2, [r3, #32]
	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	75fb      	strb	r3, [r7, #23]
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	2b04      	cmp	r3, #4
 8006f92:	d9e5      	bls.n	8006f60 <FIFOMultiread_init+0x52>
	}

	memset((void*)pSelf->pTabPtr, 0, queueSize * elementSize);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	88bb      	ldrh	r3, [r7, #4]
 8006f9a:	79fa      	ldrb	r2, [r7, #7]
 8006f9c:	fb02 f303 	mul.w	r3, r2, r3
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	f002 ffa5 	bl	8009ef2 <memset>

	pSelf->state 				= FIFOMultiread_State_Ready;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2201      	movs	r2, #1
 8006fac:	721a      	strb	r2, [r3, #8]

	return FIFOMultiread_Status_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <FIFOMultiread_registerReaderIdentifier>:

FIFOMultiread_Status_TypeDef FIFOMultiread_registerReaderIdentifier(volatile FIFOMultiread_TypeDef* pSelfFifo, volatile FIFOMultireadReaderIdentifier_TypeDef* pReaderHandler){
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]

	if (pSelfFifo == NULL || pReaderHandler == NULL){
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <FIFOMultiread_registerReaderIdentifier+0x16>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <FIFOMultiread_registerReaderIdentifier+0x1a>
		return FIFOMultiread_Status_Error;
 8006fce:	2306      	movs	r3, #6
 8006fd0:	e032      	b.n	8007038 <FIFOMultiread_registerReaderIdentifier+0x80>
	}

	if (pSelfFifo->state == FIFOMultiread_State_UnInitialized){
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	7a1b      	ldrb	r3, [r3, #8]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <FIFOMultiread_registerReaderIdentifier+0x28>
		return FIFOMultiread_Status_UnInitializedError;
 8006fdc:	2304      	movs	r3, #4
 8006fde:	e02b      	b.n	8007038 <FIFOMultiread_registerReaderIdentifier+0x80>
	}

	pReaderHandler->readerId	= FIFO_MULTIREAD_MAX_READERS;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2205      	movs	r2, #5
 8006fe4:	711a      	strb	r2, [r3, #4]
	for (uint8_t i=0; i<FIFO_MULTIREAD_MAX_READERS; i++){
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
 8006fea:	e017      	b.n	800701c <FIFOMultiread_registerReaderIdentifier+0x64>
		if (pSelfFifo->readerActive[i] == false){
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	f083 0301 	eor.w	r3, r3, #1
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <FIFOMultiread_registerReaderIdentifier+0x5e>
			pSelfFifo->readerActive[i]	= true;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4413      	add	r3, r2
 8007008:	2201      	movs	r2, #1
 800700a:	f883 2020 	strb.w	r2, [r3, #32]
			pReaderHandler->readerId	= i;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	711a      	strb	r2, [r3, #4]
			break;
 8007014:	e005      	b.n	8007022 <FIFOMultiread_registerReaderIdentifier+0x6a>
	for (uint8_t i=0; i<FIFO_MULTIREAD_MAX_READERS; i++){
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	3301      	adds	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b04      	cmp	r3, #4
 8007020:	d9e4      	bls.n	8006fec <FIFOMultiread_registerReaderIdentifier+0x34>
		}
	}

	if (pReaderHandler->readerId != FIFO_MULTIREAD_MAX_READERS){
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	791b      	ldrb	r3, [r3, #4]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b05      	cmp	r3, #5
 800702a:	d004      	beq.n	8007036 <FIFOMultiread_registerReaderIdentifier+0x7e>
		pReaderHandler->pFifoHandler	= pSelfFifo;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
	} else {
		return FIFOMultiread_Status_TooManyRegisteredReadedsError;
	}

	return FIFOMultiread_Status_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e000      	b.n	8007038 <FIFOMultiread_registerReaderIdentifier+0x80>
		return FIFOMultiread_Status_TooManyRegisteredReadedsError;
 8007036:	2303      	movs	r3, #3

}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <FIFOMultiread_unregisterReaderIdentifier>:


FIFOMultiread_Status_TypeDef FIFOMultiread_unregisterReaderIdentifier(volatile FIFOMultireadReaderIdentifier_TypeDef* pReaderHandler){
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

	if (pReaderHandler == NULL){
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <FIFOMultiread_unregisterReaderIdentifier+0x12>
		return FIFOMultiread_Status_Error;
 8007052:	2306      	movs	r3, #6
 8007054:	e021      	b.n	800709a <FIFOMultiread_unregisterReaderIdentifier+0x56>
	}

	if (pReaderHandler->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	7a1b      	ldrb	r3, [r3, #8]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <FIFOMultiread_unregisterReaderIdentifier+0x22>
		return FIFOMultiread_Status_UnInitializedError;
 8007062:	2304      	movs	r3, #4
 8007064:	e019      	b.n	800709a <FIFOMultiread_unregisterReaderIdentifier+0x56>
	}

	if (pReaderHandler->pFifoHandler->readerActive[pReaderHandler->readerId] == false){
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	7912      	ldrb	r2, [r2, #4]
 800706e:	b2d2      	uxtb	r2, r2
 8007070:	4413      	add	r3, r2
 8007072:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	f083 0301 	eor.w	r3, r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <FIFOMultiread_unregisterReaderIdentifier+0x42>
		return FIFOMultiread_Status_NotRegisteredReaderError;
 8007082:	2305      	movs	r3, #5
 8007084:	e009      	b.n	800709a <FIFOMultiread_unregisterReaderIdentifier+0x56>
	}

	pReaderHandler->pFifoHandler->readerActive[pReaderHandler->readerId] = false;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	7912      	ldrb	r2, [r2, #4]
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	4413      	add	r3, r2
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2020 	strb.w	r2, [r3, #32]

	return FIFOMultiread_Status_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	370c      	adds	r7, #12
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <FIFOMultiread_enqueue>:

FIFOMultiread_Status_TypeDef FIFOMultiread_enqueue(volatile FIFOMultiread_TypeDef* volatile pSelf, volatile void* volatile pElement){
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pElement == NULL){
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <FIFOMultiread_enqueue+0x16>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <FIFOMultiread_enqueue+0x1a>
		return FIFOMultiread_Status_Error;
 80070bc:	2306      	movs	r3, #6
 80070be:	e051      	b.n	8007164 <FIFOMultiread_enqueue+0xbe>
	}

	if (pSelf->state == FIFOMultiread_State_UnInitialized){
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7a1b      	ldrb	r3, [r3, #8]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <FIFOMultiread_enqueue+0x28>
		return FIFOMultiread_Status_UnInitializedError;
 80070ca:	2304      	movs	r3, #4
 80070cc:	e04a      	b.n	8007164 <FIFOMultiread_enqueue+0xbe>
	}

	if (FIFOMultiread_isFull(pSelf)){
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 f84b 	bl	800716c <FIFOMultiread_isFull>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <FIFOMultiread_enqueue+0x3a>
		return FIFOMultiread_Status_Full;
 80070dc:	2301      	movs	r3, #1
 80070de:	e041      	b.n	8007164 <FIFOMultiread_enqueue+0xbe>
	}

	pSelf->tailIndex = (pSelf->tailIndex + 1) % (pSelf->queueLength); // Notice incrementing tail value
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	8bdb      	ldrh	r3, [r3, #30]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3301      	adds	r3, #1
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	88d2      	ldrh	r2, [r2, #6]
 80070ee:	b292      	uxth	r2, r2
 80070f0:	fb93 f0f2 	sdiv	r0, r3, r2
 80070f4:	fb02 f200 	mul.w	r2, r2, r0
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	83cb      	strh	r3, [r1, #30]
	memcpy((void*)pSelf->pTabPtr + (pSelf->tailIndex * pSelf->elementSize), (void*)pElement, pSelf->elementSize);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	8bd2      	ldrh	r2, [r2, #30]
 8007106:	b292      	uxth	r2, r2
 8007108:	4611      	mov	r1, r2
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	7912      	ldrb	r2, [r2, #4]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	fb02 f201 	mul.w	r2, r2, r1
 8007114:	1898      	adds	r0, r3, r2
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	b2db      	uxtb	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	f002 fedc 	bl	8009edc <memcpy>

	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	e018      	b.n	800715c <FIFOMultiread_enqueue+0xb6>
		if (pSelf->readerActive[i]){
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	4413      	add	r3, r2
 8007130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00d      	beq.n	8007156 <FIFOMultiread_enqueue+0xb0>
			pSelf->elementsNumber[i]++;
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	7bf9      	ldrb	r1, [r7, #15]
 800713e:	1d0b      	adds	r3, r1, #4
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	4413      	add	r3, r2
 8007144:	885b      	ldrh	r3, [r3, #2]
 8007146:	b29b      	uxth	r3, r3
 8007148:	3301      	adds	r3, #1
 800714a:	b298      	uxth	r0, r3
 800714c:	1d0b      	adds	r3, r1, #4
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	4602      	mov	r2, r0
 8007154:	805a      	strh	r2, [r3, #2]
	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	3301      	adds	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2b04      	cmp	r3, #4
 8007160:	d9e3      	bls.n	800712a <FIFOMultiread_enqueue+0x84>
		}
	}

	return FIFOMultiread_Status_OK;
 8007162:	2300      	movs	r3, #0

}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <FIFOMultiread_isFull>:

bool FIFOMultiread_isFull(volatile FIFOMultiread_TypeDef* volatile pSelf){
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <FIFOMultiread_isFull+0x12>
		return FIFOMultiread_Status_Error;
 800717a:	2301      	movs	r3, #1
 800717c:	e026      	b.n	80071cc <FIFOMultiread_isFull+0x60>
	}

	if (pSelf->state == FIFOMultiread_State_UnInitialized){
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	7a1b      	ldrb	r3, [r3, #8]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <FIFOMultiread_isFull+0x20>
		return FIFOMultiread_Status_UnInitializedError;
 8007188:	2301      	movs	r3, #1
 800718a:	e01f      	b.n	80071cc <FIFOMultiread_isFull+0x60>
	}

	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 800718c:	2300      	movs	r3, #0
 800718e:	73fb      	strb	r3, [r7, #15]
 8007190:	e018      	b.n	80071c4 <FIFOMultiread_isFull+0x58>
		if (pSelf->readerActive[i] && pSelf->elementsNumber[i] >= pSelf->queueLength){
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	4413      	add	r3, r2
 8007198:	f893 3020 	ldrb.w	r3, [r3, #32]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d00d      	beq.n	80071be <FIFOMultiread_isFull+0x52>
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
 80071a6:	3304      	adds	r3, #4
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4413      	add	r3, r2
 80071ac:	885b      	ldrh	r3, [r3, #2]
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	88db      	ldrh	r3, [r3, #6]
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d301      	bcc.n	80071be <FIFOMultiread_isFull+0x52>
			return 1;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e006      	b.n	80071cc <FIFOMultiread_isFull+0x60>
	for (uint8_t i = 0; i < FIFO_MULTIREAD_MAX_READERS; i++){
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	3301      	adds	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d9e3      	bls.n	8007192 <FIFOMultiread_isFull+0x26>
		}
	}

	return 0;
 80071ca:	2300      	movs	r3, #0

}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <FIFOMultiread_isEmpty>:

bool FIFOMultiread_isEmpty(volatile FIFOMultireadReaderIdentifier_TypeDef* volatile pSelf){
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <FIFOMultiread_isEmpty+0x12>
		return true;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e026      	b.n	8007238 <FIFOMultiread_isEmpty+0x60>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	7a1b      	ldrb	r3, [r3, #8]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d101      	bne.n	80071fa <FIFOMultiread_isEmpty+0x22>
		return true;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e01e      	b.n	8007238 <FIFOMultiread_isEmpty+0x60>
	}

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	7912      	ldrb	r2, [r2, #4]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	4413      	add	r3, r2
 8007206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f083 0301 	eor.w	r3, r3, #1
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <FIFOMultiread_isEmpty+0x42>
		return true;
 8007216:	2301      	movs	r3, #1
 8007218:	e00e      	b.n	8007238 <FIFOMultiread_isEmpty+0x60>
	}

	if (pSelf->pFifoHandler->elementsNumber[pSelf->readerId] == 0){
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	791b      	ldrb	r3, [r3, #4]
 8007222:	b2db      	uxtb	r3, r3
 8007224:	3304      	adds	r3, #4
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	b29b      	uxth	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <FIFOMultiread_isEmpty+0x5e>
		return true;
 8007232:	2301      	movs	r3, #1
 8007234:	e000      	b.n	8007238 <FIFOMultiread_isEmpty+0x60>
	} else {
		return false;
 8007236:	2300      	movs	r3, #0
	}
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <FIFOMultiread_dequeue>:

FIFOMultiread_Status_TypeDef FIFOMultiread_dequeue(volatile FIFOMultireadReaderIdentifier_TypeDef* volatile pSelf, volatile void* volatile pRetElement){
 8007244:	b590      	push	{r4, r7, lr}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetElement == NULL){
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <FIFOMultiread_dequeue+0x16>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <FIFOMultiread_dequeue+0x1a>
		return FIFOMultiread_Status_Error;
 800725a:	2306      	movs	r3, #6
 800725c:	e070      	b.n	8007340 <FIFOMultiread_dequeue+0xfc>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	7a1b      	ldrb	r3, [r3, #8]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <FIFOMultiread_dequeue+0x2a>
		return FIFOMultiread_Status_UnInitializedError;
 800726a:	2304      	movs	r3, #4
 800726c:	e068      	b.n	8007340 <FIFOMultiread_dequeue+0xfc>
	}

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	7912      	ldrb	r2, [r2, #4]
 8007276:	b2d2      	uxtb	r2, r2
 8007278:	4413      	add	r3, r2
 800727a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	f083 0301 	eor.w	r3, r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <FIFOMultiread_dequeue+0x4a>
		return FIFOMultiread_Status_NotRegisteredReaderError;
 800728a:	2305      	movs	r3, #5
 800728c:	e058      	b.n	8007340 <FIFOMultiread_dequeue+0xfc>
	}

	if (FIFOMultiread_isEmpty(pSelf)){
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff ffa1 	bl	80071d8 <FIFOMultiread_isEmpty>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <FIFOMultiread_dequeue+0x5c>
		return FIFOMultiread_Status_Empty;
 800729c:	2302      	movs	r3, #2
 800729e:	e04f      	b.n	8007340 <FIFOMultiread_dequeue+0xfc>
	}

	memcpy((void*)pRetElement, (void*)pSelf->pFifoHandler->pTabPtr + (pSelf->pFifoHandler->headIndex[pSelf->readerId] * pSelf->pFifoHandler->elementSize), pSelf->pFifoHandler->elementSize);
 80072a0:	6838      	ldr	r0, [r7, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	791b      	ldrb	r3, [r3, #4]
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	3308      	adds	r3, #8
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	440b      	add	r3, r1
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	791b      	ldrb	r3, [r3, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	fb03 f301 	mul.w	r3, r3, r1
 80072ca:	18d1      	adds	r1, r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	791b      	ldrb	r3, [r3, #4]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	461a      	mov	r2, r3
 80072d6:	f002 fe01 	bl	8009edc <memcpy>

	pSelf->pFifoHandler->headIndex[pSelf->readerId] = (pSelf->pFifoHandler->headIndex[pSelf->readerId] + 1) % (pSelf->pFifoHandler->queueLength); // Notice incrementing head value
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6819      	ldr	r1, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	791b      	ldrb	r3, [r3, #4]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	461c      	mov	r4, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	791b      	ldrb	r3, [r3, #4]
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	3308      	adds	r3, #8
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	4413      	add	r3, r2
 80072f6:	889b      	ldrh	r3, [r3, #4]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	3301      	adds	r3, #1
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	88d2      	ldrh	r2, [r2, #6]
 8007302:	b292      	uxth	r2, r2
 8007304:	fb93 f0f2 	sdiv	r0, r3, r2
 8007308:	fb02 f200 	mul.w	r2, r2, r0
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	b29a      	uxth	r2, r3
 8007310:	f104 0308 	add.w	r3, r4, #8
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	440b      	add	r3, r1
 8007318:	809a      	strh	r2, [r3, #4]
	pSelf->pFifoHandler->elementsNumber[pSelf->readerId]--;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	791b      	ldrb	r3, [r3, #4]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	4619      	mov	r1, r3
 8007326:	1d0b      	adds	r3, r1, #4
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4413      	add	r3, r2
 800732c:	885b      	ldrh	r3, [r3, #2]
 800732e:	b29b      	uxth	r3, r3
 8007330:	3b01      	subs	r3, #1
 8007332:	b298      	uxth	r0, r3
 8007334:	1d0b      	adds	r3, r1, #4
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	4413      	add	r3, r2
 800733a:	4602      	mov	r2, r0
 800733c:	805a      	strh	r2, [r3, #2]

	return FIFOMultiread_Status_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	bd90      	pop	{r4, r7, pc}

08007348 <FIFOMultiread_lastElement>:

FIFOMultiread_Status_TypeDef FIFOMultiread_lastElement(volatile FIFOMultireadReaderIdentifier_TypeDef* volatile pSelf, volatile void* volatile pRetElement){
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetElement == NULL){
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <FIFOMultiread_lastElement+0x16>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d101      	bne.n	8007362 <FIFOMultiread_lastElement+0x1a>
		return FIFOMultiread_Status_Error;
 800735e:	2306      	movs	r3, #6
 8007360:	e03e      	b.n	80073e0 <FIFOMultiread_lastElement+0x98>
	}

	if (pSelf->pFifoHandler->state == FIFOMultiread_State_UnInitialized){
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	7a1b      	ldrb	r3, [r3, #8]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <FIFOMultiread_lastElement+0x2a>
		return FIFOMultiread_Status_UnInitializedError;
 800736e:	2304      	movs	r3, #4
 8007370:	e036      	b.n	80073e0 <FIFOMultiread_lastElement+0x98>
	}

	if (pSelf->pFifoHandler->readerActive[pSelf->readerId] == false){
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	7912      	ldrb	r2, [r2, #4]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	4413      	add	r3, r2
 800737e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	f083 0301 	eor.w	r3, r3, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b00      	cmp	r3, #0
 800738c:	d001      	beq.n	8007392 <FIFOMultiread_lastElement+0x4a>
		return FIFOMultiread_Status_NotRegisteredReaderError;
 800738e:	2305      	movs	r3, #5
 8007390:	e026      	b.n	80073e0 <FIFOMultiread_lastElement+0x98>
	}

	if (FIFOMultiread_isEmpty(pSelf)){
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4618      	mov	r0, r3
 8007396:	f7ff ff1f 	bl	80071d8 <FIFOMultiread_isEmpty>
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <FIFOMultiread_lastElement+0x5c>
		return FIFOMultiread_Status_Empty;
 80073a0:	2302      	movs	r3, #2
 80073a2:	e01d      	b.n	80073e0 <FIFOMultiread_lastElement+0x98>
	}

	memcpy((void*)pRetElement, (void*)pSelf->pFifoHandler->pTabPtr + (pSelf->pFifoHandler->headIndex[pSelf->readerId] * pSelf->pFifoHandler->elementSize), pSelf->pFifoHandler->elementSize);
 80073a4:	6838      	ldr	r0, [r7, #0]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6819      	ldr	r1, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	791b      	ldrb	r3, [r3, #4]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	3308      	adds	r3, #8
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	440b      	add	r3, r1
 80073bc:	889b      	ldrh	r3, [r3, #4]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	4619      	mov	r1, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	791b      	ldrb	r3, [r3, #4]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	fb03 f301 	mul.w	r3, r3, r1
 80073ce:	18d1      	adds	r1, r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	791b      	ldrb	r3, [r3, #4]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	461a      	mov	r2, r3
 80073da:	f002 fd7f 	bl	8009edc <memcpy>

	return FIFOMultiread_Status_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <FixedPoint_constrDecimalFrac>:
 *      Author: Michal Kowalik
 */

#include "user/fixed_point.h"

FixedPoint FixedPoint_constrDecimalFrac(int32_t decimalPart, uint32_t fractionalNumerator, uint32_t fractionalDenominator, uint8_t fractionalBits){
 80073e8:	b480      	push	{r7}
 80073ea:	b087      	sub	sp, #28
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]

	FixedPoint ret;

	ret.fractionalBits = fractionalBits;
 80073f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80073fa:	753b      	strb	r3, [r7, #20]

	decimalPart += fractionalNumerator / fractionalDenominator; //< handle case when fractionalNumerator > fractionalDenomianator
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	fbb2 f2f3 	udiv	r2, r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	4413      	add	r3, r2
 8007408:	60bb      	str	r3, [r7, #8]
	fractionalNumerator %= fractionalDenominator;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007412:	6839      	ldr	r1, [r7, #0]
 8007414:	fb01 f202 	mul.w	r2, r1, r2
 8007418:	1a9b      	subs	r3, r3, r2
 800741a:	607b      	str	r3, [r7, #4]

	ret.integer  = decimalPart << fractionalBits;
 800741c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	fa02 f303 	lsl.w	r3, r2, r3
 8007426:	613b      	str	r3, [r7, #16]
	ret.integer |= (fractionalNumerator << fractionalBits) / fractionalDenominator;
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	4619      	mov	r1, r3
 800742c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	409a      	lsls	r2, r3
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	fbb2 f3f3 	udiv	r3, r2, r3
 800743a:	430b      	orrs	r3, r1
 800743c:	613b      	str	r3, [r7, #16]

	return ret;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	461a      	mov	r2, r3
 8007442:	f107 0310 	add.w	r3, r7, #16
 8007446:	e893 0003 	ldmia.w	r3, {r0, r1}
 800744a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	371c      	adds	r7, #28
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <FixedPoint_a_mult_b>:
		return ((a.integer >> diffBits) < b.integer);

	return (a.integer < (b.integer << diffBits));
}

FixedPoint FixedPoint_a_mult_b(FixedPoint a, FixedPoint b, uint8_t resultFractionalBits){
 800745a:	b082      	sub	sp, #8
 800745c:	b4f0      	push	{r4, r5, r6, r7}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	1d38      	adds	r0, r7, #4
 8007466:	e880 0006 	stmia.w	r0, {r1, r2}
 800746a:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint32_t tmpFractionalBits	= a.fractionalBits + b.fractionalBits;
 800746c:	7a3b      	ldrb	r3, [r7, #8]
 800746e:	461a      	mov	r2, r3
 8007470:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007474:	4413      	add	r3, r2
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
	int64_t tmpResult			= a.integer * b.integer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800747c:	fb02 f303 	mul.w	r3, r2, r3
 8007480:	461a      	mov	r2, r3
 8007482:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8007486:	e9c7 2306 	strd	r2, r3, [r7, #24]

	FixedPoint ret;
	ret.integer			= (int32_t)(tmpResult >> (tmpFractionalBits - resultFractionalBits));
 800748a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800748e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007490:	1ad1      	subs	r1, r2, r3
 8007492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007496:	f1c1 0620 	rsb	r6, r1, #32
 800749a:	f1b1 0020 	subs.w	r0, r1, #32
 800749e:	fa22 f401 	lsr.w	r4, r2, r1
 80074a2:	fa03 f606 	lsl.w	r6, r3, r6
 80074a6:	ea44 0406 	orr.w	r4, r4, r6
 80074aa:	d402      	bmi.n	80074b2 <FixedPoint_a_mult_b+0x58>
 80074ac:	fa43 f000 	asr.w	r0, r3, r0
 80074b0:	4304      	orrs	r4, r0
 80074b2:	fa43 f501 	asr.w	r5, r3, r1
 80074b6:	4623      	mov	r3, r4
 80074b8:	613b      	str	r3, [r7, #16]
	ret.fractionalBits	= resultFractionalBits;
 80074ba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80074be:	753b      	strb	r3, [r7, #20]

	return ret;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f107 0310 	add.w	r3, r7, #16
 80074c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80074cc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	3728      	adds	r7, #40	; 0x28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bcf0      	pop	{r4, r5, r6, r7}
 80074d8:	b002      	add	sp, #8
 80074da:	4770      	bx	lr

080074dc <_GPSDriver_dataReceivedCallback>:
static GPSDriver_Status_TypeDef _GPSDriver_parseLongitude(uint8_t* bytes, uint16_t length, volatile GPSData_TypeDef* retGPSData);
static GPSDriver_Status_TypeDef _GPSDriver_parseFixedPoint(uint8_t* bytes, uint16_t length, volatile FixedPoint* retFixedPoint);

//< ----- Uart Callback function ----- >//

static void _GPSDriver_dataReceivedCallback(uint8_t* bytes, uint16_t length, uint32_t timestamp, void* pArgs){
 80074dc:	b580      	push	{r7, lr}
 80074de:	b09c      	sub	sp, #112	; 0x70
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	460b      	mov	r3, r1
 80074ea:	817b      	strh	r3, [r7, #10]

	if (pArgs == NULL || bytes == NULL){
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <_GPSDriver_dataReceivedCallback+0x1c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <_GPSDriver_dataReceivedCallback+0x22>
		Warning_Handler("_GPSDriver_dataReceivedCallback - null pointer.");
 80074f8:	481c      	ldr	r0, [pc, #112]	; (800756c <_GPSDriver_dataReceivedCallback+0x90>)
 80074fa:	f7fe ff77 	bl	80063ec <Warning_Handler>
	}

	volatile GPSDriver_TypeDef* volatile pSelf = (GPSDriver_TypeDef*) pArgs;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (pSelf->state == GPSDriver_State_DuringInit){
 8007502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d102      	bne.n	8007512 <_GPSDriver_dataReceivedCallback+0x36>
		Warning_Handler("_GPSDriver_dataReceivedCallback - GPS Driver during init.");
 800750c:	4818      	ldr	r0, [pc, #96]	; (8007570 <_GPSDriver_dataReceivedCallback+0x94>)
 800750e:	f7fe ff6d 	bl	80063ec <Warning_Handler>
	}

	if (pSelf->state == GPSDriver_State_UnInitialized){
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <_GPSDriver_dataReceivedCallback+0x46>
		Warning_Handler("_GPSDriver_dataReceivedCallback - GPS Driver uninitialized.");
 800751c:	4815      	ldr	r0, [pc, #84]	; (8007574 <_GPSDriver_dataReceivedCallback+0x98>)
 800751e:	f7fe ff65 	bl	80063ec <Warning_Handler>
	}

	if (length > GPS_NMEA_MAX_SENTENCE_LENGTH_INCLUDING_CRC){
 8007522:	897b      	ldrh	r3, [r7, #10]
 8007524:	2b53      	cmp	r3, #83	; 0x53
 8007526:	d902      	bls.n	800752e <_GPSDriver_dataReceivedCallback+0x52>
		Warning_Handler("_GPSDriver_dataReceivedCallback - NMEA sentence longer than max length.");
 8007528:	4813      	ldr	r0, [pc, #76]	; (8007578 <_GPSDriver_dataReceivedCallback+0x9c>)
 800752a:	f7fe ff5f 	bl	80063ec <Warning_Handler>
	}

	_GPSDriver_NMEASentenceString tmpNMEAString;
	tmpNMEAString.timestamp		 	= timestamp;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	613b      	str	r3, [r7, #16]
	tmpNMEAString.sentenceLength	= length;
 8007532:	897b      	ldrh	r3, [r7, #10]
 8007534:	82bb      	strh	r3, [r7, #20]
	memcpy(tmpNMEAString.sentenceString, bytes, length);
 8007536:	897a      	ldrh	r2, [r7, #10]
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	3306      	adds	r3, #6
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	4618      	mov	r0, r3
 8007542:	f002 fccb 	bl	8009edc <memcpy>

	if (FIFOQueue_enqueue(&pSelf->nmeaSentenceStringFIFO, &tmpNMEAString) != FIFO_Status_OK){
 8007546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007548:	3364      	adds	r3, #100	; 0x64
 800754a:	f107 0210 	add.w	r2, r7, #16
 800754e:	4611      	mov	r1, r2
 8007550:	4618      	mov	r0, r3
 8007552:	f7ff fc09 	bl	8006d68 <FIFOQueue_enqueue>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <_GPSDriver_dataReceivedCallback+0x86>
		Warning_Handler("_GPSDriver_dataReceivedCallback - FIFOQueue_enqueue error.");
 800755c:	4807      	ldr	r0, [pc, #28]	; (800757c <_GPSDriver_dataReceivedCallback+0xa0>)
 800755e:	f7fe ff45 	bl	80063ec <Warning_Handler>
	}

}
 8007562:	bf00      	nop
 8007564:	3770      	adds	r7, #112	; 0x70
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	0800a764 	.word	0x0800a764
 8007570:	0800a794 	.word	0x0800a794
 8007574:	0800a7d0 	.word	0x0800a7d0
 8007578:	0800a80c 	.word	0x0800a80c
 800757c:	0800a854 	.word	0x0800a854

08007580 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback>:

static void _GPSDriver_sendCommandAndWaitForResponseTemporaryCallback(uint8_t* bytes, uint16_t length, uint32_t timestamp, void* pArgs){
 8007580:	b580      	push	{r7, lr}
 8007582:	b086      	sub	sp, #24
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	607a      	str	r2, [r7, #4]
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	460b      	mov	r3, r1
 800758e:	817b      	strh	r3, [r7, #10]

	volatile GPSDriver_TypeDef* volatile pSelf = (GPSDriver_TypeDef*) pArgs;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	613b      	str	r3, [r7, #16]

	if (pSelf->awaitingResponseState != _GPSDriver_ResponseState_WaitingForResponse){
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	f642 63ca 	movw	r3, #11978	; 0x2eca
 800759a:	4413      	add	r3, r2
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d003      	beq.n	80075ac <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x2c>
		Warning_Handler("_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback - awaitingResponseState not equal to _GPSDriver_ResponseState_WaitingForResponse.");
 80075a4:	4819      	ldr	r0, [pc, #100]	; (800760c <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x8c>)
 80075a6:	f7fe ff21 	bl	80063ec <Warning_Handler>
		return;
 80075aa:	e02c      	b.n	8007606 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x86>
	}

	if (length != pSelf->awaitingResponseLength){
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 80075b2:	4413      	add	r3, r2
 80075b4:	881b      	ldrh	r3, [r3, #0]
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	897a      	ldrh	r2, [r7, #10]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d120      	bne.n	8007600 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x80>
		return;
	}

	StringOperations_Status_TypeDef retStatus = stringEqual((uint8_t*)pSelf->awaitingResponse, (uint8_t*)bytes, pSelf->awaitingResponseLength);
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	f642 6074 	movw	r0, #11892	; 0x2e74
 80075c4:	4418      	add	r0, r3
 80075c6:	693a      	ldr	r2, [r7, #16]
 80075c8:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 80075cc:	4413      	add	r3, r2
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	461a      	mov	r2, r3
 80075d4:	68f9      	ldr	r1, [r7, #12]
 80075d6:	f001 fe0a 	bl	80091ee <stringEqual>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]
	if (retStatus == StringOperations_Status_OK){
 80075de:	7dfb      	ldrb	r3, [r7, #23]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x72>
		pSelf->awaitingResponseState = _GPSDriver_ResponseState_ResponseReceived;
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	f642 63ca 	movw	r3, #11978	; 0x2eca
 80075ea:	4413      	add	r3, r2
 80075ec:	2202      	movs	r2, #2
 80075ee:	701a      	strb	r2, [r3, #0]
		return;
 80075f0:	e009      	b.n	8007606 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x86>
	} else if (retStatus == StringOperations_Status_NotEqual){
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d005      	beq.n	8007604 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x84>
		return;
	} else {
		Warning_Handler("_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback - stringEqual operation error.");
 80075f8:	4805      	ldr	r0, [pc, #20]	; (8007610 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x90>)
 80075fa:	f7fe fef7 	bl	80063ec <Warning_Handler>
 80075fe:	e002      	b.n	8007606 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x86>
		return;
 8007600:	bf00      	nop
 8007602:	e000      	b.n	8007606 <_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback+0x86>
		return;
 8007604:	bf00      	nop
	}
}
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	0800a890 	.word	0x0800a890
 8007610:	0800a91c 	.word	0x0800a91c

08007614 <GPSDriver_init>:

//< ----- Public functions ----- >//

GPSDriver_Status_TypeDef GPSDriver_init(volatile GPSDriver_TypeDef* pSelf, UartDriver_TypeDef* pUartHandler, MSTimerDriver_TypeDef* pMSTimer, GPSDriver_Frequency_TypeDef frequency){
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	70fb      	strb	r3, [r7, #3]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
	if (pSelf == NULL || pUartHandler == NULL){
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <GPSDriver_init+0x1e>
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d101      	bne.n	8007636 <GPSDriver_init+0x22>
		return GPSDriver_Status_Error;
 8007632:	230b      	movs	r3, #11
 8007634:	e0b4      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if (pSelf->state != GPSDriver_State_UnInitialized){
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <GPSDriver_init+0x30>
		return UartDriver_Status_Error;
 8007640:	230a      	movs	r3, #10
 8007642:	e0ad      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	pSelf->state					= GPSDriver_State_DuringInit;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
	pSelf->pUartHandler				= pUartHandler;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	605a      	str	r2, [r3, #4]
	pSelf->pMSTimer					= pMSTimer;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	609a      	str	r2, [r3, #8]

	pSelf->gpggaPartialSegmentReceived	= false;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	739a      	strb	r2, [r3, #14]
	pSelf->gpgsaPartialSegmentReceived	= false;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	73da      	strb	r2, [r3, #15]
	pSelf->gprmcPartialSegmentReceived	= false;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2200      	movs	r2, #0
 8007666:	741a      	strb	r2, [r3, #16]
	pSelf->gpggaPartialSegmentTimestamp	= 0;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	615a      	str	r2, [r3, #20]
	pSelf->gpgsaPartialSegmentTimestamp = 0;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	619a      	str	r2, [r3, #24]
	pSelf->gprmcPartialSegmentTimestamp	= 0;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	61da      	str	r2, [r3, #28]
	memset((void*)&pSelf->partialGPSData, 0, sizeof(GPSData_TypeDef));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3320      	adds	r3, #32
 800767e:	2244      	movs	r2, #68	; 0x44
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f002 fc35 	bl	8009ef2 <memset>

	memset((void*)&pSelf->nmeaSentenseStringFIFOBuffer, 0, sizeof(_GPSDriver_NMEASentenceString) * GPS_NMEA_STRING_BUFFER_FIFO_SIZE);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3374      	adds	r3, #116	; 0x74
 800768c:	f44f 5238 	mov.w	r2, #11776	; 0x2e00
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f002 fc2d 	bl	8009ef2 <memset>
	if (FIFOQueue_init(&pSelf->nmeaSentenceStringFIFO, pSelf->nmeaSentenseStringFIFOBuffer, sizeof(_GPSDriver_NMEASentenceString), GPS_NMEA_STRING_BUFFER_FIFO_SIZE) != FIFO_Status_OK){
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f103 0174 	add.w	r1, r3, #116	; 0x74
 80076a4:	2380      	movs	r3, #128	; 0x80
 80076a6:	225c      	movs	r2, #92	; 0x5c
 80076a8:	f7ff fb28 	bl	8006cfc <FIFOQueue_init>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <GPSDriver_init+0xa2>
		return GPSDriver_Status_Error;
 80076b2:	230b      	movs	r3, #11
 80076b4:	e074      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	pSelf->awaitingResponseLength	= 0;
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 80076bc:	4413      	add	r3, r2
 80076be:	2200      	movs	r2, #0
 80076c0:	801a      	strh	r2, [r3, #0]
	pSelf->awaitingResponseState	= _GPSDriver_ResponseState_Idle;
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	f642 63ca 	movw	r3, #11978	; 0x2eca
 80076c8:	4413      	add	r3, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	701a      	strb	r2, [r3, #0]
	memset((void*)&pSelf->awaitingResponse, 0, GPS_NMEA_MAX_SENTENCE_LENGTH_INCLUDING_CRC);
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	f642 6374 	movw	r3, #11892	; 0x2e74
 80076d4:	4413      	add	r3, r2
 80076d6:	2253      	movs	r2, #83	; 0x53
 80076d8:	2100      	movs	r1, #0
 80076da:	4618      	mov	r0, r3
 80076dc:	f002 fc09 	bl	8009ef2 <memset>

	uint32_t actualUartBaudrate;

	if (UartDriver_getBaudRate(pSelf->pUartHandler, &actualUartBaudrate) != UartDriver_Status_OK){
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f107 0210 	add.w	r2, r7, #16
 80076e8:	4611      	mov	r1, r2
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 ff84 	bl	80095f8 <UartDriver_getBaudRate>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <GPSDriver_init+0xe6>
		return GPSDriver_Status_UartError;
 80076f6:	2309      	movs	r3, #9
 80076f8:	e052      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if (actualUartBaudrate != GPS_UART_DEFAULT_AT_START_BAUDRATE){
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
 8007700:	d00b      	beq.n	800771a <GPSDriver_init+0x106>
		if (UartDriver_setBaudRate(pSelf->pUartHandler, GPS_UART_DEFAULT_AT_START_BAUDRATE) != UartDriver_Status_OK){
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800770a:	4618      	mov	r0, r3
 800770c:	f001 ff94 	bl	8009638 <UartDriver_setBaudRate>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <GPSDriver_init+0x106>
			return GPSDriver_Status_UartError;
 8007716:	2309      	movs	r3, #9
 8007718:	e042      	b.n	80077a0 <GPSDriver_init+0x18c>
		}
	}

	if (UartDriver_setReceivedBytesStartAndTerminationSignCallback(
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6858      	ldr	r0, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f103 020c 	add.w	r2, r3, #12
 8007724:	230a      	movs	r3, #10
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	2324      	movs	r3, #36	; 0x24
 800772a:	9300      	str	r3, [sp, #0]
 800772c:	4613      	mov	r3, r2
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	491d      	ldr	r1, [pc, #116]	; (80077a8 <GPSDriver_init+0x194>)
 8007732:	f002 f819 	bl	8009768 <UartDriver_setReceivedBytesStartAndTerminationSignCallback>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <GPSDriver_init+0x12c>
			(void*)pSelf,
			&pSelf->pUartCallbackIterator,
			GPS_NMEA_START_SIGN,
			GPS_NMEA_TERMINATION_SIGN) != UartDriver_Status_OK){

		return GPSDriver_Status_UartError;
 800773c:	2309      	movs	r3, #9
 800773e:	e02f      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if (UartDriver_startReceiver(pSelf->pUartHandler) != UartDriver_Status_OK){
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	4618      	mov	r0, r3
 8007746:	f002 f8fe 	bl	8009946 <UartDriver_startReceiver>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <GPSDriver_init+0x140>
		return GPSDriver_Status_UartError;
 8007750:	2309      	movs	r3, #9
 8007752:	e025      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if ((ret = _GPSDriver_changeUartBaudrateCommand(pSelf, GPS_UART_BAUDRATE)) != GPSDriver_Status_OK){
 8007754:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fac7 	bl	8007cec <_GPSDriver_changeUartBaudrateCommand>
 800775e:	4603      	mov	r3, r0
 8007760:	75fb      	strb	r3, [r7, #23]
 8007762:	7dfb      	ldrb	r3, [r7, #23]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <GPSDriver_init+0x158>
		return ret;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	e019      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if ((ret = _GPSDriver_changeUpdateFrequemcyCommand(pSelf, frequency)) != GPSDriver_Status_OK){
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	4619      	mov	r1, r3
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fb37 	bl	8007de4 <_GPSDriver_changeUpdateFrequemcyCommand>
 8007776:	4603      	mov	r3, r0
 8007778:	75fb      	strb	r3, [r7, #23]
 800777a:	7dfb      	ldrb	r3, [r7, #23]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <GPSDriver_init+0x170>
		return ret;
 8007780:	7dfb      	ldrb	r3, [r7, #23]
 8007782:	e00d      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	if (UartDriver_stopReceiver(pSelf->pUartHandler) != UartDriver_Status_OK){
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	4618      	mov	r0, r3
 800778a:	f002 f8fe 	bl	800998a <UartDriver_stopReceiver>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <GPSDriver_init+0x184>
		return GPSDriver_Status_UartError;
 8007794:	2309      	movs	r3, #9
 8007796:	e003      	b.n	80077a0 <GPSDriver_init+0x18c>
	}

	pSelf->state = GPSDriver_State_Initialized;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2202      	movs	r2, #2
 800779c:	701a      	strb	r2, [r3, #0]

	return GPSDriver_Status_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3718      	adds	r7, #24
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	080074dd 	.word	0x080074dd

080077ac <GPSDriver_startReceiver>:
	pSelf->pCallbackArguments[callbackIterator]				= NULL;

	return GPSDriver_Status_OK;
}

GPSDriver_Status_TypeDef GPSDriver_startReceiver(volatile GPSDriver_TypeDef* pSelf) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <GPSDriver_startReceiver+0x12>
		return GPSDriver_Status_Error;
 80077ba:	230b      	movs	r3, #11
 80077bc:	e01d      	b.n	80077fa <GPSDriver_startReceiver+0x4e>
	}

	if (pSelf->state == GPSDriver_State_UnInitialized || pSelf->state == GPSDriver_State_DuringInit){
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <GPSDriver_startReceiver+0x26>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <GPSDriver_startReceiver+0x2a>
		return GPSDriver_Status_UnInitializedError;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e011      	b.n	80077fa <GPSDriver_startReceiver+0x4e>
	}

	if (pSelf->state == GPSDriver_State_Running){
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d101      	bne.n	80077e4 <GPSDriver_startReceiver+0x38>
		return GPSDriver_Status_RunningError;
 80077e0:	2302      	movs	r3, #2
 80077e2:	e00a      	b.n	80077fa <GPSDriver_startReceiver+0x4e>
	}

	if (UartDriver_startReceiver(pSelf->pUartHandler) != UartDriver_Status_OK){
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f002 f8ac 	bl	8009946 <UartDriver_startReceiver>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d001      	beq.n	80077f8 <GPSDriver_startReceiver+0x4c>
		return GPSDriver_Status_UartError;
 80077f4:	2309      	movs	r3, #9
 80077f6:	e000      	b.n	80077fa <GPSDriver_startReceiver+0x4e>
	}

	return GPSDriver_Status_OK;
 80077f8:	2300      	movs	r3, #0

}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <GPSDriver_thread>:

	return GPSDriver_Status_OK;

}

GPSDriver_Status_TypeDef GPSDriver_thread(volatile GPSDriver_TypeDef* pSelf) {
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	b0a9      	sub	sp, #164	; 0xa4
 8007808:	af0e      	add	r7, sp, #56	; 0x38
 800780a:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <GPSDriver_thread+0x12>
		return GPSDriver_Status_Error;
 8007812:	230b      	movs	r3, #11
 8007814:	e110      	b.n	8007a38 <GPSDriver_thread+0x234>
	}

	if (pSelf->state == GPSDriver_State_UnInitialized || pSelf->state == GPSDriver_State_DuringInit){
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b00      	cmp	r3, #0
 800781e:	d004      	beq.n	800782a <GPSDriver_thread+0x26>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <GPSDriver_thread+0x2a>
		return GPSDriver_Status_UnInitializedError;
 800782a:	2301      	movs	r3, #1
 800782c:	e104      	b.n	8007a38 <GPSDriver_thread+0x234>
	}

	GPSDriver_Status_TypeDef		ret = GPSDriver_Status_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	FIFO_Status_TypeDef				fifoRet;
	_GPSDriver_NMEASentenceString	retNMEAString;

	fifoRet = FIFOQueue_dequeue(&pSelf->nmeaSentenceStringFIFO, &retNMEAString);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	3364      	adds	r3, #100	; 0x64
 8007838:	f107 0208 	add.w	r2, r7, #8
 800783c:	4611      	mov	r1, r2
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff fadc 	bl	8006dfc <FIFOQueue_dequeue>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	if (fifoRet == FIFO_Status_Empty){
 800784a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800784e:	2b02      	cmp	r3, #2
 8007850:	d102      	bne.n	8007858 <GPSDriver_thread+0x54>
		return ret;
 8007852:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007856:	e0ef      	b.n	8007a38 <GPSDriver_thread+0x234>
	} else if (fifoRet == FIFO_Status_OK){
 8007858:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800785c:	2b00      	cmp	r3, #0
 800785e:	d170      	bne.n	8007942 <GPSDriver_thread+0x13e>

		if (retNMEAString.sentenceLength > sizeof(GPS_NMEA_GPGGA_PREFIX) &&
 8007860:	89bb      	ldrh	r3, [r7, #12]
 8007862:	2b04      	cmp	r3, #4
 8007864:	d921      	bls.n	80078aa <GPSDriver_thread+0xa6>
				stringEqual(GPS_NMEA_GPGGA_PREFIX, retNMEAString.sentenceString, sizeof(GPS_NMEA_GPGGA_PREFIX))) {
 8007866:	f107 0308 	add.w	r3, r7, #8
 800786a:	3306      	adds	r3, #6
 800786c:	2204      	movs	r2, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4873      	ldr	r0, [pc, #460]	; (8007a40 <GPSDriver_thread+0x23c>)
 8007872:	f001 fcbc 	bl	80091ee <stringEqual>
 8007876:	4603      	mov	r3, r0
		if (retNMEAString.sentenceLength > sizeof(GPS_NMEA_GPGGA_PREFIX) &&
 8007878:	2b00      	cmp	r3, #0
 800787a:	d016      	beq.n	80078aa <GPSDriver_thread+0xa6>

			if ((ret = _GPSDriver_handleGPGGASentence(pSelf, &retNMEAString)) != GPSDriver_Status_OK){
 800787c:	f107 0308 	add.w	r3, r7, #8
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fea9 	bl	80085da <_GPSDriver_handleGPGGASentence>
 8007888:	4603      	mov	r3, r0
 800788a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800788e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007892:	2b00      	cmp	r3, #0
 8007894:	d002      	beq.n	800789c <GPSDriver_thread+0x98>
				return ret;
 8007896:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800789a:	e0cd      	b.n	8007a38 <GPSDriver_thread+0x234>
			}
			pSelf->gpggaPartialSegmentTimestamp	= retNMEAString.timestamp;
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	615a      	str	r2, [r3, #20]
			pSelf->gpggaPartialSegmentReceived	= true;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	739a      	strb	r2, [r3, #14]
 80078a8:	e04d      	b.n	8007946 <GPSDriver_thread+0x142>

		} else if (retNMEAString.sentenceLength  > sizeof(GPS_NMEA_GPGSA_PREFIX) &&
 80078aa:	89bb      	ldrh	r3, [r7, #12]
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d921      	bls.n	80078f4 <GPSDriver_thread+0xf0>
				stringEqual(GPS_NMEA_GPGSA_PREFIX, retNMEAString.sentenceString, sizeof(GPS_NMEA_GPGSA_PREFIX)) ){
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	3306      	adds	r3, #6
 80078b6:	2204      	movs	r2, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4862      	ldr	r0, [pc, #392]	; (8007a44 <GPSDriver_thread+0x240>)
 80078bc:	f001 fc97 	bl	80091ee <stringEqual>
 80078c0:	4603      	mov	r3, r0
		} else if (retNMEAString.sentenceLength  > sizeof(GPS_NMEA_GPGSA_PREFIX) &&
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d016      	beq.n	80078f4 <GPSDriver_thread+0xf0>

			if ((ret = _GPSDriver_handleGPGSASentence(pSelf, &retNMEAString)) != GPSDriver_Status_OK){
 80078c6:	f107 0308 	add.w	r3, r7, #8
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 ffe5 	bl	800889c <_GPSDriver_handleGPGSASentence>
 80078d2:	4603      	mov	r3, r0
 80078d4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80078d8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <GPSDriver_thread+0xe2>
				return ret;
 80078e0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80078e4:	e0a8      	b.n	8007a38 <GPSDriver_thread+0x234>
			}
			pSelf->gpgsaPartialSegmentTimestamp	= retNMEAString.timestamp;
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	619a      	str	r2, [r3, #24]
			pSelf->gpgsaPartialSegmentReceived	= true;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	73da      	strb	r2, [r3, #15]
 80078f2:	e028      	b.n	8007946 <GPSDriver_thread+0x142>

		} else if (retNMEAString.sentenceLength  > sizeof(GPS_NMEA_GPRMC_PREFIX) &&
 80078f4:	89bb      	ldrh	r3, [r7, #12]
 80078f6:	2b04      	cmp	r3, #4
 80078f8:	d921      	bls.n	800793e <GPSDriver_thread+0x13a>
				stringEqual(GPS_NMEA_GPRMC_PREFIX, retNMEAString.sentenceString, sizeof(GPS_NMEA_GPRMC_PREFIX)) ){
 80078fa:	f107 0308 	add.w	r3, r7, #8
 80078fe:	3306      	adds	r3, #6
 8007900:	2204      	movs	r2, #4
 8007902:	4619      	mov	r1, r3
 8007904:	4850      	ldr	r0, [pc, #320]	; (8007a48 <GPSDriver_thread+0x244>)
 8007906:	f001 fc72 	bl	80091ee <stringEqual>
 800790a:	4603      	mov	r3, r0
		} else if (retNMEAString.sentenceLength  > sizeof(GPS_NMEA_GPRMC_PREFIX) &&
 800790c:	2b00      	cmp	r3, #0
 800790e:	d016      	beq.n	800793e <GPSDriver_thread+0x13a>

			if ((ret = _GPSDriver_handleGPRMCSentence(pSelf, &retNMEAString)) != GPSDriver_Status_OK){
 8007910:	f107 0308 	add.w	r3, r7, #8
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f001 f88d 	bl	8008a36 <_GPSDriver_handleGPRMCSentence>
 800791c:	4603      	mov	r3, r0
 800791e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007922:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8007926:	2b00      	cmp	r3, #0
 8007928:	d002      	beq.n	8007930 <GPSDriver_thread+0x12c>
				return ret;
 800792a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800792e:	e083      	b.n	8007a38 <GPSDriver_thread+0x234>
			}
			pSelf->gprmcPartialSegmentTimestamp	= retNMEAString.timestamp;
 8007930:	68ba      	ldr	r2, [r7, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	61da      	str	r2, [r3, #28]
			pSelf->gprmcPartialSegmentReceived	= true;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	741a      	strb	r2, [r3, #16]
 800793c:	e003      	b.n	8007946 <GPSDriver_thread+0x142>

		} else {
			return GPSDriver_Status_OK; //< not recognised NMEA Sentence prefix
 800793e:	2300      	movs	r3, #0
 8007940:	e07a      	b.n	8007a38 <GPSDriver_thread+0x234>
		}
	} else {
		return GPSDriver_Status_Error;
 8007942:	230b      	movs	r3, #11
 8007944:	e078      	b.n	8007a38 <GPSDriver_thread+0x234>
	}

	if (pSelf->gpggaPartialSegmentReceived && pSelf->gpgsaPartialSegmentReceived && pSelf->gprmcPartialSegmentReceived){
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	7b9b      	ldrb	r3, [r3, #14]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d072      	beq.n	8007a36 <GPSDriver_thread+0x232>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7bdb      	ldrb	r3, [r3, #15]
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d06d      	beq.n	8007a36 <GPSDriver_thread+0x232>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	7c1b      	ldrb	r3, [r3, #16]
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d068      	beq.n	8007a36 <GPSDriver_thread+0x232>
		if (ABS(pSelf->gpggaPartialSegmentTimestamp - pSelf->gpgsaPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	695a      	ldr	r2, [r3, #20]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	2b31      	cmp	r3, #49	; 0x31
 8007978:	bf94      	ite	ls
 800797a:	2301      	movls	r3, #1
 800797c:	2300      	movhi	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d058      	beq.n	8007a36 <GPSDriver_thread+0x232>
			ABS(pSelf->gpgsaPartialSegmentTimestamp - pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	2b31      	cmp	r3, #49	; 0x31
 8007998:	bf94      	ite	ls
 800799a:	2301      	movls	r3, #1
 800799c:	2300      	movhi	r3, #0
 800799e:	b2db      	uxtb	r3, r3
		if (ABS(pSelf->gpggaPartialSegmentTimestamp - pSelf->gpgsaPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d048      	beq.n	8007a36 <GPSDriver_thread+0x232>
			ABS(pSelf->gpggaPartialSegmentTimestamp - pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY){
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b31      	cmp	r3, #49	; 0x31
 80079b8:	bf94      	ite	ls
 80079ba:	2301      	movls	r3, #1
 80079bc:	2300      	movhi	r3, #0
 80079be:	b2db      	uxtb	r3, r3
			ABS(pSelf->gpgsaPartialSegmentTimestamp - pSelf->gprmcPartialSegmentTimestamp) < GPS_NMEA_MAX_SENTENCES_DELAY &&
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d038      	beq.n	8007a36 <GPSDriver_thread+0x232>

			for (uint8_t i=0; i<GPS_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80079ca:	e030      	b.n	8007a2e <GPSDriver_thread+0x22a>
				if (pSelf->pReceivedDataCallbackFunctions[i] != NULL){
 80079cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	f603 33b2 	addw	r3, r3, #2994	; 0xbb2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d021      	beq.n	8007a24 <GPSDriver_thread+0x220>
					pSelf->pReceivedDataCallbackFunctions[i](pSelf->partialGPSData, (void*)pSelf->pCallbackArguments[i]);
 80079e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	f603 33b2 	addw	r3, r3, #2994	; 0xbb2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	603b      	str	r3, [r7, #0]
 80079f2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f602 32b6 	addw	r2, r2, #2998	; 0xbb6
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	687e      	ldr	r6, [r7, #4]
 8007a02:	930d      	str	r3, [sp, #52]	; 0x34
 8007a04:	466d      	mov	r5, sp
 8007a06:	f106 0430 	add.w	r4, r6, #48	; 0x30
 8007a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	602b      	str	r3, [r5, #0]
 8007a1a:	f106 0320 	add.w	r3, r6, #32
 8007a1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a20:	683c      	ldr	r4, [r7, #0]
 8007a22:	47a0      	blx	r4
			for (uint8_t i=0; i<GPS_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8007a24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d9ca      	bls.n	80079cc <GPSDriver_thread+0x1c8>
				}
			}
		}
	}

	return GPSDriver_Status_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	376c      	adds	r7, #108	; 0x6c
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a40:	0800a978 	.word	0x0800a978
 8007a44:	0800a980 	.word	0x0800a980
 8007a48:	0800a988 	.word	0x0800a988

08007a4c <_GPSDriver_addCommandSufix>:

//< ----- Private functions ----- >//

static GPSDriver_Status_TypeDef _GPSDriver_addCommandSufix(volatile GPSDriver_TypeDef* pSelf, uint8_t* buffer, uint16_t* length, uint16_t bufferSize){
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	807b      	strh	r3, [r7, #2]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]

	if ((*length) + GPS_NMEA_SUFIX_LENGTH > bufferSize){
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	f103 020e 	add.w	r2, r3, #14
 8007a66:	887b      	ldrh	r3, [r7, #2]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d901      	bls.n	8007a70 <_GPSDriver_addCommandSufix+0x24>
		return GPSDriver_Status_BufferOverflowError;
 8007a6c:	2307      	movs	r3, #7
 8007a6e:	e039      	b.n	8007ae4 <_GPSDriver_addCommandSufix+0x98>
	}

	buffer[(*length)++] = GPS_NMEA_CHECKSUM_SEPARATOR_SIGN;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	881b      	ldrh	r3, [r3, #0]
 8007a74:	1c5a      	adds	r2, r3, #1
 8007a76:	b291      	uxth	r1, r2
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	8011      	strh	r1, [r2, #0]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	222a      	movs	r2, #42	; 0x2a
 8007a84:	701a      	strb	r2, [r3, #0]

	if ((ret = _GPSDriver_getNMEAChecksumString(buffer, (*length), buffer + (*length))) != GPSDriver_Status_OK){
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	8819      	ldrh	r1, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	881b      	ldrh	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4413      	add	r3, r2
 8007a94:	461a      	mov	r2, r3
 8007a96:	68b8      	ldr	r0, [r7, #8]
 8007a98:	f000 faa2 	bl	8007fe0 <_GPSDriver_getNMEAChecksumString>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	75fb      	strb	r3, [r7, #23]
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <_GPSDriver_addCommandSufix+0x5e>
		return ret;
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	e01c      	b.n	8007ae4 <_GPSDriver_addCommandSufix+0x98>
	}
	(*length) += GPS_NMEA_CHECKSUM_LENGTH;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	3302      	adds	r3, #2
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	801a      	strh	r2, [r3, #0]

	buffer[(*length)++] = GPS_NMEA_PRE_TERMINATION_SIGN;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	b291      	uxth	r1, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	8011      	strh	r1, [r2, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	220d      	movs	r2, #13
 8007aca:	701a      	strb	r2, [r3, #0]
	buffer[(*length)++] = GPS_NMEA_TERMINATION_SIGN;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	b291      	uxth	r1, r2
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	8011      	strh	r1, [r2, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	220a      	movs	r2, #10
 8007ae0:	701a      	strb	r2, [r3, #0]

	return ret;
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <_GPSDriver_sendCommandAndWaitForResponse>:

static GPSDriver_Status_TypeDef _GPSDriver_sendCommandAndWaitForResponse(volatile GPSDriver_TypeDef* pSelf, uint8_t* commandBuffer, uint16_t commandLength, uint8_t* expectedOKResponse, uint16_t expectedOKResponseLength, uint32_t timeoutMs){
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	; 0x28
 8007af0:	af02      	add	r7, sp, #8
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	603b      	str	r3, [r7, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	80fb      	strh	r3, [r7, #6]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	77fb      	strb	r3, [r7, #31]
	if (pSelf->awaitingResponseState != _GPSDriver_ResponseState_Idle){
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	f642 63ca 	movw	r3, #11978	; 0x2eca
 8007b06:	4413      	add	r3, r2
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <_GPSDriver_sendCommandAndWaitForResponse+0x28>
		return GPSDriver_Status_BusyError;
 8007b10:	2308      	movs	r3, #8
 8007b12:	e08a      	b.n	8007c2a <_GPSDriver_sendCommandAndWaitForResponse+0x13e>
	}

	memcpy((void*)pSelf->awaitingResponse, expectedOKResponse, expectedOKResponseLength);
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	f642 6374 	movw	r3, #11892	; 0x2e74
 8007b1a:	4413      	add	r3, r2
 8007b1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f002 f9db 	bl	8009edc <memcpy>
	pSelf->awaitingResponseLength	= timeoutMs;
 8007b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b28:	b299      	uxth	r1, r3
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f642 63c8 	movw	r3, #11976	; 0x2ec8
 8007b30:	4413      	add	r3, r2
 8007b32:	460a      	mov	r2, r1
 8007b34:	801a      	strh	r2, [r3, #0]
	pSelf->awaitingResponseState	= _GPSDriver_ResponseState_WaitingForResponse;
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f642 63ca 	movw	r3, #11978	; 0x2eca
 8007b3c:	4413      	add	r3, r2
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]

	volatile UartDriver_CallbackIterator_TypeDef	tempCallbackIterator;

	if (	UartDriver_setReceivedBytesStartAndTerminationSignCallback
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6858      	ldr	r0, [r3, #4]
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	781b      	ldrb	r3, [r3, #0]
				pSelf->pUartHandler,
				_GPSDriver_sendCommandAndWaitForResponseTemporaryCallback,
				(void*)pSelf,
				&tempCallbackIterator,
				expectedOKResponse[0],
				expectedOKResponse[expectedOKResponseLength-1]
 8007b4a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007b4c:	3a01      	subs	r2, #1
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	440a      	add	r2, r1
	if (	UartDriver_setReceivedBytesStartAndTerminationSignCallback
 8007b52:	7812      	ldrb	r2, [r2, #0]
 8007b54:	f107 011c 	add.w	r1, r7, #28
 8007b58:	9201      	str	r2, [sp, #4]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	4934      	ldr	r1, [pc, #208]	; (8007c34 <_GPSDriver_sendCommandAndWaitForResponse+0x148>)
 8007b62:	f001 fe01 	bl	8009768 <UartDriver_setReceivedBytesStartAndTerminationSignCallback>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <_GPSDriver_sendCommandAndWaitForResponse+0x84>
			) != UartDriver_Status_OK ) {

		return GPSDriver_Status_UartError;
 8007b6c:	2309      	movs	r3, #9
 8007b6e:	e05c      	b.n	8007c2a <_GPSDriver_sendCommandAndWaitForResponse+0x13e>
	}

	if (ret == GPSDriver_Status_OK && UartDriver_sendBytes(pSelf->pUartHandler, commandBuffer, commandLength) != UartDriver_Status_OK){
 8007b70:	7ffb      	ldrb	r3, [r7, #31]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10b      	bne.n	8007b8e <_GPSDriver_sendCommandAndWaitForResponse+0xa2>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	88fa      	ldrh	r2, [r7, #6]
 8007b7c:	68b9      	ldr	r1, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fdb9 	bl	80096f6 <UartDriver_sendBytes>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <_GPSDriver_sendCommandAndWaitForResponse+0xa2>
		return GPSDriver_Status_UartError;
 8007b8a:	2309      	movs	r3, #9
 8007b8c:	e04d      	b.n	8007c2a <_GPSDriver_sendCommandAndWaitForResponse+0x13e>
	}

	uint32_t sentCommandTimestamp;
	if (ret == GPSDriver_Status_OK && MSTimerDriver_getMSTime(pSelf->pMSTimer, &sentCommandTimestamp) != MSTimerDriver_Status_OK){
 8007b8e:	7ffb      	ldrb	r3, [r7, #31]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10c      	bne.n	8007bae <_GPSDriver_sendCommandAndWaitForResponse+0xc2>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f107 0218 	add.w	r2, r7, #24
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 f98a 	bl	8008eb8 <MSTimerDriver_getMSTime>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d001      	beq.n	8007bae <_GPSDriver_sendCommandAndWaitForResponse+0xc2>
		ret = GPSDriver_Status_Error;
 8007baa:	230b      	movs	r3, #11
 8007bac:	77fb      	strb	r3, [r7, #31]
	}

	uint32_t actualTimestamp;
	do {
		if (ret == GPSDriver_Status_OK && MSTimerDriver_getMSTime(pSelf->pMSTimer, &actualTimestamp) != MSTimerDriver_Status_OK){
 8007bae:	7ffb      	ldrb	r3, [r7, #31]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d10c      	bne.n	8007bce <_GPSDriver_sendCommandAndWaitForResponse+0xe2>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f107 0214 	add.w	r2, r7, #20
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f001 f97a 	bl	8008eb8 <MSTimerDriver_getMSTime>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <_GPSDriver_sendCommandAndWaitForResponse+0xe2>
			ret = GPSDriver_Status_Error;
 8007bca:	230b      	movs	r3, #11
 8007bcc:	77fb      	strb	r3, [r7, #31]
		}
	} while (	ret == GPSDriver_Status_OK &&
				actualTimestamp < sentCommandTimestamp + GPS_COMMAND_RESPONSE_TIMEOUT_MS &&
				pSelf->awaitingResponseState != _GPSDriver_ResponseState_ResponseReceived);
 8007bce:	7ffb      	ldrb	r3, [r7, #31]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <_GPSDriver_sendCommandAndWaitForResponse+0x104>
				actualTimestamp < sentCommandTimestamp + GPS_COMMAND_RESPONSE_TIMEOUT_MS &&
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8007bda:	697b      	ldr	r3, [r7, #20]
	} while (	ret == GPSDriver_Status_OK &&
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d907      	bls.n	8007bf0 <_GPSDriver_sendCommandAndWaitForResponse+0x104>
				pSelf->awaitingResponseState != _GPSDriver_ResponseState_ResponseReceived);
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	f642 63ca 	movw	r3, #11978	; 0x2eca
 8007be6:	4413      	add	r3, r2
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b2db      	uxtb	r3, r3
				actualTimestamp < sentCommandTimestamp + GPS_COMMAND_RESPONSE_TIMEOUT_MS &&
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d1de      	bne.n	8007bae <_GPSDriver_sendCommandAndWaitForResponse+0xc2>

	if (pSelf->awaitingResponseState != _GPSDriver_ResponseState_ResponseReceived){
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	f642 63ca 	movw	r3, #11978	; 0x2eca
 8007bf6:	4413      	add	r3, r2
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d001      	beq.n	8007c04 <_GPSDriver_sendCommandAndWaitForResponse+0x118>
		ret = GPSDriver_Status_ACKTimeoutError;
 8007c00:	230a      	movs	r3, #10
 8007c02:	77fb      	strb	r3, [r7, #31]
	}

	if (UartDriver_removeReceivedBytesStartAndTerminationSignCallback(pSelf->pUartHandler, tempCallbackIterator) != UartDriver_Status_OK ) {
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	8bba      	ldrh	r2, [r7, #28]
 8007c0a:	b292      	uxth	r2, r2
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 fe38 	bl	8009884 <UartDriver_removeReceivedBytesStartAndTerminationSignCallback>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d006      	beq.n	8007c28 <_GPSDriver_sendCommandAndWaitForResponse+0x13c>
		ret = (ret == GPSDriver_Status_OK) ? GPSDriver_Status_UartError : ret;
 8007c1a:	7ffb      	ldrb	r3, [r7, #31]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <_GPSDriver_sendCommandAndWaitForResponse+0x138>
 8007c20:	7ffb      	ldrb	r3, [r7, #31]
 8007c22:	e000      	b.n	8007c26 <_GPSDriver_sendCommandAndWaitForResponse+0x13a>
 8007c24:	2309      	movs	r3, #9
 8007c26:	77fb      	strb	r3, [r7, #31]
	}

	return ret;
 8007c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3720      	adds	r7, #32
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	08007581 	.word	0x08007581

08007c38 <_GPSDriver_sendCommand>:

static GPSDriver_Status_TypeDef _GPSDriver_sendCommand(volatile GPSDriver_TypeDef* pSelf, uint8_t* commandBuffer, uint16_t commandLength){
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	4613      	mov	r3, r2
 8007c44:	80fb      	strh	r3, [r7, #6]

	if (UartDriver_sendBytes(pSelf->pUartHandler, commandBuffer, commandLength) != UartDriver_Status_OK){
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	88fa      	ldrh	r2, [r7, #6]
 8007c4c:	68b9      	ldr	r1, [r7, #8]
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f001 fd51 	bl	80096f6 <UartDriver_sendBytes>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <_GPSDriver_sendCommand+0x26>
		return GPSDriver_Status_UartError;
 8007c5a:	2309      	movs	r3, #9
 8007c5c:	e000      	b.n	8007c60 <_GPSDriver_sendCommand+0x28>
	}

	return GPSDriver_Status_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <_GPSDriver_sendTestCommand>:

static GPSDriver_Status_TypeDef _GPSDriver_sendTestCommand(volatile GPSDriver_TypeDef* pSelf){
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08e      	sub	sp, #56	; 0x38
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	6078      	str	r0, [r7, #4]

	GPSDriver_Status_TypeDef ret	= GPSDriver_Status_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint16_t i						= 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t buffer[GPS_MAX_COMMAND_LENGTH] = {0};
 8007c7a:	f107 030c 	add.w	r3, r7, #12
 8007c7e:	2220      	movs	r2, #32
 8007c80:	2100      	movs	r1, #0
 8007c82:	4618      	mov	r0, r3
 8007c84:	f002 f935 	bl	8009ef2 <memset>

	memcpy(buffer, GPS_CONFIG_TEST_CMD, sizeof(GPS_CONFIG_TEST_CMD));
 8007c88:	f107 030c 	add.w	r3, r7, #12
 8007c8c:	2209      	movs	r2, #9
 8007c8e:	4915      	ldr	r1, [pc, #84]	; (8007ce4 <_GPSDriver_sendTestCommand+0x7c>)
 8007c90:	4618      	mov	r0, r3
 8007c92:	f002 f923 	bl	8009edc <memcpy>
	i += sizeof(GPS_CONFIG_TEST_CMD);
 8007c96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c98:	3309      	adds	r3, #9
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if ((ret = _GPSDriver_addCommandSufix(pSelf, buffer, &i, GPS_MAX_COMMAND_LENGTH)) != GPSDriver_Status_OK){
 8007c9e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007ca2:	f107 010c 	add.w	r1, r7, #12
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7ff fecf 	bl	8007a4c <_GPSDriver_addCommandSufix>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d002      	beq.n	8007cc2 <_GPSDriver_sendTestCommand+0x5a>
		return ret;
 8007cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007cc0:	e00c      	b.n	8007cdc <_GPSDriver_sendTestCommand+0x74>
	}

	return _GPSDriver_sendCommandAndWaitForResponse(pSelf, buffer, i, (uint8_t*)GPS_CONFIG_TEST_RESPONSE_PREFIX, sizeof(GPS_CONFIG_TEST_RESPONSE_PREFIX), GPS_COMMAND_RESPONSE_TIMEOUT_MS);
 8007cc2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007cc4:	f107 010c 	add.w	r1, r7, #12
 8007cc8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	230d      	movs	r3, #13
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4b05      	ldr	r3, [pc, #20]	; (8007ce8 <_GPSDriver_sendTestCommand+0x80>)
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff ff09 	bl	8007aec <_GPSDriver_sendCommandAndWaitForResponse>
 8007cda:	4603      	mov	r3, r0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3730      	adds	r7, #48	; 0x30
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	0800a990 	.word	0x0800a990
 8007ce8:	0800a99c 	.word	0x0800a99c

08007cec <_GPSDriver_changeUartBaudrateCommand>:

static GPSDriver_Status_TypeDef _GPSDriver_changeUartBaudrateCommand(volatile GPSDriver_TypeDef* pSelf, uint32_t baudRate){
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08c      	sub	sp, #48	; 0x30
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (pSelf->state == GPSDriver_State_UnInitialized){
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <_GPSDriver_changeUartBaudrateCommand+0x1e>
		return GPSDriver_Status_UnInitializedError;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e063      	b.n	8007dd2 <_GPSDriver_changeUartBaudrateCommand+0xe6>
	}

	uint16_t i = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint8_t buffer[GPS_MAX_COMMAND_LENGTH];
	memset(buffer, 0, GPS_MAX_COMMAND_LENGTH);
 8007d0e:	f107 030c 	add.w	r3, r7, #12
 8007d12:	2220      	movs	r2, #32
 8007d14:	2100      	movs	r1, #0
 8007d16:	4618      	mov	r0, r3
 8007d18:	f002 f8eb 	bl	8009ef2 <memset>

	memcpy(buffer, GPS_CONFIG_CHANGE_UART_SPEED_CMD, sizeof(GPS_CONFIG_CHANGE_UART_SPEED_CMD));
 8007d1c:	f107 030c 	add.w	r3, r7, #12
 8007d20:	2209      	movs	r2, #9
 8007d22:	492e      	ldr	r1, [pc, #184]	; (8007ddc <_GPSDriver_changeUartBaudrateCommand+0xf0>)
 8007d24:	4618      	mov	r0, r3
 8007d26:	f002 f8d9 	bl	8009edc <memcpy>
	i += sizeof(GPS_CONFIG_CHANGE_INFO_PERIOD_CMD);
 8007d2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d2c:	3309      	adds	r3, #9
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	85bb      	strh	r3, [r7, #44]	; 0x2c

	buffer[i++] = GPS_NMEA_DATA_SEPARATOR_SIGN;
 8007d32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d34:	1c5a      	adds	r2, r3, #1
 8007d36:	b292      	uxth	r2, r2
 8007d38:	85ba      	strh	r2, [r7, #44]	; 0x2c
 8007d3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007d3e:	4413      	add	r3, r2
 8007d40:	222c      	movs	r2, #44	; 0x2c
 8007d42:	f803 2c24 	strb.w	r2, [r3, #-36]

	i += sprintf ((char*)(buffer+i), "%lu", baudRate);
 8007d46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d48:	461a      	mov	r2, r3
 8007d4a:	f107 030c 	add.w	r3, r7, #12
 8007d4e:	4413      	add	r3, r2
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	4923      	ldr	r1, [pc, #140]	; (8007de0 <_GPSDriver_changeUartBaudrateCommand+0xf4>)
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 f8d5 	bl	8009f04 <siprintf>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007d60:	4413      	add	r3, r2
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if ((ret = _GPSDriver_addCommandSufix(pSelf, buffer, &i, GPS_MAX_COMMAND_LENGTH)) != GPSDriver_Status_OK){
 8007d66:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8007d6a:	f107 010c 	add.w	r1, r7, #12
 8007d6e:	2320      	movs	r3, #32
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f7ff fe6b 	bl	8007a4c <_GPSDriver_addCommandSufix>
 8007d76:	4603      	mov	r3, r0
 8007d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <_GPSDriver_changeUartBaudrateCommand+0x9e>
		return ret;
 8007d84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007d88:	e023      	b.n	8007dd2 <_GPSDriver_changeUartBaudrateCommand+0xe6>
	}

	if ((ret = _GPSDriver_sendCommand(pSelf, buffer, i)) != GPSDriver_Status_OK){
 8007d8a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8007d8c:	f107 030c 	add.w	r3, r7, #12
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff ff50 	bl	8007c38 <_GPSDriver_sendCommand>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <_GPSDriver_changeUartBaudrateCommand+0xc0>
		return ret;
 8007da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007daa:	e012      	b.n	8007dd2 <_GPSDriver_changeUartBaudrateCommand+0xe6>
	}

	if (UartDriver_setBaudRate(pSelf->pUartHandler, GPS_UART_BAUDRATE) != UartDriver_Status_OK){
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fc3f 	bl	8009638 <UartDriver_setBaudRate>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <_GPSDriver_changeUartBaudrateCommand+0xd8>
		return GPSDriver_Status_UartError;
 8007dc0:	2309      	movs	r3, #9
 8007dc2:	e006      	b.n	8007dd2 <_GPSDriver_changeUartBaudrateCommand+0xe6>
	}

	HAL_Delay(GPS_SET_BAUDRATE_DELAY);
 8007dc4:	2032      	movs	r0, #50	; 0x32
 8007dc6:	f7f8 fc71 	bl	80006ac <HAL_Delay>

	return _GPSDriver_sendTestCommand(pSelf);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f7ff ff4c 	bl	8007c68 <_GPSDriver_sendTestCommand>
 8007dd0:	4603      	mov	r3, r0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3730      	adds	r7, #48	; 0x30
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	0800a9ac 	.word	0x0800a9ac
 8007de0:	0800a9b8 	.word	0x0800a9b8

08007de4 <_GPSDriver_changeUpdateFrequemcyCommand>:

static GPSDriver_Status_TypeDef _GPSDriver_changeUpdateFrequemcyCommand(volatile GPSDriver_TypeDef* pSelf, GPSDriver_Frequency_TypeDef frequency){
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	; 0x38
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]

	if (pSelf->state == GPSDriver_State_UnInitialized){
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <_GPSDriver_changeUpdateFrequemcyCommand+0x1a>
		return GPSDriver_Status_Error;
 8007dfa:	230b      	movs	r3, #11
 8007dfc:	e0dd      	b.n	8007fba <_GPSDriver_changeUpdateFrequemcyCommand+0x1d6>
	}

	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t i = 0;
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t buffer[GPS_MAX_COMMAND_LENGTH];
	memset(buffer, 0, GPS_MAX_COMMAND_LENGTH);
 8007e0a:	f107 030c 	add.w	r3, r7, #12
 8007e0e:	2220      	movs	r2, #32
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f002 f86d 	bl	8009ef2 <memset>

	memcpy(buffer, GPS_CONFIG_CHANGE_INFO_PERIOD_CMD, sizeof(GPS_CONFIG_CHANGE_INFO_PERIOD_CMD));
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	2209      	movs	r2, #9
 8007e1e:	4969      	ldr	r1, [pc, #420]	; (8007fc4 <_GPSDriver_changeUpdateFrequemcyCommand+0x1e0>)
 8007e20:	4618      	mov	r0, r3
 8007e22:	f002 f85b 	bl	8009edc <memcpy>
	i += sizeof(GPS_CONFIG_CHANGE_INFO_PERIOD_CMD);
 8007e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e2a:	3309      	adds	r3, #9
 8007e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	buffer[i++] = GPS_NMEA_DATA_SEPARATOR_SIGN;
 8007e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007e3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007e3e:	4413      	add	r3, r2
 8007e40:	222c      	movs	r2, #44	; 0x2c
 8007e42:	f803 2c24 	strb.w	r2, [r3, #-36]

	switch(frequency){
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	2b04      	cmp	r3, #4
 8007e4c:	d85c      	bhi.n	8007f08 <_GPSDriver_changeUpdateFrequemcyCommand+0x124>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <_GPSDriver_changeUpdateFrequemcyCommand+0x70>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e69 	.word	0x08007e69
 8007e58:	08007e89 	.word	0x08007e89
 8007e5c:	08007ea9 	.word	0x08007ea9
 8007e60:	08007ec9 	.word	0x08007ec9
 8007e64:	08007ee9 	.word	0x08007ee9
	case GPSDriver_Frequency_0_5Hz:
		memcpy(buffer+i, "2000", sizeof("2000"));
 8007e68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e6c:	f107 020c 	add.w	r2, r7, #12
 8007e70:	4413      	add	r3, r2
 8007e72:	2205      	movs	r2, #5
 8007e74:	4954      	ldr	r1, [pc, #336]	; (8007fc8 <_GPSDriver_changeUpdateFrequemcyCommand+0x1e4>)
 8007e76:	4618      	mov	r0, r3
 8007e78:	f002 f830 	bl	8009edc <memcpy>
		i += sizeof("2000");
 8007e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e80:	3305      	adds	r3, #5
 8007e82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007e86:	e041      	b.n	8007f0c <_GPSDriver_changeUpdateFrequemcyCommand+0x128>
	case GPSDriver_Frequency_1Hz:
		memcpy(buffer+i, "1000", sizeof("1000"));
 8007e88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e8c:	f107 020c 	add.w	r2, r7, #12
 8007e90:	4413      	add	r3, r2
 8007e92:	2205      	movs	r2, #5
 8007e94:	494d      	ldr	r1, [pc, #308]	; (8007fcc <_GPSDriver_changeUpdateFrequemcyCommand+0x1e8>)
 8007e96:	4618      	mov	r0, r3
 8007e98:	f002 f820 	bl	8009edc <memcpy>
		i += sizeof("1000");
 8007e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ea0:	3305      	adds	r3, #5
 8007ea2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007ea6:	e031      	b.n	8007f0c <_GPSDriver_changeUpdateFrequemcyCommand+0x128>
	case GPSDriver_Frequency_2Hz:
		memcpy(buffer+i, "500", sizeof("500"));
 8007ea8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eac:	f107 020c 	add.w	r2, r7, #12
 8007eb0:	4413      	add	r3, r2
 8007eb2:	2204      	movs	r2, #4
 8007eb4:	4946      	ldr	r1, [pc, #280]	; (8007fd0 <_GPSDriver_changeUpdateFrequemcyCommand+0x1ec>)
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f002 f810 	bl	8009edc <memcpy>
		i += sizeof("500");
 8007ebc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ec0:	3304      	adds	r3, #4
 8007ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007ec6:	e021      	b.n	8007f0c <_GPSDriver_changeUpdateFrequemcyCommand+0x128>
	case GPSDriver_Frequency_5Hz:
		memcpy(buffer+i, "200", sizeof("200"));
 8007ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ecc:	f107 020c 	add.w	r2, r7, #12
 8007ed0:	4413      	add	r3, r2
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	493f      	ldr	r1, [pc, #252]	; (8007fd4 <_GPSDriver_changeUpdateFrequemcyCommand+0x1f0>)
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f002 f800 	bl	8009edc <memcpy>
		i += sizeof("200");
 8007edc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007ee6:	e011      	b.n	8007f0c <_GPSDriver_changeUpdateFrequemcyCommand+0x128>
	case GPSDriver_Frequency_10Hz:
		memcpy(buffer+i, "100", sizeof("100"));
 8007ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007eec:	f107 020c 	add.w	r2, r7, #12
 8007ef0:	4413      	add	r3, r2
 8007ef2:	2204      	movs	r2, #4
 8007ef4:	4938      	ldr	r1, [pc, #224]	; (8007fd8 <_GPSDriver_changeUpdateFrequemcyCommand+0x1f4>)
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fff0 	bl	8009edc <memcpy>
		i += sizeof("100");
 8007efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f00:	3304      	adds	r3, #4
 8007f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007f06:	e001      	b.n	8007f0c <_GPSDriver_changeUpdateFrequemcyCommand+0x128>
	default:
		return GPSDriver_Status_Error;
 8007f08:	230b      	movs	r3, #11
 8007f0a:	e056      	b.n	8007fba <_GPSDriver_changeUpdateFrequemcyCommand+0x1d6>
	}

	buffer[i++] = GPS_NMEA_DATA_SEPARATOR_SIGN;
 8007f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f10:	1c5a      	adds	r2, r3, #1
 8007f12:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007f16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007f1a:	4413      	add	r3, r2
 8007f1c:	222c      	movs	r2, #44	; 0x2c
 8007f1e:	f803 2c24 	strb.w	r2, [r3, #-36]

	if ((ret = _GPSDriver_getNMEAChecksumString(buffer, i, buffer + i)) != GPSDriver_Status_OK){
 8007f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f26:	b299      	uxth	r1, r3
 8007f28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f2c:	f107 020c 	add.w	r2, r7, #12
 8007f30:	441a      	add	r2, r3
 8007f32:	f107 030c 	add.w	r3, r7, #12
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f852 	bl	8007fe0 <_GPSDriver_getNMEAChecksumString>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007f42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d002      	beq.n	8007f50 <_GPSDriver_changeUpdateFrequemcyCommand+0x16c>
		return ret;
 8007f4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f4e:	e034      	b.n	8007fba <_GPSDriver_changeUpdateFrequemcyCommand+0x1d6>
	}
	i+= GPS_NMEA_CHECKSUM_LENGTH;
 8007f50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f54:	3302      	adds	r3, #2
 8007f56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	buffer[i++] = GPS_NMEA_PRE_TERMINATION_SIGN;
 8007f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f5e:	1c5a      	adds	r2, r3, #1
 8007f60:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007f64:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007f68:	4413      	add	r3, r2
 8007f6a:	220d      	movs	r2, #13
 8007f6c:	f803 2c24 	strb.w	r2, [r3, #-36]
	buffer[i++] = GPS_NMEA_TERMINATION_SIGN;
 8007f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8007f7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007f7e:	4413      	add	r3, r2
 8007f80:	220a      	movs	r2, #10
 8007f82:	f803 2c24 	strb.w	r2, [r3, #-36]

	if ((ret = _GPSDriver_sendCommandAndWaitForResponse(pSelf, buffer, i, (uint8_t*)GPS_CONFIG_CHANGE_INFO_PERIOD_RESPONSE_PREFIX, sizeof(GPS_CONFIG_CHANGE_INFO_PERIOD_RESPONSE_PREFIX), GPS_COMMAND_RESPONSE_TIMEOUT_MS)) != GPSDriver_Status_OK){
 8007f86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f107 010c 	add.w	r1, r7, #12
 8007f90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f94:	9301      	str	r3, [sp, #4]
 8007f96:	230d      	movs	r3, #13
 8007f98:	9300      	str	r3, [sp, #0]
 8007f9a:	4b10      	ldr	r3, [pc, #64]	; (8007fdc <_GPSDriver_changeUpdateFrequemcyCommand+0x1f8>)
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff fda5 	bl	8007aec <_GPSDriver_sendCommandAndWaitForResponse>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007fa8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d002      	beq.n	8007fb6 <_GPSDriver_changeUpdateFrequemcyCommand+0x1d2>
		return ret;
 8007fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007fb4:	e001      	b.n	8007fba <_GPSDriver_changeUpdateFrequemcyCommand+0x1d6>
	}

	return ret;
 8007fb6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3730      	adds	r7, #48	; 0x30
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	0800a9bc 	.word	0x0800a9bc
 8007fc8:	0800a9c8 	.word	0x0800a9c8
 8007fcc:	0800a9d0 	.word	0x0800a9d0
 8007fd0:	0800a9d8 	.word	0x0800a9d8
 8007fd4:	0800a9dc 	.word	0x0800a9dc
 8007fd8:	0800a9e0 	.word	0x0800a9e0
 8007fdc:	0800a9e4 	.word	0x0800a9e4

08007fe0 <_GPSDriver_getNMEAChecksumString>:

static GPSDriver_Status_TypeDef _GPSDriver_getNMEAChecksumString(const uint8_t* sentence, uint16_t length, uint8_t* retChecksumString){
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	817b      	strh	r3, [r7, #10]

	uint16_t i = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	82fb      	strh	r3, [r7, #22]
	if (sentence == NULL || retChecksumString == NULL){
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <_GPSDriver_getNMEAChecksumString+0x1e>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d101      	bne.n	8008002 <_GPSDriver_getNMEAChecksumString+0x22>
		return GPSDriver_Status_Error;
 8007ffe:	230b      	movs	r3, #11
 8008000:	e027      	b.n	8008052 <_GPSDriver_getNMEAChecksumString+0x72>
	}

    uint8_t checksum = 0x00;
 8008002:	2300      	movs	r3, #0
 8008004:	757b      	strb	r3, [r7, #21]

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (i < length && *(sentence + i) != 0 && *(sentence + i) != '*'){
 8008006:	e009      	b.n	800801c <_GPSDriver_getNMEAChecksumString+0x3c>
        checksum ^= *(sentence + i);
 8008008:	8afb      	ldrh	r3, [r7, #22]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4413      	add	r3, r2
 800800e:	781a      	ldrb	r2, [r3, #0]
 8008010:	7d7b      	ldrb	r3, [r7, #21]
 8008012:	4053      	eors	r3, r2
 8008014:	757b      	strb	r3, [r7, #21]
        i++;
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	3301      	adds	r3, #1
 800801a:	82fb      	strh	r3, [r7, #22]
    while (i < length && *(sentence + i) != 0 && *(sentence + i) != '*'){
 800801c:	8afa      	ldrh	r2, [r7, #22]
 800801e:	897b      	ldrh	r3, [r7, #10]
 8008020:	429a      	cmp	r2, r3
 8008022:	d20b      	bcs.n	800803c <_GPSDriver_getNMEAChecksumString+0x5c>
 8008024:	8afb      	ldrh	r3, [r7, #22]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <_GPSDriver_getNMEAChecksumString+0x5c>
 8008030:	8afb      	ldrh	r3, [r7, #22]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b2a      	cmp	r3, #42	; 0x2a
 800803a:	d1e5      	bne.n	8008008 <_GPSDriver_getNMEAChecksumString+0x28>
    }

    if (uInt8ToString(checksum, retChecksumString) != StringOperations_Status_OK){
 800803c:	7d7b      	ldrb	r3, [r7, #21]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4618      	mov	r0, r3
 8008042:	f001 f9e5 	bl	8009410 <uInt8ToString>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <_GPSDriver_getNMEAChecksumString+0x70>
    	return GPSDriver_Status_NMEASentenceError;
 800804c:	2304      	movs	r3, #4
 800804e:	e000      	b.n	8008052 <_GPSDriver_getNMEAChecksumString+0x72>
    }

    return GPSDriver_Status_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <_GPSDriver_checkNMEAChecksum>:

static GPSDriver_Status_TypeDef _GPSDriver_checkNMEAChecksum(const uint8_t* sentence, uint16_t length){
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	807b      	strh	r3, [r7, #2]

	uint16_t i = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	81fb      	strh	r3, [r7, #14]
	GPSDriver_Status_TypeDef ret = GPSDriver_Status_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	737b      	strb	r3, [r7, #13]

    if (*(sentence+i) == '$'){
 800806e:	89fb      	ldrh	r3, [r7, #14]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b24      	cmp	r3, #36	; 0x24
 8008078:	d118      	bne.n	80080ac <_GPSDriver_checkNMEAChecksum+0x52>
        i++;
 800807a:	89fb      	ldrh	r3, [r7, #14]
 800807c:	3301      	adds	r3, #1
 800807e:	81fb      	strh	r3, [r7, #14]
    } else {
    	return GPSDriver_Status_NMEASentenceError;
    }

    uint8_t checksumBuffer[2] = {0, 0};
 8008080:	2300      	movs	r3, #0
 8008082:	723b      	strb	r3, [r7, #8]
 8008084:	2300      	movs	r3, #0
 8008086:	727b      	strb	r3, [r7, #9]

    if ((ret = _GPSDriver_getNMEAChecksumString(sentence+i, length-i, checksumBuffer)) != GPSDriver_Status_OK){
 8008088:	89fb      	ldrh	r3, [r7, #14]
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	18d0      	adds	r0, r2, r3
 800808e:	887a      	ldrh	r2, [r7, #2]
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	b29b      	uxth	r3, r3
 8008096:	f107 0208 	add.w	r2, r7, #8
 800809a:	4619      	mov	r1, r3
 800809c:	f7ff ffa0 	bl	8007fe0 <_GPSDriver_getNMEAChecksumString>
 80080a0:	4603      	mov	r3, r0
 80080a2:	737b      	strb	r3, [r7, #13]
 80080a4:	7b7b      	ldrb	r3, [r7, #13]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d004      	beq.n	80080b4 <_GPSDriver_checkNMEAChecksum+0x5a>
 80080aa:	e001      	b.n	80080b0 <_GPSDriver_checkNMEAChecksum+0x56>
    	return GPSDriver_Status_NMEASentenceError;
 80080ac:	2304      	movs	r3, #4
 80080ae:	e026      	b.n	80080fe <_GPSDriver_checkNMEAChecksum+0xa4>
    	return ret;
 80080b0:	7b7b      	ldrb	r3, [r7, #13]
 80080b2:	e024      	b.n	80080fe <_GPSDriver_checkNMEAChecksum+0xa4>
    }

    while (i < length && sentence[i++] != GPS_NMEA_CHECKSUM_SEPARATOR_SIGN){ }
 80080b4:	89fa      	ldrh	r2, [r7, #14]
 80080b6:	887b      	ldrh	r3, [r7, #2]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d208      	bcs.n	80080ce <_GPSDriver_checkNMEAChecksum+0x74>
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	81fa      	strh	r2, [r7, #14]
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b2a      	cmp	r3, #42	; 0x2a
 80080cc:	d1f2      	bne.n	80080b4 <_GPSDriver_checkNMEAChecksum+0x5a>

    if (i == length){
 80080ce:	89fa      	ldrh	r2, [r7, #14]
 80080d0:	887b      	ldrh	r3, [r7, #2]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d101      	bne.n	80080da <_GPSDriver_checkNMEAChecksum+0x80>
    	return GPSDriver_Status_NMEASentenceError;
 80080d6:	2304      	movs	r3, #4
 80080d8:	e011      	b.n	80080fe <_GPSDriver_checkNMEAChecksum+0xa4>
    }

    if (*(sentence + i) != checksumBuffer[0] || *(sentence + i + 1) != checksumBuffer[1]){
 80080da:	89fb      	ldrh	r3, [r7, #14]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	781a      	ldrb	r2, [r3, #0]
 80080e2:	7a3b      	ldrb	r3, [r7, #8]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d107      	bne.n	80080f8 <_GPSDriver_checkNMEAChecksum+0x9e>
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	3301      	adds	r3, #1
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	7a7b      	ldrb	r3, [r7, #9]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d001      	beq.n	80080fc <_GPSDriver_checkNMEAChecksum+0xa2>
    	return GPSDriver_Status_WrongNMEAChecksumError;
 80080f8:	2305      	movs	r3, #5
 80080fa:	e000      	b.n	80080fe <_GPSDriver_checkNMEAChecksum+0xa4>
    }

    return GPSDriver_Status_OK;
 80080fc:	2300      	movs	r3, #0

}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <_GPSDriver_parseTime>:

static GPSDriver_Status_TypeDef _GPSDriver_parseTime(uint8_t* bytes, uint16_t length, volatile DateTime_TypeDef* retDateTime){
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	460b      	mov	r3, r1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	817b      	strh	r3, [r7, #10]

	if (length < 6){
 8008114:	897b      	ldrh	r3, [r7, #10]
 8008116:	2b05      	cmp	r3, #5
 8008118:	d801      	bhi.n	800811e <_GPSDriver_parseTime+0x18>
		return GPSDriver_Status_NMEASentenceError;
 800811a:	2304      	movs	r3, #4
 800811c:	e083      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}

	uint8_t tmp;

	if (decChar2Uint8(*bytes, &tmp) != StringOperations_Status_OK){
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	f107 0217 	add.w	r2, r7, #23
 8008126:	4611      	mov	r1, r2
 8008128:	4618      	mov	r0, r3
 800812a:	f001 f906 	bl	800933a <decChar2Uint8>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <_GPSDriver_parseTime+0x32>
		return GPSDriver_Status_NMEASentenceError;
 8008134:	2304      	movs	r3, #4
 8008136:	e076      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->hour	= tmp * 10;
 8008138:	7dfb      	ldrb	r3, [r7, #23]
 800813a:	461a      	mov	r2, r3
 800813c:	0092      	lsls	r2, r2, #2
 800813e:	4413      	add	r3, r2
 8008140:	005b      	lsls	r3, r3, #1
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	711a      	strb	r2, [r3, #4]

	if (decChar2Uint8(*(bytes+1), &tmp) != StringOperations_Status_OK){
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f107 0217 	add.w	r2, r7, #23
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f001 f8f0 	bl	800933a <decChar2Uint8>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d001      	beq.n	8008164 <_GPSDriver_parseTime+0x5e>
		return GPSDriver_Status_NMEASentenceError;
 8008160:	2304      	movs	r3, #4
 8008162:	e060      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->hour	+= tmp;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	791b      	ldrb	r3, [r3, #4]
 8008168:	b2da      	uxtb	r2, r3
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	4413      	add	r3, r2
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	711a      	strb	r2, [r3, #4]


	if (decChar2Uint8(*(bytes+2), &tmp) != StringOperations_Status_OK){
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3302      	adds	r3, #2
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	f107 0217 	add.w	r2, r7, #23
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f001 f8da 	bl	800933a <decChar2Uint8>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d001      	beq.n	8008190 <_GPSDriver_parseTime+0x8a>
		return GPSDriver_Status_NMEASentenceError;
 800818c:	2304      	movs	r3, #4
 800818e:	e04a      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->minute	= tmp * 10;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	461a      	mov	r2, r3
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	4413      	add	r3, r2
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	715a      	strb	r2, [r3, #5]

	if (decChar2Uint8(*(bytes+3), &tmp) != StringOperations_Status_OK){
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3303      	adds	r3, #3
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f107 0217 	add.w	r2, r7, #23
 80081aa:	4611      	mov	r1, r2
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 f8c4 	bl	800933a <decChar2Uint8>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d001      	beq.n	80081bc <_GPSDriver_parseTime+0xb6>
		return GPSDriver_Status_NMEASentenceError;
 80081b8:	2304      	movs	r3, #4
 80081ba:	e034      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->minute	+= tmp;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	795b      	ldrb	r3, [r3, #5]
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
 80081c4:	4413      	add	r3, r2
 80081c6:	b2da      	uxtb	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	715a      	strb	r2, [r3, #5]


	if (decChar2Uint8(*(bytes+4), &tmp) != StringOperations_Status_OK){
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3304      	adds	r3, #4
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	f107 0217 	add.w	r2, r7, #23
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 f8ae 	bl	800933a <decChar2Uint8>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d001      	beq.n	80081e8 <_GPSDriver_parseTime+0xe2>
		return GPSDriver_Status_NMEASentenceError;
 80081e4:	2304      	movs	r3, #4
 80081e6:	e01e      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->second	= tmp * 10;
 80081e8:	7dfb      	ldrb	r3, [r7, #23]
 80081ea:	461a      	mov	r2, r3
 80081ec:	0092      	lsls	r2, r2, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	005b      	lsls	r3, r3, #1
 80081f2:	b2da      	uxtb	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	719a      	strb	r2, [r3, #6]

	if (decChar2Uint8(*(bytes+5), &tmp) != StringOperations_Status_OK){
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3305      	adds	r3, #5
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	f107 0217 	add.w	r2, r7, #23
 8008202:	4611      	mov	r1, r2
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f898 	bl	800933a <decChar2Uint8>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <_GPSDriver_parseTime+0x10e>
		return GPSDriver_Status_NMEASentenceError;
 8008210:	2304      	movs	r3, #4
 8008212:	e008      	b.n	8008226 <_GPSDriver_parseTime+0x120>
	}
	retDateTime->second	+= tmp;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	799b      	ldrb	r3, [r3, #6]
 8008218:	b2da      	uxtb	r2, r3
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	4413      	add	r3, r2
 800821e:	b2da      	uxtb	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	719a      	strb	r2, [r3, #6]

	return GPSDriver_Status_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <_GPSDriver_parseDate>:

static GPSDriver_Status_TypeDef _GPSDriver_parseDate(uint8_t* bytes, uint16_t length, volatile DateTime_TypeDef* retDateTime){
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	460b      	mov	r3, r1
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	817b      	strh	r3, [r7, #10]

	if (length < 6){
 800823c:	897b      	ldrh	r3, [r7, #10]
 800823e:	2b05      	cmp	r3, #5
 8008240:	d801      	bhi.n	8008246 <_GPSDriver_parseDate+0x18>
		return GPSDriver_Status_NMEASentenceError;
 8008242:	2304      	movs	r3, #4
 8008244:	e085      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}

	uint8_t tmp;

	if (decChar2Uint8(*bytes, &tmp) != StringOperations_Status_OK){
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f107 0217 	add.w	r2, r7, #23
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f001 f872 	bl	800933a <decChar2Uint8>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <_GPSDriver_parseDate+0x32>
		return GPSDriver_Status_NMEASentenceError;
 800825c:	2304      	movs	r3, #4
 800825e:	e078      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->day		= tmp * 10;
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	461a      	mov	r2, r3
 8008264:	0092      	lsls	r2, r2, #2
 8008266:	4413      	add	r3, r2
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	b2da      	uxtb	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	70da      	strb	r2, [r3, #3]

	if (decChar2Uint8(*(bytes+1), &tmp) != StringOperations_Status_OK){
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3301      	adds	r3, #1
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	f107 0217 	add.w	r2, r7, #23
 800827a:	4611      	mov	r1, r2
 800827c:	4618      	mov	r0, r3
 800827e:	f001 f85c 	bl	800933a <decChar2Uint8>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <_GPSDriver_parseDate+0x5e>
		return GPSDriver_Status_NMEASentenceError;
 8008288:	2304      	movs	r3, #4
 800828a:	e062      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->day		+= tmp;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	78db      	ldrb	r3, [r3, #3]
 8008290:	b2da      	uxtb	r2, r3
 8008292:	7dfb      	ldrb	r3, [r7, #23]
 8008294:	4413      	add	r3, r2
 8008296:	b2da      	uxtb	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	70da      	strb	r2, [r3, #3]

	if (decChar2Uint8(*(bytes+2), &tmp) != StringOperations_Status_OK){
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3302      	adds	r3, #2
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	f107 0217 	add.w	r2, r7, #23
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f001 f846 	bl	800933a <decChar2Uint8>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <_GPSDriver_parseDate+0x8a>
		return GPSDriver_Status_NMEASentenceError;
 80082b4:	2304      	movs	r3, #4
 80082b6:	e04c      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->month	= tmp * 10;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	461a      	mov	r2, r3
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	4413      	add	r3, r2
 80082c0:	005b      	lsls	r3, r3, #1
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	709a      	strb	r2, [r3, #2]

	if (decChar2Uint8(*(bytes+3), &tmp) != StringOperations_Status_OK){
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3303      	adds	r3, #3
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	f107 0217 	add.w	r2, r7, #23
 80082d2:	4611      	mov	r1, r2
 80082d4:	4618      	mov	r0, r3
 80082d6:	f001 f830 	bl	800933a <decChar2Uint8>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <_GPSDriver_parseDate+0xb6>
		return GPSDriver_Status_NMEASentenceError;
 80082e0:	2304      	movs	r3, #4
 80082e2:	e036      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->month	+= tmp;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	789b      	ldrb	r3, [r3, #2]
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	4413      	add	r3, r2
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	709a      	strb	r2, [r3, #2]

	if (decChar2Uint8(*(bytes+4), &tmp) != StringOperations_Status_OK){
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3304      	adds	r3, #4
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	f107 0217 	add.w	r2, r7, #23
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f001 f81a 	bl	800933a <decChar2Uint8>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <_GPSDriver_parseDate+0xe2>
		return GPSDriver_Status_NMEASentenceError;
 800830c:	2304      	movs	r3, #4
 800830e:	e020      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->year	= tmp * 10;
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	b29b      	uxth	r3, r3
 8008314:	461a      	mov	r2, r3
 8008316:	0092      	lsls	r2, r2, #2
 8008318:	4413      	add	r3, r2
 800831a:	005b      	lsls	r3, r3, #1
 800831c:	b29a      	uxth	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	801a      	strh	r2, [r3, #0]

	if (decChar2Uint8(*(bytes+5), &tmp) != StringOperations_Status_OK){
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3305      	adds	r3, #5
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f107 0217 	add.w	r2, r7, #23
 800832c:	4611      	mov	r1, r2
 800832e:	4618      	mov	r0, r3
 8008330:	f001 f803 	bl	800933a <decChar2Uint8>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <_GPSDriver_parseDate+0x110>
		return GPSDriver_Status_NMEASentenceError;
 800833a:	2304      	movs	r3, #4
 800833c:	e009      	b.n	8008352 <_GPSDriver_parseDate+0x124>
	}
	retDateTime->year	+= tmp;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29a      	uxth	r2, r3
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	b29b      	uxth	r3, r3
 8008348:	4413      	add	r3, r2
 800834a:	b29a      	uxth	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	801a      	strh	r2, [r3, #0]

	return GPSDriver_Status_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <_GPSDriver_parseLatitude>:

static GPSDriver_Status_TypeDef _GPSDriver_parseLatitude(uint8_t* bytes, uint16_t length, volatile GPSData_TypeDef* retGPSData){
 800835a:	b580      	push	{r7, lr}
 800835c:	b088      	sub	sp, #32
 800835e:	af02      	add	r7, sp, #8
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	460b      	mov	r3, r1
 8008364:	607a      	str	r2, [r7, #4]
 8008366:	817b      	strh	r3, [r7, #10]

	uint16_t tmp;

	if (findChar(bytes, GPS_NMEA_DATA_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 8008368:	f107 0312 	add.w	r3, r7, #18
 800836c:	897a      	ldrh	r2, [r7, #10]
 800836e:	212c      	movs	r1, #44	; 0x2c
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 ff0b 	bl	800918c <findChar>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <_GPSDriver_parseLatitude+0x26>
		return GPSDriver_Status_NMEASentenceError;
 800837c:	2304      	movs	r3, #4
 800837e:	e052      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
	}
	uint16_t commaIndex = tmp;
 8008380:	8a7b      	ldrh	r3, [r7, #18]
 8008382:	82fb      	strh	r3, [r7, #22]

	if (findChar(bytes, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 8008384:	f107 0312 	add.w	r3, r7, #18
 8008388:	897a      	ldrh	r2, [r7, #10]
 800838a:	212e      	movs	r1, #46	; 0x2e
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fefd 	bl	800918c <findChar>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <_GPSDriver_parseLatitude+0x42>
		return GPSDriver_Status_NMEASentenceError;
 8008398:	2304      	movs	r3, #4
 800839a:	e044      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
	}
	uint16_t dotIndex = tmp;
 800839c:	8a7b      	ldrh	r3, [r7, #18]
 800839e:	82bb      	strh	r3, [r7, #20]

	if (commaIndex == length){
 80083a0:	8afa      	ldrh	r2, [r7, #22]
 80083a2:	897b      	ldrh	r3, [r7, #10]
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d101      	bne.n	80083ac <_GPSDriver_parseLatitude+0x52>
		return GPSDriver_Status_NMEASentenceError;
 80083a8:	2304      	movs	r3, #4
 80083aa:	e03c      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
	}

	if (dotIndex == length || dotIndex > commaIndex){
 80083ac:	8aba      	ldrh	r2, [r7, #20]
 80083ae:	897b      	ldrh	r3, [r7, #10]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d003      	beq.n	80083bc <_GPSDriver_parseLatitude+0x62>
 80083b4:	8aba      	ldrh	r2, [r7, #20]
 80083b6:	8afb      	ldrh	r3, [r7, #22]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d901      	bls.n	80083c0 <_GPSDriver_parseLatitude+0x66>
		return GPSDriver_Status_NMEASentenceError;
 80083bc:	2304      	movs	r3, #4
 80083be:	e032      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
	}

	if (*(bytes + commaIndex + 1) == 'N'){
 80083c0:	8afb      	ldrh	r3, [r7, #22]
 80083c2:	3301      	adds	r3, #1
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b4e      	cmp	r3, #78	; 0x4e
 80083cc:	d10d      	bne.n	80083ea <_GPSDriver_parseLatitude+0x90>
		 if (stringToFixedPoint(bytes, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&retGPSData->latitude) != StringOperations_Status_OK){
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	3314      	adds	r3, #20
 80083d2:	8af9      	ldrh	r1, [r7, #22]
 80083d4:	9300      	str	r3, [sp, #0]
 80083d6:	230c      	movs	r3, #12
 80083d8:	222e      	movs	r2, #46	; 0x2e
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 ff33 	bl	8009246 <stringToFixedPoint>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d01e      	beq.n	8008424 <_GPSDriver_parseLatitude+0xca>
			return GPSDriver_Status_NMEASentenceError;
 80083e6:	2304      	movs	r3, #4
 80083e8:	e01d      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
		 }
	} else if (*(bytes + commaIndex + 1) == 'S'){
 80083ea:	8afb      	ldrh	r3, [r7, #22]
 80083ec:	3301      	adds	r3, #1
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b53      	cmp	r3, #83	; 0x53
 80083f6:	d113      	bne.n	8008420 <_GPSDriver_parseLatitude+0xc6>
		if (stringToFixedPoint(bytes, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&retGPSData->latitude) != StringOperations_Status_OK){
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	3314      	adds	r3, #20
 80083fc:	8af9      	ldrh	r1, [r7, #22]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	230c      	movs	r3, #12
 8008402:	222e      	movs	r2, #46	; 0x2e
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f000 ff1e 	bl	8009246 <stringToFixedPoint>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d001      	beq.n	8008414 <_GPSDriver_parseLatitude+0xba>
			return GPSDriver_Status_NMEASentenceError;
 8008410:	2304      	movs	r3, #4
 8008412:	e008      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
		}
		retGPSData->latitude.integer *= (-1);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	425a      	negs	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	615a      	str	r2, [r3, #20]
 800841e:	e001      	b.n	8008424 <_GPSDriver_parseLatitude+0xca>
	} else {
		return GPSDriver_Status_NMEASentenceError;
 8008420:	2304      	movs	r3, #4
 8008422:	e000      	b.n	8008426 <_GPSDriver_parseLatitude+0xcc>
	}

	return GPSDriver_Status_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3718      	adds	r7, #24
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <_GPSDriver_parseLongitude>:

static GPSDriver_Status_TypeDef _GPSDriver_parseLongitude(uint8_t* bytes, uint16_t length, volatile GPSData_TypeDef* retGPSData){
 800842e:	b580      	push	{r7, lr}
 8008430:	b088      	sub	sp, #32
 8008432:	af02      	add	r7, sp, #8
 8008434:	60f8      	str	r0, [r7, #12]
 8008436:	460b      	mov	r3, r1
 8008438:	607a      	str	r2, [r7, #4]
 800843a:	817b      	strh	r3, [r7, #10]

	uint16_t tmp;

	if (findChar(bytes, GPS_NMEA_DATA_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 800843c:	f107 0312 	add.w	r3, r7, #18
 8008440:	897a      	ldrh	r2, [r7, #10]
 8008442:	212c      	movs	r1, #44	; 0x2c
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 fea1 	bl	800918c <findChar>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <_GPSDriver_parseLongitude+0x26>
		return GPSDriver_Status_NMEASentenceError;
 8008450:	2304      	movs	r3, #4
 8008452:	e052      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
	}
	uint16_t commaIndex = tmp;
 8008454:	8a7b      	ldrh	r3, [r7, #18]
 8008456:	82fb      	strh	r3, [r7, #22]

	if (findChar(bytes, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 8008458:	f107 0312 	add.w	r3, r7, #18
 800845c:	897a      	ldrh	r2, [r7, #10]
 800845e:	212e      	movs	r1, #46	; 0x2e
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 fe93 	bl	800918c <findChar>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <_GPSDriver_parseLongitude+0x42>
		return GPSDriver_Status_NMEASentenceError;
 800846c:	2304      	movs	r3, #4
 800846e:	e044      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
	}
	uint16_t dotIndex = tmp;
 8008470:	8a7b      	ldrh	r3, [r7, #18]
 8008472:	82bb      	strh	r3, [r7, #20]

	if (commaIndex == length){
 8008474:	8afa      	ldrh	r2, [r7, #22]
 8008476:	897b      	ldrh	r3, [r7, #10]
 8008478:	429a      	cmp	r2, r3
 800847a:	d101      	bne.n	8008480 <_GPSDriver_parseLongitude+0x52>
		return GPSDriver_Status_NMEASentenceError;
 800847c:	2304      	movs	r3, #4
 800847e:	e03c      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
	}

	if (dotIndex == length || dotIndex > commaIndex){
 8008480:	8aba      	ldrh	r2, [r7, #20]
 8008482:	897b      	ldrh	r3, [r7, #10]
 8008484:	429a      	cmp	r2, r3
 8008486:	d003      	beq.n	8008490 <_GPSDriver_parseLongitude+0x62>
 8008488:	8aba      	ldrh	r2, [r7, #20]
 800848a:	8afb      	ldrh	r3, [r7, #22]
 800848c:	429a      	cmp	r2, r3
 800848e:	d901      	bls.n	8008494 <_GPSDriver_parseLongitude+0x66>
		return GPSDriver_Status_NMEASentenceError;
 8008490:	2304      	movs	r3, #4
 8008492:	e032      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
	}

	if (*(bytes + commaIndex + 1) == 'E'){
 8008494:	8afb      	ldrh	r3, [r7, #22]
 8008496:	3301      	adds	r3, #1
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b45      	cmp	r3, #69	; 0x45
 80084a0:	d10d      	bne.n	80084be <_GPSDriver_parseLongitude+0x90>
		 if (stringToFixedPoint(bytes, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&retGPSData->longitude) != StringOperations_Status_OK){
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	330c      	adds	r3, #12
 80084a6:	8af9      	ldrh	r1, [r7, #22]
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	230c      	movs	r3, #12
 80084ac:	222e      	movs	r2, #46	; 0x2e
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f000 fec9 	bl	8009246 <stringToFixedPoint>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d01e      	beq.n	80084f8 <_GPSDriver_parseLongitude+0xca>
			return GPSDriver_Status_NMEASentenceError;
 80084ba:	2304      	movs	r3, #4
 80084bc:	e01d      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
		 }
	} else if (*(bytes + commaIndex + 1) == 'W'){
 80084be:	8afb      	ldrh	r3, [r7, #22]
 80084c0:	3301      	adds	r3, #1
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b57      	cmp	r3, #87	; 0x57
 80084ca:	d113      	bne.n	80084f4 <_GPSDriver_parseLongitude+0xc6>
		if (stringToFixedPoint(bytes, commaIndex, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS, (FixedPoint*)&retGPSData->longitude) != StringOperations_Status_OK){
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	330c      	adds	r3, #12
 80084d0:	8af9      	ldrh	r1, [r7, #22]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	230c      	movs	r3, #12
 80084d6:	222e      	movs	r2, #46	; 0x2e
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 feb4 	bl	8009246 <stringToFixedPoint>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <_GPSDriver_parseLongitude+0xba>
			return GPSDriver_Status_NMEASentenceError;
 80084e4:	2304      	movs	r3, #4
 80084e6:	e008      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
		}
		retGPSData->latitude.integer *= (-1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	425a      	negs	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	615a      	str	r2, [r3, #20]
 80084f2:	e001      	b.n	80084f8 <_GPSDriver_parseLongitude+0xca>
	} else {
		return GPSDriver_Status_NMEASentenceError;
 80084f4:	2304      	movs	r3, #4
 80084f6:	e000      	b.n	80084fa <_GPSDriver_parseLongitude+0xcc>
	}

	return GPSDriver_Status_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <_GPSDriver_parseFixedPoint>:

static GPSDriver_Status_TypeDef _GPSDriver_parseFixedPoint(uint8_t* bytes, uint16_t length, volatile FixedPoint* retFixedPoint){
 8008502:	b590      	push	{r4, r7, lr}
 8008504:	b08f      	sub	sp, #60	; 0x3c
 8008506:	af02      	add	r7, sp, #8
 8008508:	6178      	str	r0, [r7, #20]
 800850a:	460b      	mov	r3, r1
 800850c:	60fa      	str	r2, [r7, #12]
 800850e:	827b      	strh	r3, [r7, #18]

	uint16_t tmp;

	if (findChar(bytes, GPS_NMEA_DECIMAL_SEPARATOR_SIGN, length, &tmp) != StringOperations_Status_OK){
 8008510:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8008514:	8a7a      	ldrh	r2, [r7, #18]
 8008516:	212e      	movs	r1, #46	; 0x2e
 8008518:	6978      	ldr	r0, [r7, #20]
 800851a:	f000 fe37 	bl	800918c <findChar>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d001      	beq.n	8008528 <_GPSDriver_parseFixedPoint+0x26>
		return GPSDriver_Status_NMEASentenceError;
 8008524:	2304      	movs	r3, #4
 8008526:	e054      	b.n	80085d2 <_GPSDriver_parseFixedPoint+0xd0>
	}
	uint16_t dotIndex = tmp;
 8008528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800852a:	853b      	strh	r3, [r7, #40]	; 0x28

	if (dotIndex == length){
 800852c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800852e:	8a7b      	ldrh	r3, [r7, #18]
 8008530:	429a      	cmp	r2, r3
 8008532:	d101      	bne.n	8008538 <_GPSDriver_parseFixedPoint+0x36>
		return GPSDriver_Status_NMEASentenceError;
 8008534:	2304      	movs	r3, #4
 8008536:	e04c      	b.n	80085d2 <_GPSDriver_parseFixedPoint+0xd0>
	}

	uint32_t decimalPart, fractionalNumerator, fractionalDenominator = 1;
 8008538:	2301      	movs	r3, #1
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (string2UInt32(bytes, dotIndex, &decimalPart) != StringOperations_Status_OK){ //< Number of satellites being tracked
 800853c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f107 0220 	add.w	r2, r7, #32
 8008544:	4619      	mov	r1, r3
 8008546:	6978      	ldr	r0, [r7, #20]
 8008548:	f000 ff16 	bl	8009378 <string2UInt32>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <_GPSDriver_parseFixedPoint+0x54>
		return GPSDriver_Status_NMEASentenceError;
 8008552:	2304      	movs	r3, #4
 8008554:	e03d      	b.n	80085d2 <_GPSDriver_parseFixedPoint+0xd0>
	}
	bytes += dotIndex + sizeof(GPS_NMEA_DECIMAL_SEPARATOR_SIGN);
 8008556:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008558:	3304      	adds	r3, #4
 800855a:	697a      	ldr	r2, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	617b      	str	r3, [r7, #20]
	length -= dotIndex + sizeof(GPS_NMEA_DECIMAL_SEPARATOR_SIGN);
 8008560:	8a7a      	ldrh	r2, [r7, #18]
 8008562:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b04      	subs	r3, #4
 800856a:	827b      	strh	r3, [r7, #18]
	if (string2UInt32(bytes, length, &fractionalNumerator) != StringOperations_Status_OK){ //TODO czy sizeof tu dobrze zadziala?
 800856c:	8a7b      	ldrh	r3, [r7, #18]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	f107 021c 	add.w	r2, r7, #28
 8008574:	4619      	mov	r1, r3
 8008576:	6978      	ldr	r0, [r7, #20]
 8008578:	f000 fefe 	bl	8009378 <string2UInt32>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <_GPSDriver_parseFixedPoint+0x84>
		return GPSDriver_Status_NMEASentenceError;
 8008582:	2304      	movs	r3, #4
 8008584:	e025      	b.n	80085d2 <_GPSDriver_parseFixedPoint+0xd0>
	}

	for (uint8_t i=0; i<length; i++){
 8008586:	2300      	movs	r3, #0
 8008588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800858c:	e00a      	b.n	80085a4 <_GPSDriver_parseFixedPoint+0xa2>
		fractionalDenominator *= 10;
 800858e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008590:	4613      	mov	r3, r2
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	4413      	add	r3, r2
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint8_t i=0; i<length; i++){
 800859a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800859e:	3301      	adds	r3, #1
 80085a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	8a7a      	ldrh	r2, [r7, #18]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d8ee      	bhi.n	800858e <_GPSDriver_parseFixedPoint+0x8c>
	}

	*retFixedPoint = FixedPoint_constrDecimalFrac(decimalPart, fractionalNumerator, fractionalDenominator, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS);
 80085b0:	6a3b      	ldr	r3, [r7, #32]
 80085b2:	4619      	mov	r1, r3
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	68fc      	ldr	r4, [r7, #12]
 80085b8:	4638      	mov	r0, r7
 80085ba:	230c      	movs	r3, #12
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	f7fe ff12 	bl	80073e8 <FixedPoint_constrDecimalFrac>
 80085c4:	4622      	mov	r2, r4
 80085c6:	463b      	mov	r3, r7
 80085c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80085cc:	e882 0003 	stmia.w	r2, {r0, r1}

	return GPSDriver_Status_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3734      	adds	r7, #52	; 0x34
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd90      	pop	{r4, r7, pc}

080085da <_GPSDriver_handleGPGGASentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGPGGASentence(volatile GPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* nmeaSentenceString){
 80085da:	b580      	push	{r7, lr}
 80085dc:	b086      	sub	sp, #24
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	6039      	str	r1, [r7, #0]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	75fb      	strb	r3, [r7, #23]
	uint16_t					tmp_u16;
	uint32_t					tmp_u32;

	if ((ret = _GPSDriver_checkNMEAChecksum(nmeaSentenceString->sentenceString, nmeaSentenceString->sentenceLength)) != GPSDriver_Status_OK){
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	1d9a      	adds	r2, r3, #6
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	889b      	ldrh	r3, [r3, #4]
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7ff fd31 	bl	800805a <_GPSDriver_checkNMEAChecksum>
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]
 80085fc:	7dfb      	ldrb	r3, [r7, #23]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <_GPSDriver_handleGPGGASentence+0x2c>
		return ret;
 8008602:	7dfb      	ldrb	r3, [r7, #23]
 8008604:	e146      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}

	uint8_t*					it = nmeaSentenceString->sentenceString + sizeof(GPS_NMEA_GPGGA_PREFIX) + sizeof(',');
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	3306      	adds	r3, #6
 800860a:	3308      	adds	r3, #8
 800860c:	613b      	str	r3, [r7, #16]

	//< ----- Parse fix time ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	3306      	adds	r3, #6
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	8892      	ldrh	r2, [r2, #4]
 8008616:	4413      	add	r3, r2
 8008618:	461a      	mov	r2, r3
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	b29a      	uxth	r2, r3
 8008620:	f107 030e 	add.w	r3, r7, #14
 8008624:	212c      	movs	r1, #44	; 0x2c
 8008626:	6938      	ldr	r0, [r7, #16]
 8008628:	f000 fdb0 	bl	800918c <findChar>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <_GPSDriver_handleGPGGASentence+0x5c>
		return GPSDriver_Status_NMEASentenceError;
 8008632:	2304      	movs	r3, #4
 8008634:	e12e      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if ((ret = _GPSDriver_parseTime(it, tmp_u16, &pSelf->partialGPSData.dateTime)) != GPSDriver_Status_OK){
 8008636:	89f9      	ldrh	r1, [r7, #14]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3320      	adds	r3, #32
 800863c:	461a      	mov	r2, r3
 800863e:	6938      	ldr	r0, [r7, #16]
 8008640:	f7ff fd61 	bl	8008106 <_GPSDriver_parseTime>
 8008644:	4603      	mov	r3, r0
 8008646:	75fb      	strb	r3, [r7, #23]
 8008648:	7dfb      	ldrb	r3, [r7, #23]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <_GPSDriver_handleGPGGASentence+0x78>
		return ret;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
 8008650:	e120      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(',');
 8008652:	89fb      	ldrh	r3, [r7, #14]
 8008654:	3304      	adds	r3, #4
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	613b      	str	r3, [r7, #16]

	//< ----- Parse latitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	3306      	adds	r3, #6
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	8892      	ldrh	r2, [r2, #4]
 8008664:	4413      	add	r3, r2
 8008666:	461a      	mov	r2, r3
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	b29a      	uxth	r2, r3
 800866e:	f107 030e 	add.w	r3, r7, #14
 8008672:	212c      	movs	r1, #44	; 0x2c
 8008674:	6938      	ldr	r0, [r7, #16]
 8008676:	f000 fd89 	bl	800918c <findChar>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <_GPSDriver_handleGPGGASentence+0xaa>
		return GPSDriver_Status_NMEASentenceError;
 8008680:	2304      	movs	r3, #4
 8008682:	e107      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if ((ret = _GPSDriver_parseLatitude(it, tmp_u16 + 2/*comma and N/S*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8008684:	89fb      	ldrh	r3, [r7, #14]
 8008686:	3302      	adds	r3, #2
 8008688:	b299      	uxth	r1, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3320      	adds	r3, #32
 800868e:	461a      	mov	r2, r3
 8008690:	6938      	ldr	r0, [r7, #16]
 8008692:	f7ff fe62 	bl	800835a <_GPSDriver_parseLatitude>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <_GPSDriver_handleGPGGASentence+0xca>
		return ret;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	e0f7      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}

	it += tmp_u16 + sizeof(',');
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	3304      	adds	r3, #4
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4413      	add	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	3306      	adds	r3, #6
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	8892      	ldrh	r2, [r2, #4]
 80086b6:	4413      	add	r3, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	b29a      	uxth	r2, r3
 80086c0:	f107 030e 	add.w	r3, r7, #14
 80086c4:	212c      	movs	r1, #44	; 0x2c
 80086c6:	6938      	ldr	r0, [r7, #16]
 80086c8:	f000 fd60 	bl	800918c <findChar>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <_GPSDriver_handleGPGGASentence+0xfc>
		return GPSDriver_Status_NMEASentenceError;
 80086d2:	2304      	movs	r3, #4
 80086d4:	e0de      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(','); //< N/S and comma
 80086d6:	89fb      	ldrh	r3, [r7, #14]
 80086d8:	3304      	adds	r3, #4
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	4413      	add	r3, r2
 80086de:	613b      	str	r3, [r7, #16]

	//< ----- Parse longitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	3306      	adds	r3, #6
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	8892      	ldrh	r2, [r2, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	461a      	mov	r2, r3
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	1ad3      	subs	r3, r2, r3
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	f107 030e 	add.w	r3, r7, #14
 80086f6:	212c      	movs	r1, #44	; 0x2c
 80086f8:	6938      	ldr	r0, [r7, #16]
 80086fa:	f000 fd47 	bl	800918c <findChar>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <_GPSDriver_handleGPGGASentence+0x12e>
		return GPSDriver_Status_NMEASentenceError;
 8008704:	2304      	movs	r3, #4
 8008706:	e0c5      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if ((ret = _GPSDriver_parseLongitude(it, tmp_u16 + 2/*comma and E/W*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8008708:	89fb      	ldrh	r3, [r7, #14]
 800870a:	3302      	adds	r3, #2
 800870c:	b299      	uxth	r1, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	3320      	adds	r3, #32
 8008712:	461a      	mov	r2, r3
 8008714:	6938      	ldr	r0, [r7, #16]
 8008716:	f7ff fe8a 	bl	800842e <_GPSDriver_parseLongitude>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <_GPSDriver_handleGPGGASentence+0x14e>
		return ret;
 8008724:	7dfb      	ldrb	r3, [r7, #23]
 8008726:	e0b5      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}

	it += tmp_u16 + sizeof(',');
 8008728:	89fb      	ldrh	r3, [r7, #14]
 800872a:	3304      	adds	r3, #4
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4413      	add	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	3306      	adds	r3, #6
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	8892      	ldrh	r2, [r2, #4]
 800873a:	4413      	add	r3, r2
 800873c:	461a      	mov	r2, r3
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	b29a      	uxth	r2, r3
 8008744:	f107 030e 	add.w	r3, r7, #14
 8008748:	212c      	movs	r1, #44	; 0x2c
 800874a:	6938      	ldr	r0, [r7, #16]
 800874c:	f000 fd1e 	bl	800918c <findChar>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <_GPSDriver_handleGPGGASentence+0x180>
		return GPSDriver_Status_NMEASentenceError;
 8008756:	2304      	movs	r3, #4
 8008758:	e09c      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(','); //< comma and E/W
 800875a:	89fb      	ldrh	r3, [r7, #14]
 800875c:	3304      	adds	r3, #4
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4413      	add	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

	//< ----- Fix quality ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	3306      	adds	r3, #6
 8008768:	683a      	ldr	r2, [r7, #0]
 800876a:	8892      	ldrh	r2, [r2, #4]
 800876c:	4413      	add	r3, r2
 800876e:	461a      	mov	r2, r3
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	b29a      	uxth	r2, r3
 8008776:	f107 030e 	add.w	r3, r7, #14
 800877a:	212c      	movs	r1, #44	; 0x2c
 800877c:	6938      	ldr	r0, [r7, #16]
 800877e:	f000 fd05 	bl	800918c <findChar>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <_GPSDriver_handleGPGGASentence+0x1b2>
		return GPSDriver_Status_NMEASentenceError;
 8008788:	2304      	movs	r3, #4
 800878a:	e083      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(','); //< ignore fix quality
 800878c:	89fb      	ldrh	r3, [r7, #14]
 800878e:	3304      	adds	r3, #4
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	4413      	add	r3, r2
 8008794:	613b      	str	r3, [r7, #16]

	//< ----- Parse number of satellites being tracked ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	3306      	adds	r3, #6
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	8892      	ldrh	r2, [r2, #4]
 800879e:	4413      	add	r3, r2
 80087a0:	461a      	mov	r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f107 030e 	add.w	r3, r7, #14
 80087ac:	212c      	movs	r1, #44	; 0x2c
 80087ae:	6938      	ldr	r0, [r7, #16]
 80087b0:	f000 fcec 	bl	800918c <findChar>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <_GPSDriver_handleGPGGASentence+0x1e4>
		return GPSDriver_Status_NMEASentenceError;
 80087ba:	2304      	movs	r3, #4
 80087bc:	e06a      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if (string2UInt32(it, tmp_u16, &tmp_u32) != StringOperations_Status_OK){ //< Number of satellites being tracked
 80087be:	89fb      	ldrh	r3, [r7, #14]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	f107 0208 	add.w	r2, r7, #8
 80087c6:	4619      	mov	r1, r3
 80087c8:	6938      	ldr	r0, [r7, #16]
 80087ca:	f000 fdd5 	bl	8009378 <string2UInt32>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d001      	beq.n	80087d8 <_GPSDriver_handleGPGGASentence+0x1fe>
		return GPSDriver_Status_NMEASentenceError;
 80087d4:	2304      	movs	r3, #4
 80087d6:	e05d      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if (tmp_u32 > 0xFF){
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2bff      	cmp	r3, #255	; 0xff
 80087dc:	d901      	bls.n	80087e2 <_GPSDriver_handleGPGGASentence+0x208>
		return GPSDriver_Status_NMEASentenceError;
 80087de:	2304      	movs	r3, #4
 80087e0:	e058      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	} else {
		pSelf->partialGPSData.nSatellites = (uint8_t) tmp_u32;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
	it += tmp_u16 + sizeof(',');
 80087ec:	89fb      	ldrh	r3, [r7, #14]
 80087ee:	3304      	adds	r3, #4
 80087f0:	693a      	ldr	r2, [r7, #16]
 80087f2:	4413      	add	r3, r2
 80087f4:	613b      	str	r3, [r7, #16]

	//< ----- Parse horizontal dilution of position ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	3306      	adds	r3, #6
 80087fa:	683a      	ldr	r2, [r7, #0]
 80087fc:	8892      	ldrh	r2, [r2, #4]
 80087fe:	4413      	add	r3, r2
 8008800:	461a      	mov	r2, r3
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	b29a      	uxth	r2, r3
 8008808:	f107 030e 	add.w	r3, r7, #14
 800880c:	212c      	movs	r1, #44	; 0x2c
 800880e:	6938      	ldr	r0, [r7, #16]
 8008810:	f000 fcbc 	bl	800918c <findChar>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <_GPSDriver_handleGPGGASentence+0x244>
		return GPSDriver_Status_NMEASentenceError;
 800881a:	2304      	movs	r3, #4
 800881c:	e03a      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.horizontalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 800881e:	89f9      	ldrh	r1, [r7, #14]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	3354      	adds	r3, #84	; 0x54
 8008824:	461a      	mov	r2, r3
 8008826:	6938      	ldr	r0, [r7, #16]
 8008828:	f7ff fe6b 	bl	8008502 <_GPSDriver_parseFixedPoint>
 800882c:	4603      	mov	r3, r0
 800882e:	75fb      	strb	r3, [r7, #23]
 8008830:	7dfb      	ldrb	r3, [r7, #23]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <_GPSDriver_handleGPGGASentence+0x260>
		return ret;
 8008836:	7dfb      	ldrb	r3, [r7, #23]
 8008838:	e02c      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(',');
 800883a:	89fb      	ldrh	r3, [r7, #14]
 800883c:	3304      	adds	r3, #4
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	4413      	add	r3, r2
 8008842:	613b      	str	r3, [r7, #16]

	//< ----- Parse altitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	3306      	adds	r3, #6
 8008848:	683a      	ldr	r2, [r7, #0]
 800884a:	8892      	ldrh	r2, [r2, #4]
 800884c:	4413      	add	r3, r2
 800884e:	461a      	mov	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	b29a      	uxth	r2, r3
 8008856:	f107 030e 	add.w	r3, r7, #14
 800885a:	212c      	movs	r1, #44	; 0x2c
 800885c:	6938      	ldr	r0, [r7, #16]
 800885e:	f000 fc95 	bl	800918c <findChar>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d001      	beq.n	800886c <_GPSDriver_handleGPGGASentence+0x292>
		return GPSDriver_Status_NMEASentenceError;
 8008868:	2304      	movs	r3, #4
 800886a:	e013      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.altitude)) != GPSDriver_Status_OK){ //< Altitude, Meters, above mean sea level
 800886c:	89f9      	ldrh	r1, [r7, #14]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	3340      	adds	r3, #64	; 0x40
 8008872:	461a      	mov	r2, r3
 8008874:	6938      	ldr	r0, [r7, #16]
 8008876:	f7ff fe44 	bl	8008502 <_GPSDriver_parseFixedPoint>
 800887a:	4603      	mov	r3, r0
 800887c:	75fb      	strb	r3, [r7, #23]
 800887e:	7dfb      	ldrb	r3, [r7, #23]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <_GPSDriver_handleGPGGASentence+0x2ae>
		return ret;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	e005      	b.n	8008894 <_GPSDriver_handleGPGGASentence+0x2ba>
	}
	it += tmp_u16 + sizeof(',');
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	3304      	adds	r3, #4
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	4413      	add	r3, r2
 8008890:	613b      	str	r3, [r7, #16]

	// Rest of fields is ignored
	return ret;
 8008892:	7dfb      	ldrb	r3, [r7, #23]
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_GPSDriver_handleGPGSASentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGPGSASentence(volatile GPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* nmeaSentenceString){
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	74bb      	strb	r3, [r7, #18]
	uint16_t					tmp_u16;
	uint32_t					tmp_u32;

	if ((ret = _GPSDriver_checkNMEAChecksum(nmeaSentenceString->sentenceString, nmeaSentenceString->sentenceLength)) != GPSDriver_Status_OK){
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	1d9a      	adds	r2, r3, #6
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	889b      	ldrh	r3, [r3, #4]
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7ff fbd0 	bl	800805a <_GPSDriver_checkNMEAChecksum>
 80088ba:	4603      	mov	r3, r0
 80088bc:	74bb      	strb	r3, [r7, #18]
 80088be:	7cbb      	ldrb	r3, [r7, #18]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <_GPSDriver_handleGPGSASentence+0x2c>
		return ret;
 80088c4:	7cbb      	ldrb	r3, [r7, #18]
 80088c6:	e0b2      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}

	uint8_t*					it = nmeaSentenceString->sentenceString + sizeof(GPS_NMEA_GPGGA_PREFIX) + sizeof(',');
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	3306      	adds	r3, #6
 80088cc:	3308      	adds	r3, #8
 80088ce:	617b      	str	r3, [r7, #20]

	//< ----- Parse fix type ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	3306      	adds	r3, #6
 80088d4:	683a      	ldr	r2, [r7, #0]
 80088d6:	8892      	ldrh	r2, [r2, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	461a      	mov	r2, r3
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	f107 0310 	add.w	r3, r7, #16
 80088e6:	212c      	movs	r1, #44	; 0x2c
 80088e8:	6978      	ldr	r0, [r7, #20]
 80088ea:	f000 fc4f 	bl	800918c <findChar>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <_GPSDriver_handleGPGSASentence+0x5c>
		return GPSDriver_Status_NMEASentenceError;
 80088f4:	2304      	movs	r3, #4
 80088f6:	e09a      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	if (string2UInt32(it, tmp_u16, &tmp_u32) != StringOperations_Status_OK){ //< Number of satellites being tracked
 80088f8:	8a3b      	ldrh	r3, [r7, #16]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f107 020c 	add.w	r2, r7, #12
 8008900:	4619      	mov	r1, r3
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	f000 fd38 	bl	8009378 <string2UInt32>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <_GPSDriver_handleGPGSASentence+0x76>
		return GPSDriver_Status_NMEASentenceError;
 800890e:	2304      	movs	r3, #4
 8008910:	e08d      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}

	switch (tmp_u16){
 8008912:	8a3b      	ldrh	r3, [r7, #16]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d008      	beq.n	800892a <_GPSDriver_handleGPGSASentence+0x8e>
 8008918:	2b03      	cmp	r3, #3
 800891a:	d00b      	beq.n	8008934 <_GPSDriver_handleGPGSASentence+0x98>
 800891c:	2b01      	cmp	r3, #1
 800891e:	d10e      	bne.n	800893e <_GPSDriver_handleGPGSASentence+0xa2>
	case 1:
		pSelf->partialGPSData.fixType = GPSFixType_NoFix;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		break;
 8008928:	e00b      	b.n	8008942 <_GPSDriver_handleGPGSASentence+0xa6>
	case 2:
		pSelf->partialGPSData.fixType = GPSFixType_2DFix;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		break;
 8008932:	e006      	b.n	8008942 <_GPSDriver_handleGPGSASentence+0xa6>
	case 3:
		pSelf->partialGPSData.fixType = GPSFixType_3DFix;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2203      	movs	r2, #3
 8008938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		break;
 800893c:	e001      	b.n	8008942 <_GPSDriver_handleGPGSASentence+0xa6>
	default:
		return GPSDriver_Status_NMEASentenceError;
 800893e:	2304      	movs	r3, #4
 8008940:	e075      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	it += tmp_u16 + sizeof(',');
 8008942:	8a3b      	ldrh	r3, [r7, #16]
 8008944:	3304      	adds	r3, #4
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

	//< ----- Parse/ignore PRNs of satellites used for fix (space for 12) and PDOP (dilution of precision) ----- >//
	#define GPS_GPGSA_FIELDS_TO_IGNORE	13 //< PRNs of satellites used for fix (space for 12)  and PDOP (dilution of precision)
	for (uint8_t i=0; i<13; i++){ //TODO mocno do sprawdzenia
 800894c:	2300      	movs	r3, #0
 800894e:	74fb      	strb	r3, [r7, #19]
 8008950:	e01b      	b.n	800898a <_GPSDriver_handleGPGSASentence+0xee>
		if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	3306      	adds	r3, #6
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	8892      	ldrh	r2, [r2, #4]
 800895a:	4413      	add	r3, r2
 800895c:	461a      	mov	r2, r3
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	b29a      	uxth	r2, r3
 8008964:	f107 0310 	add.w	r3, r7, #16
 8008968:	212c      	movs	r1, #44	; 0x2c
 800896a:	6978      	ldr	r0, [r7, #20]
 800896c:	f000 fc0e 	bl	800918c <findChar>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <_GPSDriver_handleGPGSASentence+0xde>
			return GPSDriver_Status_NMEASentenceError;
 8008976:	2304      	movs	r3, #4
 8008978:	e059      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
		}
		it += tmp_u16 + sizeof(',');
 800897a:	8a3b      	ldrh	r3, [r7, #16]
 800897c:	3304      	adds	r3, #4
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4413      	add	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
	for (uint8_t i=0; i<13; i++){ //TODO mocno do sprawdzenia
 8008984:	7cfb      	ldrb	r3, [r7, #19]
 8008986:	3301      	adds	r3, #1
 8008988:	74fb      	strb	r3, [r7, #19]
 800898a:	7cfb      	ldrb	r3, [r7, #19]
 800898c:	2b0c      	cmp	r3, #12
 800898e:	d9e0      	bls.n	8008952 <_GPSDriver_handleGPGSASentence+0xb6>
	}

	//< ----- Parse horizontal dilution of precision (HDOP) ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	3306      	adds	r3, #6
 8008994:	683a      	ldr	r2, [r7, #0]
 8008996:	8892      	ldrh	r2, [r2, #4]
 8008998:	4413      	add	r3, r2
 800899a:	461a      	mov	r2, r3
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	f107 0310 	add.w	r3, r7, #16
 80089a6:	212c      	movs	r1, #44	; 0x2c
 80089a8:	6978      	ldr	r0, [r7, #20]
 80089aa:	f000 fbef 	bl	800918c <findChar>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <_GPSDriver_handleGPGSASentence+0x11c>
		return GPSDriver_Status_NMEASentenceError;
 80089b4:	2304      	movs	r3, #4
 80089b6:	e03a      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.horizontalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 80089b8:	8a39      	ldrh	r1, [r7, #16]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3354      	adds	r3, #84	; 0x54
 80089be:	461a      	mov	r2, r3
 80089c0:	6978      	ldr	r0, [r7, #20]
 80089c2:	f7ff fd9e 	bl	8008502 <_GPSDriver_parseFixedPoint>
 80089c6:	4603      	mov	r3, r0
 80089c8:	74bb      	strb	r3, [r7, #18]
 80089ca:	7cbb      	ldrb	r3, [r7, #18]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d001      	beq.n	80089d4 <_GPSDriver_handleGPGSASentence+0x138>
		return ret;
 80089d0:	7cbb      	ldrb	r3, [r7, #18]
 80089d2:	e02c      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	it += tmp_u16 + sizeof(',');
 80089d4:	8a3b      	ldrh	r3, [r7, #16]
 80089d6:	3304      	adds	r3, #4
 80089d8:	697a      	ldr	r2, [r7, #20]
 80089da:	4413      	add	r3, r2
 80089dc:	617b      	str	r3, [r7, #20]

	//< ----- Parse Vertical dilution of precision (HDOP) ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	3306      	adds	r3, #6
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	8892      	ldrh	r2, [r2, #4]
 80089e6:	4413      	add	r3, r2
 80089e8:	461a      	mov	r2, r3
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	b29a      	uxth	r2, r3
 80089f0:	f107 0310 	add.w	r3, r7, #16
 80089f4:	212c      	movs	r1, #44	; 0x2c
 80089f6:	6978      	ldr	r0, [r7, #20]
 80089f8:	f000 fbc8 	bl	800918c <findChar>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <_GPSDriver_handleGPGSASentence+0x16a>
		return GPSDriver_Status_NMEASentenceError;
 8008a02:	2304      	movs	r3, #4
 8008a04:	e013      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.verticalPrecision)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 8008a06:	8a39      	ldrh	r1, [r7, #16]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	335c      	adds	r3, #92	; 0x5c
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6978      	ldr	r0, [r7, #20]
 8008a10:	f7ff fd77 	bl	8008502 <_GPSDriver_parseFixedPoint>
 8008a14:	4603      	mov	r3, r0
 8008a16:	74bb      	strb	r3, [r7, #18]
 8008a18:	7cbb      	ldrb	r3, [r7, #18]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <_GPSDriver_handleGPGSASentence+0x186>
		return ret;
 8008a1e:	7cbb      	ldrb	r3, [r7, #18]
 8008a20:	e005      	b.n	8008a2e <_GPSDriver_handleGPGSASentence+0x192>
	}
	it += tmp_u16 + sizeof(',');
 8008a22:	8a3b      	ldrh	r3, [r7, #16]
 8008a24:	3304      	adds	r3, #4
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4413      	add	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]

	return ret;
 8008a2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3718      	adds	r7, #24
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <_GPSDriver_handleGPRMCSentence>:

static GPSDriver_Status_TypeDef _GPSDriver_handleGPRMCSentence(volatile GPSDriver_TypeDef* pSelf, _GPSDriver_NMEASentenceString* nmeaSentenceString){
 8008a36:	b590      	push	{r4, r7, lr}
 8008a38:	b08d      	sub	sp, #52	; 0x34
 8008a3a:	af02      	add	r7, sp, #8
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]

	GPSDriver_Status_TypeDef	ret = GPSDriver_Status_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t					tmp_u16;

	if ((ret = _GPSDriver_checkNMEAChecksum(nmeaSentenceString->sentenceString, nmeaSentenceString->sentenceLength)) != GPSDriver_Status_OK){
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	1d9a      	adds	r2, r3, #6
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	889b      	ldrh	r3, [r3, #4]
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4610      	mov	r0, r2
 8008a52:	f7ff fb02 	bl	800805a <_GPSDriver_checkNMEAChecksum>
 8008a56:	4603      	mov	r3, r0
 8008a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d002      	beq.n	8008a6a <_GPSDriver_handleGPRMCSentence+0x34>
		return ret;
 8008a64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a68:	e16e      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}

	uint8_t*					it = nmeaSentenceString->sentenceString + sizeof(GPS_NMEA_GPGGA_PREFIX) + sizeof(',');
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	3306      	adds	r3, #6
 8008a6e:	3308      	adds	r3, #8
 8008a70:	623b      	str	r3, [r7, #32]

	//< ----- Parse fix time ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3306      	adds	r3, #6
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	8892      	ldrh	r2, [r2, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f107 0316 	add.w	r3, r7, #22
 8008a88:	212c      	movs	r1, #44	; 0x2c
 8008a8a:	6a38      	ldr	r0, [r7, #32]
 8008a8c:	f000 fb7e 	bl	800918c <findChar>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <_GPSDriver_handleGPRMCSentence+0x64>
		return GPSDriver_Status_NMEASentenceError;
 8008a96:	2304      	movs	r3, #4
 8008a98:	e156      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseTime(it, tmp_u16, &pSelf->partialGPSData.dateTime)) != GPSDriver_Status_OK){
 8008a9a:	8af9      	ldrh	r1, [r7, #22]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3320      	adds	r3, #32
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6a38      	ldr	r0, [r7, #32]
 8008aa4:	f7ff fb2f 	bl	8008106 <_GPSDriver_parseTime>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <_GPSDriver_handleGPRMCSentence+0x86>
		return ret;
 8008ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aba:	e145      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(',');
 8008abc:	8afb      	ldrh	r3, [r7, #22]
 8008abe:	3304      	adds	r3, #4
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	623b      	str	r3, [r7, #32]

	//< ----- Parse status (Active/Void) ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	3306      	adds	r3, #6
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	8892      	ldrh	r2, [r2, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	f107 0316 	add.w	r3, r7, #22
 8008adc:	212c      	movs	r1, #44	; 0x2c
 8008ade:	6a38      	ldr	r0, [r7, #32]
 8008ae0:	f000 fb54 	bl	800918c <findChar>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <_GPSDriver_handleGPRMCSentence+0xb8>
		return GPSDriver_Status_NMEASentenceError;
 8008aea:	2304      	movs	r3, #4
 8008aec:	e12c      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(','); //< ignore field
 8008aee:	8afb      	ldrh	r3, [r7, #22]
 8008af0:	3304      	adds	r3, #4
 8008af2:	6a3a      	ldr	r2, [r7, #32]
 8008af4:	4413      	add	r3, r2
 8008af6:	623b      	str	r3, [r7, #32]

	//< ----- Parse latitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	3306      	adds	r3, #6
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	8892      	ldrh	r2, [r2, #4]
 8008b00:	4413      	add	r3, r2
 8008b02:	461a      	mov	r2, r3
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	f107 0316 	add.w	r3, r7, #22
 8008b0e:	212c      	movs	r1, #44	; 0x2c
 8008b10:	6a38      	ldr	r0, [r7, #32]
 8008b12:	f000 fb3b 	bl	800918c <findChar>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d001      	beq.n	8008b20 <_GPSDriver_handleGPRMCSentence+0xea>
		return GPSDriver_Status_NMEASentenceError;
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	e113      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseLatitude(it, tmp_u16 + 2/*comma and N/S*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8008b20:	8afb      	ldrh	r3, [r7, #22]
 8008b22:	3302      	adds	r3, #2
 8008b24:	b299      	uxth	r1, r3
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	3320      	adds	r3, #32
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	6a38      	ldr	r0, [r7, #32]
 8008b2e:	f7ff fc14 	bl	800835a <_GPSDriver_parseLatitude>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <_GPSDriver_handleGPRMCSentence+0x110>
		return ret;
 8008b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b44:	e100      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}

	it += tmp_u16 + sizeof(',');
 8008b46:	8afb      	ldrh	r3, [r7, #22]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	6a3a      	ldr	r2, [r7, #32]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	623b      	str	r3, [r7, #32]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	3306      	adds	r3, #6
 8008b54:	68ba      	ldr	r2, [r7, #8]
 8008b56:	8892      	ldrh	r2, [r2, #4]
 8008b58:	4413      	add	r3, r2
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	b29a      	uxth	r2, r3
 8008b62:	f107 0316 	add.w	r3, r7, #22
 8008b66:	212c      	movs	r1, #44	; 0x2c
 8008b68:	6a38      	ldr	r0, [r7, #32]
 8008b6a:	f000 fb0f 	bl	800918c <findChar>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d001      	beq.n	8008b78 <_GPSDriver_handleGPRMCSentence+0x142>
		return GPSDriver_Status_NMEASentenceError;
 8008b74:	2304      	movs	r3, #4
 8008b76:	e0e7      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(','); //< N/S and comma
 8008b78:	8afb      	ldrh	r3, [r7, #22]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	6a3a      	ldr	r2, [r7, #32]
 8008b7e:	4413      	add	r3, r2
 8008b80:	623b      	str	r3, [r7, #32]

	//< ----- Parse longitude ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	3306      	adds	r3, #6
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	8892      	ldrh	r2, [r2, #4]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	f107 0316 	add.w	r3, r7, #22
 8008b98:	212c      	movs	r1, #44	; 0x2c
 8008b9a:	6a38      	ldr	r0, [r7, #32]
 8008b9c:	f000 faf6 	bl	800918c <findChar>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d001      	beq.n	8008baa <_GPSDriver_handleGPRMCSentence+0x174>
		return GPSDriver_Status_NMEASentenceError;
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	e0ce      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseLongitude(it, tmp_u16 + 2/*comma and E/W*/, &pSelf->partialGPSData)) != GPSDriver_Status_OK){
 8008baa:	8afb      	ldrh	r3, [r7, #22]
 8008bac:	3302      	adds	r3, #2
 8008bae:	b299      	uxth	r1, r3
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	3320      	adds	r3, #32
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	6a38      	ldr	r0, [r7, #32]
 8008bb8:	f7ff fc39 	bl	800842e <_GPSDriver_parseLongitude>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008bc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <_GPSDriver_handleGPRMCSentence+0x19a>
		return ret;
 8008bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bce:	e0bb      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}

	it += tmp_u16 + sizeof(',');
 8008bd0:	8afb      	ldrh	r3, [r7, #22]
 8008bd2:	3304      	adds	r3, #4
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	623b      	str	r3, [r7, #32]
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3306      	adds	r3, #6
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	8892      	ldrh	r2, [r2, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	461a      	mov	r2, r3
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	f107 0316 	add.w	r3, r7, #22
 8008bf0:	212c      	movs	r1, #44	; 0x2c
 8008bf2:	6a38      	ldr	r0, [r7, #32]
 8008bf4:	f000 faca 	bl	800918c <findChar>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <_GPSDriver_handleGPRMCSentence+0x1cc>
		return GPSDriver_Status_NMEASentenceError;
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e0a2      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(','); //< comma and E/W
 8008c02:	8afb      	ldrh	r3, [r7, #22]
 8008c04:	3304      	adds	r3, #4
 8008c06:	6a3a      	ldr	r2, [r7, #32]
 8008c08:	4413      	add	r3, r2
 8008c0a:	623b      	str	r3, [r7, #32]


	//< ----- Parse speed over the ground in knots ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	3306      	adds	r3, #6
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	8892      	ldrh	r2, [r2, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	461a      	mov	r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	f107 0316 	add.w	r3, r7, #22
 8008c22:	212c      	movs	r1, #44	; 0x2c
 8008c24:	6a38      	ldr	r0, [r7, #32]
 8008c26:	f000 fab1 	bl	800918c <findChar>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <_GPSDriver_handleGPRMCSentence+0x1fe>
		return GPSDriver_Status_NMEASentenceError;
 8008c30:	2304      	movs	r3, #4
 8008c32:	e089      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.speed)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 8008c34:	8af9      	ldrh	r1, [r7, #22]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3348      	adds	r3, #72	; 0x48
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	6a38      	ldr	r0, [r7, #32]
 8008c3e:	f7ff fc60 	bl	8008502 <_GPSDriver_parseFixedPoint>
 8008c42:	4603      	mov	r3, r0
 8008c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <_GPSDriver_handleGPRMCSentence+0x220>
		return ret;
 8008c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c54:	e078      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	pSelf->partialGPSData.speed = FixedPoint_a_mult_b(pSelf->partialGPSData.speed, GPS_KNOT_TO_KPH_FACTOR, GPS_NMEA_FIXED_POINT_FRACTIONAL_BITS);
 8008c56:	f107 0018 	add.w	r0, r7, #24
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008c62:	f44f 7255 	mov.w	r2, #852	; 0x354
 8008c66:	2101      	movs	r1, #1
 8008c68:	f7fe fbbe 	bl	80073e8 <FixedPoint_constrDecimalFrac>
 8008c6c:	68fc      	ldr	r4, [r7, #12]
 8008c6e:	4638      	mov	r0, r7
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	230c      	movs	r3, #12
 8008c74:	9301      	str	r3, [sp, #4]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	3248      	adds	r2, #72	; 0x48
 8008c7e:	ca06      	ldmia	r2, {r1, r2}
 8008c80:	f7fe fbeb 	bl	800745a <FixedPoint_a_mult_b>
 8008c84:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8008c88:	463a      	mov	r2, r7
 8008c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008c8e:	e883 0003 	stmia.w	r3, {r0, r1}

	it += tmp_u16 + sizeof(',');
 8008c92:	8afb      	ldrh	r3, [r7, #22]
 8008c94:	3304      	adds	r3, #4
 8008c96:	6a3a      	ldr	r2, [r7, #32]
 8008c98:	4413      	add	r3, r2
 8008c9a:	623b      	str	r3, [r7, #32]

	//< ----- Parse track angle in degrees ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3306      	adds	r3, #6
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	8892      	ldrh	r2, [r2, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	f107 0316 	add.w	r3, r7, #22
 8008cb2:	212c      	movs	r1, #44	; 0x2c
 8008cb4:	6a38      	ldr	r0, [r7, #32]
 8008cb6:	f000 fa69 	bl	800918c <findChar>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <_GPSDriver_handleGPRMCSentence+0x28e>
		return GPSDriver_Status_NMEASentenceError;
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	e041      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseFixedPoint(it, tmp_u16, &pSelf->partialGPSData.speed)) != GPSDriver_Status_OK){ //< Horizontal dilution of position
 8008cc4:	8af9      	ldrh	r1, [r7, #22]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3348      	adds	r3, #72	; 0x48
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6a38      	ldr	r0, [r7, #32]
 8008cce:	f7ff fc18 	bl	8008502 <_GPSDriver_parseFixedPoint>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d002      	beq.n	8008ce6 <_GPSDriver_handleGPRMCSentence+0x2b0>
		return ret;
 8008ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ce4:	e030      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(',');
 8008ce6:	8afb      	ldrh	r3, [r7, #22]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	4413      	add	r3, r2
 8008cee:	623b      	str	r3, [r7, #32]

	//< ----- Parse date ----- >//
	if (findChar(it, GPS_NMEA_DATA_SEPARATOR_SIGN, nmeaSentenceString->sentenceString + nmeaSentenceString->sentenceLength - it, &tmp_u16) != StringOperations_Status_OK){
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	3306      	adds	r3, #6
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	8892      	ldrh	r2, [r2, #4]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6a3b      	ldr	r3, [r7, #32]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	f107 0316 	add.w	r3, r7, #22
 8008d06:	212c      	movs	r1, #44	; 0x2c
 8008d08:	6a38      	ldr	r0, [r7, #32]
 8008d0a:	f000 fa3f 	bl	800918c <findChar>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <_GPSDriver_handleGPRMCSentence+0x2e2>
		return GPSDriver_Status_NMEASentenceError;
 8008d14:	2304      	movs	r3, #4
 8008d16:	e017      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	if ((ret = _GPSDriver_parseDate(it, tmp_u16, &pSelf->partialGPSData.dateTime)) != GPSDriver_Status_OK){
 8008d18:	8af9      	ldrh	r1, [r7, #22]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3320      	adds	r3, #32
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6a38      	ldr	r0, [r7, #32]
 8008d22:	f7ff fa84 	bl	800822e <_GPSDriver_parseDate>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <_GPSDriver_handleGPRMCSentence+0x304>
		return ret;
 8008d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d38:	e006      	b.n	8008d48 <_GPSDriver_handleGPRMCSentence+0x312>
	}
	it += tmp_u16 + sizeof(',');
 8008d3a:	8afb      	ldrh	r3, [r7, #22]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	6a3a      	ldr	r2, [r7, #32]
 8008d40:	4413      	add	r3, r2
 8008d42:	623b      	str	r3, [r7, #32]

	return ret;
 8008d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	372c      	adds	r7, #44	; 0x2c
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd90      	pop	{r4, r7, pc}

08008d50 <GPSReceiver_start>:
	}

	return GPSReceiver_Status_OK;
}

GPSReceiver_Status_TypeDef GPSReceiver_start(GPSReceiver_TypeDef* pSelf){
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]

	if (pSelf == NULL){
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <GPSReceiver_start+0x12>
		return GPSReceiver_Status_NullPointerError;
 8008d5e:	2302      	movs	r3, #2
 8008d60:	e00d      	b.n	8008d7e <GPSReceiver_start+0x2e>
	}

	if (GPSDriver_startReceiver(pSelf->pGPSDriver) != GPSDriver_Status_OK){
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	f244 4314 	movw	r3, #17428	; 0x4414
 8008d68:	4413      	add	r3, r2
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fd1d 	bl	80077ac <GPSDriver_startReceiver>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <GPSReceiver_start+0x2c>
		return GPSReceiver_Status_GPSDriverError;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e000      	b.n	8008d7e <GPSReceiver_start+0x2e>
	}

	return GPSReceiver_Status_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <GPSReceiver_pullLastFrame>:
	}

	return GPSReceiver_Status_OK;
}

GPSReceiver_Status_TypeDef GPSReceiver_pullLastFrame(GPSReceiver_TypeDef* pSelf, GPSData_TypeDef* pRetGPSData){
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetGPSData == NULL){
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <GPSReceiver_pullLastFrame+0x16>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <GPSReceiver_pullLastFrame+0x1a>
		return GPSReceiver_Status_NullPointerError;
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e00d      	b.n	8008dbc <GPSReceiver_pullLastFrame+0x36>
	}

	if (FIFOQueue_dequeue(&pSelf->receivedDataFIFO, pRetGPSData) != FIFO_Status_OK){
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	f244 4304 	movw	r3, #17412	; 0x4404
 8008da6:	4413      	add	r3, r2
 8008da8:	6839      	ldr	r1, [r7, #0]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fe f826 	bl	8006dfc <FIFOQueue_dequeue>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <GPSReceiver_pullLastFrame+0x34>
		return GPSReceiver_Status_Error;
 8008db6:	2304      	movs	r3, #4
 8008db8:	e000      	b.n	8008dbc <GPSReceiver_pullLastFrame+0x36>
	}

	return GPSReceiver_Status_OK;
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <LedDriver_init>:
 *      Author: Michal Kowalik
 */

#include "user/led_driver.h"

LedDriver_Status_TypeDef LedDriver_init(LedDriver_TypeDef* pSelf, LedDriver_Port_TypeDef* port, LedDriver_Pin_TypeDef* pin){
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
	if (pSelf->state != LedDriver_State_UnInitialized){
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d001      	beq.n	8008ddc <LedDriver_init+0x18>
		return LedDriver_Status_Errror;
 8008dd8:	2302      	movs	r3, #2
 8008dda:	e01b      	b.n	8008e14 <LedDriver_init+0x50>
	}

	pSelf->port				= port;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	605a      	str	r2, [r3, #4]
	pSelf->pin				= pin;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	609a      	str	r2, [r3, #8]
	pSelf->onTimeMs			= 0;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	60da      	str	r2, [r3, #12]
	pSelf->offTimeMs		= 0;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	611a      	str	r2, [r3, #16]
	pSelf->onOffTimeCounter	= 0;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6858      	ldr	r0, [r3, #4]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	2201      	movs	r2, #1
 8008e06:	4619      	mov	r1, r3
 8008e08:	f7f8 fc64 	bl	80016d4 <HAL_GPIO_WritePin>

	pSelf->state = LedDriver_State_Off;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	701a      	strb	r2, [r3, #0]

	return LedDriver_Status_OK;
 8008e12:	2300      	movs	r3, #0

}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <LedDriver_1msElapsedCallbackHandler>:

	return LedDriver_Status_OK;

}

LedDriver_Status_TypeDef LedDriver_1msElapsedCallbackHandler(LedDriver_TypeDef* pSelf){
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]

	if (pSelf->state != LedDriver_State_OnBlinking){
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d001      	beq.n	8008e30 <LedDriver_1msElapsedCallbackHandler+0x14>
		return LedDriver_Status_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e02a      	b.n	8008e86 <LedDriver_1msElapsedCallbackHandler+0x6a>
	}

	pSelf->onOffTimeCounter++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	615a      	str	r2, [r3, #20]

	if (pSelf->onOffTimeCounter == pSelf->onTimeMs){
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695a      	ldr	r2, [r3, #20]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d109      	bne.n	8008e5a <LedDriver_1msElapsedCallbackHandler+0x3e>

		HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_SET);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6858      	ldr	r0, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	881b      	ldrh	r3, [r3, #0]
 8008e50:	2201      	movs	r2, #1
 8008e52:	4619      	mov	r1, r3
 8008e54:	f7f8 fc3e 	bl	80016d4 <HAL_GPIO_WritePin>
 8008e58:	e014      	b.n	8008e84 <LedDriver_1msElapsedCallbackHandler+0x68>

	} else if (pSelf->onOffTimeCounter == pSelf->onTimeMs + pSelf->offTimeMs){
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	695a      	ldr	r2, [r3, #20]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68d9      	ldr	r1, [r3, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	440b      	add	r3, r1
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d10b      	bne.n	8008e84 <LedDriver_1msElapsedCallbackHandler+0x68>

		HAL_GPIO_WritePin(pSelf->port, *pSelf->pin, GPIO_PIN_RESET);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6858      	ldr	r0, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	2200      	movs	r2, #0
 8008e78:	4619      	mov	r1, r3
 8008e7a:	f7f8 fc2b 	bl	80016d4 <HAL_GPIO_WritePin>
		pSelf->onOffTimeCounter = 0;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	615a      	str	r2, [r3, #20]

	}

	return LedDriver_Status_OK;
 8008e84:	2300      	movs	r3, #0

}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <MSTimerDriver_init>:
 */

#include "user/ms_timer_driver.h"
#include "stm32f7xx_hal.h"

MSTimerDriver_Status_TypeDef MSTimerDriver_init(volatile MSTimerDriver_TypeDef* pSelf){
 8008e8e:	b480      	push	{r7}
 8008e90:	b083      	sub	sp, #12
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]

	if (pSelf->state != MSTimerDriver_State_NotInitialised){
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d001      	beq.n	8008ea4 <MSTimerDriver_init+0x16>
		return MSTimerDriver_Status_Error;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e003      	b.n	8008eac <MSTimerDriver_init+0x1e>
	}

	pSelf->state = MSTimerDriver_State_Idle;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	701a      	strb	r2, [r3, #0]

	return MSTimerDriver_Status_OK;
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <MSTimerDriver_getMSTime>:

	return MSTimerDriver_Status_OK;

}

MSTimerDriver_Status_TypeDef MSTimerDriver_getMSTime(volatile MSTimerDriver_TypeDef* pSelf, uint32_t* pRetTime){
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]

	if (pSelf->state == MSTimerDriver_State_NotInitialised){
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <MSTimerDriver_getMSTime+0x18>
		return MSTimerDriver_State_NotInitialised;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	e01d      	b.n	8008f0c <MSTimerDriver_getMSTime+0x54>
	}

	switch (pSelf->state){
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d002      	beq.n	8008ee0 <MSTimerDriver_getMSTime+0x28>
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d004      	beq.n	8008ee8 <MSTimerDriver_getMSTime+0x30>
 8008ede:	e00b      	b.n	8008ef8 <MSTimerDriver_getMSTime+0x40>
	case MSTimerDriver_State_Idle:
		*pRetTime = 0;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	601a      	str	r2, [r3, #0]
		break;
 8008ee6:	e010      	b.n	8008f0a <MSTimerDriver_getMSTime+0x52>
	case MSTimerDriver_State_Suspended:
		*pRetTime = pSelf->uiStopTickValue - pSelf->uiStartTickValue;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	689a      	ldr	r2, [r3, #8]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	1ad2      	subs	r2, r2, r3
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	601a      	str	r2, [r3, #0]
		break;
 8008ef6:	e008      	b.n	8008f0a <MSTimerDriver_getMSTime+0x52>
	case MSTimerDriver_State_Running:
	default:
		*pRetTime = HAL_GetTick() - pSelf->uiStartTickValue;
 8008ef8:	f7f7 fbcc 	bl	8000694 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	1ad2      	subs	r2, r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	601a      	str	r2, [r3, #0]
		break;
 8008f08:	bf00      	nop
	}

	return MSTimerDriver_Status_OK;
 8008f0a:	2300      	movs	r3, #0

}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <RTCDriver_HALInit>:
#include "user/rtc_driver.h"
#include "rtc.h"



static RTCDriver_Status_TypeDef RTCDriver_HALInit(RTCDriver_TypeDef* pSelf){
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]

	if (pSelf->pRTCHandler->State != HAL_RTC_STATE_RESET){
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	7f5b      	ldrb	r3, [r3, #29]
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d001      	beq.n	8008f2c <RTCDriver_HALInit+0x18>
		return RTCDriver_Status_Error;
 8008f28:	2305      	movs	r3, #5
 8008f2a:	e026      	b.n	8008f7a <RTCDriver_HALInit+0x66>
	}

	pSelf->pRTCHandler->Instance = RTC;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a14      	ldr	r2, [pc, #80]	; (8008f84 <RTCDriver_HALInit+0x70>)
 8008f32:	601a      	str	r2, [r3, #0]
	pSelf->pRTCHandler->Init.HourFormat = RTC_HOURFORMAT_24;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	605a      	str	r2, [r3, #4]
	pSelf->pRTCHandler->Init.AsynchPrediv = 127;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	227f      	movs	r2, #127	; 0x7f
 8008f42:	609a      	str	r2, [r3, #8]
	pSelf->pRTCHandler->Init.SynchPrediv = 255;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	22ff      	movs	r2, #255	; 0xff
 8008f4a:	60da      	str	r2, [r3, #12]
	pSelf->pRTCHandler->Init.OutPut = RTC_OUTPUT_DISABLE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2200      	movs	r2, #0
 8008f52:	611a      	str	r2, [r3, #16]
	pSelf->pRTCHandler->Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	615a      	str	r2, [r3, #20]
	pSelf->pRTCHandler->Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2200      	movs	r2, #0
 8008f62:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(pSelf->pRTCHandler) != HAL_OK)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7f9 fcc7 	bl	80028fc <HAL_RTC_Init>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d001      	beq.n	8008f78 <RTCDriver_HALInit+0x64>
	{
		return RTCDriver_Status_Error;
 8008f74:	2305      	movs	r3, #5
 8008f76:	e000      	b.n	8008f7a <RTCDriver_HALInit+0x66>
	}
	return RTCDriver_Status_OK;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40002800 	.word	0x40002800

08008f88 <RTCDriver_HALRestoreTimeAndDate>:

static RTCDriver_Status_TypeDef RTCDriver_HALRestoreTimeAndDate(RTCDriver_TypeDef* pSelf ){
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b08a      	sub	sp, #40	; 0x28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]

	if (pSelf->pRTCHandler->State != HAL_RTC_STATE_READY){
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	7f5b      	ldrb	r3, [r3, #29]
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d001      	beq.n	8008fa0 <RTCDriver_HALRestoreTimeAndDate+0x18>
		return RTCDriver_Status_NotInitialisedError;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	e047      	b.n	8009030 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	for (uint8_t i=0; i<backupRegistersCount; i++){
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fa6:	e018      	b.n	8008fda <RTCDriver_HALRestoreTimeAndDate+0x52>
		if (HAL_RTCEx_BKUPRead(pSelf->pRTCHandler, backupRegistersIndexes[i]) != backupRegistersValues[i]){
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fb0:	4a21      	ldr	r2, [pc, #132]	; (8009038 <RTCDriver_HALRestoreTimeAndDate+0xb0>)
 8008fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	f7f9 ffda 	bl	8002f70 <HAL_RTCEx_BKUPRead>
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	; (800903c <RTCDriver_HALRestoreTimeAndDate+0xb4>)
 8008fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fc8:	4299      	cmp	r1, r3
 8008fca:	d001      	beq.n	8008fd0 <RTCDriver_HALRestoreTimeAndDate+0x48>
			return RTCDriver_Status_TimeAndDateNotRestoredError;
 8008fcc:	2302      	movs	r3, #2
 8008fce:	e02f      	b.n	8009030 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 8008fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fda:	2203      	movs	r2, #3
 8008fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d3e1      	bcc.n	8008fa8 <RTCDriver_HALRestoreTimeAndDate+0x20>
		}
	}

	RTC_TimeTypeDef sTime = {0};
 8008fe4:	f107 030c 	add.w	r3, r7, #12
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	605a      	str	r2, [r3, #4]
 8008fee:	609a      	str	r2, [r3, #8]
 8008ff0:	60da      	str	r2, [r3, #12]
 8008ff2:	611a      	str	r2, [r3, #16]
 8008ff4:	615a      	str	r2, [r3, #20]
	RTC_DateTypeDef sDate = {0};
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	60bb      	str	r3, [r7, #8]
	if (HAL_RTC_GetTime(pSelf->pRTCHandler, &sTime, RTC_FORMAT_BIN) != HAL_OK){
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f107 010c 	add.w	r1, r7, #12
 8009002:	2200      	movs	r2, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f7f9 fdb3 	bl	8002b70 <HAL_RTC_GetTime>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <RTCDriver_HALRestoreTimeAndDate+0x8c>
		return RTCDriver_Status_TimeAndDateNotRestoredError;
 8009010:	2302      	movs	r3, #2
 8009012:	e00d      	b.n	8009030 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	if (HAL_RTC_GetDate(pSelf->pRTCHandler, &sDate, RTC_FORMAT_BIN) != HAL_OK){
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f107 0108 	add.w	r1, r7, #8
 800901c:	2200      	movs	r2, #0
 800901e:	4618      	mov	r0, r3
 8009020:	f7f9 feac 	bl	8002d7c <HAL_RTC_GetDate>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <RTCDriver_HALRestoreTimeAndDate+0xa6>
		return RTCDriver_Status_TimeAndDateNotRestoredError;
 800902a:	2302      	movs	r3, #2
 800902c:	e000      	b.n	8009030 <RTCDriver_HALRestoreTimeAndDate+0xa8>
	}

	return RTCDriver_Status_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3728      	adds	r7, #40	; 0x28
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	0800aa24 	.word	0x0800aa24
 800903c:	0800aa30 	.word	0x0800aa30

08009040 <RTCDriver_HALSetTimeAndDate>:

static RTCDriver_Status_TypeDef RTCDriver_HALSetTimeAndDate(RTCDriver_TypeDef* pSelf, RTC_TimeTypeDef* pTime, RTC_DateTypeDef* pDate){
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]


	if (HAL_RTC_SetTime(pSelf->pRTCHandler, pTime, RTC_FORMAT_BIN) != HAL_OK) {
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2200      	movs	r2, #0
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	4618      	mov	r0, r3
 8009056:	f7f9 fccd 	bl	80029f4 <HAL_RTC_SetTime>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d001      	beq.n	8009064 <RTCDriver_HALSetTimeAndDate+0x24>
		return RTCDriver_Status_Error;
 8009060:	2305      	movs	r3, #5
 8009062:	e027      	b.n	80090b4 <RTCDriver_HALSetTimeAndDate+0x74>
	}

	if (HAL_RTC_SetDate(pSelf->pRTCHandler, pDate, RTC_FORMAT_BIN) != HAL_OK) {
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2200      	movs	r2, #0
 800906a:	6879      	ldr	r1, [r7, #4]
 800906c:	4618      	mov	r0, r3
 800906e:	f7f9 fddd 	bl	8002c2c <HAL_RTC_SetDate>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	d001      	beq.n	800907c <RTCDriver_HALSetTimeAndDate+0x3c>
		return RTCDriver_Status_Error;
 8009078:	2305      	movs	r3, #5
 800907a:	e01b      	b.n	80090b4 <RTCDriver_HALSetTimeAndDate+0x74>
	}

	HAL_PWR_EnableBkUpAccess();
 800907c:	f7f8 fb44 	bl	8001708 <HAL_PWR_EnableBkUpAccess>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]
 8009084:	e00f      	b.n	80090a6 <RTCDriver_HALSetTimeAndDate+0x66>
		HAL_RTCEx_BKUPWrite(pSelf->pRTCHandler, backupRegistersIndexes[i], backupRegistersValues[i]);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	7dfb      	ldrb	r3, [r7, #23]
 800908c:	4a0b      	ldr	r2, [pc, #44]	; (80090bc <RTCDriver_HALSetTimeAndDate+0x7c>)
 800908e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009092:	7dfb      	ldrb	r3, [r7, #23]
 8009094:	4a0a      	ldr	r2, [pc, #40]	; (80090c0 <RTCDriver_HALSetTimeAndDate+0x80>)
 8009096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800909a:	461a      	mov	r2, r3
 800909c:	f7f9 ff4e 	bl	8002f3c <HAL_RTCEx_BKUPWrite>
	for (uint8_t i=0; i<backupRegistersCount; i++){
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	3301      	adds	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
 80090a6:	2203      	movs	r2, #3
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d3eb      	bcc.n	8009086 <RTCDriver_HALSetTimeAndDate+0x46>
	}
	HAL_PWR_DisableBkUpAccess();
 80090ae:	f7f8 fb3b 	bl	8001728 <HAL_PWR_DisableBkUpAccess>

	return RTCDriver_Status_OK;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	0800aa24 	.word	0x0800aa24
 80090c0:	0800aa30 	.word	0x0800aa30

080090c4 <RTCDriver_init>:


RTCDriver_Status_TypeDef RTCDriver_init(RTCDriver_TypeDef* pSelf, RTC_HandleTypeDef* pRTCHandler){
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b08a      	sub	sp, #40	; 0x28
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]

	if (pSelf->state != RTCDriver_State_UnInitialized){
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	791b      	ldrb	r3, [r3, #4]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <RTCDriver_init+0x16>
		return RTCDriver_Status_Error;
 80090d6:	2305      	movs	r3, #5
 80090d8:	e054      	b.n	8009184 <RTCDriver_init+0xc0>
	}

	if (pRTCHandler == NULL){
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <RTCDriver_init+0x20>
		return RTCDriver_Status_Error;
 80090e0:	2305      	movs	r3, #5
 80090e2:	e04f      	b.n	8009184 <RTCDriver_init+0xc0>
	}

	RTCDriver_Status_TypeDef ret = RTCDriver_Status_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	pSelf->pRTCHandler = pRTCHandler;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	601a      	str	r2, [r3, #0]

	if ((ret = RTCDriver_HALInit(pSelf)) != RTCDriver_Status_OK){
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ff0f 	bl	8008f14 <RTCDriver_HALInit>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <RTCDriver_init+0x46>
		return ret;
 8009104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009108:	e03c      	b.n	8009184 <RTCDriver_init+0xc0>
	}

	ret = RTCDriver_HALRestoreTimeAndDate(pSelf);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f7ff ff3c 	bl	8008f88 <RTCDriver_HALRestoreTimeAndDate>
 8009110:	4603      	mov	r3, r0
 8009112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != RTCDriver_Status_OK && ret != RTCDriver_Status_TimeAndDateNotRestoredError){
 8009116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800911a:	2b00      	cmp	r3, #0
 800911c:	d006      	beq.n	800912c <RTCDriver_init+0x68>
 800911e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009122:	2b02      	cmp	r3, #2
 8009124:	d002      	beq.n	800912c <RTCDriver_init+0x68>
		return ret;
 8009126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800912a:	e02b      	b.n	8009184 <RTCDriver_init+0xc0>
	}
	if (ret == RTCDriver_Status_TimeAndDateNotRestoredError){
 800912c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009130:	2b02      	cmp	r3, #2
 8009132:	d123      	bne.n	800917c <RTCDriver_init+0xb8>

		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;

		sTime.Hours = 23;
 8009134:	2317      	movs	r3, #23
 8009136:	733b      	strb	r3, [r7, #12]
		sTime.Minutes = 56;
 8009138:	2338      	movs	r3, #56	; 0x38
 800913a:	737b      	strb	r3, [r7, #13]
		sTime.Seconds = 0;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8009140:	2300      	movs	r3, #0
 8009142:	61fb      	str	r3, [r7, #28]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8009144:	2300      	movs	r3, #0
 8009146:	623b      	str	r3, [r7, #32]
		sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8009148:	2301      	movs	r3, #1
 800914a:	723b      	strb	r3, [r7, #8]
		sDate.Month = RTC_MONTH_APRIL;
 800914c:	2304      	movs	r3, #4
 800914e:	727b      	strb	r3, [r7, #9]
		sDate.Date = 17;
 8009150:	2311      	movs	r3, #17
 8009152:	72bb      	strb	r3, [r7, #10]
		sDate.Year = (2019-RTC_DRIVER_YEAR_MIN_VALUE);
 8009154:	2327      	movs	r3, #39	; 0x27
 8009156:	72fb      	strb	r3, [r7, #11]

		if ((ret = RTCDriver_HALSetTimeAndDate(pSelf, &sTime, &sDate)) != RTCDriver_Status_OK){
 8009158:	f107 0208 	add.w	r2, r7, #8
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff ff6c 	bl	8009040 <RTCDriver_HALSetTimeAndDate>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800916e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <RTCDriver_init+0xb8>
			return ret;
 8009176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800917a:	e003      	b.n	8009184 <RTCDriver_init+0xc0>
		}
	}

	pSelf->state = RTCDriver_State_Ready;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	711a      	strb	r2, [r3, #4]

	return RTCDriver_Status_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3728      	adds	r7, #40	; 0x28
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <findChar>:

#include <stddef.h>
#include <stdio.h>
#include "user/string_operations.h"

StringOperations_Status_TypeDef findChar(uint8_t* buffer, uint8_t charToFind, uint16_t bufferSize, uint16_t* pRetIndex){
 800918c:	b480      	push	{r7}
 800918e:	b087      	sub	sp, #28
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	607b      	str	r3, [r7, #4]
 8009196:	460b      	mov	r3, r1
 8009198:	72fb      	strb	r3, [r7, #11]
 800919a:	4613      	mov	r3, r2
 800919c:	813b      	strh	r3, [r7, #8]

	if (buffer == NULL || pRetIndex == NULL){
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d002      	beq.n	80091aa <findChar+0x1e>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <findChar+0x22>
		return StringOperations_Status_OK;
 80091aa:	2300      	movs	r3, #0
 80091ac:	e019      	b.n	80091e2 <findChar+0x56>
	}

	for (uint16_t i=0; i<bufferSize; i++){
 80091ae:	2300      	movs	r3, #0
 80091b0:	82fb      	strh	r3, [r7, #22]
 80091b2:	e00e      	b.n	80091d2 <findChar+0x46>

		if (buffer[i] == charToFind){
 80091b4:	8afb      	ldrh	r3, [r7, #22]
 80091b6:	68fa      	ldr	r2, [r7, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	7afa      	ldrb	r2, [r7, #11]
 80091be:	429a      	cmp	r2, r3
 80091c0:	d104      	bne.n	80091cc <findChar+0x40>
			*pRetIndex = i;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	8afa      	ldrh	r2, [r7, #22]
 80091c6:	801a      	strh	r2, [r3, #0]
			return StringOperations_Status_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	e00a      	b.n	80091e2 <findChar+0x56>
	for (uint16_t i=0; i<bufferSize; i++){
 80091cc:	8afb      	ldrh	r3, [r7, #22]
 80091ce:	3301      	adds	r3, #1
 80091d0:	82fb      	strh	r3, [r7, #22]
 80091d2:	8afa      	ldrh	r2, [r7, #22]
 80091d4:	893b      	ldrh	r3, [r7, #8]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d3ec      	bcc.n	80091b4 <findChar+0x28>
		}
	}

	*pRetIndex = bufferSize;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	893a      	ldrh	r2, [r7, #8]
 80091de:	801a      	strh	r2, [r3, #0]
	return StringOperations_Status_CharNotFoundError;
 80091e0:	2303      	movs	r3, #3
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <stringEqual>:

StringOperations_Status_TypeDef stringEqual(uint8_t* stringA, uint8_t* stringB, uint16_t length){
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	60f8      	str	r0, [r7, #12]
 80091f6:	60b9      	str	r1, [r7, #8]
 80091f8:	4613      	mov	r3, r2
 80091fa:	80fb      	strh	r3, [r7, #6]

	if (stringA == NULL || stringB == NULL){
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d002      	beq.n	8009208 <stringEqual+0x1a>
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <stringEqual+0x1e>
		return StringOperations_Status_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	e016      	b.n	800923a <stringEqual+0x4c>
	}

	for (uint16_t i=0; i<length; i++){
 800920c:	2300      	movs	r3, #0
 800920e:	82fb      	strh	r3, [r7, #22]
 8009210:	e00e      	b.n	8009230 <stringEqual+0x42>
		if (stringA[i] != stringB[i]){
 8009212:	8afb      	ldrh	r3, [r7, #22]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	781a      	ldrb	r2, [r3, #0]
 800921a:	8afb      	ldrh	r3, [r7, #22]
 800921c:	68b9      	ldr	r1, [r7, #8]
 800921e:	440b      	add	r3, r1
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	429a      	cmp	r2, r3
 8009224:	d001      	beq.n	800922a <stringEqual+0x3c>
			return StringOperations_Status_NotEqual;
 8009226:	2301      	movs	r3, #1
 8009228:	e007      	b.n	800923a <stringEqual+0x4c>
	for (uint16_t i=0; i<length; i++){
 800922a:	8afb      	ldrh	r3, [r7, #22]
 800922c:	3301      	adds	r3, #1
 800922e:	82fb      	strh	r3, [r7, #22]
 8009230:	8afa      	ldrh	r2, [r7, #22]
 8009232:	88fb      	ldrh	r3, [r7, #6]
 8009234:	429a      	cmp	r2, r3
 8009236:	d3ec      	bcc.n	8009212 <stringEqual+0x24>
		}
	}

	return StringOperations_Status_OK;
 8009238:	2300      	movs	r3, #0

}
 800923a:	4618      	mov	r0, r3
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <stringToFixedPoint>:

StringOperations_Status_TypeDef stringToFixedPoint(uint8_t* sentence, uint16_t length, uint8_t decimalSeparator, uint8_t fractionalBits, FixedPoint* pRetFixedPoint){
 8009246:	b590      	push	{r4, r7, lr}
 8009248:	b08d      	sub	sp, #52	; 0x34
 800924a:	af02      	add	r7, sp, #8
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	4608      	mov	r0, r1
 8009250:	4611      	mov	r1, r2
 8009252:	461a      	mov	r2, r3
 8009254:	4603      	mov	r3, r0
 8009256:	817b      	strh	r3, [r7, #10]
 8009258:	460b      	mov	r3, r1
 800925a:	727b      	strb	r3, [r7, #9]
 800925c:	4613      	mov	r3, r2
 800925e:	723b      	strb	r3, [r7, #8]

	if (sentence == NULL || pRetFixedPoint == NULL){
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <stringToFixedPoint+0x26>
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <stringToFixedPoint+0x2a>
		return StringOperations_Status_NullPointerError;
 800926c:	2304      	movs	r3, #4
 800926e:	e060      	b.n	8009332 <stringToFixedPoint+0xec>
	}

	StringOperations_Status_TypeDef ret;
	uint16_t dotPosition;

	if ((ret = findChar(sentence, decimalSeparator, length, &dotPosition)) != StringOperations_Status_OK){
 8009270:	f107 031c 	add.w	r3, r7, #28
 8009274:	897a      	ldrh	r2, [r7, #10]
 8009276:	7a79      	ldrb	r1, [r7, #9]
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff ff87 	bl	800918c <findChar>
 800927e:	4603      	mov	r3, r0
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	7ffb      	ldrb	r3, [r7, #31]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d001      	beq.n	800928c <stringToFixedPoint+0x46>
		return ret;
 8009288:	7ffb      	ldrb	r3, [r7, #31]
 800928a:	e052      	b.n	8009332 <stringToFixedPoint+0xec>
	}

	if (dotPosition == length){
 800928c:	8bbb      	ldrh	r3, [r7, #28]
 800928e:	897a      	ldrh	r2, [r7, #10]
 8009290:	429a      	cmp	r2, r3
 8009292:	d101      	bne.n	8009298 <stringToFixedPoint+0x52>
		return StringOperations_Status_Error;
 8009294:	2305      	movs	r3, #5
 8009296:	e04c      	b.n	8009332 <stringToFixedPoint+0xec>
	}

	uint32_t	decimalPart;
	uint32_t	fractionalNumerator;
	uint32_t	fractionalDenominator = 1;
 8009298:	2301      	movs	r3, #1
 800929a:	627b      	str	r3, [r7, #36]	; 0x24

	if ((ret = string2UInt32(sentence, dotPosition, &decimalPart)) != StringOperations_Status_OK){
 800929c:	8bbb      	ldrh	r3, [r7, #28]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	f107 0218 	add.w	r2, r7, #24
 80092a4:	4619      	mov	r1, r3
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 f866 	bl	8009378 <string2UInt32>
 80092ac:	4603      	mov	r3, r0
 80092ae:	77fb      	strb	r3, [r7, #31]
 80092b0:	7ffb      	ldrb	r3, [r7, #31]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <stringToFixedPoint+0x74>
		return ret;
 80092b6:	7ffb      	ldrb	r3, [r7, #31]
 80092b8:	e03b      	b.n	8009332 <stringToFixedPoint+0xec>
	}
	if ((ret = string2UInt32(sentence + dotPosition + sizeof(decimalSeparator), length - dotPosition - sizeof(decimalSeparator), &fractionalNumerator)) != StringOperations_Status_OK){
 80092ba:	8bbb      	ldrh	r3, [r7, #28]
 80092bc:	3301      	adds	r3, #1
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	18d0      	adds	r0, r2, r3
 80092c2:	897b      	ldrh	r3, [r7, #10]
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	8bbb      	ldrh	r3, [r7, #28]
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	3b01      	subs	r3, #1
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f107 0214 	add.w	r2, r7, #20
 80092d6:	4619      	mov	r1, r3
 80092d8:	f000 f84e 	bl	8009378 <string2UInt32>
 80092dc:	4603      	mov	r3, r0
 80092de:	77fb      	strb	r3, [r7, #31]
 80092e0:	7ffb      	ldrb	r3, [r7, #31]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <stringToFixedPoint+0xa4>
		return ret;
 80092e6:	7ffb      	ldrb	r3, [r7, #31]
 80092e8:	e023      	b.n	8009332 <stringToFixedPoint+0xec>
	}

	for (uint32_t i=0; i<length - dotPosition - sizeof(decimalSeparator); i++){
 80092ea:	2300      	movs	r3, #0
 80092ec:	623b      	str	r3, [r7, #32]
 80092ee:	e008      	b.n	8009302 <stringToFixedPoint+0xbc>
		fractionalDenominator *= 10;
 80092f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i=0; i<length - dotPosition - sizeof(decimalSeparator); i++){
 80092fc:	6a3b      	ldr	r3, [r7, #32]
 80092fe:	3301      	adds	r3, #1
 8009300:	623b      	str	r3, [r7, #32]
 8009302:	897b      	ldrh	r3, [r7, #10]
 8009304:	8bba      	ldrh	r2, [r7, #28]
 8009306:	1a9b      	subs	r3, r3, r2
 8009308:	1e5a      	subs	r2, r3, #1
 800930a:	6a3b      	ldr	r3, [r7, #32]
 800930c:	429a      	cmp	r2, r3
 800930e:	d8ef      	bhi.n	80092f0 <stringToFixedPoint+0xaa>
	}

	*pRetFixedPoint = FixedPoint_constrDecimalFrac(decimalPart, fractionalNumerator, fractionalDenominator, fractionalBits);
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	4619      	mov	r1, r3
 8009314:	697a      	ldr	r2, [r7, #20]
 8009316:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8009318:	4638      	mov	r0, r7
 800931a:	7a3b      	ldrb	r3, [r7, #8]
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	f7fe f862 	bl	80073e8 <FixedPoint_constrDecimalFrac>
 8009324:	4622      	mov	r2, r4
 8009326:	463b      	mov	r3, r7
 8009328:	e893 0003 	ldmia.w	r3, {r0, r1}
 800932c:	e882 0003 	stmia.w	r2, {r0, r1}

	return StringOperations_Status_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	372c      	adds	r7, #44	; 0x2c
 8009336:	46bd      	mov	sp, r7
 8009338:	bd90      	pop	{r4, r7, pc}

0800933a <decChar2Uint8>:

StringOperations_Status_TypeDef decChar2Uint8(uint8_t c, uint8_t* pRetInt){
 800933a:	b480      	push	{r7}
 800933c:	b083      	sub	sp, #12
 800933e:	af00      	add	r7, sp, #0
 8009340:	4603      	mov	r3, r0
 8009342:	6039      	str	r1, [r7, #0]
 8009344:	71fb      	strb	r3, [r7, #7]

	if (pRetInt == NULL){
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <decChar2Uint8+0x16>
		return StringOperations_Status_NullPointerError;
 800934c:	2304      	movs	r3, #4
 800934e:	e00d      	b.n	800936c <decChar2Uint8+0x32>
	}
	if (c >= '0' && c <= '9'){
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b2f      	cmp	r3, #47	; 0x2f
 8009354:	d909      	bls.n	800936a <decChar2Uint8+0x30>
 8009356:	79fb      	ldrb	r3, [r7, #7]
 8009358:	2b39      	cmp	r3, #57	; 0x39
 800935a:	d806      	bhi.n	800936a <decChar2Uint8+0x30>
		*pRetInt = c - '0';
 800935c:	79fb      	ldrb	r3, [r7, #7]
 800935e:	3b30      	subs	r3, #48	; 0x30
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	701a      	strb	r2, [r3, #0]
		return StringOperations_Status_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <decChar2Uint8+0x32>
	}
	return StringOperations_Status_NotDecimalCharError;
 800936a:	2302      	movs	r3, #2
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <string2UInt32>:


StringOperations_Status_TypeDef string2UInt32(uint8_t* sentence, uint8_t length, uint32_t* pRetInt){
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]

	if (sentence == NULL || pRetInt == NULL){
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <string2UInt32+0x1a>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <string2UInt32+0x1e>
		return StringOperations_Status_NullPointerError;
 8009392:	2304      	movs	r3, #4
 8009394:	e038      	b.n	8009408 <string2UInt32+0x90>
	}

	StringOperations_Status_TypeDef ret;
	*pRetInt = 0;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	601a      	str	r2, [r3, #0]
	uint32_t multiplier = 1;
 800939c:	2301      	movs	r3, #1
 800939e:	617b      	str	r3, [r7, #20]

	for (int16_t i = length-1; i >= 0; i--){
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	3b01      	subs	r3, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	827b      	strh	r3, [r7, #18]
 80093aa:	e028      	b.n	80093fe <string2UInt32+0x86>
		uint8_t tmp;
		if ((ret = decChar2Uint8(*(sentence + i) * multiplier, &tmp)) != StringOperations_Status_OK){
 80093ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	781a      	ldrb	r2, [r3, #0]
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	fb12 f303 	smulbb	r3, r2, r3
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	f107 0210 	add.w	r2, r7, #16
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7ff ffb7 	bl	800933a <decChar2Uint8>
 80093cc:	4603      	mov	r3, r0
 80093ce:	747b      	strb	r3, [r7, #17]
 80093d0:	7c7b      	ldrb	r3, [r7, #17]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <string2UInt32+0x62>
			return ret;
 80093d6:	7c7b      	ldrb	r3, [r7, #17]
 80093d8:	e016      	b.n	8009408 <string2UInt32+0x90>
		}
		*pRetInt	+= tmp;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	7c3a      	ldrb	r2, [r7, #16]
 80093e0:	441a      	add	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	601a      	str	r2, [r3, #0]
		multiplier	*= 10;
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4613      	mov	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	4413      	add	r3, r2
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	617b      	str	r3, [r7, #20]
	for (int16_t i = length-1; i >= 0; i--){
 80093f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	827b      	strh	r3, [r7, #18]
 80093fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009402:	2b00      	cmp	r3, #0
 8009404:	dad2      	bge.n	80093ac <string2UInt32+0x34>
	}

	return StringOperations_Status_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <uInt8ToString>:
    	return StringOperations_Status_OK;
    }
	return StringOperations_Status_NotDecimalCharError;
}

StringOperations_Status_TypeDef	uInt8ToString(uint8_t val, uint8_t* pRetString){
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	6039      	str	r1, [r7, #0]
 800941a:	71fb      	strb	r3, [r7, #7]

	if (pRetString == NULL){
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <uInt8ToString+0x16>
		return StringOperations_Status_NullPointerError;
 8009422:	2304      	movs	r3, #4
 8009424:	e006      	b.n	8009434 <uInt8ToString+0x24>
	}

	sprintf((char*)pRetString, "%u", val);
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	461a      	mov	r2, r3
 800942a:	4904      	ldr	r1, [pc, #16]	; (800943c <uInt8ToString+0x2c>)
 800942c:	6838      	ldr	r0, [r7, #0]
 800942e:	f000 fd69 	bl	8009f04 <siprintf>
	return StringOperations_Status_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	0800a9f4 	.word	0x0800a9f4

08009440 <UartDriver_init>:

static UartDriver_Status_TypeDef UartDriver_transmitBytes(volatile UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes);

//< ----- Public functions implementation ----->//

UartDriver_Status_TypeDef UartDriver_init(volatile UartDriver_TypeDef* pSelf, UART_HandleTypeDef* pUartHandler, USART_TypeDef* pUartInstance, MSTimerDriver_TypeDef* pMsTimerHandler, uint32_t baudRate){
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]

	if (pSelf == NULL || pUartHandler == NULL || pMsTimerHandler == NULL){
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <UartDriver_init+0x20>
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d002      	beq.n	8009460 <UartDriver_init+0x20>
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <UartDriver_init+0x24>
		return UartDriver_Status_NullPointerError;
 8009460:	2308      	movs	r3, #8
 8009462:	e0c5      	b.n	80095f0 <UartDriver_init+0x1b0>
	}

	if (pSelf->state != UartDriver_State_UnInitialized){
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	791b      	ldrb	r3, [r3, #4]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <UartDriver_init+0x32>
		return UartDriver_Status_Error;
 800946e:	230a      	movs	r3, #10
 8009470:	e0be      	b.n	80095f0 <UartDriver_init+0x1b0>
	}

	pSelf->state				= UartDriver_State_DuringInit;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	711a      	strb	r2, [r3, #4]
	pSelf->pMsTimerHandler		= pMsTimerHandler;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	609a      	str	r2, [r3, #8]
	pSelf->pUartHandler			= pUartHandler;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	601a      	str	r2, [r3, #0]
	pSelf->transmitInProgress	= false;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2200      	movs	r2, #0
 8009488:	731a      	strb	r2, [r3, #12]

	memset((char*)pSelf->receiveBuffer, 0, UART_DRIVER_BUFFER_SIZE);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3338      	adds	r3, #56	; 0x38
 800948e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009492:	2100      	movs	r1, #0
 8009494:	4618      	mov	r0, r3
 8009496:	f000 fd2c 	bl	8009ef2 <memset>
	if (FIFOMultiread_init((FIFOMultiread_TypeDef*)&pSelf->rxFifo, (void*)pSelf->receiveBuffer, sizeof(UartDriver_FIFOElem_TypeDef), UART_DRIVER_BUFFER_SIZE) != FIFOMultiread_Status_OK){
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f103 0010 	add.w	r0, r3, #16
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80094a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094aa:	2208      	movs	r2, #8
 80094ac:	f7fd fd2f 	bl	8006f0e <FIFOMultiread_init>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <UartDriver_init+0x7a>
		return UartDriver_Status_Error;
 80094b6:	230a      	movs	r3, #10
 80094b8:	e09a      	b.n	80095f0 <UartDriver_init+0x1b0>
	}

	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80094ba:	2300      	movs	r3, #0
 80094bc:	82fb      	strh	r3, [r7, #22]
 80094be:	e012      	b.n	80094e6 <UartDriver_init+0xa6>
		pSelf->callbacksByte[i]		= NULL;
 80094c0:	8afb      	ldrh	r3, [r7, #22]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	f603 030e 	addw	r3, r3, #2062	; 0x80e
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	2200      	movs	r2, #0
 80094ce:	605a      	str	r2, [r3, #4]
		pSelf->callbacksByteArgs[i]	= NULL;
 80094d0:	8afb      	ldrh	r3, [r7, #22]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	2200      	movs	r2, #0
 80094de:	605a      	str	r2, [r3, #4]
	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80094e0:	8afb      	ldrh	r3, [r7, #22]
 80094e2:	3301      	adds	r3, #1
 80094e4:	82fb      	strh	r3, [r7, #22]
 80094e6:	8afb      	ldrh	r3, [r7, #22]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d9e9      	bls.n	80094c0 <UartDriver_init+0x80>
	}

	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80094ec:	2300      	movs	r3, #0
 80094ee:	82bb      	strh	r3, [r7, #20]
 80094f0:	e032      	b.n	8009558 <UartDriver_init+0x118>
		pSelf->callbacksStartAndTerminationSign[i]		= NULL;
 80094f2:	8abb      	ldrh	r3, [r7, #20]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f603 0312 	addw	r3, r3, #2066	; 0x812
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	605a      	str	r2, [r3, #4]
		pSelf->callbackStartAndTerminationSignArgs[i]	= NULL;
 8009502:	8abb      	ldrh	r3, [r7, #20]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	f603 0314 	addw	r3, r3, #2068	; 0x814
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	4413      	add	r3, r2
 800950e:	2200      	movs	r2, #0
 8009510:	605a      	str	r2, [r3, #4]
		pSelf->startSignVal[i]							= 0;
 8009512:	8abb      	ldrh	r3, [r7, #20]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	441a      	add	r2, r3
 8009518:	f242 035c 	movw	r3, #8284	; 0x205c
 800951c:	4413      	add	r3, r2
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
		pSelf->terminationSignVal[i]					= 0;
 8009522:	8abb      	ldrh	r3, [r7, #20]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	441a      	add	r2, r3
 8009528:	f242 035e 	movw	r3, #8286	; 0x205e
 800952c:	4413      	add	r3, r2
 800952e:	2200      	movs	r2, #0
 8009530:	701a      	strb	r2, [r3, #0]
		pSelf->receivedStartSignsNumber[i]				= 0;
 8009532:	8abb      	ldrh	r3, [r7, #20]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	441a      	add	r2, r3
 8009538:	f242 0370 	movw	r3, #8304	; 0x2070
 800953c:	4413      	add	r3, r2
 800953e:	2200      	movs	r2, #0
 8009540:	701a      	strb	r2, [r3, #0]
		pSelf->receivedTerminationSignsNumber[i]		= 0;
 8009542:	8abb      	ldrh	r3, [r7, #20]
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	441a      	add	r2, r3
 8009548:	f242 0372 	movw	r3, #8306	; 0x2072
 800954c:	4413      	add	r3, r2
 800954e:	2200      	movs	r2, #0
 8009550:	701a      	strb	r2, [r3, #0]
	for (uint16_t i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 8009552:	8abb      	ldrh	r3, [r7, #20]
 8009554:	3301      	adds	r3, #1
 8009556:	82bb      	strh	r3, [r7, #20]
 8009558:	8abb      	ldrh	r3, [r7, #20]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d9c9      	bls.n	80094f2 <UartDriver_init+0xb2>
	}

	{	//< HAL init
		pSelf->pUartHandler->Instance						= pUartInstance;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	601a      	str	r2, [r3, #0]
		pSelf->pUartHandler->Init.BaudRate					= baudRate;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6a3a      	ldr	r2, [r7, #32]
 800956c:	605a      	str	r2, [r3, #4]
		pSelf->pUartHandler->Init.WordLength				= UART_WORDLENGTH_8B;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2200      	movs	r2, #0
 8009574:	609a      	str	r2, [r3, #8]
		pSelf->pUartHandler->Init.StopBits					= UART_STOPBITS_1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2200      	movs	r2, #0
 800957c:	60da      	str	r2, [r3, #12]
		pSelf->pUartHandler->Init.Parity					= UART_PARITY_NONE;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2200      	movs	r2, #0
 8009584:	611a      	str	r2, [r3, #16]
		pSelf->pUartHandler->Init.Mode						= UART_MODE_TX_RX;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	220c      	movs	r2, #12
 800958c:	615a      	str	r2, [r3, #20]
		pSelf->pUartHandler->Init.HwFlowCtl					= UART_HWCONTROL_NONE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	619a      	str	r2, [r3, #24]
		pSelf->pUartHandler->Init.OverSampling				= UART_OVERSAMPLING_16;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	61da      	str	r2, [r3, #28]
		pSelf->pUartHandler->Init.OneBitSampling			= UART_ONE_BIT_SAMPLE_DISABLE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	621a      	str	r2, [r3, #32]
		pSelf->pUartHandler->AdvancedInit.AdvFeatureInit	= UART_ADVFEATURE_NO_INIT;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80095ae:	b672      	cpsid	i

		__disable_irq();
		if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7fa febe 	bl	8004336 <HAL_UART_Init>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <UartDriver_init+0x184>
		{
			return UartDriver_Status_HALError;
 80095c0:	2309      	movs	r3, #9
 80095c2:	e015      	b.n	80095f0 <UartDriver_init+0x1b0>
		}
		if (HAL_UART_AbortReceive(pSelf->pUartHandler) != HAL_OK){
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fb f835 	bl	8004638 <HAL_UART_AbortReceive>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <UartDriver_init+0x198>
			return UartDriver_Status_HALError;
 80095d4:	2309      	movs	r3, #9
 80095d6:	e00b      	b.n	80095f0 <UartDriver_init+0x1b0>
  __ASM volatile ("cpsie i" : : : "memory");
 80095d8:	b662      	cpsie	i
		}
		__enable_irq();
	}

	if (pSelf->pUartHandler->gState != HAL_UART_STATE_READY){
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d001      	beq.n	80095e8 <UartDriver_init+0x1a8>
		return UartDriver_Status_Error;
 80095e4:	230a      	movs	r3, #10
 80095e6:	e003      	b.n	80095f0 <UartDriver_init+0x1b0>
	}

	pSelf->state = UartDriver_State_Ready;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2202      	movs	r2, #2
 80095ec:	711a      	strb	r2, [r3, #4]

	return UartDriver_Status_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3718      	adds	r7, #24
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <UartDriver_getBaudRate>:

UartDriver_Status_TypeDef UartDriver_getBaudRate(volatile UartDriver_TypeDef* pSelf, uint32_t* pRetBaudRate){
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL || pRetBaudRate == NULL){
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <UartDriver_getBaudRate+0x16>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d101      	bne.n	8009612 <UartDriver_getBaudRate+0x1a>
		return UartDriver_Status_NullPointerError;
 800960e:	2308      	movs	r3, #8
 8009610:	e00c      	b.n	800962c <UartDriver_getBaudRate+0x34>
	}

	if (pSelf->state == UartDriver_State_UnInitialized){
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	791b      	ldrb	r3, [r3, #4]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <UartDriver_getBaudRate+0x28>
		return UartDriver_Status_UnInitializedErrror;
 800961c:	2301      	movs	r3, #1
 800961e:	e005      	b.n	800962c <UartDriver_getBaudRate+0x34>
	}

	*pRetBaudRate = pSelf->pUartHandler->Init.BaudRate;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	601a      	str	r2, [r3, #0]

	return UartDriver_Status_OK;
 800962a:	2300      	movs	r3, #0

}
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <UartDriver_setBaudRate>:

UartDriver_Status_TypeDef UartDriver_setBaudRate(volatile UartDriver_TypeDef* pSelf, uint32_t baudRate){
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]

	if (pSelf == NULL){
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d101      	bne.n	800964c <UartDriver_setBaudRate+0x14>
		return UartDriver_Status_NullPointerError;
 8009648:	2308      	movs	r3, #8
 800964a:	e050      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
	}

	if (pSelf->state == UartDriver_State_UnInitialized){
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	791b      	ldrb	r3, [r3, #4]
 8009650:	b2db      	uxtb	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <UartDriver_setBaudRate+0x22>
		return UartDriver_Status_UnInitializedErrror;
 8009656:	2301      	movs	r3, #1
 8009658:	e049      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
	}

	UartDriver_Status_TypeDef ret;

	if (pSelf->state == UartDriver_State_Receiving){
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b03      	cmp	r3, #3
 8009662:	d109      	bne.n	8009678 <UartDriver_setBaudRate+0x40>
		if ((ret = UartDriver_stopReceiver(pSelf)) != UartDriver_Status_OK){
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f990 	bl	800998a <UartDriver_stopReceiver>
 800966a:	4603      	mov	r3, r0
 800966c:	73fb      	strb	r3, [r7, #15]
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <UartDriver_setBaudRate+0x40>
			return ret;
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	e03a      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
		}
	}

	if (pSelf->state != UartDriver_State_DuringInit && pSelf->state != UartDriver_State_Ready){
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	791b      	ldrb	r3, [r3, #4]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	2b01      	cmp	r3, #1
 8009680:	d006      	beq.n	8009690 <UartDriver_setBaudRate+0x58>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	791b      	ldrb	r3, [r3, #4]
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b02      	cmp	r3, #2
 800968a:	d001      	beq.n	8009690 <UartDriver_setBaudRate+0x58>
		return UartDriver_Status_Error;
 800968c:	230a      	movs	r3, #10
 800968e:	e02e      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
	}

	if (HAL_UART_DeInit((UART_HandleTypeDef*)pSelf->pUartHandler) != HAL_OK){
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4618      	mov	r0, r3
 8009696:	f7fa fe9c 	bl	80043d2 <HAL_UART_DeInit>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <UartDriver_setBaudRate+0x6c>
		return UartDriver_Status_Error;
 80096a0:	230a      	movs	r3, #10
 80096a2:	e024      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
	}

	pSelf->pUartHandler->Init.BaudRate = baudRate;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	683a      	ldr	r2, [r7, #0]
 80096aa:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80096ac:	b672      	cpsid	i

	{
		__disable_irq();
		if (HAL_UART_Init(pSelf->pUartHandler) != HAL_OK)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fa fe3f 	bl	8004336 <HAL_UART_Init>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <UartDriver_setBaudRate+0x8a>
		{
			return UartDriver_Status_HALError;
 80096be:	2309      	movs	r3, #9
 80096c0:	e015      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
		}
		if (HAL_UART_AbortReceive(pSelf->pUartHandler) != HAL_OK){
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fa ffb6 	bl	8004638 <HAL_UART_AbortReceive>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <UartDriver_setBaudRate+0x9e>
			return UartDriver_Status_HALError;
 80096d2:	2309      	movs	r3, #9
 80096d4:	e00b      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 80096d6:	b662      	cpsie	i
		}
		__enable_irq();
	}

	if (pSelf->state == UartDriver_State_Receiving){
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	791b      	ldrb	r3, [r3, #4]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d104      	bne.n	80096ec <UartDriver_setBaudRate+0xb4>
		return UartDriver_startReceiver(pSelf);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f92f 	bl	8009946 <UartDriver_startReceiver>
 80096e8:	4603      	mov	r3, r0
 80096ea:	e000      	b.n	80096ee <UartDriver_setBaudRate+0xb6>
	}

	return UartDriver_Status_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <UartDriver_sendBytes>:

UartDriver_Status_TypeDef UartDriver_sendBytes(volatile UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes){
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b086      	sub	sp, #24
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	60b9      	str	r1, [r7, #8]
 8009700:	4613      	mov	r3, r2
 8009702:	80fb      	strh	r3, [r7, #6]

	if (pSelf == NULL || pBuffer == NULL){
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d002      	beq.n	8009710 <UartDriver_sendBytes+0x1a>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d101      	bne.n	8009714 <UartDriver_sendBytes+0x1e>
		return UartDriver_Status_NullPointerError;
 8009710:	2308      	movs	r3, #8
 8009712:	e025      	b.n	8009760 <UartDriver_sendBytes+0x6a>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	791b      	ldrb	r3, [r3, #4]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d004      	beq.n	8009728 <UartDriver_sendBytes+0x32>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	791b      	ldrb	r3, [r3, #4]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <UartDriver_sendBytes+0x36>
		return UartDriver_Status_UnInitializedErrror;
 8009728:	2301      	movs	r3, #1
 800972a:	e019      	b.n	8009760 <UartDriver_sendBytes+0x6a>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	791b      	ldrb	r3, [r3, #4]
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b02      	cmp	r3, #2
 8009734:	d006      	beq.n	8009744 <UartDriver_sendBytes+0x4e>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	791b      	ldrb	r3, [r3, #4]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	2b03      	cmp	r3, #3
 800973e:	d001      	beq.n	8009744 <UartDriver_sendBytes+0x4e>
		return UartDriver_Status_Error;
 8009740:	230a      	movs	r3, #10
 8009742:	e00d      	b.n	8009760 <UartDriver_sendBytes+0x6a>
	}

	UartDriver_Status_TypeDef ret;

	if ((ret = UartDriver_transmitBytes(pSelf, pBuffer, bytes)) != UartDriver_Status_OK){
 8009744:	88fb      	ldrh	r3, [r7, #6]
 8009746:	461a      	mov	r2, r3
 8009748:	68b9      	ldr	r1, [r7, #8]
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 f935 	bl	80099ba <UartDriver_transmitBytes>
 8009750:	4603      	mov	r3, r0
 8009752:	75fb      	strb	r3, [r7, #23]
 8009754:	7dfb      	ldrb	r3, [r7, #23]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d001      	beq.n	800975e <UartDriver_sendBytes+0x68>
		return ret;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	e000      	b.n	8009760 <UartDriver_sendBytes+0x6a>
	}

	return UartDriver_Status_OK;
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	3718      	adds	r7, #24
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <UartDriver_setReceivedBytesStartAndTerminationSignCallback>:

	return UartDriver_Status_OK;
}

UartDriver_Status_TypeDef UartDriver_setReceivedBytesStartAndTerminationSignCallback(volatile UartDriver_TypeDef* pSelf, void (*foo)(uint8_t* bytes, uint16_t length, uint32_t timestamp, void* pArgs),
		void* pArgs, volatile UartDriver_CallbackIterator_TypeDef* pRetCallbackIterator, uint8_t startSign, uint8_t terminationSign){
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
 8009774:	603b      	str	r3, [r7, #0]

	if (pSelf == NULL || foo == NULL || pRetCallbackIterator == NULL){
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d005      	beq.n	8009788 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x20>
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x20>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x24>
		return UartDriver_Status_NullPointerError;
 8009788:	2308      	movs	r3, #8
 800978a:	e077      	b.n	800987c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x114>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	791b      	ldrb	r3, [r3, #4]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d004      	beq.n	80097a0 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x38>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	791b      	ldrb	r3, [r3, #4]
 800979a:	b2db      	uxtb	r3, r3
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x3c>
		return UartDriver_Status_UnInitializedErrror;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e06b      	b.n	800987c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x114>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	791b      	ldrb	r3, [r3, #4]
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d006      	beq.n	80097bc <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x54>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	791b      	ldrb	r3, [r3, #4]
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	2b03      	cmp	r3, #3
 80097b6:	d001      	beq.n	80097bc <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x54>
		return UartDriver_Status_Error;
 80097b8:	230a      	movs	r3, #10
 80097ba:	e05f      	b.n	800987c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x114>
	}

	uint16_t i;
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 80097bc:	2300      	movs	r3, #0
 80097be:	82fb      	strh	r3, [r7, #22]
 80097c0:	e04e      	b.n	8009860 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0xf8>
		if (pSelf->callbacksStartAndTerminationSign[i] == NULL){
 80097c2:	8afb      	ldrh	r3, [r7, #22]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	f603 0312 	addw	r3, r3, #2066	; 0x812
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d142      	bne.n	800985a <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0xf2>
			pSelf->callbacksStartAndTerminationSign[i]		= foo;
 80097d4:	8afb      	ldrh	r3, [r7, #22]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f603 0312 	addw	r3, r3, #2066	; 0x812
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	4413      	add	r3, r2
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	605a      	str	r2, [r3, #4]
			pSelf->callbackStartAndTerminationSignArgs[i]	= pArgs;
 80097e4:	8afb      	ldrh	r3, [r7, #22]
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	f603 0314 	addw	r3, r3, #2068	; 0x814
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4413      	add	r3, r2
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
			pSelf->startSignVal[i]							= startSign;
 80097f4:	8afb      	ldrh	r3, [r7, #22]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	441a      	add	r2, r3
 80097fa:	f242 035c 	movw	r3, #8284	; 0x205c
 80097fe:	4413      	add	r3, r2
 8009800:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009804:	701a      	strb	r2, [r3, #0]
			pSelf->terminationSignVal[i]					= terminationSign;
 8009806:	8afb      	ldrh	r3, [r7, #22]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	441a      	add	r2, r3
 800980c:	f242 035e 	movw	r3, #8286	; 0x205e
 8009810:	4413      	add	r3, r2
 8009812:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009816:	701a      	strb	r2, [r3, #0]
			pSelf->receivedStartSignsNumber[i]				= 0;
 8009818:	8afb      	ldrh	r3, [r7, #22]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	441a      	add	r2, r3
 800981e:	f242 0370 	movw	r3, #8304	; 0x2070
 8009822:	4413      	add	r3, r2
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
			pSelf->receivedTerminationSignsNumber[i]		= 0;
 8009828:	8afb      	ldrh	r3, [r7, #22]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	441a      	add	r2, r3
 800982e:	f242 0372 	movw	r3, #8306	; 0x2072
 8009832:	4413      	add	r3, r2
 8009834:	2200      	movs	r2, #0
 8009836:	701a      	strb	r2, [r3, #0]
			if (FIFOMultiread_registerReaderIdentifier(&pSelf->rxFifo, &pSelf->callbacksStartAndTerminationSignReaders[i]) != FIFOMultiread_Status_OK){
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f103 0010 	add.w	r0, r3, #16
 800983e:	8afb      	ldrh	r3, [r7, #22]
 8009840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	4413      	add	r3, r2
 800984a:	4619      	mov	r1, r3
 800984c:	f7fd fbb4 	bl	8006fb8 <FIFOMultiread_registerReaderIdentifier>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d008      	beq.n	8009868 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x100>
				return UartDriver_Status_Error;
 8009856:	230a      	movs	r3, #10
 8009858:	e010      	b.n	800987c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x114>
	for (i=0; i<UART_DRIVER_MAX_CALLBACK_NUMBER; i++){
 800985a:	8afb      	ldrh	r3, [r7, #22]
 800985c:	3301      	adds	r3, #1
 800985e:	82fb      	strh	r3, [r7, #22]
 8009860:	8afb      	ldrh	r3, [r7, #22]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d9ad      	bls.n	80097c2 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x5a>
 8009866:	e000      	b.n	800986a <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x102>
			}
			break;
 8009868:	bf00      	nop
		}
	}

	if (i == UART_DRIVER_MAX_CALLBACK_NUMBER){
 800986a:	8afb      	ldrh	r3, [r7, #22]
 800986c:	2b02      	cmp	r3, #2
 800986e:	d101      	bne.n	8009874 <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x10c>
		return UartDriver_Status_TooManyCallbacksError;
 8009870:	2307      	movs	r3, #7
 8009872:	e003      	b.n	800987c <UartDriver_setReceivedBytesStartAndTerminationSignCallback+0x114>
	}

	*pRetCallbackIterator = (UartDriver_CallbackIterator_TypeDef)i;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	8afa      	ldrh	r2, [r7, #22]
 8009878:	801a      	strh	r2, [r3, #0]

	return UartDriver_Status_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <UartDriver_removeReceivedBytesStartAndTerminationSignCallback>:

UartDriver_Status_TypeDef UartDriver_removeReceivedBytesStartAndTerminationSignCallback(volatile UartDriver_TypeDef* pSelf, UartDriver_CallbackIterator_TypeDef callbackIterator){
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	807b      	strh	r3, [r7, #2]

	if (pSelf == NULL){
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x16>
		return UartDriver_Status_NullPointerError;
 8009896:	2308      	movs	r3, #8
 8009898:	e051      	b.n	800993e <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xba>
	}

	if (pSelf->state == UartDriver_State_UnInitialized || pSelf->state == UartDriver_State_DuringInit){
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	791b      	ldrb	r3, [r3, #4]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d004      	beq.n	80098ae <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x2a>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	791b      	ldrb	r3, [r3, #4]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x2e>
		return UartDriver_Status_UnInitializedErrror;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e045      	b.n	800993e <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xba>
	}

	if (pSelf->state != UartDriver_State_Ready && pSelf->state != UartDriver_State_Receiving){
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	791b      	ldrb	r3, [r3, #4]
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d006      	beq.n	80098ca <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x46>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	791b      	ldrb	r3, [r3, #4]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	2b03      	cmp	r3, #3
 80098c4:	d001      	beq.n	80098ca <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x46>
		return UartDriver_Status_Error;
 80098c6:	230a      	movs	r3, #10
 80098c8:	e039      	b.n	800993e <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xba>
	}

	if (pSelf->callbacksStartAndTerminationSign[callbackIterator] == NULL){
 80098ca:	887b      	ldrh	r3, [r7, #2]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	f603 0312 	addw	r3, r3, #2066	; 0x812
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	4413      	add	r3, r2
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0x5c>
		return UartDriver_Status_Error;
 80098dc:	230a      	movs	r3, #10
 80098de:	e02e      	b.n	800993e <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xba>
	}

	pSelf->callbacksStartAndTerminationSign[callbackIterator]		= NULL;
 80098e0:	887b      	ldrh	r3, [r7, #2]
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	f603 0312 	addw	r3, r3, #2066	; 0x812
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	2200      	movs	r2, #0
 80098ee:	605a      	str	r2, [r3, #4]
	pSelf->callbackStartAndTerminationSignArgs[callbackIterator]	= NULL;
 80098f0:	887b      	ldrh	r3, [r7, #2]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	f603 0314 	addw	r3, r3, #2068	; 0x814
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	2200      	movs	r2, #0
 80098fe:	605a      	str	r2, [r3, #4]
	pSelf->receivedStartSignsNumber[callbackIterator]				= 0;
 8009900:	887b      	ldrh	r3, [r7, #2]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	441a      	add	r2, r3
 8009906:	f242 0370 	movw	r3, #8304	; 0x2070
 800990a:	4413      	add	r3, r2
 800990c:	2200      	movs	r2, #0
 800990e:	701a      	strb	r2, [r3, #0]
	pSelf->receivedTerminationSignsNumber[callbackIterator]			= 0;
 8009910:	887b      	ldrh	r3, [r7, #2]
 8009912:	687a      	ldr	r2, [r7, #4]
 8009914:	441a      	add	r2, r3
 8009916:	f242 0372 	movw	r3, #8306	; 0x2072
 800991a:	4413      	add	r3, r2
 800991c:	2200      	movs	r2, #0
 800991e:	701a      	strb	r2, [r3, #0]
	if (FIFOMultiread_unregisterReaderIdentifier(&pSelf->callbacksStartAndTerminationSignReaders[callbackIterator]) != FIFOMultiread_Status_OK){
 8009920:	887b      	ldrh	r3, [r7, #2]
 8009922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009926:	00db      	lsls	r3, r3, #3
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	4413      	add	r3, r2
 800992c:	4618      	mov	r0, r3
 800992e:	f7fd fb89 	bl	8007044 <FIFOMultiread_unregisterReaderIdentifier>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d001      	beq.n	800993c <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xb8>
		return UartDriver_Status_Error;
 8009938:	230a      	movs	r3, #10
 800993a:	e000      	b.n	800993e <UartDriver_removeReceivedBytesStartAndTerminationSignCallback+0xba>
	}

	return UartDriver_Status_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3708      	adds	r7, #8
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <UartDriver_startReceiver>:

UartDriver_Status_TypeDef UartDriver_startReceiver(volatile UartDriver_TypeDef* pSelf){
 8009946:	b580      	push	{r7, lr}
 8009948:	b082      	sub	sp, #8
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Ready){
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d001      	beq.n	800995c <UartDriver_startReceiver+0x16>
		return UartDriver_Status_Error;
 8009958:	230a      	movs	r3, #10
 800995a:	e012      	b.n	8009982 <UartDriver_startReceiver+0x3c>
	}

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, (uint8_t*)&pSelf->actuallyReceivingByte, 1) != HAL_OK){
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6818      	ldr	r0, [r3, #0]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	f242 0338 	movw	r3, #8248	; 0x2038
 8009966:	4413      	add	r3, r2
 8009968:	2201      	movs	r2, #1
 800996a:	4619      	mov	r1, r3
 800996c:	f7fa fdc2 	bl	80044f4 <HAL_UART_Receive_IT>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d001      	beq.n	800997a <UartDriver_startReceiver+0x34>
		return UartDriver_Status_Error;
 8009976:	230a      	movs	r3, #10
 8009978:	e003      	b.n	8009982 <UartDriver_startReceiver+0x3c>
	}

	pSelf->state = UartDriver_State_Receiving;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2203      	movs	r2, #3
 800997e:	711a      	strb	r2, [r3, #4]

	return UartDriver_Status_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}

0800998a <UartDriver_stopReceiver>:

UartDriver_Status_TypeDef UartDriver_stopReceiver(volatile UartDriver_TypeDef* pSelf){
 800998a:	b580      	push	{r7, lr}
 800998c:	b082      	sub	sp, #8
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]

	if (pSelf->state != UartDriver_State_Receiving){
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	791b      	ldrb	r3, [r3, #4]
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b03      	cmp	r3, #3
 800999a:	d001      	beq.n	80099a0 <UartDriver_stopReceiver+0x16>
		return UartDriver_Status_NotReceivingErrror;
 800999c:	2305      	movs	r3, #5
 800999e:	e008      	b.n	80099b2 <UartDriver_stopReceiver+0x28>
	}

	HAL_UART_IRQHandler(pSelf->pUartHandler);	//TODO do sprawdzenia
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7fa fe9f 	bl	80046e8 <HAL_UART_IRQHandler>

	pSelf->state = UartDriver_State_Ready;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2202      	movs	r2, #2
 80099ae:	711a      	strb	r2, [r3, #4]

	return UartDriver_Status_OK;
 80099b0:	2300      	movs	r3, #0
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <UartDriver_transmitBytes>:

//< ----- Private functions implementation ----->//

static UartDriver_Status_TypeDef UartDriver_transmitBytes(volatile UartDriver_TypeDef* pSelf, uint8_t* pBuffer, uint16_t bytes){
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b084      	sub	sp, #16
 80099be:	af00      	add	r7, sp, #0
 80099c0:	60f8      	str	r0, [r7, #12]
 80099c2:	60b9      	str	r1, [r7, #8]
 80099c4:	4613      	mov	r3, r2
 80099c6:	80fb      	strh	r3, [r7, #6]

	while (pSelf->transmitInProgress != false){ }
 80099c8:	bf00      	nop
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	7b1b      	ldrb	r3, [r3, #12]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1fa      	bne.n	80099ca <UartDriver_transmitBytes+0x10>

	if (HAL_UART_Transmit_IT(pSelf->pUartHandler, pBuffer, bytes) != HAL_OK){
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	88fa      	ldrh	r2, [r7, #6]
 80099da:	68b9      	ldr	r1, [r7, #8]
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fa fd2d 	bl	800443c <HAL_UART_Transmit_IT>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d001      	beq.n	80099ec <UartDriver_transmitBytes+0x32>
		return UartDriver_Status_Error;
 80099e8:	230a      	movs	r3, #10
 80099ea:	e003      	b.n	80099f4 <UartDriver_transmitBytes+0x3a>
	}

	pSelf->transmitInProgress = true;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2201      	movs	r2, #1
 80099f0:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <UartDriver_receivedBytesCallback>:

//< ----- Interrupt handling ----- >//

#define	UART_DRIVER_FULL_ASSER_IN_CALLBACK 0

UartDriver_Status_TypeDef UartDriver_receivedBytesCallback(volatile UartDriver_TypeDef* pSelf){
 80099fc:	b590      	push	{r4, r7, lr}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
#endif

	static UartDriver_FIFOElem_TypeDef	data;
	static FIFOMultiread_Status_TypeDef	fifoStatus;

	data.dataByte = pSelf->actuallyReceivingByte;
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	f242 0338 	movw	r3, #8248	; 0x2038
 8009a0a:	4413      	add	r3, r2
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	4ba0      	ldr	r3, [pc, #640]	; (8009c94 <UartDriver_receivedBytesCallback+0x298>)
 8009a12:	701a      	strb	r2, [r3, #0]
	if (MSTimerDriver_getMSTime(pSelf->pMsTimerHandler, &data.msTime) != MSTimerDriver_Status_OK){
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	499f      	ldr	r1, [pc, #636]	; (8009c98 <UartDriver_receivedBytesCallback+0x29c>)
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fa4c 	bl	8008eb8 <MSTimerDriver_getMSTime>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <UartDriver_receivedBytesCallback+0x2e>
		return UartDriver_Status_Error;
 8009a26:	230a      	movs	r3, #10
 8009a28:	e1b4      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
	}

	if (FIFOMultiread_enqueue(&pSelf->rxFifo, (void*) &data) != FIFOMultiread_Status_OK){
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3310      	adds	r3, #16
 8009a2e:	4999      	ldr	r1, [pc, #612]	; (8009c94 <UartDriver_receivedBytesCallback+0x298>)
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fd fb38 	bl	80070a6 <FIFOMultiread_enqueue>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <UartDriver_receivedBytesCallback+0x44>
		return UartDriver_Status_Error;
 8009a3c:	230a      	movs	r3, #10
 8009a3e:	e1a9      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
	}

	//< ----- Handling one byte callback ----- >//
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009a40:	2300      	movs	r3, #0
 8009a42:	81fb      	strh	r3, [r7, #14]
 8009a44:	e029      	b.n	8009a9a <UartDriver_receivedBytesCallback+0x9e>

		if (pSelf->callbacksByte[fooIt] != NULL){
 8009a46:	89fb      	ldrh	r3, [r7, #14]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	f603 030e 	addw	r3, r3, #2062	; 0x80e
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d01d      	beq.n	8009a94 <UartDriver_receivedBytesCallback+0x98>

			while (true){

				if (fifoStatus == FIFOMultiread_Status_Empty){
 8009a58:	4b90      	ldr	r3, [pc, #576]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d018      	beq.n	8009a92 <UartDriver_receivedBytesCallback+0x96>
					break;
				} else if (fifoStatus != FIFOMultiread_Status_OK ){
 8009a60:	4b8e      	ldr	r3, [pc, #568]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <UartDriver_receivedBytesCallback+0x70>
					return UartDriver_Status_Error;
 8009a68:	230a      	movs	r3, #10
 8009a6a:	e193      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
				}

				pSelf->callbacksByte[fooIt](data, pSelf->callbacksByteArgs[fooIt]);
 8009a6c:	89fb      	ldrh	r3, [r7, #14]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	f603 030e 	addw	r3, r3, #2062	; 0x80e
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	685c      	ldr	r4, [r3, #4]
 8009a7a:	89fb      	ldrh	r3, [r7, #14]
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	f503 6301 	add.w	r3, r3, #2064	; 0x810
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	4413      	add	r3, r2
 8009a86:	685a      	ldr	r2, [r3, #4]
 8009a88:	4b82      	ldr	r3, [pc, #520]	; (8009c94 <UartDriver_receivedBytesCallback+0x298>)
 8009a8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009a8e:	47a0      	blx	r4
				if (fifoStatus == FIFOMultiread_Status_Empty){
 8009a90:	e7e2      	b.n	8009a58 <UartDriver_receivedBytesCallback+0x5c>
					break;
 8009a92:	bf00      	nop
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009a94:	89fb      	ldrh	r3, [r7, #14]
 8009a96:	3301      	adds	r3, #1
 8009a98:	81fb      	strh	r3, [r7, #14]
 8009a9a:	89fb      	ldrh	r3, [r7, #14]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d9d2      	bls.n	8009a46 <UartDriver_receivedBytesCallback+0x4a>
			}
		}
	}

	//< ----- Handling start and termination sign callback ----- >//
	for (uint8_t fooIt = 0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	737b      	strb	r3, [r7, #13]
 8009aa4:	e04d      	b.n	8009b42 <UartDriver_receivedBytesCallback+0x146>
		if (pSelf->callbacksStartAndTerminationSign[fooIt] != NULL){
 8009aa6:	7b7b      	ldrb	r3, [r7, #13]
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	f603 0312 	addw	r3, r3, #2066	; 0x812
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d041      	beq.n	8009b3c <UartDriver_receivedBytesCallback+0x140>
			if (pSelf->actuallyReceivingByte == pSelf->startSignVal[fooIt]){
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	f242 0338 	movw	r3, #8248	; 0x2038
 8009abe:	4413      	add	r3, r2
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	7b7b      	ldrb	r3, [r7, #13]
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4419      	add	r1, r3
 8009aca:	f242 035c 	movw	r3, #8284	; 0x205c
 8009ace:	440b      	add	r3, r1
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d110      	bne.n	8009afa <UartDriver_receivedBytesCallback+0xfe>
				pSelf->receivedStartSignsNumber[fooIt]++;
 8009ad8:	7b7a      	ldrb	r2, [r7, #13]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	1899      	adds	r1, r3, r2
 8009ade:	f242 0370 	movw	r3, #8304	; 0x2070
 8009ae2:	440b      	add	r3, r1
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	3301      	adds	r3, #1
 8009aea:	b2d9      	uxtb	r1, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	441a      	add	r2, r3
 8009af0:	f242 0370 	movw	r3, #8304	; 0x2070
 8009af4:	4413      	add	r3, r2
 8009af6:	460a      	mov	r2, r1
 8009af8:	701a      	strb	r2, [r3, #0]
			}
			if (pSelf->actuallyReceivingByte == pSelf->terminationSignVal[fooIt]){
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	f242 0338 	movw	r3, #8248	; 0x2038
 8009b00:	4413      	add	r3, r2
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	7b7b      	ldrb	r3, [r7, #13]
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4419      	add	r1, r3
 8009b0c:	f242 035e 	movw	r3, #8286	; 0x205e
 8009b10:	440b      	add	r3, r1
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d110      	bne.n	8009b3c <UartDriver_receivedBytesCallback+0x140>
				pSelf->receivedTerminationSignsNumber[fooIt]++;
 8009b1a:	7b7a      	ldrb	r2, [r7, #13]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	1899      	adds	r1, r3, r2
 8009b20:	f242 0372 	movw	r3, #8306	; 0x2072
 8009b24:	440b      	add	r3, r1
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	b2d9      	uxtb	r1, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	441a      	add	r2, r3
 8009b32:	f242 0372 	movw	r3, #8306	; 0x2072
 8009b36:	4413      	add	r3, r2
 8009b38:	460a      	mov	r2, r1
 8009b3a:	701a      	strb	r2, [r3, #0]
	for (uint8_t fooIt = 0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009b3c:	7b7b      	ldrb	r3, [r7, #13]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	737b      	strb	r3, [r7, #13]
 8009b42:	7b7b      	ldrb	r3, [r7, #13]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d9ae      	bls.n	8009aa6 <UartDriver_receivedBytesCallback+0xaa>

	static UartDriver_FIFOElem_TypeDef	charBuffer;
	static uint8_t						arrayBuffer[UART_DRIVER_BUFFER_SIZE];
	static uint16_t						bufferIt;

	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009b48:	2300      	movs	r3, #0
 8009b4a:	817b      	strh	r3, [r7, #10]
 8009b4c:	e066      	b.n	8009c1c <UartDriver_receivedBytesCallback+0x220>

		if (pSelf->callbacksStartAndTerminationSign[fooIt] == NULL){
 8009b4e:	897b      	ldrh	r3, [r7, #10]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	f603 0312 	addw	r3, r3, #2066	; 0x812
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d055      	beq.n	8009c0c <UartDriver_receivedBytesCallback+0x210>
			continue;
		}

		while (true){

			fifoStatus = FIFOMultiread_lastElement(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009b60:	897b      	ldrh	r3, [r7, #10]
 8009b62:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	494c      	ldr	r1, [pc, #304]	; (8009ca0 <UartDriver_receivedBytesCallback+0x2a4>)
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fd fbea 	bl	8007348 <FIFOMultiread_lastElement>
 8009b74:	4603      	mov	r3, r0
 8009b76:	461a      	mov	r2, r3
 8009b78:	4b48      	ldr	r3, [pc, #288]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009b7a:	701a      	strb	r2, [r3, #0]

			if (fifoStatus == FIFOMultiread_Status_Empty){
 8009b7c:	4b47      	ldr	r3, [pc, #284]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d045      	beq.n	8009c10 <UartDriver_receivedBytesCallback+0x214>
				break;
			} else if (fifoStatus != FIFOMultiread_Status_OK ){
 8009b84:	4b45      	ldr	r3, [pc, #276]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <UartDriver_receivedBytesCallback+0x194>
				return UartDriver_Status_Error;
 8009b8c:	230a      	movs	r3, #10
 8009b8e:	e101      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
			}

			if (charBuffer.dataByte == pSelf->startSignVal[fooIt]){ //< found start sign. Leave it in the queue and break.
 8009b90:	4b43      	ldr	r3, [pc, #268]	; (8009ca0 <UartDriver_receivedBytesCallback+0x2a4>)
 8009b92:	781a      	ldrb	r2, [r3, #0]
 8009b94:	897b      	ldrh	r3, [r7, #10]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4419      	add	r1, r3
 8009b9a:	f242 035c 	movw	r3, #8284	; 0x205c
 8009b9e:	440b      	add	r3, r1
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d035      	beq.n	8009c14 <UartDriver_receivedBytesCallback+0x218>
				break;
			} else { //< it's not start start sign. Remove it.
				fifoStatus = FIFOMultiread_dequeue(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009ba8:	897b      	ldrh	r3, [r7, #10]
 8009baa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	493a      	ldr	r1, [pc, #232]	; (8009ca0 <UartDriver_receivedBytesCallback+0x2a4>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fd fb44 	bl	8007244 <FIFOMultiread_dequeue>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	4b36      	ldr	r3, [pc, #216]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009bc2:	701a      	strb	r2, [r3, #0]

				if (fifoStatus != FIFOMultiread_Status_OK){
 8009bc4:	4b35      	ldr	r3, [pc, #212]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <UartDriver_receivedBytesCallback+0x1d4>
					return UartDriver_Status_Error;
 8009bcc:	230a      	movs	r3, #10
 8009bce:	e0e1      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
				}

				if (charBuffer.dataByte == pSelf->terminationSignVal[fooIt]){ //< Found termination without start sign at first. Remove it.
 8009bd0:	4b33      	ldr	r3, [pc, #204]	; (8009ca0 <UartDriver_receivedBytesCallback+0x2a4>)
 8009bd2:	781a      	ldrb	r2, [r3, #0]
 8009bd4:	897b      	ldrh	r3, [r7, #10]
 8009bd6:	6879      	ldr	r1, [r7, #4]
 8009bd8:	4419      	add	r1, r3
 8009bda:	f242 035e 	movw	r3, #8286	; 0x205e
 8009bde:	440b      	add	r3, r1
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d1bb      	bne.n	8009b60 <UartDriver_receivedBytesCallback+0x164>
					pSelf->receivedTerminationSignsNumber[fooIt]--;
 8009be8:	897a      	ldrh	r2, [r7, #10]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	1899      	adds	r1, r3, r2
 8009bee:	f242 0372 	movw	r3, #8306	; 0x2072
 8009bf2:	440b      	add	r3, r1
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	b2db      	uxtb	r3, r3
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	b2d9      	uxtb	r1, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	441a      	add	r2, r3
 8009c00:	f242 0372 	movw	r3, #8306	; 0x2072
 8009c04:	4413      	add	r3, r2
 8009c06:	460a      	mov	r2, r1
 8009c08:	701a      	strb	r2, [r3, #0]
			fifoStatus = FIFOMultiread_lastElement(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009c0a:	e7a9      	b.n	8009b60 <UartDriver_receivedBytesCallback+0x164>
			continue;
 8009c0c:	bf00      	nop
 8009c0e:	e002      	b.n	8009c16 <UartDriver_receivedBytesCallback+0x21a>
				break;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <UartDriver_receivedBytesCallback+0x21a>
				break;
 8009c14:	bf00      	nop
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009c16:	897b      	ldrh	r3, [r7, #10]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	817b      	strh	r3, [r7, #10]
 8009c1c:	897b      	ldrh	r3, [r7, #10]
 8009c1e:	2b01      	cmp	r3, #1
 8009c20:	d995      	bls.n	8009b4e <UartDriver_receivedBytesCallback+0x152>

	//< ----- handling sentences with start and termination sign ----- >//

	static uint32_t						timestampBuffer;

	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009c22:	2300      	movs	r3, #0
 8009c24:	813b      	strh	r3, [r7, #8]
 8009c26:	e0a1      	b.n	8009d6c <UartDriver_receivedBytesCallback+0x370>

		if (pSelf->callbacksStartAndTerminationSign[fooIt] == NULL){
 8009c28:	893b      	ldrh	r3, [r7, #8]
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	f603 0312 	addw	r3, r3, #2066	; 0x812
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 8094 	beq.w	8009d64 <UartDriver_receivedBytesCallback+0x368>
			continue;
		}

		if (pSelf->receivedStartSignsNumber[fooIt] > 0 && pSelf->receivedTerminationSignsNumber[fooIt] > 0){
 8009c3c:	893b      	ldrh	r3, [r7, #8]
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	441a      	add	r2, r3
 8009c42:	f242 0370 	movw	r3, #8304	; 0x2070
 8009c46:	4413      	add	r3, r2
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f000 808a 	beq.w	8009d66 <UartDriver_receivedBytesCallback+0x36a>
 8009c52:	893b      	ldrh	r3, [r7, #8]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	441a      	add	r2, r3
 8009c58:	f242 0372 	movw	r3, #8306	; 0x2072
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d07f      	beq.n	8009d66 <UartDriver_receivedBytesCallback+0x36a>

			bufferIt = 0;
 8009c66:	4b0f      	ldr	r3, [pc, #60]	; (8009ca4 <UartDriver_receivedBytesCallback+0x2a8>)
 8009c68:	2200      	movs	r2, #0
 8009c6a:	801a      	strh	r2, [r3, #0]

			// searching for start sign
			while (true){

				fifoStatus = FIFOMultiread_dequeue(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009c6c:	893b      	ldrh	r3, [r7, #8]
 8009c6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	4413      	add	r3, r2
 8009c78:	4909      	ldr	r1, [pc, #36]	; (8009ca0 <UartDriver_receivedBytesCallback+0x2a4>)
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7fd fae2 	bl	8007244 <FIFOMultiread_dequeue>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009c86:	701a      	strb	r2, [r3, #0]

				if (fifoStatus != FIFOMultiread_Status_OK){ //< queue should not be empty. Minimum one start sign and minimum one termination sign are threre
 8009c88:	4b04      	ldr	r3, [pc, #16]	; (8009c9c <UartDriver_receivedBytesCallback+0x2a0>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <UartDriver_receivedBytesCallback+0x2ac>
					return UartDriver_Status_Error;
 8009c90:	230a      	movs	r3, #10
 8009c92:	e07f      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
 8009c94:	200000a0 	.word	0x200000a0
 8009c98:	200000a4 	.word	0x200000a4
 8009c9c:	200000a8 	.word	0x200000a8
 8009ca0:	200000ac 	.word	0x200000ac
 8009ca4:	200000b4 	.word	0x200000b4
				}

				if (charBuffer.dataByte == pSelf->startSignVal[fooIt]){ //< found start sign
 8009ca8:	4b3c      	ldr	r3, [pc, #240]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009caa:	781a      	ldrb	r2, [r3, #0]
 8009cac:	893b      	ldrh	r3, [r7, #8]
 8009cae:	6879      	ldr	r1, [r7, #4]
 8009cb0:	4419      	add	r1, r3
 8009cb2:	f242 035c 	movw	r3, #8284	; 0x205c
 8009cb6:	440b      	add	r3, r1
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d1d5      	bne.n	8009c6c <UartDriver_receivedBytesCallback+0x270>
					arrayBuffer[bufferIt++]	= charBuffer.dataByte;
 8009cc0:	4b37      	ldr	r3, [pc, #220]	; (8009da0 <UartDriver_receivedBytesCallback+0x3a4>)
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	b291      	uxth	r1, r2
 8009cc8:	4a35      	ldr	r2, [pc, #212]	; (8009da0 <UartDriver_receivedBytesCallback+0x3a4>)
 8009cca:	8011      	strh	r1, [r2, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b33      	ldr	r3, [pc, #204]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009cd0:	7819      	ldrb	r1, [r3, #0]
 8009cd2:	4b34      	ldr	r3, [pc, #208]	; (8009da4 <UartDriver_receivedBytesCallback+0x3a8>)
 8009cd4:	5499      	strb	r1, [r3, r2]
					timestampBuffer			= charBuffer.msTime;
 8009cd6:	4b31      	ldr	r3, [pc, #196]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	4a33      	ldr	r2, [pc, #204]	; (8009da8 <UartDriver_receivedBytesCallback+0x3ac>)
 8009cdc:	6013      	str	r3, [r2, #0]
			}

			// searching for termination sign
			while (true){

				fifoStatus = FIFOMultiread_dequeue(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009cde:	893b      	ldrh	r3, [r7, #8]
 8009ce0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	4413      	add	r3, r2
 8009cea:	492c      	ldr	r1, [pc, #176]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd faa9 	bl	8007244 <FIFOMultiread_dequeue>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	4b2d      	ldr	r3, [pc, #180]	; (8009dac <UartDriver_receivedBytesCallback+0x3b0>)
 8009cf8:	701a      	strb	r2, [r3, #0]

				if (fifoStatus != FIFOMultiread_Status_OK){ //< queue should not be empty. Minimum one start sign and minimum one termination sign are threre
 8009cfa:	4b2c      	ldr	r3, [pc, #176]	; (8009dac <UartDriver_receivedBytesCallback+0x3b0>)
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <UartDriver_receivedBytesCallback+0x30a>
					return UartDriver_Status_Error;
 8009d02:	230a      	movs	r3, #10
 8009d04:	e046      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
				}

				arrayBuffer[bufferIt++] = charBuffer.dataByte;
 8009d06:	4b26      	ldr	r3, [pc, #152]	; (8009da0 <UartDriver_receivedBytesCallback+0x3a4>)
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	b291      	uxth	r1, r2
 8009d0e:	4a24      	ldr	r2, [pc, #144]	; (8009da0 <UartDriver_receivedBytesCallback+0x3a4>)
 8009d10:	8011      	strh	r1, [r2, #0]
 8009d12:	461a      	mov	r2, r3
 8009d14:	4b21      	ldr	r3, [pc, #132]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009d16:	7819      	ldrb	r1, [r3, #0]
 8009d18:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <UartDriver_receivedBytesCallback+0x3a8>)
 8009d1a:	5499      	strb	r1, [r3, r2]

				if (charBuffer.dataByte == pSelf->terminationSignVal[fooIt]){ //< found termination sign
 8009d1c:	4b1f      	ldr	r3, [pc, #124]	; (8009d9c <UartDriver_receivedBytesCallback+0x3a0>)
 8009d1e:	781a      	ldrb	r2, [r3, #0]
 8009d20:	893b      	ldrh	r3, [r7, #8]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4419      	add	r1, r3
 8009d26:	f242 035e 	movw	r3, #8286	; 0x205e
 8009d2a:	440b      	add	r3, r1
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	429a      	cmp	r2, r3
 8009d32:	d000      	beq.n	8009d36 <UartDriver_receivedBytesCallback+0x33a>
				fifoStatus = FIFOMultiread_dequeue(&pSelf->callbacksStartAndTerminationSignReaders[fooIt], &charBuffer);
 8009d34:	e7d3      	b.n	8009cde <UartDriver_receivedBytesCallback+0x2e2>
					break;
 8009d36:	bf00      	nop
				}
			}

			pSelf->callbacksStartAndTerminationSign[fooIt](arrayBuffer, bufferIt, timestampBuffer, pSelf->callbackStartAndTerminationSignArgs[fooIt]);
 8009d38:	893b      	ldrh	r3, [r7, #8]
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	f603 0312 	addw	r3, r3, #2066	; 0x812
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	685c      	ldr	r4, [r3, #4]
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <UartDriver_receivedBytesCallback+0x3a4>)
 8009d48:	8819      	ldrh	r1, [r3, #0]
 8009d4a:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <UartDriver_receivedBytesCallback+0x3ac>)
 8009d4c:	6818      	ldr	r0, [r3, #0]
 8009d4e:	893b      	ldrh	r3, [r7, #8]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f603 0314 	addw	r3, r3, #2068	; 0x814
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	4811      	ldr	r0, [pc, #68]	; (8009da4 <UartDriver_receivedBytesCallback+0x3a8>)
 8009d60:	47a0      	blx	r4
 8009d62:	e000      	b.n	8009d66 <UartDriver_receivedBytesCallback+0x36a>
			continue;
 8009d64:	bf00      	nop
	for (uint16_t fooIt=0; fooIt<UART_DRIVER_MAX_CALLBACK_NUMBER; fooIt++){
 8009d66:	893b      	ldrh	r3, [r7, #8]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	813b      	strh	r3, [r7, #8]
 8009d6c:	893b      	ldrh	r3, [r7, #8]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	f67f af5a 	bls.w	8009c28 <UartDriver_receivedBytesCallback+0x22c>
		}
	}

	if (HAL_UART_Receive_IT(pSelf->pUartHandler, (uint8_t*)&pSelf->actuallyReceivingByte, 1) != HAL_OK){
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f242 0338 	movw	r3, #8248	; 0x2038
 8009d7e:	4413      	add	r3, r2
 8009d80:	2201      	movs	r2, #1
 8009d82:	4619      	mov	r1, r3
 8009d84:	f7fa fbb6 	bl	80044f4 <HAL_UART_Receive_IT>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <UartDriver_receivedBytesCallback+0x396>
		return UartDriver_Status_Error;
 8009d8e:	230a      	movs	r3, #10
 8009d90:	e000      	b.n	8009d94 <UartDriver_receivedBytesCallback+0x398>
	}

	return UartDriver_Status_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3714      	adds	r7, #20
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd90      	pop	{r4, r7, pc}
 8009d9c:	200000ac 	.word	0x200000ac
 8009da0:	200000b4 	.word	0x200000b4
 8009da4:	200000b8 	.word	0x200000b8
 8009da8:	200004b8 	.word	0x200004b8
 8009dac:	200000a8 	.word	0x200000a8

08009db0 <UartDriver_transmitCompleteCallback>:

UartDriver_Status_TypeDef UartDriver_transmitCompleteCallback(volatile UartDriver_TypeDef* pSelf){
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
		return UartDriver_Status_NotTransmitingErrror;
	}

#endif

	pSelf->transmitInProgress = false;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	731a      	strb	r2, [r3, #12]

	return UartDriver_Status_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_UART_TxCpltCallback>:

/****************************** Implementations of stm32f7xx_hal_uart.h __weak functions placeholders ******************************/

extern volatile UartDriver_TypeDef uart1Driver;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]

	if (huart != &huart1){
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	4a08      	ldr	r2, [pc, #32]	; (8009df8 <HAL_UART_TxCpltCallback+0x2c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d001      	beq.n	8009de0 <HAL_UART_TxCpltCallback+0x14>
		Error_Handler();
 8009ddc:	f7fc fb10 	bl	8006400 <Error_Handler>
	}

	if (UartDriver_transmitCompleteCallback(&uart1Driver) != UartDriver_Status_OK){
 8009de0:	4806      	ldr	r0, [pc, #24]	; (8009dfc <HAL_UART_TxCpltCallback+0x30>)
 8009de2:	f7ff ffe5 	bl	8009db0 <UartDriver_transmitCompleteCallback>
 8009de6:	4603      	mov	r3, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d001      	beq.n	8009df0 <HAL_UART_TxCpltCallback+0x24>
		Error_Handler();
 8009dec:	f7fc fb08 	bl	8006400 <Error_Handler>
	}

}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	20016870 	.word	0x20016870
 8009dfc:	20014758 	.word	0x20014758

08009e00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]

	if (huart != &huart1){
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a08      	ldr	r2, [pc, #32]	; (8009e2c <HAL_UART_RxCpltCallback+0x2c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d001      	beq.n	8009e14 <HAL_UART_RxCpltCallback+0x14>
		Error_Handler();
 8009e10:	f7fc faf6 	bl	8006400 <Error_Handler>
	}

	if (UartDriver_receivedBytesCallback(&uart1Driver) != UartDriver_Status_OK){
 8009e14:	4806      	ldr	r0, [pc, #24]	; (8009e30 <HAL_UART_RxCpltCallback+0x30>)
 8009e16:	f7ff fdf1 	bl	80099fc <UartDriver_receivedBytesCallback>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <HAL_UART_RxCpltCallback+0x24>
		Error_Handler();
 8009e20:	f7fc faee 	bl	8006400 <Error_Handler>
	}

}
 8009e24:	bf00      	nop
 8009e26:	3708      	adds	r7, #8
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20016870 	.word	0x20016870
 8009e30:	20014758 	.word	0x20014758

08009e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009e3a:	e003      	b.n	8009e44 <LoopCopyDataInit>

08009e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009e42:	3104      	adds	r1, #4

08009e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009e44:	480b      	ldr	r0, [pc, #44]	; (8009e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009e46:	4b0c      	ldr	r3, [pc, #48]	; (8009e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e4c:	d3f6      	bcc.n	8009e3c <CopyDataInit>
  ldr  r2, =_sbss
 8009e4e:	4a0b      	ldr	r2, [pc, #44]	; (8009e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e50:	e002      	b.n	8009e58 <LoopFillZerobss>

08009e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009e54:	f842 3b04 	str.w	r3, [r2], #4

08009e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009e58:	4b09      	ldr	r3, [pc, #36]	; (8009e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009e5c:	d3f9      	bcc.n	8009e52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009e5e:	f7fc fd3f 	bl	80068e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e62:	f000 f817 	bl	8009e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e66:	f7fc f94f 	bl	8006108 <main>
  bx  lr    
 8009e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009e6c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8009e70:	0800aa80 	.word	0x0800aa80
  ldr  r0, =_sdata
 8009e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e78:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8009e7c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8009e80:	200168f4 	.word	0x200168f4

08009e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e84:	e7fe      	b.n	8009e84 <ADC_IRQHandler>
	...

08009e88 <__errno>:
 8009e88:	4b01      	ldr	r3, [pc, #4]	; (8009e90 <__errno+0x8>)
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	2000000c 	.word	0x2000000c

08009e94 <__libc_init_array>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	4e0d      	ldr	r6, [pc, #52]	; (8009ecc <__libc_init_array+0x38>)
 8009e98:	4c0d      	ldr	r4, [pc, #52]	; (8009ed0 <__libc_init_array+0x3c>)
 8009e9a:	1ba4      	subs	r4, r4, r6
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	2500      	movs	r5, #0
 8009ea0:	42a5      	cmp	r5, r4
 8009ea2:	d109      	bne.n	8009eb8 <__libc_init_array+0x24>
 8009ea4:	4e0b      	ldr	r6, [pc, #44]	; (8009ed4 <__libc_init_array+0x40>)
 8009ea6:	4c0c      	ldr	r4, [pc, #48]	; (8009ed8 <__libc_init_array+0x44>)
 8009ea8:	f000 fc3e 	bl	800a728 <_init>
 8009eac:	1ba4      	subs	r4, r4, r6
 8009eae:	10a4      	asrs	r4, r4, #2
 8009eb0:	2500      	movs	r5, #0
 8009eb2:	42a5      	cmp	r5, r4
 8009eb4:	d105      	bne.n	8009ec2 <__libc_init_array+0x2e>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ebc:	4798      	blx	r3
 8009ebe:	3501      	adds	r5, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__libc_init_array+0xc>
 8009ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ec6:	4798      	blx	r3
 8009ec8:	3501      	adds	r5, #1
 8009eca:	e7f2      	b.n	8009eb2 <__libc_init_array+0x1e>
 8009ecc:	0800aa78 	.word	0x0800aa78
 8009ed0:	0800aa78 	.word	0x0800aa78
 8009ed4:	0800aa78 	.word	0x0800aa78
 8009ed8:	0800aa7c 	.word	0x0800aa7c

08009edc <memcpy>:
 8009edc:	b510      	push	{r4, lr}
 8009ede:	1e43      	subs	r3, r0, #1
 8009ee0:	440a      	add	r2, r1
 8009ee2:	4291      	cmp	r1, r2
 8009ee4:	d100      	bne.n	8009ee8 <memcpy+0xc>
 8009ee6:	bd10      	pop	{r4, pc}
 8009ee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ef0:	e7f7      	b.n	8009ee2 <memcpy+0x6>

08009ef2 <memset>:
 8009ef2:	4402      	add	r2, r0
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d100      	bne.n	8009efc <memset+0xa>
 8009efa:	4770      	bx	lr
 8009efc:	f803 1b01 	strb.w	r1, [r3], #1
 8009f00:	e7f9      	b.n	8009ef6 <memset+0x4>
	...

08009f04 <siprintf>:
 8009f04:	b40e      	push	{r1, r2, r3}
 8009f06:	b500      	push	{lr}
 8009f08:	b09c      	sub	sp, #112	; 0x70
 8009f0a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8009f10:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009f14:	9002      	str	r0, [sp, #8]
 8009f16:	9006      	str	r0, [sp, #24]
 8009f18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009f1c:	480a      	ldr	r0, [pc, #40]	; (8009f48 <siprintf+0x44>)
 8009f1e:	9104      	str	r1, [sp, #16]
 8009f20:	9107      	str	r1, [sp, #28]
 8009f22:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f2a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009f2e:	6800      	ldr	r0, [r0, #0]
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	a902      	add	r1, sp, #8
 8009f34:	f000 f866 	bl	800a004 <_svfiprintf_r>
 8009f38:	9b02      	ldr	r3, [sp, #8]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	701a      	strb	r2, [r3, #0]
 8009f3e:	b01c      	add	sp, #112	; 0x70
 8009f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f44:	b003      	add	sp, #12
 8009f46:	4770      	bx	lr
 8009f48:	2000000c 	.word	0x2000000c

08009f4c <__ssputs_r>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	688e      	ldr	r6, [r1, #8]
 8009f52:	429e      	cmp	r6, r3
 8009f54:	4682      	mov	sl, r0
 8009f56:	460c      	mov	r4, r1
 8009f58:	4691      	mov	r9, r2
 8009f5a:	4698      	mov	r8, r3
 8009f5c:	d835      	bhi.n	8009fca <__ssputs_r+0x7e>
 8009f5e:	898a      	ldrh	r2, [r1, #12]
 8009f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f64:	d031      	beq.n	8009fca <__ssputs_r+0x7e>
 8009f66:	6825      	ldr	r5, [r4, #0]
 8009f68:	6909      	ldr	r1, [r1, #16]
 8009f6a:	1a6f      	subs	r7, r5, r1
 8009f6c:	6965      	ldr	r5, [r4, #20]
 8009f6e:	2302      	movs	r3, #2
 8009f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f74:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f78:	f108 0301 	add.w	r3, r8, #1
 8009f7c:	443b      	add	r3, r7
 8009f7e:	429d      	cmp	r5, r3
 8009f80:	bf38      	it	cc
 8009f82:	461d      	movcc	r5, r3
 8009f84:	0553      	lsls	r3, r2, #21
 8009f86:	d531      	bpl.n	8009fec <__ssputs_r+0xa0>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f000 fb2d 	bl	800a5e8 <_malloc_r>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	b950      	cbnz	r0, 8009fa8 <__ssputs_r+0x5c>
 8009f92:	230c      	movs	r3, #12
 8009f94:	f8ca 3000 	str.w	r3, [sl]
 8009f98:	89a3      	ldrh	r3, [r4, #12]
 8009f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9e:	81a3      	strh	r3, [r4, #12]
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	463a      	mov	r2, r7
 8009faa:	6921      	ldr	r1, [r4, #16]
 8009fac:	f7ff ff96 	bl	8009edc <memcpy>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	6126      	str	r6, [r4, #16]
 8009fbe:	6165      	str	r5, [r4, #20]
 8009fc0:	443e      	add	r6, r7
 8009fc2:	1bed      	subs	r5, r5, r7
 8009fc4:	6026      	str	r6, [r4, #0]
 8009fc6:	60a5      	str	r5, [r4, #8]
 8009fc8:	4646      	mov	r6, r8
 8009fca:	4546      	cmp	r6, r8
 8009fcc:	bf28      	it	cs
 8009fce:	4646      	movcs	r6, r8
 8009fd0:	4632      	mov	r2, r6
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	f000 fa9f 	bl	800a518 <memmove>
 8009fda:	68a3      	ldr	r3, [r4, #8]
 8009fdc:	1b9b      	subs	r3, r3, r6
 8009fde:	60a3      	str	r3, [r4, #8]
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	441e      	add	r6, r3
 8009fe4:	6026      	str	r6, [r4, #0]
 8009fe6:	2000      	movs	r0, #0
 8009fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fec:	462a      	mov	r2, r5
 8009fee:	f000 fb59 	bl	800a6a4 <_realloc_r>
 8009ff2:	4606      	mov	r6, r0
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d1e1      	bne.n	8009fbc <__ssputs_r+0x70>
 8009ff8:	6921      	ldr	r1, [r4, #16]
 8009ffa:	4650      	mov	r0, sl
 8009ffc:	f000 faa6 	bl	800a54c <_free_r>
 800a000:	e7c7      	b.n	8009f92 <__ssputs_r+0x46>
	...

0800a004 <_svfiprintf_r>:
 800a004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a008:	b09d      	sub	sp, #116	; 0x74
 800a00a:	4680      	mov	r8, r0
 800a00c:	9303      	str	r3, [sp, #12]
 800a00e:	898b      	ldrh	r3, [r1, #12]
 800a010:	061c      	lsls	r4, r3, #24
 800a012:	460d      	mov	r5, r1
 800a014:	4616      	mov	r6, r2
 800a016:	d50f      	bpl.n	800a038 <_svfiprintf_r+0x34>
 800a018:	690b      	ldr	r3, [r1, #16]
 800a01a:	b96b      	cbnz	r3, 800a038 <_svfiprintf_r+0x34>
 800a01c:	2140      	movs	r1, #64	; 0x40
 800a01e:	f000 fae3 	bl	800a5e8 <_malloc_r>
 800a022:	6028      	str	r0, [r5, #0]
 800a024:	6128      	str	r0, [r5, #16]
 800a026:	b928      	cbnz	r0, 800a034 <_svfiprintf_r+0x30>
 800a028:	230c      	movs	r3, #12
 800a02a:	f8c8 3000 	str.w	r3, [r8]
 800a02e:	f04f 30ff 	mov.w	r0, #4294967295
 800a032:	e0c5      	b.n	800a1c0 <_svfiprintf_r+0x1bc>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	616b      	str	r3, [r5, #20]
 800a038:	2300      	movs	r3, #0
 800a03a:	9309      	str	r3, [sp, #36]	; 0x24
 800a03c:	2320      	movs	r3, #32
 800a03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a042:	2330      	movs	r3, #48	; 0x30
 800a044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a048:	f04f 0b01 	mov.w	fp, #1
 800a04c:	4637      	mov	r7, r6
 800a04e:	463c      	mov	r4, r7
 800a050:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a054:	2b00      	cmp	r3, #0
 800a056:	d13c      	bne.n	800a0d2 <_svfiprintf_r+0xce>
 800a058:	ebb7 0a06 	subs.w	sl, r7, r6
 800a05c:	d00b      	beq.n	800a076 <_svfiprintf_r+0x72>
 800a05e:	4653      	mov	r3, sl
 800a060:	4632      	mov	r2, r6
 800a062:	4629      	mov	r1, r5
 800a064:	4640      	mov	r0, r8
 800a066:	f7ff ff71 	bl	8009f4c <__ssputs_r>
 800a06a:	3001      	adds	r0, #1
 800a06c:	f000 80a3 	beq.w	800a1b6 <_svfiprintf_r+0x1b2>
 800a070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a072:	4453      	add	r3, sl
 800a074:	9309      	str	r3, [sp, #36]	; 0x24
 800a076:	783b      	ldrb	r3, [r7, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 809c 	beq.w	800a1b6 <_svfiprintf_r+0x1b2>
 800a07e:	2300      	movs	r3, #0
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	9205      	str	r2, [sp, #20]
 800a08a:	9306      	str	r3, [sp, #24]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a090:	931a      	str	r3, [sp, #104]	; 0x68
 800a092:	2205      	movs	r2, #5
 800a094:	7821      	ldrb	r1, [r4, #0]
 800a096:	4850      	ldr	r0, [pc, #320]	; (800a1d8 <_svfiprintf_r+0x1d4>)
 800a098:	f7f6 f8d2 	bl	8000240 <memchr>
 800a09c:	1c67      	adds	r7, r4, #1
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	b9d8      	cbnz	r0, 800a0da <_svfiprintf_r+0xd6>
 800a0a2:	06d9      	lsls	r1, r3, #27
 800a0a4:	bf44      	itt	mi
 800a0a6:	2220      	movmi	r2, #32
 800a0a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0ac:	071a      	lsls	r2, r3, #28
 800a0ae:	bf44      	itt	mi
 800a0b0:	222b      	movmi	r2, #43	; 0x2b
 800a0b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0b6:	7822      	ldrb	r2, [r4, #0]
 800a0b8:	2a2a      	cmp	r2, #42	; 0x2a
 800a0ba:	d016      	beq.n	800a0ea <_svfiprintf_r+0xe6>
 800a0bc:	9a07      	ldr	r2, [sp, #28]
 800a0be:	2100      	movs	r1, #0
 800a0c0:	200a      	movs	r0, #10
 800a0c2:	4627      	mov	r7, r4
 800a0c4:	3401      	adds	r4, #1
 800a0c6:	783b      	ldrb	r3, [r7, #0]
 800a0c8:	3b30      	subs	r3, #48	; 0x30
 800a0ca:	2b09      	cmp	r3, #9
 800a0cc:	d951      	bls.n	800a172 <_svfiprintf_r+0x16e>
 800a0ce:	b1c9      	cbz	r1, 800a104 <_svfiprintf_r+0x100>
 800a0d0:	e011      	b.n	800a0f6 <_svfiprintf_r+0xf2>
 800a0d2:	2b25      	cmp	r3, #37	; 0x25
 800a0d4:	d0c0      	beq.n	800a058 <_svfiprintf_r+0x54>
 800a0d6:	4627      	mov	r7, r4
 800a0d8:	e7b9      	b.n	800a04e <_svfiprintf_r+0x4a>
 800a0da:	4a3f      	ldr	r2, [pc, #252]	; (800a1d8 <_svfiprintf_r+0x1d4>)
 800a0dc:	1a80      	subs	r0, r0, r2
 800a0de:	fa0b f000 	lsl.w	r0, fp, r0
 800a0e2:	4318      	orrs	r0, r3
 800a0e4:	9004      	str	r0, [sp, #16]
 800a0e6:	463c      	mov	r4, r7
 800a0e8:	e7d3      	b.n	800a092 <_svfiprintf_r+0x8e>
 800a0ea:	9a03      	ldr	r2, [sp, #12]
 800a0ec:	1d11      	adds	r1, r2, #4
 800a0ee:	6812      	ldr	r2, [r2, #0]
 800a0f0:	9103      	str	r1, [sp, #12]
 800a0f2:	2a00      	cmp	r2, #0
 800a0f4:	db01      	blt.n	800a0fa <_svfiprintf_r+0xf6>
 800a0f6:	9207      	str	r2, [sp, #28]
 800a0f8:	e004      	b.n	800a104 <_svfiprintf_r+0x100>
 800a0fa:	4252      	negs	r2, r2
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	9207      	str	r2, [sp, #28]
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	783b      	ldrb	r3, [r7, #0]
 800a106:	2b2e      	cmp	r3, #46	; 0x2e
 800a108:	d10e      	bne.n	800a128 <_svfiprintf_r+0x124>
 800a10a:	787b      	ldrb	r3, [r7, #1]
 800a10c:	2b2a      	cmp	r3, #42	; 0x2a
 800a10e:	f107 0101 	add.w	r1, r7, #1
 800a112:	d132      	bne.n	800a17a <_svfiprintf_r+0x176>
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	1d1a      	adds	r2, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9203      	str	r2, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfb8      	it	lt
 800a120:	f04f 33ff 	movlt.w	r3, #4294967295
 800a124:	3702      	adds	r7, #2
 800a126:	9305      	str	r3, [sp, #20]
 800a128:	4c2c      	ldr	r4, [pc, #176]	; (800a1dc <_svfiprintf_r+0x1d8>)
 800a12a:	7839      	ldrb	r1, [r7, #0]
 800a12c:	2203      	movs	r2, #3
 800a12e:	4620      	mov	r0, r4
 800a130:	f7f6 f886 	bl	8000240 <memchr>
 800a134:	b138      	cbz	r0, 800a146 <_svfiprintf_r+0x142>
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	1b00      	subs	r0, r0, r4
 800a13a:	fa03 f000 	lsl.w	r0, r3, r0
 800a13e:	9b04      	ldr	r3, [sp, #16]
 800a140:	4303      	orrs	r3, r0
 800a142:	9304      	str	r3, [sp, #16]
 800a144:	3701      	adds	r7, #1
 800a146:	7839      	ldrb	r1, [r7, #0]
 800a148:	4825      	ldr	r0, [pc, #148]	; (800a1e0 <_svfiprintf_r+0x1dc>)
 800a14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a14e:	2206      	movs	r2, #6
 800a150:	1c7e      	adds	r6, r7, #1
 800a152:	f7f6 f875 	bl	8000240 <memchr>
 800a156:	2800      	cmp	r0, #0
 800a158:	d035      	beq.n	800a1c6 <_svfiprintf_r+0x1c2>
 800a15a:	4b22      	ldr	r3, [pc, #136]	; (800a1e4 <_svfiprintf_r+0x1e0>)
 800a15c:	b9fb      	cbnz	r3, 800a19e <_svfiprintf_r+0x19a>
 800a15e:	9b03      	ldr	r3, [sp, #12]
 800a160:	3307      	adds	r3, #7
 800a162:	f023 0307 	bic.w	r3, r3, #7
 800a166:	3308      	adds	r3, #8
 800a168:	9303      	str	r3, [sp, #12]
 800a16a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16c:	444b      	add	r3, r9
 800a16e:	9309      	str	r3, [sp, #36]	; 0x24
 800a170:	e76c      	b.n	800a04c <_svfiprintf_r+0x48>
 800a172:	fb00 3202 	mla	r2, r0, r2, r3
 800a176:	2101      	movs	r1, #1
 800a178:	e7a3      	b.n	800a0c2 <_svfiprintf_r+0xbe>
 800a17a:	2300      	movs	r3, #0
 800a17c:	9305      	str	r3, [sp, #20]
 800a17e:	4618      	mov	r0, r3
 800a180:	240a      	movs	r4, #10
 800a182:	460f      	mov	r7, r1
 800a184:	3101      	adds	r1, #1
 800a186:	783a      	ldrb	r2, [r7, #0]
 800a188:	3a30      	subs	r2, #48	; 0x30
 800a18a:	2a09      	cmp	r2, #9
 800a18c:	d903      	bls.n	800a196 <_svfiprintf_r+0x192>
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0ca      	beq.n	800a128 <_svfiprintf_r+0x124>
 800a192:	9005      	str	r0, [sp, #20]
 800a194:	e7c8      	b.n	800a128 <_svfiprintf_r+0x124>
 800a196:	fb04 2000 	mla	r0, r4, r0, r2
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7f1      	b.n	800a182 <_svfiprintf_r+0x17e>
 800a19e:	ab03      	add	r3, sp, #12
 800a1a0:	9300      	str	r3, [sp, #0]
 800a1a2:	462a      	mov	r2, r5
 800a1a4:	4b10      	ldr	r3, [pc, #64]	; (800a1e8 <_svfiprintf_r+0x1e4>)
 800a1a6:	a904      	add	r1, sp, #16
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	f3af 8000 	nop.w
 800a1ae:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1b2:	4681      	mov	r9, r0
 800a1b4:	d1d9      	bne.n	800a16a <_svfiprintf_r+0x166>
 800a1b6:	89ab      	ldrh	r3, [r5, #12]
 800a1b8:	065b      	lsls	r3, r3, #25
 800a1ba:	f53f af38 	bmi.w	800a02e <_svfiprintf_r+0x2a>
 800a1be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1c0:	b01d      	add	sp, #116	; 0x74
 800a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c6:	ab03      	add	r3, sp, #12
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	462a      	mov	r2, r5
 800a1cc:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <_svfiprintf_r+0x1e4>)
 800a1ce:	a904      	add	r1, sp, #16
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	f000 f881 	bl	800a2d8 <_printf_i>
 800a1d6:	e7ea      	b.n	800a1ae <_svfiprintf_r+0x1aa>
 800a1d8:	0800aa3c 	.word	0x0800aa3c
 800a1dc:	0800aa42 	.word	0x0800aa42
 800a1e0:	0800aa46 	.word	0x0800aa46
 800a1e4:	00000000 	.word	0x00000000
 800a1e8:	08009f4d 	.word	0x08009f4d

0800a1ec <_printf_common>:
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	4691      	mov	r9, r2
 800a1f2:	461f      	mov	r7, r3
 800a1f4:	688a      	ldr	r2, [r1, #8]
 800a1f6:	690b      	ldr	r3, [r1, #16]
 800a1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bfb8      	it	lt
 800a200:	4613      	movlt	r3, r2
 800a202:	f8c9 3000 	str.w	r3, [r9]
 800a206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	b112      	cbz	r2, 800a216 <_printf_common+0x2a>
 800a210:	3301      	adds	r3, #1
 800a212:	f8c9 3000 	str.w	r3, [r9]
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	0699      	lsls	r1, r3, #26
 800a21a:	bf42      	ittt	mi
 800a21c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a220:	3302      	addmi	r3, #2
 800a222:	f8c9 3000 	strmi.w	r3, [r9]
 800a226:	6825      	ldr	r5, [r4, #0]
 800a228:	f015 0506 	ands.w	r5, r5, #6
 800a22c:	d107      	bne.n	800a23e <_printf_common+0x52>
 800a22e:	f104 0a19 	add.w	sl, r4, #25
 800a232:	68e3      	ldr	r3, [r4, #12]
 800a234:	f8d9 2000 	ldr.w	r2, [r9]
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	429d      	cmp	r5, r3
 800a23c:	db29      	blt.n	800a292 <_printf_common+0xa6>
 800a23e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	3300      	adds	r3, #0
 800a246:	bf18      	it	ne
 800a248:	2301      	movne	r3, #1
 800a24a:	0692      	lsls	r2, r2, #26
 800a24c:	d42e      	bmi.n	800a2ac <_printf_common+0xc0>
 800a24e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a252:	4639      	mov	r1, r7
 800a254:	4630      	mov	r0, r6
 800a256:	47c0      	blx	r8
 800a258:	3001      	adds	r0, #1
 800a25a:	d021      	beq.n	800a2a0 <_printf_common+0xb4>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	68e5      	ldr	r5, [r4, #12]
 800a260:	f8d9 2000 	ldr.w	r2, [r9]
 800a264:	f003 0306 	and.w	r3, r3, #6
 800a268:	2b04      	cmp	r3, #4
 800a26a:	bf08      	it	eq
 800a26c:	1aad      	subeq	r5, r5, r2
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	6922      	ldr	r2, [r4, #16]
 800a272:	bf0c      	ite	eq
 800a274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a278:	2500      	movne	r5, #0
 800a27a:	4293      	cmp	r3, r2
 800a27c:	bfc4      	itt	gt
 800a27e:	1a9b      	subgt	r3, r3, r2
 800a280:	18ed      	addgt	r5, r5, r3
 800a282:	f04f 0900 	mov.w	r9, #0
 800a286:	341a      	adds	r4, #26
 800a288:	454d      	cmp	r5, r9
 800a28a:	d11b      	bne.n	800a2c4 <_printf_common+0xd8>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a292:	2301      	movs	r3, #1
 800a294:	4652      	mov	r2, sl
 800a296:	4639      	mov	r1, r7
 800a298:	4630      	mov	r0, r6
 800a29a:	47c0      	blx	r8
 800a29c:	3001      	adds	r0, #1
 800a29e:	d103      	bne.n	800a2a8 <_printf_common+0xbc>
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	e7c2      	b.n	800a232 <_printf_common+0x46>
 800a2ac:	18e1      	adds	r1, r4, r3
 800a2ae:	1c5a      	adds	r2, r3, #1
 800a2b0:	2030      	movs	r0, #48	; 0x30
 800a2b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2b6:	4422      	add	r2, r4
 800a2b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2c0:	3302      	adds	r3, #2
 800a2c2:	e7c4      	b.n	800a24e <_printf_common+0x62>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	47c0      	blx	r8
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	d0e6      	beq.n	800a2a0 <_printf_common+0xb4>
 800a2d2:	f109 0901 	add.w	r9, r9, #1
 800a2d6:	e7d7      	b.n	800a288 <_printf_common+0x9c>

0800a2d8 <_printf_i>:
 800a2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2dc:	4617      	mov	r7, r2
 800a2de:	7e0a      	ldrb	r2, [r1, #24]
 800a2e0:	b085      	sub	sp, #20
 800a2e2:	2a6e      	cmp	r2, #110	; 0x6e
 800a2e4:	4698      	mov	r8, r3
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	460c      	mov	r4, r1
 800a2ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a2f0:	f000 80bc 	beq.w	800a46c <_printf_i+0x194>
 800a2f4:	d81a      	bhi.n	800a32c <_printf_i+0x54>
 800a2f6:	2a63      	cmp	r2, #99	; 0x63
 800a2f8:	d02e      	beq.n	800a358 <_printf_i+0x80>
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x3a>
 800a2fc:	2a00      	cmp	r2, #0
 800a2fe:	f000 80c8 	beq.w	800a492 <_printf_i+0x1ba>
 800a302:	2a58      	cmp	r2, #88	; 0x58
 800a304:	f000 808a 	beq.w	800a41c <_printf_i+0x144>
 800a308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a30c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a310:	e02a      	b.n	800a368 <_printf_i+0x90>
 800a312:	2a64      	cmp	r2, #100	; 0x64
 800a314:	d001      	beq.n	800a31a <_printf_i+0x42>
 800a316:	2a69      	cmp	r2, #105	; 0x69
 800a318:	d1f6      	bne.n	800a308 <_printf_i+0x30>
 800a31a:	6821      	ldr	r1, [r4, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a322:	d023      	beq.n	800a36c <_printf_i+0x94>
 800a324:	1d11      	adds	r1, r2, #4
 800a326:	6019      	str	r1, [r3, #0]
 800a328:	6813      	ldr	r3, [r2, #0]
 800a32a:	e027      	b.n	800a37c <_printf_i+0xa4>
 800a32c:	2a73      	cmp	r2, #115	; 0x73
 800a32e:	f000 80b4 	beq.w	800a49a <_printf_i+0x1c2>
 800a332:	d808      	bhi.n	800a346 <_printf_i+0x6e>
 800a334:	2a6f      	cmp	r2, #111	; 0x6f
 800a336:	d02a      	beq.n	800a38e <_printf_i+0xb6>
 800a338:	2a70      	cmp	r2, #112	; 0x70
 800a33a:	d1e5      	bne.n	800a308 <_printf_i+0x30>
 800a33c:	680a      	ldr	r2, [r1, #0]
 800a33e:	f042 0220 	orr.w	r2, r2, #32
 800a342:	600a      	str	r2, [r1, #0]
 800a344:	e003      	b.n	800a34e <_printf_i+0x76>
 800a346:	2a75      	cmp	r2, #117	; 0x75
 800a348:	d021      	beq.n	800a38e <_printf_i+0xb6>
 800a34a:	2a78      	cmp	r2, #120	; 0x78
 800a34c:	d1dc      	bne.n	800a308 <_printf_i+0x30>
 800a34e:	2278      	movs	r2, #120	; 0x78
 800a350:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a354:	496e      	ldr	r1, [pc, #440]	; (800a510 <_printf_i+0x238>)
 800a356:	e064      	b.n	800a422 <_printf_i+0x14a>
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a35e:	1d11      	adds	r1, r2, #4
 800a360:	6019      	str	r1, [r3, #0]
 800a362:	6813      	ldr	r3, [r2, #0]
 800a364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a368:	2301      	movs	r3, #1
 800a36a:	e0a3      	b.n	800a4b4 <_printf_i+0x1dc>
 800a36c:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a370:	f102 0104 	add.w	r1, r2, #4
 800a374:	6019      	str	r1, [r3, #0]
 800a376:	d0d7      	beq.n	800a328 <_printf_i+0x50>
 800a378:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	da03      	bge.n	800a388 <_printf_i+0xb0>
 800a380:	222d      	movs	r2, #45	; 0x2d
 800a382:	425b      	negs	r3, r3
 800a384:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a388:	4962      	ldr	r1, [pc, #392]	; (800a514 <_printf_i+0x23c>)
 800a38a:	220a      	movs	r2, #10
 800a38c:	e017      	b.n	800a3be <_printf_i+0xe6>
 800a38e:	6820      	ldr	r0, [r4, #0]
 800a390:	6819      	ldr	r1, [r3, #0]
 800a392:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a396:	d003      	beq.n	800a3a0 <_printf_i+0xc8>
 800a398:	1d08      	adds	r0, r1, #4
 800a39a:	6018      	str	r0, [r3, #0]
 800a39c:	680b      	ldr	r3, [r1, #0]
 800a39e:	e006      	b.n	800a3ae <_printf_i+0xd6>
 800a3a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3a4:	f101 0004 	add.w	r0, r1, #4
 800a3a8:	6018      	str	r0, [r3, #0]
 800a3aa:	d0f7      	beq.n	800a39c <_printf_i+0xc4>
 800a3ac:	880b      	ldrh	r3, [r1, #0]
 800a3ae:	4959      	ldr	r1, [pc, #356]	; (800a514 <_printf_i+0x23c>)
 800a3b0:	2a6f      	cmp	r2, #111	; 0x6f
 800a3b2:	bf14      	ite	ne
 800a3b4:	220a      	movne	r2, #10
 800a3b6:	2208      	moveq	r2, #8
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a3be:	6865      	ldr	r5, [r4, #4]
 800a3c0:	60a5      	str	r5, [r4, #8]
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	f2c0 809c 	blt.w	800a500 <_printf_i+0x228>
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	f020 0004 	bic.w	r0, r0, #4
 800a3ce:	6020      	str	r0, [r4, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d13f      	bne.n	800a454 <_printf_i+0x17c>
 800a3d4:	2d00      	cmp	r5, #0
 800a3d6:	f040 8095 	bne.w	800a504 <_printf_i+0x22c>
 800a3da:	4675      	mov	r5, lr
 800a3dc:	2a08      	cmp	r2, #8
 800a3de:	d10b      	bne.n	800a3f8 <_printf_i+0x120>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07da      	lsls	r2, r3, #31
 800a3e4:	d508      	bpl.n	800a3f8 <_printf_i+0x120>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6862      	ldr	r2, [r4, #4]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	bfde      	ittt	le
 800a3ee:	2330      	movle	r3, #48	; 0x30
 800a3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3f8:	ebae 0305 	sub.w	r3, lr, r5
 800a3fc:	6123      	str	r3, [r4, #16]
 800a3fe:	f8cd 8000 	str.w	r8, [sp]
 800a402:	463b      	mov	r3, r7
 800a404:	aa03      	add	r2, sp, #12
 800a406:	4621      	mov	r1, r4
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff feef 	bl	800a1ec <_printf_common>
 800a40e:	3001      	adds	r0, #1
 800a410:	d155      	bne.n	800a4be <_printf_i+0x1e6>
 800a412:	f04f 30ff 	mov.w	r0, #4294967295
 800a416:	b005      	add	sp, #20
 800a418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a41c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a420:	493c      	ldr	r1, [pc, #240]	; (800a514 <_printf_i+0x23c>)
 800a422:	6822      	ldr	r2, [r4, #0]
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a42a:	f100 0504 	add.w	r5, r0, #4
 800a42e:	601d      	str	r5, [r3, #0]
 800a430:	d001      	beq.n	800a436 <_printf_i+0x15e>
 800a432:	6803      	ldr	r3, [r0, #0]
 800a434:	e002      	b.n	800a43c <_printf_i+0x164>
 800a436:	0655      	lsls	r5, r2, #25
 800a438:	d5fb      	bpl.n	800a432 <_printf_i+0x15a>
 800a43a:	8803      	ldrh	r3, [r0, #0]
 800a43c:	07d0      	lsls	r0, r2, #31
 800a43e:	bf44      	itt	mi
 800a440:	f042 0220 	orrmi.w	r2, r2, #32
 800a444:	6022      	strmi	r2, [r4, #0]
 800a446:	b91b      	cbnz	r3, 800a450 <_printf_i+0x178>
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	f022 0220 	bic.w	r2, r2, #32
 800a44e:	6022      	str	r2, [r4, #0]
 800a450:	2210      	movs	r2, #16
 800a452:	e7b1      	b.n	800a3b8 <_printf_i+0xe0>
 800a454:	4675      	mov	r5, lr
 800a456:	fbb3 f0f2 	udiv	r0, r3, r2
 800a45a:	fb02 3310 	mls	r3, r2, r0, r3
 800a45e:	5ccb      	ldrb	r3, [r1, r3]
 800a460:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a464:	4603      	mov	r3, r0
 800a466:	2800      	cmp	r0, #0
 800a468:	d1f5      	bne.n	800a456 <_printf_i+0x17e>
 800a46a:	e7b7      	b.n	800a3dc <_printf_i+0x104>
 800a46c:	6808      	ldr	r0, [r1, #0]
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	6949      	ldr	r1, [r1, #20]
 800a472:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a476:	d004      	beq.n	800a482 <_printf_i+0x1aa>
 800a478:	1d10      	adds	r0, r2, #4
 800a47a:	6018      	str	r0, [r3, #0]
 800a47c:	6813      	ldr	r3, [r2, #0]
 800a47e:	6019      	str	r1, [r3, #0]
 800a480:	e007      	b.n	800a492 <_printf_i+0x1ba>
 800a482:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a486:	f102 0004 	add.w	r0, r2, #4
 800a48a:	6018      	str	r0, [r3, #0]
 800a48c:	6813      	ldr	r3, [r2, #0]
 800a48e:	d0f6      	beq.n	800a47e <_printf_i+0x1a6>
 800a490:	8019      	strh	r1, [r3, #0]
 800a492:	2300      	movs	r3, #0
 800a494:	6123      	str	r3, [r4, #16]
 800a496:	4675      	mov	r5, lr
 800a498:	e7b1      	b.n	800a3fe <_printf_i+0x126>
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	1d11      	adds	r1, r2, #4
 800a49e:	6019      	str	r1, [r3, #0]
 800a4a0:	6815      	ldr	r5, [r2, #0]
 800a4a2:	6862      	ldr	r2, [r4, #4]
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7f5 feca 	bl	8000240 <memchr>
 800a4ac:	b108      	cbz	r0, 800a4b2 <_printf_i+0x1da>
 800a4ae:	1b40      	subs	r0, r0, r5
 800a4b0:	6060      	str	r0, [r4, #4]
 800a4b2:	6863      	ldr	r3, [r4, #4]
 800a4b4:	6123      	str	r3, [r4, #16]
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4bc:	e79f      	b.n	800a3fe <_printf_i+0x126>
 800a4be:	6923      	ldr	r3, [r4, #16]
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	47c0      	blx	r8
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d0a2      	beq.n	800a412 <_printf_i+0x13a>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	079b      	lsls	r3, r3, #30
 800a4d0:	d507      	bpl.n	800a4e2 <_printf_i+0x20a>
 800a4d2:	2500      	movs	r5, #0
 800a4d4:	f104 0919 	add.w	r9, r4, #25
 800a4d8:	68e3      	ldr	r3, [r4, #12]
 800a4da:	9a03      	ldr	r2, [sp, #12]
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	429d      	cmp	r5, r3
 800a4e0:	db05      	blt.n	800a4ee <_printf_i+0x216>
 800a4e2:	68e0      	ldr	r0, [r4, #12]
 800a4e4:	9b03      	ldr	r3, [sp, #12]
 800a4e6:	4298      	cmp	r0, r3
 800a4e8:	bfb8      	it	lt
 800a4ea:	4618      	movlt	r0, r3
 800a4ec:	e793      	b.n	800a416 <_printf_i+0x13e>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4639      	mov	r1, r7
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	47c0      	blx	r8
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d08a      	beq.n	800a412 <_printf_i+0x13a>
 800a4fc:	3501      	adds	r5, #1
 800a4fe:	e7eb      	b.n	800a4d8 <_printf_i+0x200>
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1a7      	bne.n	800a454 <_printf_i+0x17c>
 800a504:	780b      	ldrb	r3, [r1, #0]
 800a506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a50a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a50e:	e765      	b.n	800a3dc <_printf_i+0x104>
 800a510:	0800aa5e 	.word	0x0800aa5e
 800a514:	0800aa4d 	.word	0x0800aa4d

0800a518 <memmove>:
 800a518:	4288      	cmp	r0, r1
 800a51a:	b510      	push	{r4, lr}
 800a51c:	eb01 0302 	add.w	r3, r1, r2
 800a520:	d803      	bhi.n	800a52a <memmove+0x12>
 800a522:	1e42      	subs	r2, r0, #1
 800a524:	4299      	cmp	r1, r3
 800a526:	d10c      	bne.n	800a542 <memmove+0x2a>
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	4298      	cmp	r0, r3
 800a52c:	d2f9      	bcs.n	800a522 <memmove+0xa>
 800a52e:	1881      	adds	r1, r0, r2
 800a530:	1ad2      	subs	r2, r2, r3
 800a532:	42d3      	cmn	r3, r2
 800a534:	d100      	bne.n	800a538 <memmove+0x20>
 800a536:	bd10      	pop	{r4, pc}
 800a538:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a53c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a540:	e7f7      	b.n	800a532 <memmove+0x1a>
 800a542:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a546:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a54a:	e7eb      	b.n	800a524 <memmove+0xc>

0800a54c <_free_r>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	4605      	mov	r5, r0
 800a550:	2900      	cmp	r1, #0
 800a552:	d045      	beq.n	800a5e0 <_free_r+0x94>
 800a554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a558:	1f0c      	subs	r4, r1, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfb8      	it	lt
 800a55e:	18e4      	addlt	r4, r4, r3
 800a560:	f000 f8d6 	bl	800a710 <__malloc_lock>
 800a564:	4a1f      	ldr	r2, [pc, #124]	; (800a5e4 <_free_r+0x98>)
 800a566:	6813      	ldr	r3, [r2, #0]
 800a568:	4610      	mov	r0, r2
 800a56a:	b933      	cbnz	r3, 800a57a <_free_r+0x2e>
 800a56c:	6063      	str	r3, [r4, #4]
 800a56e:	6014      	str	r4, [r2, #0]
 800a570:	4628      	mov	r0, r5
 800a572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a576:	f000 b8cc 	b.w	800a712 <__malloc_unlock>
 800a57a:	42a3      	cmp	r3, r4
 800a57c:	d90c      	bls.n	800a598 <_free_r+0x4c>
 800a57e:	6821      	ldr	r1, [r4, #0]
 800a580:	1862      	adds	r2, r4, r1
 800a582:	4293      	cmp	r3, r2
 800a584:	bf04      	itt	eq
 800a586:	681a      	ldreq	r2, [r3, #0]
 800a588:	685b      	ldreq	r3, [r3, #4]
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	bf04      	itt	eq
 800a58e:	1852      	addeq	r2, r2, r1
 800a590:	6022      	streq	r2, [r4, #0]
 800a592:	6004      	str	r4, [r0, #0]
 800a594:	e7ec      	b.n	800a570 <_free_r+0x24>
 800a596:	4613      	mov	r3, r2
 800a598:	685a      	ldr	r2, [r3, #4]
 800a59a:	b10a      	cbz	r2, 800a5a0 <_free_r+0x54>
 800a59c:	42a2      	cmp	r2, r4
 800a59e:	d9fa      	bls.n	800a596 <_free_r+0x4a>
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	1858      	adds	r0, r3, r1
 800a5a4:	42a0      	cmp	r0, r4
 800a5a6:	d10b      	bne.n	800a5c0 <_free_r+0x74>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	4401      	add	r1, r0
 800a5ac:	1858      	adds	r0, r3, r1
 800a5ae:	4282      	cmp	r2, r0
 800a5b0:	6019      	str	r1, [r3, #0]
 800a5b2:	d1dd      	bne.n	800a570 <_free_r+0x24>
 800a5b4:	6810      	ldr	r0, [r2, #0]
 800a5b6:	6852      	ldr	r2, [r2, #4]
 800a5b8:	605a      	str	r2, [r3, #4]
 800a5ba:	4401      	add	r1, r0
 800a5bc:	6019      	str	r1, [r3, #0]
 800a5be:	e7d7      	b.n	800a570 <_free_r+0x24>
 800a5c0:	d902      	bls.n	800a5c8 <_free_r+0x7c>
 800a5c2:	230c      	movs	r3, #12
 800a5c4:	602b      	str	r3, [r5, #0]
 800a5c6:	e7d3      	b.n	800a570 <_free_r+0x24>
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	1821      	adds	r1, r4, r0
 800a5cc:	428a      	cmp	r2, r1
 800a5ce:	bf04      	itt	eq
 800a5d0:	6811      	ldreq	r1, [r2, #0]
 800a5d2:	6852      	ldreq	r2, [r2, #4]
 800a5d4:	6062      	str	r2, [r4, #4]
 800a5d6:	bf04      	itt	eq
 800a5d8:	1809      	addeq	r1, r1, r0
 800a5da:	6021      	streq	r1, [r4, #0]
 800a5dc:	605c      	str	r4, [r3, #4]
 800a5de:	e7c7      	b.n	800a570 <_free_r+0x24>
 800a5e0:	bd38      	pop	{r3, r4, r5, pc}
 800a5e2:	bf00      	nop
 800a5e4:	200004bc 	.word	0x200004bc

0800a5e8 <_malloc_r>:
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	1ccd      	adds	r5, r1, #3
 800a5ec:	f025 0503 	bic.w	r5, r5, #3
 800a5f0:	3508      	adds	r5, #8
 800a5f2:	2d0c      	cmp	r5, #12
 800a5f4:	bf38      	it	cc
 800a5f6:	250c      	movcc	r5, #12
 800a5f8:	2d00      	cmp	r5, #0
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	db01      	blt.n	800a602 <_malloc_r+0x1a>
 800a5fe:	42a9      	cmp	r1, r5
 800a600:	d903      	bls.n	800a60a <_malloc_r+0x22>
 800a602:	230c      	movs	r3, #12
 800a604:	6033      	str	r3, [r6, #0]
 800a606:	2000      	movs	r0, #0
 800a608:	bd70      	pop	{r4, r5, r6, pc}
 800a60a:	f000 f881 	bl	800a710 <__malloc_lock>
 800a60e:	4a23      	ldr	r2, [pc, #140]	; (800a69c <_malloc_r+0xb4>)
 800a610:	6814      	ldr	r4, [r2, #0]
 800a612:	4621      	mov	r1, r4
 800a614:	b991      	cbnz	r1, 800a63c <_malloc_r+0x54>
 800a616:	4c22      	ldr	r4, [pc, #136]	; (800a6a0 <_malloc_r+0xb8>)
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	b91b      	cbnz	r3, 800a624 <_malloc_r+0x3c>
 800a61c:	4630      	mov	r0, r6
 800a61e:	f000 f867 	bl	800a6f0 <_sbrk_r>
 800a622:	6020      	str	r0, [r4, #0]
 800a624:	4629      	mov	r1, r5
 800a626:	4630      	mov	r0, r6
 800a628:	f000 f862 	bl	800a6f0 <_sbrk_r>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d126      	bne.n	800a67e <_malloc_r+0x96>
 800a630:	230c      	movs	r3, #12
 800a632:	6033      	str	r3, [r6, #0]
 800a634:	4630      	mov	r0, r6
 800a636:	f000 f86c 	bl	800a712 <__malloc_unlock>
 800a63a:	e7e4      	b.n	800a606 <_malloc_r+0x1e>
 800a63c:	680b      	ldr	r3, [r1, #0]
 800a63e:	1b5b      	subs	r3, r3, r5
 800a640:	d41a      	bmi.n	800a678 <_malloc_r+0x90>
 800a642:	2b0b      	cmp	r3, #11
 800a644:	d90f      	bls.n	800a666 <_malloc_r+0x7e>
 800a646:	600b      	str	r3, [r1, #0]
 800a648:	50cd      	str	r5, [r1, r3]
 800a64a:	18cc      	adds	r4, r1, r3
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 f860 	bl	800a712 <__malloc_unlock>
 800a652:	f104 000b 	add.w	r0, r4, #11
 800a656:	1d23      	adds	r3, r4, #4
 800a658:	f020 0007 	bic.w	r0, r0, #7
 800a65c:	1ac3      	subs	r3, r0, r3
 800a65e:	d01b      	beq.n	800a698 <_malloc_r+0xb0>
 800a660:	425a      	negs	r2, r3
 800a662:	50e2      	str	r2, [r4, r3]
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	428c      	cmp	r4, r1
 800a668:	bf0d      	iteet	eq
 800a66a:	6863      	ldreq	r3, [r4, #4]
 800a66c:	684b      	ldrne	r3, [r1, #4]
 800a66e:	6063      	strne	r3, [r4, #4]
 800a670:	6013      	streq	r3, [r2, #0]
 800a672:	bf18      	it	ne
 800a674:	460c      	movne	r4, r1
 800a676:	e7e9      	b.n	800a64c <_malloc_r+0x64>
 800a678:	460c      	mov	r4, r1
 800a67a:	6849      	ldr	r1, [r1, #4]
 800a67c:	e7ca      	b.n	800a614 <_malloc_r+0x2c>
 800a67e:	1cc4      	adds	r4, r0, #3
 800a680:	f024 0403 	bic.w	r4, r4, #3
 800a684:	42a0      	cmp	r0, r4
 800a686:	d005      	beq.n	800a694 <_malloc_r+0xac>
 800a688:	1a21      	subs	r1, r4, r0
 800a68a:	4630      	mov	r0, r6
 800a68c:	f000 f830 	bl	800a6f0 <_sbrk_r>
 800a690:	3001      	adds	r0, #1
 800a692:	d0cd      	beq.n	800a630 <_malloc_r+0x48>
 800a694:	6025      	str	r5, [r4, #0]
 800a696:	e7d9      	b.n	800a64c <_malloc_r+0x64>
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	bf00      	nop
 800a69c:	200004bc 	.word	0x200004bc
 800a6a0:	200004c0 	.word	0x200004c0

0800a6a4 <_realloc_r>:
 800a6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	4614      	mov	r4, r2
 800a6aa:	460e      	mov	r6, r1
 800a6ac:	b921      	cbnz	r1, 800a6b8 <_realloc_r+0x14>
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a6b4:	f7ff bf98 	b.w	800a5e8 <_malloc_r>
 800a6b8:	b922      	cbnz	r2, 800a6c4 <_realloc_r+0x20>
 800a6ba:	f7ff ff47 	bl	800a54c <_free_r>
 800a6be:	4625      	mov	r5, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c4:	f000 f826 	bl	800a714 <_malloc_usable_size_r>
 800a6c8:	4284      	cmp	r4, r0
 800a6ca:	d90f      	bls.n	800a6ec <_realloc_r+0x48>
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	f7ff ff8a 	bl	800a5e8 <_malloc_r>
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d0f2      	beq.n	800a6c0 <_realloc_r+0x1c>
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4622      	mov	r2, r4
 800a6de:	f7ff fbfd 	bl	8009edc <memcpy>
 800a6e2:	4631      	mov	r1, r6
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff ff31 	bl	800a54c <_free_r>
 800a6ea:	e7e9      	b.n	800a6c0 <_realloc_r+0x1c>
 800a6ec:	4635      	mov	r5, r6
 800a6ee:	e7e7      	b.n	800a6c0 <_realloc_r+0x1c>

0800a6f0 <_sbrk_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4c06      	ldr	r4, [pc, #24]	; (800a70c <_sbrk_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	6023      	str	r3, [r4, #0]
 800a6fc:	f7fc f8c4 	bl	8006888 <_sbrk>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_sbrk_r+0x1a>
 800a704:	6823      	ldr	r3, [r4, #0]
 800a706:	b103      	cbz	r3, 800a70a <_sbrk_r+0x1a>
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	200168f0 	.word	0x200168f0

0800a710 <__malloc_lock>:
 800a710:	4770      	bx	lr

0800a712 <__malloc_unlock>:
 800a712:	4770      	bx	lr

0800a714 <_malloc_usable_size_r>:
 800a714:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800a718:	2800      	cmp	r0, #0
 800a71a:	f1a0 0004 	sub.w	r0, r0, #4
 800a71e:	bfbc      	itt	lt
 800a720:	580b      	ldrlt	r3, [r1, r0]
 800a722:	18c0      	addlt	r0, r0, r3
 800a724:	4770      	bx	lr
	...

0800a728 <_init>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr

0800a734 <_fini>:
 800a734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a736:	bf00      	nop
 800a738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a73a:	bc08      	pop	{r3}
 800a73c:	469e      	mov	lr, r3
 800a73e:	4770      	bx	lr
